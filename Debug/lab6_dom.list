
lab6_dom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800d5f8  0800d5f8  0001d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbec  0800dbec  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf4  0800dbf4  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800dbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  2000022c  0800de28  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800de28  00020884  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d82a  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb3  00000000  00000000  0003da84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00043078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c533  00000000  00000000  00044518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae24  00000000  00000000  00070a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065c2  00000000  00000000  0008b86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00191e31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007258  00000000  00000000  00191f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d5e0 	.word	0x0800d5e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800d5e0 	.word	0x0800d5e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <software_delay>:
/**
* Software busy delay
* @param[in] tick Number of ticks to wait
*/
static void software_delay(uint32_t tick)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 80009d8:	e00c      	b.n	80009f4 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 80009da:	2305      	movs	r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e006      	b.n	80009ee <software_delay+0x1e>
			asm("nop");
 80009e0:	bf00      	nop
			asm("nop");
 80009e2:	bf00      	nop
			asm("nop");
 80009e4:	bf00      	nop
			asm("nop");
 80009e6:	bf00      	nop
		for(delay=5; delay>0; delay--){
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f5      	bne.n	80009e0 <software_delay+0x10>
	while(tick-->0)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1ed      	bne.n	80009da <software_delay+0xa>
		}
	}
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LCD_init>:
/**
* Initialization of LCD display in 4 bits mode
* @details Before use initialize GPIOs
*/
void LCD_init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8000a12:	4849      	ldr	r0, [pc, #292]	; (8000b38 <LCD_init+0x12c>)
 8000a14:	f7ff ffdc 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f89d 	bl	8000b5c <LCD_send_4bits>
 8000a22:	4845      	ldr	r0, [pc, #276]	; (8000b38 <LCD_init+0x12c>)
 8000a24:	f7ff ffd4 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f895 	bl	8000b5c <LCD_send_4bits>
 8000a32:	4841      	ldr	r0, [pc, #260]	; (8000b38 <LCD_init+0x12c>)
 8000a34:	f7ff ffcc 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f88d 	bl	8000b5c <LCD_send_4bits>
 8000a42:	483e      	ldr	r0, [pc, #248]	; (8000b3c <LCD_init+0x130>)
 8000a44:	f7ff ffc4 	bl	80009d0 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f000 f885 	bl	8000b5c <LCD_send_4bits>
 8000a52:	483a      	ldr	r0, [pc, #232]	; (8000b3c <LCD_init+0x130>)
 8000a54:	f7ff ffbc 	bl	80009d0 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f000 f916 	bl	8000c8a <LCD_write_command>
 8000a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a62:	f7ff ffb5 	bl	80009d0 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 8000a66:	200c      	movs	r0, #12
 8000a68:	f000 f90f 	bl	8000c8a <LCD_write_command>
 8000a6c:	4834      	ldr	r0, [pc, #208]	; (8000b40 <LCD_init+0x134>)
 8000a6e:	f7ff ffaf 	bl	80009d0 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f909 	bl	8000c8a <LCD_write_command>
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <LCD_init+0x134>)
 8000a7a:	f7ff ffa9 	bl	80009d0 <software_delay>
	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 f903 	bl	8000c8a <LCD_write_command>
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <LCD_init+0x134>)
 8000a86:	f7ff ffa3 	bl	80009d0 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 f8fd 	bl	8000c8a <LCD_write_command>
 8000a90:	482b      	ldr	r0, [pc, #172]	; (8000b40 <LCD_init+0x134>)
 8000a92:	f7ff ff9d 	bl	80009d0 <software_delay>
	
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 8000a96:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <LCD_init+0x138>)
 8000a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f98f 	bl	8000dce <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <LCD_init+0x13c>)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aba:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f982 	bl	8000dce <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <LCD_init+0x140>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad4:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f975 	bl	8000dce <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <LCD_init+0x144>)
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aee:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2103      	movs	r1, #3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f968 	bl	8000dce <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <LCD_init+0x148>)
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2104      	movs	r1, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f95b 	bl	8000dce <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <LCD_init+0x14c>)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b20:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8000b24:	463b      	mov	r3, r7
 8000b26:	2105      	movs	r1, #5
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f950 	bl	8000dce <LCD_create_custom_character>


}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	000f4240 	.word	0x000f4240
 8000b3c:	00061a80 	.word	0x00061a80
 8000b40:	000186a0 	.word	0x000186a0
 8000b44:	0800d5f8 	.word	0x0800d5f8
 8000b48:	0800d600 	.word	0x0800d600
 8000b4c:	0800d608 	.word	0x0800d608
 8000b50:	0800d610 	.word	0x0800d610
 8000b54:	0800d618 	.word	0x0800d618
 8000b58:	0800d620 	.word	0x0800d620

08000b5c <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	460b      	mov	r3, r1
 8000b68:	71bb      	strb	r3, [r7, #6]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 8000b6e:	79bb      	ldrb	r3, [r7, #6]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <LCD_send_4bits+0x24>
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	4834      	ldr	r0, [pc, #208]	; (8000c4c <LCD_send_4bits+0xf0>)
 8000b7a:	f002 fe75 	bl	8003868 <HAL_GPIO_WritePin>
 8000b7e:	e004      	b.n	8000b8a <LCD_send_4bits+0x2e>
 8000b80:	2201      	movs	r2, #1
 8000b82:	2108      	movs	r1, #8
 8000b84:	4831      	ldr	r0, [pc, #196]	; (8000c4c <LCD_send_4bits+0xf0>)
 8000b86:	f002 fe6f 	bl	8003868 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d005      	beq.n	8000ba0 <LCD_send_4bits+0x44>
 8000b94:	2201      	movs	r2, #1
 8000b96:	2110      	movs	r1, #16
 8000b98:	482d      	ldr	r0, [pc, #180]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000b9a:	f002 fe65 	bl	8003868 <HAL_GPIO_WritePin>
 8000b9e:	e004      	b.n	8000baa <LCD_send_4bits+0x4e>
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	482a      	ldr	r0, [pc, #168]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000ba6:	f002 fe5f 	bl	8003868 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d005      	beq.n	8000bc0 <LCD_send_4bits+0x64>
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4825      	ldr	r0, [pc, #148]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000bba:	f002 fe55 	bl	8003868 <HAL_GPIO_WritePin>
 8000bbe:	e004      	b.n	8000bca <LCD_send_4bits+0x6e>
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000bc6:	f002 fe4f 	bl	8003868 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <LCD_send_4bits+0x84>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000bda:	f002 fe45 	bl	8003868 <HAL_GPIO_WritePin>
 8000bde:	e004      	b.n	8000bea <LCD_send_4bits+0x8e>
 8000be0:	2200      	movs	r2, #0
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	481a      	ldr	r0, [pc, #104]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000be6:	f002 fe3f 	bl	8003868 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <LCD_send_4bits+0xa4>
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000bfa:	f002 fe35 	bl	8003868 <HAL_GPIO_WritePin>
 8000bfe:	e004      	b.n	8000c0a <LCD_send_4bits+0xae>
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000c06:	f002 fe2f 	bl	8003868 <HAL_GPIO_WritePin>
	software_delay(100);
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f7ff fee0 	bl	80009d0 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000c16:	f002 fe27 	bl	8003868 <HAL_GPIO_WritePin>
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f7ff fed8 	bl	80009d0 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000c26:	f002 fe1f 	bl	8003868 <HAL_GPIO_WritePin>
 8000c2a:	2064      	movs	r0, #100	; 0x64
 8000c2c:	f7ff fed0 	bl	80009d0 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2108      	movs	r1, #8
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <LCD_send_4bits+0xf4>)
 8000c36:	f002 fe17 	bl	8003868 <HAL_GPIO_WritePin>
 8000c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3e:	f7ff fec7 	bl	80009d0 <software_delay>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	71bb      	strb	r3, [r7, #6]
 8000c62:	4613      	mov	r3, r2
 8000c64:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	797a      	ldrb	r2, [r7, #5]
 8000c6e:	79b9      	ldrb	r1, [r7, #6]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff73 	bl	8000b5c <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 8000c76:	797a      	ldrb	r2, [r7, #5]
 8000c78:	79b9      	ldrb	r1, [r7, #6]
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff6d 	bl	8000b5c <LCD_send_4bits>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffda 	bl	8000c54 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 8000ca0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ca4:	f7ff fe94 	bl	80009d0 <software_delay>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffc7 	bl	8000c54 <LCD_send_8bits_twice_4bits>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <LCD_write_char>:

void LCD_write_char(char character)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <LCD_write_char+0x2c>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <LCD_write_char+0x24>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffde 	bl	8000cb0 <LCD_write_data>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0800d720 	.word	0x0800d720

08000d00 <LCD_write_text>:



void LCD_write_text(char* pText){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8000d08:	e007      	b.n	8000d1a <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ffde 	bl	8000cd0 <LCD_write_char>
		pText++;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3301      	adds	r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f3      	bne.n	8000d0a <LCD_write_text+0xa>
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <LCD_goto_xy+0x1c>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d003      	beq.n	8000d4e <LCD_goto_xy+0x22>
 8000d46:	e005      	b.n	8000d54 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	e004      	b.n	8000d58 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e001      	b.n	8000d58 <LCD_goto_xy+0x2c>
		default: line=0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff8d 	bl	8000c8a <LCD_write_command>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffd0 	bl	8000d2c <LCD_goto_xy>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 8000d94:	b40f      	push	{r0, r1, r2, r3}
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8000da6:	1d38      	adds	r0, r7, #4
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6a3a      	ldr	r2, [r7, #32]
 8000dac:	2111      	movs	r1, #17
 8000dae:	f009 f9e1 	bl	800a174 <vsniprintf>
 8000db2:	4603      	mov	r3, r0
 8000db4:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffa1 	bl	8000d00 <LCD_write_text>
	va_end (args);
	return length;
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dca:	b004      	add	sp, #16
 8000dcc:	4770      	bx	lr

08000dce <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff4d 	bl	8000c8a <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e009      	b.n	8000e0a <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff56 	bl	8000cb0 <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	3301      	adds	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	d9f2      	bls.n	8000df6 <LCD_create_custom_character+0x28>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 fa4c 	bl	80012c0 <null_ptr_check>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d117      	bne.n	8000e64 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	20d0      	movs	r0, #208	; 0xd0
 8000e3c:	f000 f818 	bl	8000e70 <bmp2_get_regs>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10b      	bne.n	8000e64 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b58      	cmp	r3, #88	; 0x58
 8000e52:	d105      	bne.n	8000e60 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fa7e 	bl	8001356 <get_calib_param>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e001      	b.n	8000e64 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000e60:	23fc      	movs	r3, #252	; 0xfc
 8000e62:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f000 fa1d 	bl	80012c0 <null_ptr_check>
 8000e86:	4603      	mov	r3, r0
 8000e88:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11e      	bne.n	8000ed0 <bmp2_get_regs+0x60>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01b      	beq.n	8000ed0 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	785b      	ldrb	r3, [r3, #1]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ea6:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68dc      	ldr	r4, [r3, #12]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	7bf8      	ldrb	r0, [r7, #15]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	47a0      	blx	r4
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000eca:	23fe      	movs	r3, #254	; 0xfe
 8000ecc:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ece:	e001      	b.n	8000ed4 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000ed0:	23ff      	movs	r3, #255	; 0xff
 8000ed2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d901      	bls.n	8000ef8 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f000 f9e1 	bl	80012c0 <null_ptr_check>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d150      	bne.n	8000fae <bmp2_set_regs+0xce>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d04d      	beq.n	8000fae <bmp2_set_regs+0xce>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d04a      	beq.n	8000fae <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d043      	beq.n	8000fa6 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d114      	bne.n	8000f56 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	77fb      	strb	r3, [r7, #31]
 8000f30:	e00d      	b.n	8000f4e <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	68f9      	ldr	r1, [r7, #12]
 8000f3e:	440b      	add	r3, r1
 8000f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f48:	7ffb      	ldrb	r3, [r7, #31]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	77fb      	strb	r3, [r7, #31]
 8000f4e:	7ffb      	ldrb	r3, [r7, #31]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d8ed      	bhi.n	8000f32 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d90b      	bls.n	8000f74 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000f5c:	f107 0114 	add.w	r1, r7, #20
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f9cb 	bl	8001300 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	623b      	str	r3, [r7, #32]
 8000f72:	e001      	b.n	8000f78 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691c      	ldr	r4, [r3, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	7818      	ldrb	r0, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f107 0114 	add.w	r1, r7, #20
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	47a0      	blx	r4
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000f9e:	23fe      	movs	r3, #254	; 0xfe
 8000fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fa4:	e007      	b.n	8000fb6 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000fa6:	23fd      	movs	r3, #253	; 0xfd
 8000fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fac:	e003      	b.n	8000fb6 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000fae:	23ff      	movs	r3, #255	; 0xff
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fb4:	e000      	b.n	8000fb8 <bmp2_set_regs+0xd8>
        if (len > 0)
 8000fb6:	bf00      	nop
    }

    return rslt;
 8000fb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	372c      	adds	r7, #44	; 0x2c
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000fcc:	23e0      	movs	r3, #224	; 0xe0
 8000fce:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000fd0:	23b6      	movs	r3, #182	; 0xb6
 8000fd2:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000fd4:	f107 010d 	add.w	r1, r7, #13
 8000fd8:	f107 000e 	add.w	r0, r7, #14
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f7ff ff7e 	bl	8000ee0 <bmp2_set_regs>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000ffe:	2300      	movs	r3, #0
 8001000:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02d      	beq.n	8001064 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001008:	f107 010c 	add.w	r1, r7, #12
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2202      	movs	r2, #2
 8001010:	20f4      	movs	r0, #244	; 0xf4
 8001012:	f7ff ff2d 	bl	8000e70 <bmp2_get_regs>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d122      	bne.n	8001068 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	095b      	lsrs	r3, r3, #5
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	109b      	asrs	r3, r3, #2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001046:	7b7b      	ldrb	r3, [r7, #13]
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	715a      	strb	r2, [r3, #5]
 8001062:	e001      	b.n	8001068 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001064:	23ff      	movs	r3, #255	; 0xff
 8001066:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fa02 	bl	800148c <conf_sensor>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01b      	beq.n	80010da <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80010a2:	f107 010e 	add.w	r1, r7, #14
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2201      	movs	r2, #1
 80010aa:	20f3      	movs	r0, #243	; 0xf3
 80010ac:	f7ff fee0 	bl	8000e70 <bmp2_get_regs>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d110      	bne.n	80010de <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	10db      	asrs	r3, r3, #3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	705a      	strb	r2, [r3, #1]
 80010d8:	e001      	b.n	80010de <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f9c4 	bl	800148c <conf_sensor>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	2300      	movs	r3, #0
 8001124:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d024      	beq.n	8001180 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001136:	f107 0110 	add.w	r1, r7, #16
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2206      	movs	r2, #6
 800113e:	20f7      	movs	r0, #247	; 0xf7
 8001140:	f7ff fe96 	bl	8000e70 <bmp2_get_regs>
 8001144:	4603      	mov	r3, r0
 8001146:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d119      	bne.n	8001184 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001150:	f107 0208 	add.w	r2, r7, #8
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fabe 	bl	80016dc <parse_sensor_data>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10b      	bne.n	8001184 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f80b 	bl	8001190 <bmp2_compensate_data>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
 800117e:	e001      	b.n	8001184 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f88f 	bl	80012c0 <null_ptr_check>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80011a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d129      	bne.n	8001202 <bmp2_compensate_data+0x72>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d026      	beq.n	8001202 <bmp2_compensate_data+0x72>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d023      	beq.n	8001202 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3308      	adds	r3, #8
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fac2 	bl	8001768 <compensate_temperature>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80011e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fb82 	bl	8001900 <compensate_pressure>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001200:	e001      	b.n	8001206 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b092      	sub	sp, #72	; 0x48
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <bmp2_compute_meas_time+0xa4>)
 8001222:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <bmp2_compute_meas_time+0xa8>)
 8001232:	f107 0410 	add.w	r4, r7, #16
 8001236:	461d      	mov	r5, r3
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f83b 	bl	80012c0 <null_ptr_check>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001250:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001254:	2b00      	cmp	r3, #0
 8001256:	d125      	bne.n	80012a4 <bmp2_compute_meas_time+0x90>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d022      	beq.n	80012a4 <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e1b      	ldrb	r3, [r3, #24]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d113      	bne.n	800128e <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001270:	4413      	add	r3, r2
 8001272:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	789b      	ldrb	r3, [r3, #2]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001280:	440b      	add	r3, r1
 8001282:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001286:	441a      	add	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800128c:	e00d      	b.n	80012aa <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	78db      	ldrb	r3, [r3, #3]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001298:	4413      	add	r3, r2
 800129a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012a2:	e002      	b.n	80012aa <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80012aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3748      	adds	r7, #72	; 0x48
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800d62c 	.word	0x0800d62c
 80012bc:	0800d640 	.word	0x0800d640

080012c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <null_ptr_check+0x26>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <null_ptr_check+0x26>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <null_ptr_check+0x26>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80012e6:	23ff      	movs	r3, #255	; 0xff
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e001      	b.n	80012f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e015      	b.n	8001340 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3b01      	subs	r3, #1
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	440b      	add	r3, r1
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	441a      	add	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	440b      	add	r3, r1
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3e5      	bcc.n	8001314 <interleave_data+0x14>
    }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b08a      	sub	sp, #40	; 0x28
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2219      	movs	r2, #25
 800137c:	2088      	movs	r0, #136	; 0x88
 800137e:	f7ff fd77 	bl	8000e70 <bmp2_get_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800138c:	2b00      	cmp	r3, #0
 800138e:	d177      	bne.n	8001480 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80013b6:	7c7b      	ldrb	r3, [r7, #17]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	7c3b      	ldrb	r3, [r7, #16]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	7cbb      	ldrb	r3, [r7, #18]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80013dc:	7d7b      	ldrb	r3, [r7, #21]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	7d3b      	ldrb	r3, [r7, #20]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001400:	7e7b      	ldrb	r3, [r7, #25]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	7e3b      	ldrb	r3, [r7, #24]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21a      	sxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001412:	7efb      	ldrb	r3, [r7, #27]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7ebb      	ldrb	r3, [r7, #26]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21a      	sxth	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001424:	7f7b      	ldrb	r3, [r7, #29]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	7f3b      	ldrb	r3, [r7, #28]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	7fbb      	ldrb	r3, [r7, #30]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001448:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800145e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001478:	b25a      	sxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001484:	4618      	mov	r0, r3
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800149a:	2300      	movs	r3, #0
 800149c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800149e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80014a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d074      	beq.n	8001594 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80014aa:	f107 0114 	add.w	r1, r7, #20
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2202      	movs	r2, #2
 80014b2:	20f4      	movs	r0, #244	; 0xf4
 80014b4:	f7ff fcdc 	bl	8000e70 <bmp2_get_regs>
 80014b8:	4603      	mov	r3, r0
 80014ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80014bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d169      	bne.n	8001598 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fd7d 	bl	8000fc4 <bmp2_soft_reset>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80014ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d160      	bne.n	8001598 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f861 	bl	80015a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80014e2:	7d7b      	ldrb	r3, [r7, #21]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	b25a      	sxtb	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	789b      	ldrb	r3, [r3, #2]
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80014fc:	7d7b      	ldrb	r3, [r7, #21]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	f023 031c 	bic.w	r3, r3, #28
 8001504:	b25a      	sxtb	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	f003 031c 	and.w	r3, r3, #28
 8001512:	b25b      	sxtb	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b25b      	sxtb	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800151c:	7d7b      	ldrb	r3, [r7, #21]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	b25a      	sxtb	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	795b      	ldrb	r3, [r3, #5]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b25b      	sxtb	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800153a:	f107 0114 	add.w	r1, r7, #20
 800153e:	f107 0010 	add.w	r0, r7, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f7ff fccb 	bl	8000ee0 <bmp2_set_regs>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800154e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d120      	bne.n	8001598 <conf_sensor+0x10c>
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01d      	beq.n	8001598 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	f023 0303 	bic.w	r3, r3, #3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800157e:	f107 0114 	add.w	r1, r7, #20
 8001582:	f107 0010 	add.w	r0, r7, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f7ff fca9 	bl	8000ee0 <bmp2_set_regs>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
 8001592:	e001      	b.n	8001598 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	78db      	ldrb	r3, [r3, #3]
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	f200 808b 	bhi.w	80016ce <set_os_mode+0x12a>
 80015b8:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <set_os_mode+0x1c>)
 80015ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015be:	bf00      	nop
 80015c0:	080015d5 	.word	0x080015d5
 80015c4:	08001607 	.word	0x08001607
 80015c8:	08001639 	.word	0x08001639
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800169d 	.word	0x0800169d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f023 031c 	bic.w	r3, r3, #28
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	701a      	strb	r2, [r3, #0]
            break;
 8001604:	e064      	b.n	80016d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25b      	sxtb	r3, r3
 8001624:	f023 031c 	bic.w	r3, r3, #28
 8001628:	b25b      	sxtb	r3, r3
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	701a      	strb	r2, [r3, #0]
            break;
 8001636:	e04b      	b.n	80016d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	b25b      	sxtb	r3, r3
 800164a:	b2da      	uxtb	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f023 031c 	bic.w	r3, r3, #28
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f043 030c 	orr.w	r3, r3, #12
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	701a      	strb	r2, [r3, #0]
            break;
 8001668:	e032      	b.n	80016d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b25b      	sxtb	r3, r3
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f023 031c 	bic.w	r3, r3, #28
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
            break;
 800169a:	e019      	b.n	80016d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f023 031c 	bic.w	r3, r3, #28
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f043 0314 	orr.w	r3, r3, #20
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
            break;
 80016cc:	e000      	b.n	80016d0 <set_os_mode+0x12c>
        default:
            break;
 80016ce:	bf00      	nop
    }
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	031b      	lsls	r3, r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3302      	adds	r3, #2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	b2db      	uxtb	r3, r3
 8001702:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	431a      	orrs	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	031b      	lsls	r3, r3, #12
 800171a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3304      	adds	r3, #4
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3305      	adds	r3, #5
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	b2db      	uxtb	r3, r3
 8001730:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	431a      	orrs	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f000 fa33 	bl	8001bb8 <st_check_boundaries>
 8001752:	4603      	mov	r3, r0
 8001754:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001756:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	0000      	movs	r0, r0
 8001764:	0000      	movs	r0, r0
	...

08001768 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001768:	b480      	push	{r7}
 800176a:	b08d      	sub	sp, #52	; 0x34
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001786:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80018c0 <compensate_temperature+0x158>
 800178a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8b9b      	ldrh	r3, [r3, #28]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800179a:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80018c8 <compensate_temperature+0x160>
 800179e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017a2:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80017b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017b8:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017c8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80018d0 <compensate_temperature+0x168>
 80017cc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8b9b      	ldrh	r3, [r3, #28]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017dc:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80018d8 <compensate_temperature+0x170>
 80017e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017e4:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017f4:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80018d0 <compensate_temperature+0x168>
 80017f8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8b9b      	ldrh	r3, [r3, #28]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001808:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80018d8 <compensate_temperature+0x170>
 800180c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001810:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001814:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 8001826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800182a:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800182e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001832:	ed97 7b04 	vldr	d7, [r7, #16]
 8001836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800183a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800183e:	ee17 2a90 	vmov	r2, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001846:	ed97 6b06 	vldr	d6, [r7, #24]
 800184a:	ed97 7b04 	vldr	d7, [r7, #16]
 800184e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001852:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80018e0 <compensate_temperature+0x178>
 8001856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800185a:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 800185e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001862:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80018e8 <compensate_temperature+0x180>
 8001866:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d507      	bpl.n	8001880 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <compensate_temperature+0x190>)
 8001876:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001880:	ed97 7b08 	vldr	d7, [r7, #32]
 8001884:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80018f0 <compensate_temperature+0x188>
 8001888:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd07      	ble.n	80018a2 <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <compensate_temperature+0x194>)
 8001898:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800189c:	2302      	movs	r3, #2
 800189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80018ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3734      	adds	r7, #52	; 0x34
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	f3af 8000 	nop.w
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40d00000 	.word	0x40d00000
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40900000 	.word	0x40900000
 80018d0:	00000000 	.word	0x00000000
 80018d4:	41000000 	.word	0x41000000
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40c00000 	.word	0x40c00000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40b40000 	.word	0x40b40000
 80018e8:	00000000 	.word	0x00000000
 80018ec:	c0440000 	.word	0xc0440000
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40554000 	.word	0x40554000
 80018f8:	c0440000 	.word	0xc0440000
 80018fc:	40554000 	.word	0x40554000

08001900 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001900:	b480      	push	{r7}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800192a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800192e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001932:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001b68 <compensate_pressure+0x268>
 8001936:	ee37 7b46 	vsub.f64	d7, d7, d6
 800193a:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800193e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001942:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001954:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001958:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001b70 <compensate_pressure+0x270>
 800195c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001960:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001972:	ed97 7b06 	vldr	d7, [r7, #24]
 8001976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800197a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800197e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001982:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001986:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800198a:	ed97 7b04 	vldr	d7, [r7, #16]
 800198e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001992:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019a4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001b78 <compensate_pressure+0x278>
 80019a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019b0:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80019c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80019ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019d2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001b80 <compensate_pressure+0x280>
 80019d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80019e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80019ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019f4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001b80 <compensate_pressure+0x280>
 80019f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019fc:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001a00:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a04:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001b70 <compensate_pressure+0x270>
 8001a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a10:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a24:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001a28:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d407      	bmi.n	8001a46 <compensate_pressure+0x146>
 8001a36:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	f340 8086 	ble.w	8001b52 <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a52:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001b88 <compensate_pressure+0x288>
 8001a56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a5a:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001a5e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001a62:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001b90 <compensate_pressure+0x290>
 8001a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6a:	ed97 6b08 	vldr	d6, [r7, #32]
 8001a6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a72:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001b98 <compensate_pressure+0x298>
 8001a76:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001a7a:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a82:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a94:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a9c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001aa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001aa4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001ba0 <compensate_pressure+0x2a0>
 8001aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aac:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001abe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ac2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ac6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001b70 <compensate_pressure+0x270>
 8001aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ace:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001ad2:	ed97 6b06 	vldr	d6, [r7, #24]
 8001ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ada:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001af8:	ed97 6b08 	vldr	d6, [r7, #32]
 8001afc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b00:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001b04:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b08:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001ba8 <compensate_pressure+0x2a8>
 8001b0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d507      	bpl.n	8001b26 <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001b16:	a324      	add	r3, pc, #144	; (adr r3, 8001ba8 <compensate_pressure+0x2a8>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001b20:	2303      	movs	r3, #3
 8001b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001b26:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b2a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001bb0 <compensate_pressure+0x2b0>
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd07      	ble.n	8001b48 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001b38:	a31d      	add	r3, pc, #116	; (adr r3, 8001bb0 <compensate_pressure+0x2b0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001b52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3734      	adds	r7, #52	; 0x34
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	f3af 8000 	nop.w
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40ef4000 	.word	0x40ef4000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40e00000 	.word	0x40e00000
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40f00000 	.word	0x40f00000
 8001b80:	00000000 	.word	0x00000000
 8001b84:	41200000 	.word	0x41200000
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	41300000 	.word	0x41300000
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40b00000 	.word	0x40b00000
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40b86a00 	.word	0x40b86a00
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	41e00000 	.word	0x41e00000
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40dd4c00 	.word	0x40dd4c00
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40fadb00 	.word	0x40fadb00

08001bb8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db03      	blt.n	8001bd4 <st_check_boundaries+0x1c>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <st_check_boundaries+0x88>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	dd09      	ble.n	8001be8 <st_check_boundaries+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db06      	blt.n	8001be8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <st_check_boundaries+0x88>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	dc02      	bgt.n	8001be8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001be2:	23fa      	movs	r3, #250	; 0xfa
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e023      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db03      	blt.n	8001bf6 <st_check_boundaries+0x3e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <st_check_boundaries+0x88>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	dd09      	ble.n	8001c0a <st_check_boundaries+0x52>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db06      	blt.n	8001c0a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <st_check_boundaries+0x88>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	dc02      	bgt.n	8001c0a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001c04:	23fb      	movs	r3, #251	; 0xfb
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e012      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db03      	blt.n	8001c18 <st_check_boundaries+0x60>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <st_check_boundaries+0x88>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	dd09      	ble.n	8001c2c <st_check_boundaries+0x74>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db03      	blt.n	8001c26 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <st_check_boundaries+0x88>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	dd02      	ble.n	8001c2c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001c26:	23f9      	movs	r3, #249	; 0xf9
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e001      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	000ffff0 	.word	0x000ffff0

08001c44 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff f8e4 	bl	8000e1a <bmp2_init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f9c9 	bl	8000ff4 <bmp2_get_config>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001c66:	2300      	movs	r3, #0
 8001c68:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f9fb 	bl	8001074 <bmp2_set_config>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff fa2d 	bl	80010ea <bmp2_set_power_mode>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001c94:	f107 0108 	add.w	r1, r7, #8
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fab8 	bl	8001214 <bmp2_compute_meas_time>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b096      	sub	sp, #88	; 0x58
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	f107 0318 	add.w	r3, r7, #24
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001d04:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001d06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001d0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d0e:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <bmp2_spi_read+0xf4>)
 8001d10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <bmp2_spi_read+0xf8>)
 8001d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	f001 fda1 	bl	8003868 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f107 0214 	add.w	r2, r7, #20
 8001d32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d36:	2005      	movs	r0, #5
 8001d38:	9000      	str	r0, [sp, #0]
 8001d3a:	481d      	ldr	r0, [pc, #116]	; (8001db0 <bmp2_spi_read+0xfc>)
 8001d3c:	f003 fa6b 	bl	8005216 <HAL_SPI_TransmitReceive>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d4c:	e012      	b.n	8001d74 <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001d4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <bmp2_spi_read+0xf4>)
 8001d54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d5c:	4a13      	ldr	r2, [pc, #76]	; (8001dac <bmp2_spi_read+0xf8>)
 8001d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4619      	mov	r1, r3
 8001d66:	f001 fd7f 	bl	8003868 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d9e8      	bls.n	8001d4e <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001d7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001d84:	23ff      	movs	r3, #255	; 0xff
 8001d86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	3301      	adds	r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f006 fc51 	bl	800863c <memcpy>

  return iError;
 8001d9a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3750      	adds	r7, #80	; 0x50
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000004 	.word	0x20000004
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	200002a0 	.word	0x200002a0

08001db4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001dee:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001df0:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	3301      	adds	r3, #1
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fc1d 	bl	800863c <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <bmp2_spi_write+0xd4>)
 8001e08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <bmp2_spi_write+0xd8>)
 8001e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e16:	2200      	movs	r2, #0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f001 fd25 	bl	8003868 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f107 0110 	add.w	r1, r7, #16
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	4818      	ldr	r0, [pc, #96]	; (8001e90 <bmp2_spi_write+0xdc>)
 8001e2e:	f003 f884 	bl	8004f3a <HAL_SPI_Transmit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e3e:	e012      	b.n	8001e66 <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001e40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <bmp2_spi_write+0xd4>)
 8001e46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <bmp2_spi_write+0xd8>)
 8001e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	f001 fd06 	bl	8003868 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e60:	3301      	adds	r3, #1
 8001e62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d9e8      	bls.n	8001e40 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001e6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001e76:	23ff      	movs	r3, #255	; 0xff
 8001e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	200002a0 	.word	0x200002a0

08001e94 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <bmp2_delay_us+0x24>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 f969 	bl	8003180 <HAL_Delay>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001ec4:	23ff      	movs	r3, #255	; 0xff
 8001ec6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <BMP2_ReadTemperature_degC+0x78>)
 8001ed0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f8d6 	bl	8001092 <bmp2_get_status>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f90e 	bl	8001114 <bmp2_get_sensor_data>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f02:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001f14:	7f3b      	ldrb	r3, [r7, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <BMP2_ReadTemperature_degC+0x66>
 8001f1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dcdb      	bgt.n	8001eda <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	bff00000 	.word	0xbff00000

08001f38 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4e:	4b85      	ldr	r3, [pc, #532]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a84      	ldr	r2, [pc, #528]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	4b79      	ldr	r3, [pc, #484]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a78      	ldr	r2, [pc, #480]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a72      	ldr	r2, [pc, #456]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b70      	ldr	r3, [pc, #448]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a6c      	ldr	r2, [pc, #432]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a66      	ldr	r2, [pc, #408]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a60      	ldr	r2, [pc, #384]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f640 0118 	movw	r1, #2072	; 0x818
 8001ffc:	485a      	ldr	r0, [pc, #360]	; (8002168 <MX_GPIO_Init+0x230>)
 8001ffe:	f001 fc33 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f244 0181 	movw	r1, #16513	; 0x4081
 8002008:	4858      	ldr	r0, [pc, #352]	; (800216c <MX_GPIO_Init+0x234>)
 800200a:	f001 fc2d 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	4857      	ldr	r0, [pc, #348]	; (8002170 <MX_GPIO_Init+0x238>)
 8002014:	f001 fc28 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 8002018:	2200      	movs	r2, #0
 800201a:	21f8      	movs	r1, #248	; 0xf8
 800201c:	4855      	ldr	r0, [pc, #340]	; (8002174 <MX_GPIO_Init+0x23c>)
 800201e:	f001 fc23 	bl	8003868 <HAL_GPIO_WritePin>
                          |LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin;
 8002022:	f640 0318 	movw	r3, #2072	; 0x818
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	484b      	ldr	r0, [pc, #300]	; (8002168 <MX_GPIO_Init+0x230>)
 800203c:	f001 fa68 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <MX_GPIO_Init+0x240>)
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4849      	ldr	r0, [pc, #292]	; (800217c <MX_GPIO_Init+0x244>)
 8002056:	f001 fa5b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800205a:	2332      	movs	r3, #50	; 0x32
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800206a:	230b      	movs	r3, #11
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4841      	ldr	r0, [pc, #260]	; (800217c <MX_GPIO_Init+0x244>)
 8002076:	f001 fa4b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800207a:	2386      	movs	r3, #134	; 0x86
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800208a:	230b      	movs	r3, #11
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	483a      	ldr	r0, [pc, #232]	; (8002180 <MX_GPIO_Init+0x248>)
 8002096:	f001 fa3b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800209a:	f244 0381 	movw	r3, #16513	; 0x4081
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	482e      	ldr	r0, [pc, #184]	; (800216c <MX_GPIO_Init+0x234>)
 80020b4:	f001 fa2c 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ca:	230b      	movs	r3, #11
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4825      	ldr	r0, [pc, #148]	; (800216c <MX_GPIO_Init+0x234>)
 80020d6:	f001 fa1b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <MX_GPIO_Init+0x238>)
 80020f2:	f001 fa0d 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <MX_GPIO_Init+0x238>)
 800210a:	f001 fa01 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 800210e:	23f8      	movs	r3, #248	; 0xf8
 8002110:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_GPIO_Init+0x23c>)
 8002126:	f001 f9f3 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800212a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213c:	230b      	movs	r3, #11
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	480a      	ldr	r0, [pc, #40]	; (8002170 <MX_GPIO_Init+0x238>)
 8002148:	f001 f9e2 	bl	8003510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2028      	movs	r0, #40	; 0x28
 8002152:	f001 f914 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002156:	2028      	movs	r0, #40	; 0x28
 8002158:	f001 f92d 	bl	80033b6 <HAL_NVIC_EnableIRQ>

}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40021000 	.word	0x40021000
 800216c:	40020400 	.word	0x40020400
 8002170:	40021800 	.word	0x40021800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	10110000 	.word	0x10110000
 800217c:	40020800 	.word	0x40020800
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_UART_RxCpltCallback+0xbc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d14f      	bne.n	8002236 <HAL_UART_RxCpltCallback+0xb2>
	{
		uint8_t tx_buffer[32];
		float temperature_reference_UART;

		sscanf((char*)&Data[0], "%f", &temperature_reference_UART);
 8002196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219a:	461a      	mov	r2, r3
 800219c:	4929      	ldr	r1, [pc, #164]	; (8002244 <HAL_UART_RxCpltCallback+0xc0>)
 800219e:	482a      	ldr	r0, [pc, #168]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 80021a0:	f007 f8ce 	bl	8009340 <siscanf>

		if(temperature_reference_UART < 20.0 || temperature_reference_UART > 40.0)
 80021a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d408      	bmi.n	80021c8 <HAL_UART_RxCpltCallback+0x44>
 80021b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800224c <HAL_UART_RxCpltCallback+0xc8>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd17      	ble.n	80021f8 <HAL_UART_RxCpltCallback+0x74>
		{
			int resp_len = sprintf((char*)tx_buffer, "Wrong temperature!\r\n");
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4920      	ldr	r1, [pc, #128]	; (8002250 <HAL_UART_RxCpltCallback+0xcc>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 f896 	bl	8009300 <siprintf>
 80021d4:	6338      	str	r0, [r7, #48]	; 0x30
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f107 010c 	add.w	r1, r7, #12
 80021de:	230a      	movs	r3, #10
 80021e0:	481c      	ldr	r0, [pc, #112]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 80021e2:	f004 fead 	bl	8006f40 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_UART_RxCpltCallback+0xd4>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 80021ee:	4819      	ldr	r0, [pc, #100]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 80021f0:	f004 ff39 	bl	8007066 <HAL_UART_Receive_IT>
		{
 80021f4:	bf00      	nop
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
		}
	}
}
 80021f6:	e01e      	b.n	8002236 <HAL_UART_RxCpltCallback+0xb2>
			temperature_reference = temperature_reference_UART;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_UART_RxCpltCallback+0xd8>)
 80021fc:	6013      	str	r3, [r2, #0]
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_UART_RxCpltCallback+0xd8>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002208:	f107 000c 	add.w	r0, r7, #12
 800220c:	ec53 2b17 	vmov	r2, r3, d7
 8002210:	4913      	ldr	r1, [pc, #76]	; (8002260 <HAL_UART_RxCpltCallback+0xdc>)
 8002212:	f007 f875 	bl	8009300 <siprintf>
 8002216:	6378      	str	r0, [r7, #52]	; 0x34
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	b29a      	uxth	r2, r3
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	230a      	movs	r3, #10
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 8002224:	f004 fe8c 	bl	8006f40 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_UART_RxCpltCallback+0xd4>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4906      	ldr	r1, [pc, #24]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 8002232:	f004 ff18 	bl	8007066 <HAL_UART_Receive_IT>
}
 8002236:	bf00      	nop
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40004800 	.word	0x40004800
 8002244:	0800d660 	.word	0x0800d660
 8002248:	2000028c 	.word	0x2000028c
 800224c:	42200000 	.word	0x42200000
 8002250:	0800d664 	.word	0x0800d664
 8002254:	200003e8 	.word	0x200003e8
 8002258:	20000286 	.word	0x20000286
 800225c:	20000294 	.word	0x20000294
 8002260:	0800d67c 	.word	0x0800d67c

08002264 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0a4      	sub	sp, #144	; 0x90
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d12f      	bne.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		char str_buffer[100];
		int n;

		float temp_cur = BMP2_ReadTemperature_degC(&hbmp2_1);
 8002276:	4871      	ldr	r0, [pc, #452]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002278:	f7ff fe20 	bl	8001ebc <BMP2_ReadTemperature_degC>
 800227c:	eeb0 7b40 	vmov.f64	d7, d0
 8002280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002284:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		float temp_ref = temperature_reference;
 8002288:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		n = sprintf(str_buffer, "{\"Current Temperature\": %2.02f *C} {\"Reference Temperature\": %2.02f *C}\r\n", temp_cur, temp_ref);
 8002290:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002294:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002298:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800229c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a0:	f107 000c 	add.w	r0, r7, #12
 80022a4:	ed8d 7b00 	vstr	d7, [sp]
 80022a8:	ec53 2b16 	vmov	r2, r3, d6
 80022ac:	4965      	ldr	r1, [pc, #404]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80022ae:	f007 f827 	bl	8009300 <siprintf>
 80022b2:	67f8      	str	r0, [r7, #124]	; 0x7c

		str_buffer[n] = '\n';
 80022b4:	f107 020c 	add.w	r2, r7, #12
 80022b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ba:	4413      	add	r3, r2
 80022bc:	220a      	movs	r2, #10
 80022be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+1, 1000);
 80022c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f107 010c 	add.w	r1, r7, #12
 80022cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d0:	485d      	ldr	r0, [pc, #372]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80022d2:	f004 fe35 	bl	8006f40 <HAL_UART_Transmit>
	}

	if(htim->Instance == TIM7)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 80a8 	bne.w	8002432 <HAL_TIM_PeriodElapsedCallback+0x1ce>
	{
		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1);
 80022e2:	4856      	ldr	r0, [pc, #344]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80022e4:	f7ff fdea 	bl	8001ebc <BMP2_ReadTemperature_degC>
 80022e8:	eeb0 7b40 	vmov.f64	d7, d0
 80022ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]
		temperature_error = temperature_reference - temperature_current;
 80022f6:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002308:	edc3 7a00 	vstr	s15, [r3]
		PWM_Control_Heater = 999.0*arm_pid_f32(&PID, temperature_error);
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002312:	67ba      	str	r2, [r7, #120]	; 0x78
 8002314:	677b      	str	r3, [r7, #116]	; 0x74
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002318:	ed93 7a00 	vldr	s14, [r3]
 800231c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002320:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002326:	edd3 6a01 	vldr	s13, [r3, #4]
 800232a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800232c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233a:	edd3 6a02 	vldr	s13, [r3, #8]
 800233e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002340:	edd3 7a04 	vldr	s15, [r3, #16]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    /* Update state */
    S->state[1] = S->state[0];
 800235a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002360:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002364:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002366:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800236c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800236e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002372:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800245c <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8002376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800237c:	edc3 7a00 	vstr	s15, [r3]
		PWM_Control_Fan = -PWM_Control_Heater;
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	eef1 7a67 	vneg.f32	s15, s15
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800238c:	edc3 7a00 	vstr	s15, [r3]

		//Saturation limit
		if(PWM_Control_Heater < 0)
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	d503      	bpl.n	80023a8 <HAL_TIM_PeriodElapsedCallback+0x144>
		{
			Heater_PWM_Duty = 0;
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e018      	b.n	80023da <HAL_TIM_PeriodElapsedCallback+0x176>
		}
		else if(PWM_Control_Heater > 999.0)
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800245c <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	dd04      	ble.n	80023c6 <HAL_TIM_PeriodElapsedCallback+0x162>
		{
			Heater_PWM_Duty = 999;
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80023be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	e009      	b.n	80023da <HAL_TIM_PeriodElapsedCallback+0x176>
		}
		else
		{
			Heater_PWM_Duty = (uint16_t)PWM_Control_Heater;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d0:	ee17 3a90 	vmov	r3, s15
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80023d8:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Heater_PWM_Duty);
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

		if(temperature_reference < temperature_current)
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	d50d      	bpl.n	8002416 <HAL_TIM_PeriodElapsedCallback+0x1b2>
		{

			PWM_Control_Fan = 1000;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80023fe:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240e:	ee17 2a90 	vmov	r2, s15
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
		{
			PWM_Control_Fan = 0;
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
		}
	}
}
 8002414:	e00d      	b.n	8002432 <HAL_TIM_PeriodElapsedCallback+0x1ce>
			PWM_Control_Fan = 0;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242c:	ee17 2a90 	vmov	r2, s15
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002432:	bf00      	nop
 8002434:	3788      	adds	r7, #136	; 0x88
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000010 	.word	0x20000010
 8002440:	20000294 	.word	0x20000294
 8002444:	0800d68c 	.word	0x0800d68c
 8002448:	200003e8 	.word	0x200003e8
 800244c:	40001400 	.word	0x40001400
 8002450:	2000025c 	.word	0x2000025c
 8002454:	20000288 	.word	0x20000288
 8002458:	20000260 	.word	0x20000260
 800245c:	4479c000 	.word	0x4479c000
 8002460:	2000029c 	.word	0x2000029c
 8002464:	20000298 	.word	0x20000298
 8002468:	20000284 	.word	0x20000284
 800246c:	20000304 	.word	0x20000304
 8002470:	447a0000 	.word	0x447a0000

08002474 <LCD_print_temperature>:

void LCD_print_temperature()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	LCD_write_text("Temp ref:");
 8002478:	4815      	ldr	r0, [pc, #84]	; (80024d0 <LCD_print_temperature+0x5c>)
 800247a:	f7fe fc41 	bl	8000d00 <LCD_write_text>
	LCD_printf("%2.02f",temperature_reference);
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <LCD_print_temperature+0x60>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002488:	ec53 2b17 	vmov	r2, r3, d7
 800248c:	4812      	ldr	r0, [pc, #72]	; (80024d8 <LCD_print_temperature+0x64>)
 800248e:	f7fe fc81 	bl	8000d94 <LCD_printf>
	LCD_printf(" C");
 8002492:	4812      	ldr	r0, [pc, #72]	; (80024dc <LCD_print_temperature+0x68>)
 8002494:	f7fe fc7e 	bl	8000d94 <LCD_printf>
	LCD_goto_line(1);
 8002498:	2001      	movs	r0, #1
 800249a:	f7fe fc6d 	bl	8000d78 <LCD_goto_line>
	LCD_write_text("Temp cur:");
 800249e:	4810      	ldr	r0, [pc, #64]	; (80024e0 <LCD_print_temperature+0x6c>)
 80024a0:	f7fe fc2e 	bl	8000d00 <LCD_write_text>
	LCD_printf("%2.02f",temperature_current);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <LCD_print_temperature+0x70>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ae:	ec53 2b17 	vmov	r2, r3, d7
 80024b2:	4809      	ldr	r0, [pc, #36]	; (80024d8 <LCD_print_temperature+0x64>)
 80024b4:	f7fe fc6e 	bl	8000d94 <LCD_printf>
	LCD_write_text(" C");
 80024b8:	4808      	ldr	r0, [pc, #32]	; (80024dc <LCD_print_temperature+0x68>)
 80024ba:	f7fe fc21 	bl	8000d00 <LCD_write_text>
	LCD_goto_line(2);
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe fc5a 	bl	8000d78 <LCD_goto_line>
	HAL_Delay(100);
 80024c4:	2064      	movs	r0, #100	; 0x64
 80024c6:	f000 fe5b 	bl	8003180 <HAL_Delay>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	0800d6d8 	.word	0x0800d6d8
 80024d4:	20000294 	.word	0x20000294
 80024d8:	0800d6e4 	.word	0x0800d6e4
 80024dc:	0800d6ec 	.word	0x0800d6ec
 80024e0:	0800d6f0 	.word	0x0800d6f0
 80024e4:	2000025c 	.word	0x2000025c

080024e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ec:	f000 fdeb 	bl	80030c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f0:	f000 f896 	bl	8002620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f4:	f7ff fd20 	bl	8001f38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80024f8:	f000 fcb6 	bl	8002e68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80024fc:	f000 fd30 	bl	8002f60 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8002500:	f000 f92e 	bl	8002760 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002504:	f000 fb16 	bl	8002b34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002508:	f000 fb62 	bl	8002bd0 <MX_TIM3_Init>
  MX_TIM7_Init();
 800250c:	f000 fbe2 	bl	8002cd4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	BMP2_Init(&hbmp2_1);
 8002510:	4835      	ldr	r0, [pc, #212]	; (80025e8 <main+0x100>)
 8002512:	f7ff fb97 	bl	8001c44 <BMP2_Init>

	temperature_reference = 30.00;
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <main+0x104>)
 8002518:	4a35      	ldr	r2, [pc, #212]	; (80025f0 <main+0x108>)
 800251a:	601a      	str	r2, [r3, #0]

	PID.Kp = 1.3;
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <main+0x10c>)
 800251e:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <main+0x110>)
 8002520:	619a      	str	r2, [r3, #24]
	PID.Ki = 0.001*Tp;
 8002522:	eddf 7a36 	vldr	s15, [pc, #216]	; 80025fc <main+0x114>
 8002526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800252a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80025d8 <main+0xf0>
 800252e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002532:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <main+0x10c>)
 8002538:	edc3 7a07 	vstr	s15, [r3, #28]
	PID.Kd = 3.3/Tp;
 800253c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80025fc <main+0x114>
 8002540:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002544:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80025e0 <main+0xf8>
 8002548:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800254c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <main+0x10c>)
 8002552:	edc3 7a08 	vstr	s15, [r3, #32]
	arm_pid_init_f32(&PID, 1);
 8002556:	2101      	movs	r1, #1
 8002558:	4826      	ldr	r0, [pc, #152]	; (80025f4 <main+0x10c>)
 800255a:	f006 f827 	bl	80085ac <arm_pid_init_f32>

	msg_len = strlen("C000\r");
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <main+0x118>)
 8002560:	2205      	movs	r2, #5
 8002562:	801a      	strh	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002564:	2100      	movs	r1, #0
 8002566:	4827      	ldr	r0, [pc, #156]	; (8002604 <main+0x11c>)
 8002568:	f003 fc1a 	bl	8005da0 <HAL_TIM_PWM_Start>
	PWM_Control_Heater = 0;
 800256c:	4b26      	ldr	r3, [pc, #152]	; (8002608 <main+0x120>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <main+0x120>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <main+0x11c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002582:	ee17 2a90 	vmov	r2, s15
 8002586:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002588:	2104      	movs	r1, #4
 800258a:	481e      	ldr	r0, [pc, #120]	; (8002604 <main+0x11c>)
 800258c:	f003 fc08 	bl	8005da0 <HAL_TIM_PWM_Start>
	PWM_Control_Fan = 0;
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <main+0x124>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <main+0x124>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <main+0x11c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a6:	ee17 2a90 	vmov	r2, s15
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38

	LCD_init();
 80025ac:	f7fe fa2e 	bl	8000a0c <LCD_init>
	LCD_write_command(LCD_CLEAR_INSTRUCTION);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7fe fb6a 	bl	8000c8a <LCD_write_command>

	HAL_TIM_Base_Start_IT(&htim2);
 80025b6:	4816      	ldr	r0, [pc, #88]	; (8002610 <main+0x128>)
 80025b8:	f003 fb18 	bl	8005bec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80025bc:	4815      	ldr	r0, [pc, #84]	; (8002614 <main+0x12c>)
 80025be:	f003 fb15 	bl	8005bec <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, Data, msg_len);
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <main+0x118>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4913      	ldr	r1, [pc, #76]	; (8002618 <main+0x130>)
 80025ca:	4814      	ldr	r0, [pc, #80]	; (800261c <main+0x134>)
 80025cc:	f004 fd4b 	bl	8007066 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LCD_print_temperature();
 80025d0:	f7ff ff50 	bl	8002474 <LCD_print_temperature>
 80025d4:	e7fc      	b.n	80025d0 <main+0xe8>
 80025d6:	bf00      	nop
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f50624d 	.word	0x3f50624d
 80025e0:	66666666 	.word	0x66666666
 80025e4:	400a6666 	.word	0x400a6666
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20000294 	.word	0x20000294
 80025f0:	41f00000 	.word	0x41f00000
 80025f4:	20000260 	.word	0x20000260
 80025f8:	3fa66666 	.word	0x3fa66666
 80025fc:	3c1374bc 	.word	0x3c1374bc
 8002600:	20000286 	.word	0x20000286
 8002604:	20000304 	.word	0x20000304
 8002608:	2000029c 	.word	0x2000029c
 800260c:	20000298 	.word	0x20000298
 8002610:	20000350 	.word	0x20000350
 8002614:	2000039c 	.word	0x2000039c
 8002618:	2000028c 	.word	0x2000028c
 800261c:	200003e8 	.word	0x200003e8

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0b8      	sub	sp, #224	; 0xe0
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800262a:	2234      	movs	r2, #52	; 0x34
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f006 f812 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	2290      	movs	r2, #144	; 0x90
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 f803 	bl	8008658 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002652:	f001 fa8f 	bl	8003b74 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <SystemClock_Config+0x128>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <SystemClock_Config+0x128>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b39      	ldr	r3, [pc, #228]	; (8002748 <SystemClock_Config+0x128>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <SystemClock_Config+0x12c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002676:	4a35      	ldr	r2, [pc, #212]	; (800274c <SystemClock_Config+0x12c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b33      	ldr	r3, [pc, #204]	; (800274c <SystemClock_Config+0x12c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800268a:	2301      	movs	r3, #1
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800269e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026a6:	2304      	movs	r3, #4
 80026a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026b8:	2304      	movs	r3, #4
 80026ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fab3 	bl	8003c34 <HAL_RCC_OscConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80026d4:	f000 f83e 	bl	8002754 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026d8:	f001 fa5c 	bl	8003b94 <HAL_PWREx_EnableOverDrive>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026e2:	f000 f837 	bl	8002754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e6:	230f      	movs	r3, #15
 80026e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002706:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800270a:	2103      	movs	r1, #3
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fd3f 	bl	8004190 <HAL_RCC_ClockConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002718:	f000 f81c 	bl	8002754 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <SystemClock_Config+0x130>)
 800271e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002720:	2300      	movs	r3, #0
 8002722:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4618      	mov	r0, r3
 8002730:	f001 ff30 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800273a:	f000 f80b 	bl	8002754 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	37e0      	adds	r7, #224	; 0xe0
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000
 8002750:	00200100 	.word	0x00200100

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <MX_SPI4_Init+0x78>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <MX_SPI4_Init+0x74>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_SPI4_Init+0x74>)
 800277a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800277e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002782:	2202      	movs	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002788:	2201      	movs	r2, #1
 800278a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_SPI4_Init+0x74>)
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002796:	2210      	movs	r2, #16
 8002798:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_SPI4_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027ae:	2207      	movs	r2, #7
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027c0:	f002 fb10 	bl	8004de4 <HAL_SPI_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80027ca:	f7ff ffc3 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200002a0 	.word	0x200002a0
 80027d8:	40013400 	.word	0x40013400

080027dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12f      	bne.n	800285e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_SPI_MspInit+0x90>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_SPI_MspInit+0x90>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800282e:	2364      	movs	r3, #100	; 0x64
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800283e:	2305      	movs	r3, #5
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4809      	ldr	r0, [pc, #36]	; (8002870 <HAL_SPI_MspInit+0x94>)
 800284a:	f000 fe61 	bl	8003510 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2054      	movs	r0, #84	; 0x54
 8002854:	f000 fd93 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002858:	2054      	movs	r0, #84	; 0x54
 800285a:	f000 fdac 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	; 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40013400 	.word	0x40013400
 800286c:	40023800 	.word	0x40023800
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_MspInit+0x44>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_MspInit+0x44>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_MspInit+0x44>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_MspInit+0x44>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_MspInit+0x44>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_MspInit+0x44>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 fc1a 	bl	8003140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <TIM2_IRQHandler+0x10>)
 8002916:	f003 fb3d 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000350 	.word	0x20000350

08002924 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <TIM3_IRQHandler+0x10>)
 800292a:	f003 fb33 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000304 	.word	0x20000304

08002938 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USART3_IRQHandler+0x10>)
 800293e:	f004 fbcf 	bl	80070e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200003e8 	.word	0x200003e8

0800294c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002954:	f000 ffa2 	bl	800389c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <TIM7_IRQHandler+0x10>)
 8002962:	f003 fb17 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000039c 	.word	0x2000039c

08002970 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <SPI4_IRQHandler+0x10>)
 8002976:	f002 fe61 	bl	800563c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200002a0 	.word	0x200002a0

08002984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_kill>:

int _kill(int pid, int sig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800299e:	f005 fe23 	bl	80085e8 <__errno>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2216      	movs	r2, #22
 80029a6:	601a      	str	r2, [r3, #0]
	return -1;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_exit>:

void _exit (int status)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ffe7 	bl	8002994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029c6:	e7fe      	b.n	80029c6 <_exit+0x12>

080029c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e00a      	b.n	80029f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029da:	f3af 8000 	nop.w
 80029de:	4601      	mov	r1, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	dbf0      	blt.n	80029da <_read+0x12>
	}

return len;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e009      	b.n	8002a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dbf1      	blt.n	8002a14 <_write+0x12>
	}
	return len;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_close>:

int _close(int file)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
	return -1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a62:	605a      	str	r2, [r3, #4]
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_isatty>:

int _isatty(int file)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	return 1;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f005 fd88 	bl	80085e8 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20080000 	.word	0x20080000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	20000248 	.word	0x20000248
 8002b0c:	20000888 	.word	0x20000888

08002b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b5c:	225f      	movs	r2, #95	; 0x5f
 8002b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <MX_TIM2_Init+0x98>)
 8002b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b7a:	f002 ffdf 	bl	8005b3c <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b84:	f7ff fde6 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b96:	f003 fc2d 	bl	80063f4 <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f7ff fdd8 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002bb2:	f004 f8cb 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bbc:	f7ff fdca 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000350 	.word	0x20000350
 8002bcc:	000f423f 	.word	0x000f423f

08002bd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	615a      	str	r2, [r3, #20]
 8002c00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c04:	4a32      	ldr	r2, [pc, #200]	; (8002cd0 <MX_TIM3_Init+0x100>)
 8002c06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8002c08:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c0a:	225f      	movs	r2, #95	; 0x5f
 8002c0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c28:	4828      	ldr	r0, [pc, #160]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c2a:	f002 ff87 	bl	8005b3c <HAL_TIM_Base_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c34:	f7ff fd8e 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4821      	ldr	r0, [pc, #132]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c46:	f003 fbd5 	bl	80063f4 <HAL_TIM_ConfigClockSource>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002c50:	f7ff fd80 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c54:	481d      	ldr	r0, [pc, #116]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c56:	f003 f841 	bl	8005cdc <HAL_TIM_PWM_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002c60:	f7ff fd78 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4816      	ldr	r0, [pc, #88]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c74:	f004 f86a 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002c7e:	f7ff fd69 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c82:	2360      	movs	r3, #96	; 0x60
 8002c84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c92:	463b      	mov	r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	480c      	ldr	r0, [pc, #48]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002c9a:	f003 fa9b 	bl	80061d4 <HAL_TIM_PWM_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ca4:	f7ff fd56 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ca8:	463b      	mov	r3, r7
 8002caa:	2204      	movs	r2, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4807      	ldr	r0, [pc, #28]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002cb0:	f003 fa90 	bl	80061d4 <HAL_TIM_PWM_ConfigChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002cba:	f7ff fd4b 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cbe:	4803      	ldr	r0, [pc, #12]	; (8002ccc <MX_TIM3_Init+0xfc>)
 8002cc0:	f000 f89a 	bl	8002df8 <HAL_TIM_MspPostInit>

}
 8002cc4:	bf00      	nop
 8002cc6:	3738      	adds	r7, #56	; 0x38
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000304 	.word	0x20000304
 8002cd0:	40000400 	.word	0x40000400

08002cd4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <MX_TIM7_Init+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 95;
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002cec:	225f      	movs	r2, #95	; 0x5f
 8002cee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8999;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002cf8:	f242 3227 	movw	r2, #8999	; 0x2327
 8002cfc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002d06:	f002 ff19 	bl	8005b3c <HAL_TIM_Base_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002d10:	f7ff fd20 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_TIM7_Init+0x64>)
 8002d22:	f004 f813 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002d2c:	f7ff fd12 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000039c 	.word	0x2000039c
 8002d3c:	40001400 	.word	0x40001400

08002d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d114      	bne.n	8002d7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	201c      	movs	r0, #28
 8002d70:	f000 fb05 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d74:	201c      	movs	r0, #28
 8002d76:	f000 fb1e 	bl	80033b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d7a:	e032      	b.n	8002de2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d114      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	201d      	movs	r0, #29
 8002da4:	f000 faeb 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002da8:	201d      	movs	r0, #29
 8002daa:	f000 fb04 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8002dae:	e018      	b.n	8002de2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_TIM_Base_MspInit+0xb4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d113      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002dc0:	f043 0320 	orr.w	r3, r3, #32
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_TIM_Base_MspInit+0xac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2037      	movs	r0, #55	; 0x37
 8002dd8:	f000 fad1 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ddc:	2037      	movs	r0, #55	; 0x37
 8002dde:	f000 faea 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40001400 	.word	0x40001400

08002df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_TIM_MspPostInit+0x64>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d11b      	bne.n	8002e52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_TIM_MspPostInit+0x68>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_TIM_MspPostInit+0x68>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_TIM_MspPostInit+0x68>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e32:	23c0      	movs	r3, #192	; 0xc0
 8002e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_TIM_MspPostInit+0x6c>)
 8002e4e:	f000 fb5f 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e52:	bf00      	nop
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020800 	.word	0x40020800

08002e68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <MX_USART3_UART_Init+0x5c>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_USART3_UART_Init+0x58>)
 8002eac:	f003 fffa 	bl	8006ea4 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eb6:	f7ff fc4d 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200003e8 	.word	0x200003e8
 8002ec4:	40004800 	.word	0x40004800

08002ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_UART_MspInit+0x8c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d130      	bne.n	8002f4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_UART_MspInit+0x90>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	4809      	ldr	r0, [pc, #36]	; (8002f5c <HAL_UART_MspInit+0x94>)
 8002f38:	f000 faea 	bl	8003510 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2027      	movs	r0, #39	; 0x27
 8002f42:	f000 fa1c 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f46:	2027      	movs	r0, #39	; 0x27
 8002f48:	f000 fa35 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3728      	adds	r7, #40	; 0x28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40004800 	.word	0x40004800
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020c00 	.word	0x40020c00

08002f60 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f6e:	2206      	movs	r2, #6
 8002f70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f74:	2202      	movs	r2, #2
 8002f76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fa4:	f000 fc9d 	bl	80038e2 <HAL_PCD_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002fae:	f7ff fbd1 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000046c 	.word	0x2000046c

08002fbc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fdc:	d141      	bne.n	8003062 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ff6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003008:	230a      	movs	r3, #10
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	4619      	mov	r1, r3
 8003012:	4817      	ldr	r0, [pc, #92]	; (8003070 <HAL_PCD_MspInit+0xb4>)
 8003014:	f000 fa7c 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	4810      	ldr	r0, [pc, #64]	; (8003070 <HAL_PCD_MspInit+0xb4>)
 800302e:	f000 fa6f 	bl	8003510 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	6353      	str	r3, [r2, #52]	; 0x34
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_PCD_MspInit+0xb0>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_PCD_MspInit+0xb0>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003062:	bf00      	nop
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40020000 	.word	0x40020000

08003074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800307a:	490e      	ldr	r1, [pc, #56]	; (80030b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003090:	4c0b      	ldr	r4, [pc, #44]	; (80030c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800309e:	f7ff fd37 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a2:	f005 faa7 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a6:	f7ff fa1f 	bl	80024e8 <main>
  bx  lr    
 80030aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80030b8:	0800dbfc 	.word	0x0800dbfc
  ldr r2, =_sbss
 80030bc:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80030c0:	20000884 	.word	0x20000884

080030c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC_IRQHandler>

080030c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ca:	2003      	movs	r0, #3
 80030cc:	f000 f94c 	bl	8003368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f000 f805 	bl	80030e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80030d6:	f7ff fbcd 	bl	8002874 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_InitTick+0x54>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_InitTick+0x58>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f967 	bl	80033d2 <HAL_SYSTICK_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e00e      	b.n	800312c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d80a      	bhi.n	800312a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003114:	2200      	movs	r2, #0
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f000 f92f 	bl	800337e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003120:	4a06      	ldr	r2, [pc, #24]	; (800313c <HAL_InitTick+0x5c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	2000004c 	.word	0x2000004c
 8003138:	20000054 	.word	0x20000054
 800313c:	20000050 	.word	0x20000050

08003140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_IncTick+0x20>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_IncTick+0x24>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4413      	add	r3, r2
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_IncTick+0x24>)
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000054 	.word	0x20000054
 8003164:	20000870 	.word	0x20000870

08003168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_GetTick+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000870 	.word	0x20000870

08003180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff ffee 	bl	8003168 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d005      	beq.n	80031a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_Delay+0x44>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a6:	bf00      	nop
 80031a8:	f7ff ffde 	bl	8003168 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d8f7      	bhi.n	80031a8 <HAL_Delay+0x28>
  {
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000054 	.word	0x20000054

080031c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00
 800320c:	05fa0000 	.word	0x05fa0000

08003210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	; (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	; (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
         );
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003334:	d301      	bcc.n	800333a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003336:	2301      	movs	r3, #1
 8003338:	e00f      	b.n	800335a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <SysTick_Config+0x40>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003342:	210f      	movs	r1, #15
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f7ff ff8e 	bl	8003268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <SysTick_Config+0x40>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <SysTick_Config+0x40>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff29 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff ff3e 	bl	8003210 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff8e 	bl	80032bc <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5d 	bl	8003268 <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff31 	bl	800322c <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffa2 	bl	8003324 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033f8:	f7ff feb6 	bl	8003168 <HAL_GetTick>
 80033fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d008      	beq.n	800341c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e052      	b.n	80034c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0216 	bic.w	r2, r2, #22
 800342a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <HAL_DMA_Abort+0x62>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0208 	bic.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	e013      	b.n	8003496 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346e:	f7ff fe7b 	bl	8003168 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b05      	cmp	r3, #5
 800347a:	d90c      	bls.n	8003496 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e015      	b.n	80034c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e4      	bne.n	800346e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d004      	beq.n	80034e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e00c      	b.n	8003502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2205      	movs	r2, #5
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e175      	b.n	800381c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 8164 	bne.w	8003816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d00b      	beq.n	800356e <HAL_GPIO_Init+0x5e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003562:	2b11      	cmp	r3, #17
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b12      	cmp	r3, #18
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x100>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80be 	beq.w	8003816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_GPIO_Init+0x324>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_GPIO_Init+0x324>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036b2:	4a61      	ldr	r2, [pc, #388]	; (8003838 <HAL_GPIO_Init+0x328>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d037      	beq.n	800374e <HAL_GPIO_Init+0x23e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_GPIO_Init+0x23a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a56      	ldr	r2, [pc, #344]	; (8003844 <HAL_GPIO_Init+0x334>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02b      	beq.n	8003746 <HAL_GPIO_Init+0x236>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a55      	ldr	r2, [pc, #340]	; (8003848 <HAL_GPIO_Init+0x338>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <HAL_GPIO_Init+0x232>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a54      	ldr	r2, [pc, #336]	; (800384c <HAL_GPIO_Init+0x33c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_GPIO_Init+0x340>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x22a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_GPIO_Init+0x344>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a51      	ldr	r2, [pc, #324]	; (8003858 <HAL_GPIO_Init+0x348>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a50      	ldr	r2, [pc, #320]	; (800385c <HAL_GPIO_Init+0x34c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <HAL_GPIO_Init+0x350>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x21a>
 8003726:	2309      	movs	r3, #9
 8003728:	e012      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372a:	230a      	movs	r3, #10
 800372c:	e010      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372e:	2308      	movs	r3, #8
 8003730:	e00e      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003732:	2307      	movs	r3, #7
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003736:	2306      	movs	r3, #6
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x328>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003792:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_GPIO_Init+0x354>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae86 	bls.w	8003530 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40021c00 	.word	0x40021c00
 800385c:	40022000 	.word	0x40022000
 8003860:	40022400 	.word	0x40022400
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f806 	bl	80038cc <HAL_GPIO_EXTI_Callback>
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e4:	b08f      	sub	sp, #60	; 0x3c
 80038e6:	af0a      	add	r7, sp, #40	; 0x28
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e116      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fb54 	bl	8002fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fbda 	bl	80080ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	687e      	ldr	r6, [r7, #4]
 8003940:	466d      	mov	r5, sp
 8003942:	f106 0410 	add.w	r4, r6, #16
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800394c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003952:	e885 0003 	stmia.w	r5, {r0, r1}
 8003956:	1d33      	adds	r3, r6, #4
 8003958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	f004 fb6e 	bl	800803c <USB_CoreInit>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0d7      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f004 fbc8 	bl	800810e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e04a      	b.n	8003a1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	333c      	adds	r3, #60	; 0x3c
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	b298      	uxth	r0, r3
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3342      	adds	r3, #66	; 0x42
 80039c0:	4602      	mov	r2, r0
 80039c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	333f      	adds	r3, #63	; 0x3f
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3344      	adds	r3, #68	; 0x44
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3350      	adds	r3, #80	; 0x50
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	3301      	adds	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3af      	bcc.n	8003984 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e044      	b.n	8003ab4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3b5      	bcc.n	8003a2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	687e      	ldr	r6, [r7, #4]
 8003ac6:	466d      	mov	r5, sp
 8003ac8:	f106 0410 	add.w	r4, r6, #16
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003adc:	1d33      	adds	r3, r6, #4
 8003ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f004 fb3f 	bl	8008164 <USB_DevInit>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e014      	b.n	8003b22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d102      	bne.n	8003b16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f80b 	bl	8003b2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fcf1 	bl	8008502 <USB_DevDisconnect>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	10000003 	.word	0x10000003

08003b74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b82:	6013      	str	r3, [r2, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40007000 	.word	0x40007000

08003b94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc2:	f7ff fad1 	bl	8003168 <HAL_GetTick>
 8003bc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bc8:	e009      	b.n	8003bde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bca:	f7ff facd 	bl	8003168 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd8:	d901      	bls.n	8003bde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e022      	b.n	8003c24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d1ee      	bne.n	8003bca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7ff fab6 	bl	8003168 <HAL_GetTick>
 8003bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bfe:	e009      	b.n	8003c14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c00:	f7ff fab2 	bl	8003168 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0e:	d901      	bls.n	8003c14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e007      	b.n	8003c24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c20:	d1ee      	bne.n	8003c00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40007000 	.word	0x40007000

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e29b      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8087 	beq.w	8003d66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c58:	4b96      	ldr	r3, [pc, #600]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d00c      	beq.n	8003c7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c64:	4b93      	ldr	r3, [pc, #588]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d112      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62>
 8003c70:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d10b      	bne.n	8003c96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7e:	4b8d      	ldr	r3, [pc, #564]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d06c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x130>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d168      	bne.n	8003d64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e275      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x7a>
 8003ca0:	4b84      	ldr	r3, [pc, #528]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a83      	ldr	r2, [pc, #524]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e02e      	b.n	8003d0c <HAL_RCC_OscConfig+0xd8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x9c>
 8003cb6:	4b7f      	ldr	r3, [pc, #508]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7e      	ldr	r2, [pc, #504]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b7c      	ldr	r3, [pc, #496]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7b      	ldr	r2, [pc, #492]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e01d      	b.n	8003d0c <HAL_RCC_OscConfig+0xd8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0xc0>
 8003cda:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b73      	ldr	r3, [pc, #460]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a72      	ldr	r2, [pc, #456]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0xd8>
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6b      	ldr	r2, [pc, #428]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff fa28 	bl	8003168 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7ff fa24 	bl	8003168 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e229      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0xe8>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7ff fa14 	bl	8003168 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7ff fa10 	bl	8003168 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e215      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x110>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d069      	beq.n	8003e46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d72:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b4d      	ldr	r3, [pc, #308]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x190>
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_OscConfig+0x17a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e1e9      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	493d      	ldr	r1, [pc, #244]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	e040      	b.n	8003e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d023      	beq.n	8003e14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7ff f9c6 	bl	8003168 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de0:	f7ff f9c2 	bl	8003168 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1c7      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4929      	ldr	r1, [pc, #164]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
 8003e12:	e018      	b.n	8003e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7ff f9a2 	bl	8003168 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e28:	f7ff f99e 	bl	8003168 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1a3      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d038      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d019      	beq.n	8003e8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7ff f97f 	bl	8003168 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7ff f97b 	bl	8003168 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e180      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x23a>
 8003e8c:	e01a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_RCC_OscConfig+0x280>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7ff f965 	bl	8003168 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7ff f961 	bl	8003168 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d903      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e166      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
 8003eb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	4b92      	ldr	r3, [pc, #584]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a4 	beq.w	800401a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b89      	ldr	r3, [pc, #548]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a88      	ldr	r2, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b86      	ldr	r3, [pc, #536]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	4b83      	ldr	r3, [pc, #524]	; (8004108 <HAL_RCC_OscConfig+0x4d4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f06:	4b80      	ldr	r3, [pc, #512]	; (8004108 <HAL_RCC_OscConfig+0x4d4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7f      	ldr	r2, [pc, #508]	; (8004108 <HAL_RCC_OscConfig+0x4d4>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7ff f929 	bl	8003168 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7ff f925 	bl	8003168 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e12a      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2c:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x4d4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x31a>
 8003f40:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4c:	e02d      	b.n	8003faa <HAL_RCC_OscConfig+0x376>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x33c>
 8003f56:	4b6b      	ldr	r3, [pc, #428]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a6a      	ldr	r2, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	4a67      	ldr	r2, [pc, #412]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6e:	e01c      	b.n	8003faa <HAL_RCC_OscConfig+0x376>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x35e>
 8003f78:	4b62      	ldr	r3, [pc, #392]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a61      	ldr	r2, [pc, #388]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
 8003f84:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f90:	e00b      	b.n	8003faa <HAL_RCC_OscConfig+0x376>
 8003f92:	4b5c      	ldr	r3, [pc, #368]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9e:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d015      	beq.n	8003fde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7ff f8d9 	bl	8003168 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7ff f8d5 	bl	8003168 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0d8      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ee      	beq.n	8003fba <HAL_RCC_OscConfig+0x386>
 8003fdc:	e014      	b.n	8004008 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7ff f8c3 	bl	8003168 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7ff f8bf 	bl	8003168 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0c2      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffc:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ee      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80ae 	beq.w	8004180 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004024:	4b37      	ldr	r3, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b08      	cmp	r3, #8
 800402e:	d06d      	beq.n	800410c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d14b      	bne.n	80040d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a31      	ldr	r2, [pc, #196]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7ff f890 	bl	8003168 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7ff f88c 	bl	8003168 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e091      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	3b01      	subs	r3, #1
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	491b      	ldr	r1, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7ff f85e 	bl	8003168 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7ff f85a 	bl	8003168 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e05f      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x47c>
 80040ce:	e057      	b.n	8004180 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7ff f844 	bl	8003168 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7ff f840 	bl	8003168 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e045      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4b0>
 8004102:	e03d      	b.n	8004180 <HAL_RCC_OscConfig+0x54c>
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_RCC_OscConfig+0x558>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d030      	beq.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d129      	bne.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d122      	bne.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004142:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004144:	4293      	cmp	r3, r2
 8004146:	d119      	bne.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	3b01      	subs	r3, #1
 8004156:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d10f      	bne.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d107      	bne.n	800417c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800

08004190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0d0      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b6a      	ldr	r3, [pc, #424]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d910      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b67      	ldr	r3, [pc, #412]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 020f 	bic.w	r2, r3, #15
 80041be:	4965      	ldr	r1, [pc, #404]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b63      	ldr	r3, [pc, #396]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0b8      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b59      	ldr	r3, [pc, #356]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a58      	ldr	r2, [pc, #352]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 80041f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b50      	ldr	r3, [pc, #320]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	494d      	ldr	r1, [pc, #308]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d040      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d115      	bne.n	8004272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e07f      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e073      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06b      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4936      	ldr	r1, [pc, #216]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fe ff70 	bl	8003168 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fe ff6c 	bl	8003168 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e053      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b27      	ldr	r3, [pc, #156]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d210      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 020f 	bic.w	r2, r3, #15
 80042ca:	4922      	ldr	r1, [pc, #136]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e032      	b.n	800434a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4916      	ldr	r1, [pc, #88]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	490e      	ldr	r1, [pc, #56]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004322:	f000 f821 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490a      	ldr	r1, [pc, #40]	; (800435c <HAL_RCC_ClockConfig+0x1cc>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1d0>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_ClockConfig+0x1d4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fecc 	bl	80030e0 <HAL_InitTick>

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00
 8004358:	40023800 	.word	0x40023800
 800435c:	0800d708 	.word	0x0800d708
 8004360:	2000004c 	.word	0x2000004c
 8004364:	20000050 	.word	0x20000050

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	2300      	movs	r3, #0
 800437a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004380:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	d00d      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x40>
 800438c:	2b08      	cmp	r3, #8
 800438e:	f200 80bd 	bhi.w	800450c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x34>
 8004396:	2b04      	cmp	r3, #4
 8004398:	d003      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800439a:	e0b7      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800439e:	60bb      	str	r3, [r7, #8]
      break;
 80043a0:	e0b7      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a2:	4b61      	ldr	r3, [pc, #388]	; (8004528 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043a4:	60bb      	str	r3, [r7, #8]
      break;
 80043a6:	e0b4      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a8:	4b5d      	ldr	r3, [pc, #372]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d04d      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	461a      	mov	r2, r3
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	ea02 0800 	and.w	r8, r2, r0
 80043d6:	ea03 0901 	and.w	r9, r3, r1
 80043da:	4640      	mov	r0, r8
 80043dc:	4649      	mov	r1, r9
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	014b      	lsls	r3, r1, #5
 80043e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043ec:	0142      	lsls	r2, r0, #5
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	ebb0 0008 	subs.w	r0, r0, r8
 80043f6:	eb61 0109 	sbc.w	r1, r1, r9
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	018b      	lsls	r3, r1, #6
 8004404:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004408:	0182      	lsls	r2, r0, #6
 800440a:	1a12      	subs	r2, r2, r0
 800440c:	eb63 0301 	sbc.w	r3, r3, r1
 8004410:	f04f 0000 	mov.w	r0, #0
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	00d9      	lsls	r1, r3, #3
 800441a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800441e:	00d0      	lsls	r0, r2, #3
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	eb12 0208 	adds.w	r2, r2, r8
 8004428:	eb43 0309 	adc.w	r3, r3, r9
 800442c:	f04f 0000 	mov.w	r0, #0
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	0259      	lsls	r1, r3, #9
 8004436:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800443a:	0250      	lsls	r0, r2, #9
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	f7fc f90c 	bl	8000668 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e04a      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	461a      	mov	r2, r3
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	ea02 0400 	and.w	r4, r2, r0
 8004472:	ea03 0501 	and.w	r5, r3, r1
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	014b      	lsls	r3, r1, #5
 8004484:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004488:	0142      	lsls	r2, r0, #5
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	1b00      	subs	r0, r0, r4
 8004490:	eb61 0105 	sbc.w	r1, r1, r5
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	018b      	lsls	r3, r1, #6
 800449e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044a2:	0182      	lsls	r2, r0, #6
 80044a4:	1a12      	subs	r2, r2, r0
 80044a6:	eb63 0301 	sbc.w	r3, r3, r1
 80044aa:	f04f 0000 	mov.w	r0, #0
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	00d9      	lsls	r1, r3, #3
 80044b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b8:	00d0      	lsls	r0, r2, #3
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	1912      	adds	r2, r2, r4
 80044c0:	eb45 0303 	adc.w	r3, r5, r3
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	0299      	lsls	r1, r3, #10
 80044ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044d2:	0290      	lsls	r0, r2, #10
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	f7fc f8c0 	bl	8000668 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	3301      	adds	r3, #1
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	60bb      	str	r3, [r7, #8]
      break;
 800450a:	e002      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800450e:	60bb      	str	r3, [r7, #8]
      break;
 8004510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004512:	68bb      	ldr	r3, [r7, #8]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200

0800452c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_GetHCLKFreq+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2000004c 	.word	0x2000004c

08004544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004548:	f7ff fff0 	bl	800452c <HAL_RCC_GetHCLKFreq>
 800454c:	4602      	mov	r2, r0
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0a9b      	lsrs	r3, r3, #10
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4903      	ldr	r1, [pc, #12]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455a:	5ccb      	ldrb	r3, [r1, r3]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	0800d718 	.word	0x0800d718

0800456c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004570:	f7ff ffdc 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0b5b      	lsrs	r3, r3, #13
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4903      	ldr	r1, [pc, #12]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40023800 	.word	0x40023800
 8004590:	0800d718 	.word	0x0800d718

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045bc:	4b69      	ldr	r3, [pc, #420]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a68      	ldr	r2, [pc, #416]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	4b66      	ldr	r3, [pc, #408]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	4964      	ldr	r1, [pc, #400]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d017      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ee:	4b5d      	ldr	r3, [pc, #372]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	4959      	ldr	r1, [pc, #356]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d017      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800462a:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	494a      	ldr	r1, [pc, #296]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004648:	d101      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800464a:	2301      	movs	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 808b 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004678:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	4a39      	ldr	r2, [pc, #228]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004682:	6413      	str	r3, [r2, #64]	; 0x40
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004690:	4b35      	ldr	r3, [pc, #212]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a34      	ldr	r2, [pc, #208]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469c:	f7fe fd64 	bl	8003168 <HAL_GetTick>
 80046a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fe fd60 	bl	8003168 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e38f      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b6:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046c2:	4b28      	ldr	r3, [pc, #160]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d035      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d02e      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004700:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d114      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fe fd28 	bl	8003168 <HAL_GetTick>
 8004718:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fe fd24 	bl	8003168 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e351      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800474a:	d111      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800475a:	400b      	ands	r3, r1
 800475c:	4901      	ldr	r1, [pc, #4]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
 8004762:	e00b      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004764:	40023800 	.word	0x40023800
 8004768:	40007000 	.word	0x40007000
 800476c:	0ffffcff 	.word	0x0ffffcff
 8004770:	4bb3      	ldr	r3, [pc, #716]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4ab2      	ldr	r2, [pc, #712]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004776:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800477a:	6093      	str	r3, [r2, #8]
 800477c:	4bb0      	ldr	r3, [pc, #704]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	49ad      	ldr	r1, [pc, #692]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478a:	4313      	orrs	r3, r2
 800478c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800479a:	4ba9      	ldr	r3, [pc, #676]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a0:	4aa7      	ldr	r2, [pc, #668]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047aa:	4ba5      	ldr	r3, [pc, #660]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	49a2      	ldr	r1, [pc, #648]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c8:	4b9d      	ldr	r3, [pc, #628]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	499a      	ldr	r1, [pc, #616]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ea:	4b95      	ldr	r3, [pc, #596]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f8:	4991      	ldr	r1, [pc, #580]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800480c:	4b8c      	ldr	r3, [pc, #560]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481a:	4989      	ldr	r1, [pc, #548]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482e:	4b84      	ldr	r3, [pc, #528]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4980      	ldr	r1, [pc, #512]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004850:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4978      	ldr	r1, [pc, #480]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f023 020c 	bic.w	r2, r3, #12
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004880:	496f      	ldr	r1, [pc, #444]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004894:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	4967      	ldr	r1, [pc, #412]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b6:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	495e      	ldr	r1, [pc, #376]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	4956      	ldr	r1, [pc, #344]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	494d      	ldr	r1, [pc, #308]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	4945      	ldr	r1, [pc, #276]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800493e:	4b40      	ldr	r3, [pc, #256]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	493c      	ldr	r1, [pc, #240]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496e:	4934      	ldr	r1, [pc, #208]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004990:	492b      	ldr	r1, [pc, #172]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	491b      	ldr	r1, [pc, #108]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e4:	4b16      	ldr	r3, [pc, #88]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f4:	4912      	ldr	r1, [pc, #72]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a18:	4909      	ldr	r1, [pc, #36]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	e002      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
 8004a44:	4986      	ldr	r1, [pc, #536]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a58:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a68:	497d      	ldr	r1, [pc, #500]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d006      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80d6 	beq.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a84:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a75      	ldr	r2, [pc, #468]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a90:	f7fe fb6a 	bl	8003168 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a98:	f7fe fb66 	bl	8003168 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e195      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d021      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11d      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aca:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ade:	0e1b      	lsrs	r3, r3, #24
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	019a      	lsls	r2, r3, #6
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	4958      	ldr	r1, [pc, #352]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02e      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b30:	d129      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b32:	4b4b      	ldr	r3, [pc, #300]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b40:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	019a      	lsls	r2, r3, #6
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	493e      	ldr	r1, [pc, #248]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f023 021f 	bic.w	r2, r3, #31
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	4938      	ldr	r1, [pc, #224]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01d      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b92:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba6:	0f1b      	lsrs	r3, r3, #28
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4926      	ldr	r1, [pc, #152]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	491a      	ldr	r1, [pc, #104]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0a:	f7fe faad 	bl	8003168 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c12:	f7fe faa9 	bl	8003168 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b64      	cmp	r3, #100	; 0x64
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0d8      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 80ce 	bne.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fe fa90 	bl	8003168 <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c4c:	f7fe fa8c 	bl	8003168 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d904      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0bb      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c64:	4b5e      	ldr	r3, [pc, #376]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c70:	d0ec      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d12a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9a:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ca8:	4b4d      	ldr	r3, [pc, #308]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	0f1b      	lsrs	r3, r3, #28
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	019a      	lsls	r2, r3, #6
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	4944      	ldr	r1, [pc, #272]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cd6:	4b42      	ldr	r3, [pc, #264]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	493d      	ldr	r1, [pc, #244]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d04:	d11d      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d06:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d14:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	0f1b      	lsrs	r3, r3, #28
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	019a      	lsls	r2, r3, #6
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	4929      	ldr	r1, [pc, #164]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d028      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	019a      	lsls	r2, r3, #6
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	431a      	orrs	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	4917      	ldr	r1, [pc, #92]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4911      	ldr	r1, [pc, #68]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fe f9dc 	bl	8003168 <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004db4:	f7fe f9d8 	bl	8003168 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e007      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd2:	d1ef      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800

08004de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e09d      	b.n	8004f32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e06:	d009      	beq.n	8004e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61da      	str	r2, [r3, #28]
 8004e0e:	e005      	b.n	8004e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd fcd0 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e5c:	d902      	bls.n	8004e64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e002      	b.n	8004e6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e72:	d007      	beq.n	8004e84 <HAL_SPI_Init+0xa0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e7c:	d002      	beq.n	8004e84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	ea42 0103 	orr.w	r1, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 0204 	and.w	r2, r3, #4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f00:	ea42 0103 	orr.w	r1, r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_SPI_Transmit+0x22>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e158      	b.n	800520e <HAL_SPI_Transmit+0x2d4>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f64:	f7fe f900 	bl	8003168 <HAL_GetTick>
 8004f68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f7e:	e13d      	b.n	80051fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_SPI_Transmit+0x52>
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f90:	e134      	b.n	80051fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2203      	movs	r2, #3
 8004f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	88fa      	ldrh	r2, [r7, #6]
 8004faa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d10f      	bne.n	8004ffe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d007      	beq.n	800501c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005024:	d94b      	bls.n	80050be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_SPI_Transmit+0xfa>
 800502e:	8afb      	ldrh	r3, [r7, #22]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d13e      	bne.n	80050b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005058:	e02b      	b.n	80050b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d112      	bne.n	800508e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	881a      	ldrh	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508c:	e011      	b.n	80050b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508e:	f7fe f86b 	bl	8003168 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d803      	bhi.n	80050a6 <HAL_SPI_Transmit+0x16c>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d102      	bne.n	80050ac <HAL_SPI_Transmit+0x172>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050b0:	e0a4      	b.n	80051fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ce      	bne.n	800505a <HAL_SPI_Transmit+0x120>
 80050bc:	e07c      	b.n	80051b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Transmit+0x192>
 80050c6:	8afb      	ldrh	r3, [r7, #22]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d170      	bne.n	80051ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d912      	bls.n	80050fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	1c9a      	adds	r2, r3, #2
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b02      	subs	r3, #2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050fa:	e058      	b.n	80051ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	7812      	ldrb	r2, [r2, #0]
 8005108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005122:	e044      	b.n	80051ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d12b      	bne.n	800518a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d912      	bls.n	8005162 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b02      	subs	r3, #2
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005160:	e025      	b.n	80051ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005188:	e011      	b.n	80051ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518a:	f7fd ffed 	bl	8003168 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d803      	bhi.n	80051a2 <HAL_SPI_Transmit+0x268>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x26e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051ac:	e026      	b.n	80051fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b5      	bne.n	8005124 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fc77 	bl	8005ab0 <SPI_EndRxTxTransaction>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e000      	b.n	80051fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80051fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800520c:	7ffb      	ldrb	r3, [r7, #31]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08a      	sub	sp, #40	; 0x28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005224:	2301      	movs	r3, #1
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_SPI_TransmitReceive+0x26>
 8005238:	2302      	movs	r3, #2
 800523a:	e1fb      	b.n	8005634 <HAL_SPI_TransmitReceive+0x41e>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005244:	f7fd ff90 	bl	8003168 <HAL_GetTick>
 8005248:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005250:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005260:	7efb      	ldrb	r3, [r7, #27]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d00e      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x6e>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526c:	d106      	bne.n	800527c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <HAL_SPI_TransmitReceive+0x66>
 8005276:	7efb      	ldrb	r3, [r7, #27]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d003      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005282:	e1cd      	b.n	8005620 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x80>
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800529c:	e1c0      	b.n	8005620 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2205      	movs	r2, #5
 80052ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	887a      	ldrh	r2, [r7, #2]
 80052c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	887a      	ldrh	r2, [r7, #2]
 80052ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f4:	d802      	bhi.n	80052fc <HAL_SPI_TransmitReceive+0xe6>
 80052f6:	8a3b      	ldrh	r3, [r7, #16]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d908      	bls.n	800530e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	e007      	b.n	800531e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d007      	beq.n	800533c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005344:	d97c      	bls.n	8005440 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x13e>
 800534e:	8a7b      	ldrh	r3, [r7, #18]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d169      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005378:	e056      	b.n	8005428 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11b      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x1aa>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x1aa>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	2b01      	cmp	r3, #1
 8005396:	d113      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d11c      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x1f2>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	b292      	uxth	r2, r2
 80053e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005408:	f7fd feae 	bl	8003168 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005414:	429a      	cmp	r2, r3
 8005416:	d807      	bhi.n	8005428 <HAL_SPI_TransmitReceive+0x212>
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d003      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005426:	e0fb      	b.n	8005620 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1a3      	bne.n	800537a <HAL_SPI_TransmitReceive+0x164>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19d      	bne.n	800537a <HAL_SPI_TransmitReceive+0x164>
 800543e:	e0df      	b.n	8005600 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x23a>
 8005448:	8a7b      	ldrh	r3, [r7, #18]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f040 80cb 	bne.w	80055e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d912      	bls.n	8005480 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b02      	subs	r3, #2
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800547e:	e0b2      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	7812      	ldrb	r2, [r2, #0]
 800548c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054a6:	e09e      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d134      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x30a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02f      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x30a>
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d12c      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d912      	bls.n	80054f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	1c9a      	adds	r2, r3, #2
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b02      	subs	r3, #2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054f4:	e012      	b.n	800551c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d148      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x3aa>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d042      	beq.n	80055c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d923      	bls.n	800558e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	b292      	uxth	r2, r2
 8005552:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b02      	subs	r3, #2
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d81f      	bhi.n	80055bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	e016      	b.n	80055bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f103 020c 	add.w	r2, r3, #12
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055bc:	2301      	movs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c0:	f7fd fdd2 	bl	8003168 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d803      	bhi.n	80055d8 <HAL_SPI_TransmitReceive+0x3c2>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d6:	d102      	bne.n	80055de <HAL_SPI_TransmitReceive+0x3c8>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055e4:	e01c      	b.n	8005620 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f47f af5b 	bne.w	80054a8 <HAL_SPI_TransmitReceive+0x292>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f47f af54 	bne.w	80054a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fa53 	bl	8005ab0 <SPI_EndRxTxTransaction>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	661a      	str	r2, [r3, #96]	; 0x60
 800561c:	e000      	b.n	8005620 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800561e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005634:	4618      	mov	r0, r3
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10f      	bne.n	8005680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	099b      	lsrs	r3, r3, #6
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
    return;
 800567e:	e0d7      	b.n	8005830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_SPI_IRQHandler+0x66>
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	09db      	lsrs	r3, r3, #7
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
    return;
 80056a0:	e0c6      	b.n	8005830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_SPI_IRQHandler+0x8c>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80b4 	beq.w	8005830 <HAL_SPI_IRQHandler+0x1f4>
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80ad 	beq.w	8005830 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d023      	beq.n	800572a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d011      	beq.n	8005712 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	e00b      	b.n	800572a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	693b      	ldr	r3, [r7, #16]
        return;
 8005728:	e082      	b.n	8005830 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d014      	beq.n	8005760 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573a:	f043 0201 	orr.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005770:	f043 0208 	orr.w	r2, r3, #8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04f      	beq.n	800582e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800579c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_SPI_IRQHandler+0x17e>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d034      	beq.n	8005824 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0203 	bic.w	r2, r2, #3
 80057c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d011      	beq.n	80057f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_SPI_IRQHandler+0x1fc>)
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fe73 	bl	80034ca <HAL_DMA_Abort_IT>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	4a0d      	ldr	r2, [pc, #52]	; (8005838 <HAL_SPI_IRQHandler+0x1fc>)
 8005804:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd fe5d 	bl	80034ca <HAL_DMA_Abort_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005822:	e003      	b.n	800582c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f809 	bl	800583c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800582a:	e000      	b.n	800582e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800582c:	bf00      	nop
    return;
 800582e:	bf00      	nop
  }
}
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	08005851 	.word	0x08005851

0800583c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ffe5 	bl	800583c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800588c:	f7fd fc6c 	bl	8003168 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4413      	add	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800589c:	f7fd fc64 	bl	8003168 <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	015b      	lsls	r3, r3, #5
 80058a8:	0d1b      	lsrs	r3, r3, #20
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b2:	e054      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d050      	beq.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058bc:	f7fd fc54 	bl	8003168 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d13d      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d111      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d004      	beq.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fe:	d107      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005918:	d10f      	bne.n	800593a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e017      	b.n	800597e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3b01      	subs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d19b      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	2000004c 	.word	0x2000004c

0800598c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800599a:	f7fd fbe5 	bl	8003168 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	4413      	add	r3, r2
 80059a8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059aa:	f7fd fbdd 	bl	8003168 <HAL_GetTick>
 80059ae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059b0:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <SPI_WaitFifoStateUntilTimeout+0x120>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	00da      	lsls	r2, r3, #3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	0d1b      	lsrs	r3, r3, #20
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80059c8:	e062      	b.n	8005a90 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059d0:	d109      	bne.n	80059e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80059e4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d050      	beq.n	8005a90 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059ee:	f7fd fbbb 	bl	8003168 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d902      	bls.n	8005a04 <SPI_WaitFifoStateUntilTimeout+0x78>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d13d      	bne.n	8005a80 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1c:	d111      	bne.n	8005a42 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a26:	d004      	beq.n	8005a32 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d107      	bne.n	8005a42 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	d10f      	bne.n	8005a6c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e010      	b.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d194      	bne.n	80059ca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000004c 	.word	0x2000004c

08005ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff ff5f 	bl	800598c <SPI_WaitFifoStateUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e027      	b.n	8005b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fec4 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e014      	b.n	8005b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff ff38 	bl	800598c <SPI_WaitFifoStateUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e000      	b.n	8005b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e049      	b.n	8005be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fd f8ec 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f000 fd28 	bl	80065d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e054      	b.n	8005cae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <HAL_TIM_Base_Start_IT+0xe0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d115      	bne.n	8005c98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xec>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d015      	beq.n	8005caa <HAL_TIM_Base_Start_IT+0xbe>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d011      	beq.n	8005caa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	e008      	b.n	8005caa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e000      	b.n	8005cac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40001800 	.word	0x40001800
 8005cd8:	00010007 	.word	0x00010007

08005cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e049      	b.n	8005d82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f841 	bl	8005d8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fc58 	bl	80065d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <HAL_TIM_PWM_Start+0x24>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e03c      	b.n	8005e3e <HAL_TIM_PWM_Start+0x9e>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d109      	bne.n	8005dde <HAL_TIM_PWM_Start+0x3e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	e02f      	b.n	8005e3e <HAL_TIM_PWM_Start+0x9e>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d109      	bne.n	8005df8 <HAL_TIM_PWM_Start+0x58>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	e022      	b.n	8005e3e <HAL_TIM_PWM_Start+0x9e>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	d109      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x72>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	bf14      	ite	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	2300      	moveq	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e015      	b.n	8005e3e <HAL_TIM_PWM_Start+0x9e>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d109      	bne.n	8005e2c <HAL_TIM_PWM_Start+0x8c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e008      	b.n	8005e3e <HAL_TIM_PWM_Start+0x9e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e092      	b.n	8005f6c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_PWM_Start+0xb6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	e023      	b.n	8005e9e <HAL_TIM_PWM_Start+0xfe>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_PWM_Start+0xc6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e64:	e01b      	b.n	8005e9e <HAL_TIM_PWM_Start+0xfe>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Start+0xd6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e74:	e013      	b.n	8005e9e <HAL_TIM_PWM_Start+0xfe>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_PWM_Start+0xe6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_PWM_Start+0xfe>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0xf6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	e003      	b.n	8005e9e <HAL_TIM_PWM_Start+0xfe>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ff2a 	bl	8006d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <HAL_TIM_PWM_Start+0x1d4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_TIM_PWM_Start+0x120>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2f      	ldr	r2, [pc, #188]	; (8005f78 <HAL_TIM_PWM_Start+0x1d8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x124>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <HAL_TIM_PWM_Start+0x126>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <HAL_TIM_PWM_Start+0x1d4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d022      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d01d      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <HAL_TIM_PWM_Start+0x1dc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d018      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a20      	ldr	r2, [pc, #128]	; (8005f80 <HAL_TIM_PWM_Start+0x1e0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_TIM_PWM_Start+0x1e4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00e      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <HAL_TIM_PWM_Start+0x1d8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d009      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <HAL_TIM_PWM_Start+0x1e8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x18a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <HAL_TIM_PWM_Start+0x1ec>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d115      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <HAL_TIM_PWM_Start+0x1f0>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b06      	cmp	r3, #6
 8005f3a:	d015      	beq.n	8005f68 <HAL_TIM_PWM_Start+0x1c8>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d011      	beq.n	8005f68 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f54:	e008      	b.n	8005f68 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e000      	b.n	8005f6a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800
 8005f90:	00010007 	.word	0x00010007

08005f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0202 	mvn.w	r2, #2
 8005fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fadc 	bl	8006594 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 face 	bl	8006580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fadf 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0204 	mvn.w	r2, #4
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fab2 	bl	8006594 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 faa4 	bl	8006580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fab5 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0208 	mvn.w	r2, #8
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2204      	movs	r2, #4
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa88 	bl	8006594 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa7a 	bl	8006580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fa8b 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa5e 	bl	8006594 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa50 	bl	8006580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa61 	bl	80065a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0201 	mvn.w	r2, #1
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc f8a6 	bl	8002264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fe9c 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fe8f 	bl	8006e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa0f 	bl	80065bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d10e      	bne.n	80061ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d107      	bne.n	80061ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f06f 0220 	mvn.w	r2, #32
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fe4f 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e0fd      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b14      	cmp	r3, #20
 80061fa:	f200 80f0 	bhi.w	80063de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006259 	.word	0x08006259
 8006208:	080063df 	.word	0x080063df
 800620c:	080063df 	.word	0x080063df
 8006210:	080063df 	.word	0x080063df
 8006214:	08006299 	.word	0x08006299
 8006218:	080063df 	.word	0x080063df
 800621c:	080063df 	.word	0x080063df
 8006220:	080063df 	.word	0x080063df
 8006224:	080062db 	.word	0x080062db
 8006228:	080063df 	.word	0x080063df
 800622c:	080063df 	.word	0x080063df
 8006230:	080063df 	.word	0x080063df
 8006234:	0800631b 	.word	0x0800631b
 8006238:	080063df 	.word	0x080063df
 800623c:	080063df 	.word	0x080063df
 8006240:	080063df 	.word	0x080063df
 8006244:	0800635d 	.word	0x0800635d
 8006248:	080063df 	.word	0x080063df
 800624c:	080063df 	.word	0x080063df
 8006250:	080063df 	.word	0x080063df
 8006254:	0800639d 	.word	0x0800639d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fa56 	bl	8006710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0204 	bic.w	r2, r2, #4
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	619a      	str	r2, [r3, #24]
      break;
 8006296:	e0a3      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 faa8 	bl	80067f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	619a      	str	r2, [r3, #24]
      break;
 80062d8:	e082      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 faff 	bl	80068e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0208 	orr.w	r2, r2, #8
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0204 	bic.w	r2, r2, #4
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	61da      	str	r2, [r3, #28]
      break;
 8006318:	e062      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb55 	bl	80069d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	021a      	lsls	r2, r3, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	61da      	str	r2, [r3, #28]
      break;
 800635a:	e041      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fb8c 	bl	8006a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0208 	orr.w	r2, r2, #8
 8006376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0204 	bic.w	r2, r2, #4
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800639a:	e021      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fbbe 	bl	8006b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	021a      	lsls	r2, r3, #8
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063dc:	e000      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80063de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_TIM_ConfigClockSource+0x18>
 8006408:	2302      	movs	r3, #2
 800640a:	e0b3      	b.n	8006574 <HAL_TIM_ConfigClockSource+0x180>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4b55      	ldr	r3, [pc, #340]	; (800657c <HAL_TIM_ConfigClockSource+0x188>)
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006432:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006444:	d03e      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0xd0>
 8006446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644a:	f200 8087 	bhi.w	800655c <HAL_TIM_ConfigClockSource+0x168>
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006452:	f000 8085 	beq.w	8006560 <HAL_TIM_ConfigClockSource+0x16c>
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645a:	d87f      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 800645c:	2b70      	cmp	r3, #112	; 0x70
 800645e:	d01a      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0xa2>
 8006460:	2b70      	cmp	r3, #112	; 0x70
 8006462:	d87b      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d050      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x116>
 8006468:	2b60      	cmp	r3, #96	; 0x60
 800646a:	d877      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 800646c:	2b50      	cmp	r3, #80	; 0x50
 800646e:	d03c      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0xf6>
 8006470:	2b50      	cmp	r3, #80	; 0x50
 8006472:	d873      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d058      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x136>
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d86f      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d064      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x156>
 8006480:	2b30      	cmp	r3, #48	; 0x30
 8006482:	d86b      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d060      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x156>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d867      	bhi.n	800655c <HAL_TIM_ConfigClockSource+0x168>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05c      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x156>
 8006490:	2b10      	cmp	r3, #16
 8006492:	d05a      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006494:	e062      	b.n	800655c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6899      	ldr	r1, [r3, #8]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f000 fc0b 	bl	8006cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
      break;
 80064c2:	e04e      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6899      	ldr	r1, [r3, #8]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f000 fbf4 	bl	8006cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e6:	609a      	str	r2, [r3, #8]
      break;
 80064e8:	e03b      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6859      	ldr	r1, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f000 fb68 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2150      	movs	r1, #80	; 0x50
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fbc1 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006508:	e02b      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fb87 	bl	8006c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2160      	movs	r1, #96	; 0x60
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fbb1 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006528:	e01b      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fb48 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2140      	movs	r1, #64	; 0x40
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fba1 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006548:	e00b      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f000 fb98 	bl	8006c8a <TIM_ITRx_SetConfig>
        break;
 800655a:	e002      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	fffeff88 	.word	0xfffeff88

08006580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a40      	ldr	r2, [pc, #256]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d00f      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a3d      	ldr	r2, [pc, #244]	; (80066e8 <TIM_Base_SetConfig+0x118>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00b      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a3c      	ldr	r2, [pc, #240]	; (80066ec <TIM_Base_SetConfig+0x11c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d007      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a3b      	ldr	r2, [pc, #236]	; (80066f0 <TIM_Base_SetConfig+0x120>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a3a      	ldr	r2, [pc, #232]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02b      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006630:	d027      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <TIM_Base_SetConfig+0x118>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d023      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <TIM_Base_SetConfig+0x11c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01f      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <TIM_Base_SetConfig+0x120>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01b      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d017      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <TIM_Base_SetConfig+0x128>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a27      	ldr	r2, [pc, #156]	; (80066fc <TIM_Base_SetConfig+0x12c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00f      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <TIM_Base_SetConfig+0x130>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <TIM_Base_SetConfig+0x134>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a24      	ldr	r2, [pc, #144]	; (8006708 <TIM_Base_SetConfig+0x138>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a23      	ldr	r2, [pc, #140]	; (800670c <TIM_Base_SetConfig+0x13c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_Base_SetConfig+0xf8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d103      	bne.n	80066d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	615a      	str	r2, [r3, #20]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	40001800 	.word	0x40001800
 8006708:	40001c00 	.word	0x40001c00
 800670c:	40002000 	.word	0x40002000

08006710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <TIM_OC1_SetConfig+0xd8>)
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0303 	bic.w	r3, r3, #3
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 0302 	bic.w	r3, r3, #2
 8006758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <TIM_OC1_SetConfig+0xdc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC1_SetConfig+0x64>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <TIM_OC1_SetConfig+0xe0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d10c      	bne.n	800678e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f023 0308 	bic.w	r3, r3, #8
 800677a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <TIM_OC1_SetConfig+0xdc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_OC1_SetConfig+0x8e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <TIM_OC1_SetConfig+0xe0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d111      	bne.n	80067c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	fffeff8f 	.word	0xfffeff8f
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400

080067f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0210 	bic.w	r2, r3, #16
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4b2e      	ldr	r3, [pc, #184]	; (80068d8 <TIM_OC2_SetConfig+0xe4>)
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0320 	bic.w	r3, r3, #32
 800683e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a23      	ldr	r2, [pc, #140]	; (80068dc <TIM_OC2_SetConfig+0xe8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC2_SetConfig+0x68>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <TIM_OC2_SetConfig+0xec>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10d      	bne.n	8006878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a18      	ldr	r2, [pc, #96]	; (80068dc <TIM_OC2_SetConfig+0xe8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC2_SetConfig+0x94>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC2_SetConfig+0xec>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d113      	bne.n	80068b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800688e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	feff8fff 	.word	0xfeff8fff
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40010400 	.word	0x40010400

080068e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b2d      	ldr	r3, [pc, #180]	; (80069c4 <TIM_OC3_SetConfig+0xe0>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800692c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <TIM_OC3_SetConfig+0xe4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_OC3_SetConfig+0x66>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a21      	ldr	r2, [pc, #132]	; (80069cc <TIM_OC3_SetConfig+0xe8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d10d      	bne.n	8006966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <TIM_OC3_SetConfig+0xe4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_OC3_SetConfig+0x92>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a16      	ldr	r2, [pc, #88]	; (80069cc <TIM_OC3_SetConfig+0xe8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d113      	bne.n	800699e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800697c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	fffeff8f 	.word	0xfffeff8f
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40010400 	.word	0x40010400

080069d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <TIM_OC4_SetConfig+0xa4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <TIM_OC4_SetConfig+0xa8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC4_SetConfig+0x68>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <TIM_OC4_SetConfig+0xac>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	feff8fff 	.word	0xfeff8fff
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400

08006a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <TIM_OC5_SetConfig+0x98>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a12      	ldr	r2, [pc, #72]	; (8006b1c <TIM_OC5_SetConfig+0x9c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC5_SetConfig+0x5e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a11      	ldr	r2, [pc, #68]	; (8006b20 <TIM_OC5_SetConfig+0xa0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d109      	bne.n	8006af2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	621a      	str	r2, [r3, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	fffeff8f 	.word	0xfffeff8f
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40010400 	.word	0x40010400

08006b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <TIM_OC6_SetConfig+0x9c>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	051b      	lsls	r3, r3, #20
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <TIM_OC6_SetConfig+0xa0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC6_SetConfig+0x60>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a12      	ldr	r2, [pc, #72]	; (8006bc8 <TIM_OC6_SetConfig+0xa4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	029b      	lsls	r3, r3, #10
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	feff8fff 	.word	0xfeff8fff
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40010400 	.word	0x40010400

08006bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0201 	bic.w	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 030a 	bic.w	r3, r3, #10
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0210 	bic.w	r2, r3, #16
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f043 0307 	orr.w	r3, r3, #7
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	021a      	lsls	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	2201      	movs	r2, #1
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	fa01 f303 	lsl.w	r3, r1, r3
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e06d      	b.n	8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a30      	ldr	r2, [pc, #192]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d004      	beq.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a2f      	ldr	r2, [pc, #188]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d108      	bne.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d022      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd6:	d01d      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1a      	ldr	r2, [pc, #104]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10c      	bne.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40001800 	.word	0x40001800

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e040      	b.n	8006f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fb fffe 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2224      	movs	r2, #36	; 0x24
 8006ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb26 	bl	8007534 <UART_SetConfig>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e022      	b.n	8006f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fd7c 	bl	80079f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fe03 	bl	8007b3c <UART_CheckIdleState>
 8006f36:	4603      	mov	r3, r0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	f040 8081 	bne.w	800705c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_UART_Transmit+0x26>
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e079      	b.n	800705e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x38>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e072      	b.n	800705e <HAL_UART_Transmit+0x11e>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2221      	movs	r2, #33	; 0x21
 8006f8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f8e:	f7fc f8eb 	bl	8003168 <HAL_GetTick>
 8006f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fac:	d108      	bne.n	8006fc0 <HAL_UART_Transmit+0x80>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e003      	b.n	8006fc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006fd0:	e02c      	b.n	800702c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fdf6 	bl	8007bce <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e038      	b.n	800705e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	3302      	adds	r3, #2
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e007      	b.n	800701a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1cc      	bne.n	8006fd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	2140      	movs	r1, #64	; 0x40
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fdc3 	bl	8007bce <UART_WaitOnFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e005      	b.n	800705e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e000      	b.n	800705e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	4613      	mov	r3, r2
 8007072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007078:	2b20      	cmp	r3, #32
 800707a:	d12c      	bne.n	80070d6 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Receive_IT+0x22>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e025      	b.n	80070d8 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_UART_Receive_IT+0x34>
 8007096:	2302      	movs	r3, #2
 8007098:	e01e      	b.n	80070d8 <HAL_UART_Receive_IT+0x72>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80070c4:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fdfb 	bl	8007cc8 <UART_Start_Receive_IT>
 80070d2:	4603      	mov	r3, r0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	f640 030f 	movw	r3, #2063	; 0x80f
 8007106:	4013      	ands	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d113      	bne.n	8007138 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 81cc 	beq.w	80074c6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
      }
      return;
 8007136:	e1c6      	b.n	80074c6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80e3 	beq.w	8007306 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	4ba5      	ldr	r3, [pc, #660]	; (80073e4 <HAL_UART_IRQHandler+0x304>)
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80d8 	beq.w	8007306 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <HAL_UART_IRQHandler+0xa2>
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007178:	f043 0201 	orr.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <HAL_UART_IRQHandler+0xce>
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2202      	movs	r2, #2
 800719c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a4:	f043 0204 	orr.w	r2, r3, #4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d010      	beq.n	80071da <HAL_UART_IRQHandler+0xfa>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2204      	movs	r2, #4
 80071c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d0:	f043 0202 	orr.w	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d015      	beq.n	8007210 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	f043 0208 	orr.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007216:	2b00      	cmp	r3, #0
 8007218:	d011      	beq.n	800723e <HAL_UART_IRQHandler+0x15e>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00c      	beq.n	800723e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800722c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8140 	beq.w	80074ca <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d007      	beq.n	800726e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007274:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d004      	beq.n	800728e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d031      	beq.n	80072f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fda2 	bl	8007dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d123      	bne.n	80072ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d013      	beq.n	80072e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a4a      	ldr	r2, [pc, #296]	; (80073e8 <HAL_UART_IRQHandler+0x308>)
 80072c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc f8ff 	bl	80034ca <HAL_DMA_Abort_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d017      	beq.n	8007302 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e00f      	b.n	8007302 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f906 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e00b      	b.n	8007302 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f902 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	e007      	b.n	8007302 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8fe 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007300:	e0e3      	b.n	80074ca <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007302:	bf00      	nop
    return;
 8007304:	e0e1      	b.n	80074ca <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730a:	2b01      	cmp	r3, #1
 800730c:	f040 80a7 	bne.w	800745e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f003 0310 	and.w	r3, r3, #16
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 80a1 	beq.w	800745e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 809b 	beq.w	800745e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2210      	movs	r2, #16
 800732e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d156      	bne.n	80073ec <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007348:	893b      	ldrh	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80bf 	beq.w	80074ce <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007356:	893a      	ldrh	r2, [r7, #8]
 8007358:	429a      	cmp	r2, r3
 800735a:	f080 80b8 	bcs.w	80074ce <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	893a      	ldrh	r2, [r7, #8]
 8007362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007370:	d02a      	beq.n	80073c8 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007380:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0210 	bic.w	r2, r2, #16
 80073bc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fc f811 	bl	80033ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f893 	bl	8007508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e2:	e074      	b.n	80074ce <HAL_UART_IRQHandler+0x3ee>
 80073e4:	04000120 	.word	0x04000120
 80073e8:	08007e37 	.word	0x08007e37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d063      	beq.n	80074d2 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d060      	beq.n	80074d2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800741e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0210 	bic.w	r2, r2, #16
 8007450:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007452:	897b      	ldrh	r3, [r7, #10]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f856 	bl	8007508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800745c:	e039      	b.n	80074d2 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_UART_IRQHandler+0x3a4>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800747a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f84f 	bl	8007520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007482:	e029      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00d      	beq.n	80074aa <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01a      	beq.n	80074d6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    }
    return;
 80074a8:	e015      	b.n	80074d6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d011      	beq.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fccf 	bl	8007e62 <UART_EndTransmit_IT>
    return;
 80074c4:	e008      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
      return;
 80074c6:	bf00      	nop
 80074c8:	e006      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
    return;
 80074ca:	bf00      	nop
 80074cc:	e004      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
      return;
 80074ce:	bf00      	nop
 80074d0:	e002      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
      return;
 80074d2:	bf00      	nop
 80074d4:	e000      	b.n	80074d8 <HAL_UART_IRQHandler+0x3f8>
    return;
 80074d6:	bf00      	nop
  }

}
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop

080074e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4ba7      	ldr	r3, [pc, #668]	; (80077fc <UART_SetConfig+0x2c8>)
 8007560:	4013      	ands	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	430b      	orrs	r3, r1
 800756a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a95      	ldr	r2, [pc, #596]	; (8007800 <UART_SetConfig+0x2cc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d120      	bne.n	80075f2 <UART_SetConfig+0xbe>
 80075b0:	4b94      	ldr	r3, [pc, #592]	; (8007804 <UART_SetConfig+0x2d0>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d816      	bhi.n	80075ec <UART_SetConfig+0xb8>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x90>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075db 	.word	0x080075db
 80075d0:	080075e7 	.word	0x080075e7
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e14f      	b.n	800787a <UART_SetConfig+0x346>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e14c      	b.n	800787a <UART_SetConfig+0x346>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e149      	b.n	800787a <UART_SetConfig+0x346>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e146      	b.n	800787a <UART_SetConfig+0x346>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	e143      	b.n	800787a <UART_SetConfig+0x346>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a84      	ldr	r2, [pc, #528]	; (8007808 <UART_SetConfig+0x2d4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d132      	bne.n	8007662 <UART_SetConfig+0x12e>
 80075fc:	4b81      	ldr	r3, [pc, #516]	; (8007804 <UART_SetConfig+0x2d0>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b0c      	cmp	r3, #12
 8007608:	d828      	bhi.n	800765c <UART_SetConfig+0x128>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0xdc>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007645 	.word	0x08007645
 8007614:	0800765d 	.word	0x0800765d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800765d 	.word	0x0800765d
 8007620:	08007651 	.word	0x08007651
 8007624:	0800765d 	.word	0x0800765d
 8007628:	0800765d 	.word	0x0800765d
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800764b 	.word	0x0800764b
 8007634:	0800765d 	.word	0x0800765d
 8007638:	0800765d 	.word	0x0800765d
 800763c:	0800765d 	.word	0x0800765d
 8007640:	08007657 	.word	0x08007657
 8007644:	2300      	movs	r3, #0
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e117      	b.n	800787a <UART_SetConfig+0x346>
 800764a:	2302      	movs	r3, #2
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e114      	b.n	800787a <UART_SetConfig+0x346>
 8007650:	2304      	movs	r3, #4
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e111      	b.n	800787a <UART_SetConfig+0x346>
 8007656:	2308      	movs	r3, #8
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e10e      	b.n	800787a <UART_SetConfig+0x346>
 800765c:	2310      	movs	r3, #16
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e10b      	b.n	800787a <UART_SetConfig+0x346>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a69      	ldr	r2, [pc, #420]	; (800780c <UART_SetConfig+0x2d8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d120      	bne.n	80076ae <UART_SetConfig+0x17a>
 800766c:	4b65      	ldr	r3, [pc, #404]	; (8007804 <UART_SetConfig+0x2d0>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d013      	beq.n	80076a2 <UART_SetConfig+0x16e>
 800767a:	2b30      	cmp	r3, #48	; 0x30
 800767c:	d814      	bhi.n	80076a8 <UART_SetConfig+0x174>
 800767e:	2b20      	cmp	r3, #32
 8007680:	d009      	beq.n	8007696 <UART_SetConfig+0x162>
 8007682:	2b20      	cmp	r3, #32
 8007684:	d810      	bhi.n	80076a8 <UART_SetConfig+0x174>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <UART_SetConfig+0x15c>
 800768a:	2b10      	cmp	r3, #16
 800768c:	d006      	beq.n	800769c <UART_SetConfig+0x168>
 800768e:	e00b      	b.n	80076a8 <UART_SetConfig+0x174>
 8007690:	2300      	movs	r3, #0
 8007692:	77fb      	strb	r3, [r7, #31]
 8007694:	e0f1      	b.n	800787a <UART_SetConfig+0x346>
 8007696:	2302      	movs	r3, #2
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e0ee      	b.n	800787a <UART_SetConfig+0x346>
 800769c:	2304      	movs	r3, #4
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e0eb      	b.n	800787a <UART_SetConfig+0x346>
 80076a2:	2308      	movs	r3, #8
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e0e8      	b.n	800787a <UART_SetConfig+0x346>
 80076a8:	2310      	movs	r3, #16
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e0e5      	b.n	800787a <UART_SetConfig+0x346>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a57      	ldr	r2, [pc, #348]	; (8007810 <UART_SetConfig+0x2dc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d120      	bne.n	80076fa <UART_SetConfig+0x1c6>
 80076b8:	4b52      	ldr	r3, [pc, #328]	; (8007804 <UART_SetConfig+0x2d0>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076c2:	2bc0      	cmp	r3, #192	; 0xc0
 80076c4:	d013      	beq.n	80076ee <UART_SetConfig+0x1ba>
 80076c6:	2bc0      	cmp	r3, #192	; 0xc0
 80076c8:	d814      	bhi.n	80076f4 <UART_SetConfig+0x1c0>
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d009      	beq.n	80076e2 <UART_SetConfig+0x1ae>
 80076ce:	2b80      	cmp	r3, #128	; 0x80
 80076d0:	d810      	bhi.n	80076f4 <UART_SetConfig+0x1c0>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <UART_SetConfig+0x1a8>
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d006      	beq.n	80076e8 <UART_SetConfig+0x1b4>
 80076da:	e00b      	b.n	80076f4 <UART_SetConfig+0x1c0>
 80076dc:	2300      	movs	r3, #0
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e0cb      	b.n	800787a <UART_SetConfig+0x346>
 80076e2:	2302      	movs	r3, #2
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e0c8      	b.n	800787a <UART_SetConfig+0x346>
 80076e8:	2304      	movs	r3, #4
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e0c5      	b.n	800787a <UART_SetConfig+0x346>
 80076ee:	2308      	movs	r3, #8
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e0c2      	b.n	800787a <UART_SetConfig+0x346>
 80076f4:	2310      	movs	r3, #16
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e0bf      	b.n	800787a <UART_SetConfig+0x346>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a45      	ldr	r2, [pc, #276]	; (8007814 <UART_SetConfig+0x2e0>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d125      	bne.n	8007750 <UART_SetConfig+0x21c>
 8007704:	4b3f      	ldr	r3, [pc, #252]	; (8007804 <UART_SetConfig+0x2d0>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007712:	d017      	beq.n	8007744 <UART_SetConfig+0x210>
 8007714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007718:	d817      	bhi.n	800774a <UART_SetConfig+0x216>
 800771a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771e:	d00b      	beq.n	8007738 <UART_SetConfig+0x204>
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d811      	bhi.n	800774a <UART_SetConfig+0x216>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <UART_SetConfig+0x1fe>
 800772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772e:	d006      	beq.n	800773e <UART_SetConfig+0x20a>
 8007730:	e00b      	b.n	800774a <UART_SetConfig+0x216>
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e0a0      	b.n	800787a <UART_SetConfig+0x346>
 8007738:	2302      	movs	r3, #2
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e09d      	b.n	800787a <UART_SetConfig+0x346>
 800773e:	2304      	movs	r3, #4
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e09a      	b.n	800787a <UART_SetConfig+0x346>
 8007744:	2308      	movs	r3, #8
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e097      	b.n	800787a <UART_SetConfig+0x346>
 800774a:	2310      	movs	r3, #16
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e094      	b.n	800787a <UART_SetConfig+0x346>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a30      	ldr	r2, [pc, #192]	; (8007818 <UART_SetConfig+0x2e4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d125      	bne.n	80077a6 <UART_SetConfig+0x272>
 800775a:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <UART_SetConfig+0x2d0>)
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007768:	d017      	beq.n	800779a <UART_SetConfig+0x266>
 800776a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776e:	d817      	bhi.n	80077a0 <UART_SetConfig+0x26c>
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007774:	d00b      	beq.n	800778e <UART_SetConfig+0x25a>
 8007776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777a:	d811      	bhi.n	80077a0 <UART_SetConfig+0x26c>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <UART_SetConfig+0x254>
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007784:	d006      	beq.n	8007794 <UART_SetConfig+0x260>
 8007786:	e00b      	b.n	80077a0 <UART_SetConfig+0x26c>
 8007788:	2301      	movs	r3, #1
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e075      	b.n	800787a <UART_SetConfig+0x346>
 800778e:	2302      	movs	r3, #2
 8007790:	77fb      	strb	r3, [r7, #31]
 8007792:	e072      	b.n	800787a <UART_SetConfig+0x346>
 8007794:	2304      	movs	r3, #4
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e06f      	b.n	800787a <UART_SetConfig+0x346>
 800779a:	2308      	movs	r3, #8
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e06c      	b.n	800787a <UART_SetConfig+0x346>
 80077a0:	2310      	movs	r3, #16
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e069      	b.n	800787a <UART_SetConfig+0x346>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1c      	ldr	r2, [pc, #112]	; (800781c <UART_SetConfig+0x2e8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d137      	bne.n	8007820 <UART_SetConfig+0x2ec>
 80077b0:	4b14      	ldr	r3, [pc, #80]	; (8007804 <UART_SetConfig+0x2d0>)
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077be:	d017      	beq.n	80077f0 <UART_SetConfig+0x2bc>
 80077c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077c4:	d817      	bhi.n	80077f6 <UART_SetConfig+0x2c2>
 80077c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ca:	d00b      	beq.n	80077e4 <UART_SetConfig+0x2b0>
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d0:	d811      	bhi.n	80077f6 <UART_SetConfig+0x2c2>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <UART_SetConfig+0x2aa>
 80077d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077da:	d006      	beq.n	80077ea <UART_SetConfig+0x2b6>
 80077dc:	e00b      	b.n	80077f6 <UART_SetConfig+0x2c2>
 80077de:	2300      	movs	r3, #0
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e04a      	b.n	800787a <UART_SetConfig+0x346>
 80077e4:	2302      	movs	r3, #2
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e047      	b.n	800787a <UART_SetConfig+0x346>
 80077ea:	2304      	movs	r3, #4
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e044      	b.n	800787a <UART_SetConfig+0x346>
 80077f0:	2308      	movs	r3, #8
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e041      	b.n	800787a <UART_SetConfig+0x346>
 80077f6:	2310      	movs	r3, #16
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e03e      	b.n	800787a <UART_SetConfig+0x346>
 80077fc:	efff69f3 	.word	0xefff69f3
 8007800:	40011000 	.word	0x40011000
 8007804:	40023800 	.word	0x40023800
 8007808:	40004400 	.word	0x40004400
 800780c:	40004800 	.word	0x40004800
 8007810:	40004c00 	.word	0x40004c00
 8007814:	40005000 	.word	0x40005000
 8007818:	40011400 	.word	0x40011400
 800781c:	40007800 	.word	0x40007800
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a71      	ldr	r2, [pc, #452]	; (80079ec <UART_SetConfig+0x4b8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d125      	bne.n	8007876 <UART_SetConfig+0x342>
 800782a:	4b71      	ldr	r3, [pc, #452]	; (80079f0 <UART_SetConfig+0x4bc>)
 800782c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007838:	d017      	beq.n	800786a <UART_SetConfig+0x336>
 800783a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800783e:	d817      	bhi.n	8007870 <UART_SetConfig+0x33c>
 8007840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007844:	d00b      	beq.n	800785e <UART_SetConfig+0x32a>
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d811      	bhi.n	8007870 <UART_SetConfig+0x33c>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <UART_SetConfig+0x324>
 8007850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007854:	d006      	beq.n	8007864 <UART_SetConfig+0x330>
 8007856:	e00b      	b.n	8007870 <UART_SetConfig+0x33c>
 8007858:	2300      	movs	r3, #0
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e00d      	b.n	800787a <UART_SetConfig+0x346>
 800785e:	2302      	movs	r3, #2
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e00a      	b.n	800787a <UART_SetConfig+0x346>
 8007864:	2304      	movs	r3, #4
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e007      	b.n	800787a <UART_SetConfig+0x346>
 800786a:	2308      	movs	r3, #8
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e004      	b.n	800787a <UART_SetConfig+0x346>
 8007870:	2310      	movs	r3, #16
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e001      	b.n	800787a <UART_SetConfig+0x346>
 8007876:	2310      	movs	r3, #16
 8007878:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007882:	d15b      	bne.n	800793c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007884:	7ffb      	ldrb	r3, [r7, #31]
 8007886:	2b08      	cmp	r3, #8
 8007888:	d827      	bhi.n	80078da <UART_SetConfig+0x3a6>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <UART_SetConfig+0x35c>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078c5 	.word	0x080078c5
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078db 	.word	0x080078db
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b4:	f7fc fe46 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 80078b8:	61b8      	str	r0, [r7, #24]
        break;
 80078ba:	e013      	b.n	80078e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fc fe56 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 80078c0:	61b8      	str	r0, [r7, #24]
        break;
 80078c2:	e00f      	b.n	80078e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b4b      	ldr	r3, [pc, #300]	; (80079f4 <UART_SetConfig+0x4c0>)
 80078c6:	61bb      	str	r3, [r7, #24]
        break;
 80078c8:	e00c      	b.n	80078e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fc fd4d 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 80078ce:	61b8      	str	r0, [r7, #24]
        break;
 80078d0:	e008      	b.n	80078e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	61bb      	str	r3, [r7, #24]
        break;
 80078d8:	e004      	b.n	80078e4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	77bb      	strb	r3, [r7, #30]
        break;
 80078e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d074      	beq.n	80079d4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	005a      	lsls	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	b29b      	uxth	r3, r3
 8007900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2b0f      	cmp	r3, #15
 8007906:	d916      	bls.n	8007936 <UART_SetConfig+0x402>
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790e:	d212      	bcs.n	8007936 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f023 030f 	bic.w	r3, r3, #15
 8007918:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	b29a      	uxth	r2, r3
 8007926:	89fb      	ldrh	r3, [r7, #14]
 8007928:	4313      	orrs	r3, r2
 800792a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	89fa      	ldrh	r2, [r7, #14]
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	e04e      	b.n	80079d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	77bb      	strb	r3, [r7, #30]
 800793a:	e04b      	b.n	80079d4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800793c:	7ffb      	ldrb	r3, [r7, #31]
 800793e:	2b08      	cmp	r3, #8
 8007940:	d827      	bhi.n	8007992 <UART_SetConfig+0x45e>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x414>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800796d 	.word	0x0800796d
 800794c:	08007975 	.word	0x08007975
 8007950:	0800797d 	.word	0x0800797d
 8007954:	08007993 	.word	0x08007993
 8007958:	08007983 	.word	0x08007983
 800795c:	08007993 	.word	0x08007993
 8007960:	08007993 	.word	0x08007993
 8007964:	08007993 	.word	0x08007993
 8007968:	0800798b 	.word	0x0800798b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800796c:	f7fc fdea 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8007970:	61b8      	str	r0, [r7, #24]
        break;
 8007972:	e013      	b.n	800799c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007974:	f7fc fdfa 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 8007978:	61b8      	str	r0, [r7, #24]
        break;
 800797a:	e00f      	b.n	800799c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800797c:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <UART_SetConfig+0x4c0>)
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e00c      	b.n	800799c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007982:	f7fc fcf1 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8007986:	61b8      	str	r0, [r7, #24]
        break;
 8007988:	e008      	b.n	800799c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800798a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798e:	61bb      	str	r3, [r7, #24]
        break;
 8007990:	e004      	b.n	800799c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	77bb      	strb	r3, [r7, #30]
        break;
 800799a:	bf00      	nop
    }

    if (pclk != 0U)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d018      	beq.n	80079d4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	085a      	lsrs	r2, r3, #1
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	441a      	add	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d908      	bls.n	80079d0 <UART_SetConfig+0x49c>
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c4:	d204      	bcs.n	80079d0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e001      	b.n	80079d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80079e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40007c00 	.word	0x40007c00
 80079f0:	40023800 	.word	0x40023800
 80079f4:	00f42400 	.word	0x00f42400

080079f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af6:	d10a      	bne.n	8007b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b4c:	f7fb fb0c 	bl	8003168 <HAL_GetTick>
 8007b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d10e      	bne.n	8007b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f82d 	bl	8007bce <UART_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e023      	b.n	8007bc6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d10e      	bne.n	8007baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f817 	bl	8007bce <UART_WaitOnFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e00d      	b.n	8007bc6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	603b      	str	r3, [r7, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bde:	e05e      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be6:	d05a      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be8:	f7fb fabe 	bl	8003168 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d302      	bcc.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d11b      	bne.n	8007c36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e043      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02c      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c52:	d124      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e00f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d091      	beq.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfa:	d10e      	bne.n	8007d1a <UART_Start_Receive_IT+0x52>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <UART_Start_Receive_IT+0x48>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d0e:	e02d      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	22ff      	movs	r2, #255	; 0xff
 8007d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d18:	e028      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <UART_Start_Receive_IT+0x76>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d104      	bne.n	8007d34 <UART_Start_Receive_IT+0x6c>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d32:	e01b      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	227f      	movs	r2, #127	; 0x7f
 8007d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d3c:	e016      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d46:	d10d      	bne.n	8007d64 <UART_Start_Receive_IT+0x9c>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <UART_Start_Receive_IT+0x92>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	227f      	movs	r2, #127	; 0x7f
 8007d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d58:	e008      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	223f      	movs	r2, #63	; 0x3f
 8007d5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d62:	e003      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2222      	movs	r2, #34	; 0x22
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0201 	orr.w	r2, r2, #1
 8007d88:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d92:	d107      	bne.n	8007da4 <UART_Start_Receive_IT+0xdc>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a0c      	ldr	r2, [pc, #48]	; (8007dd0 <UART_Start_Receive_IT+0x108>)
 8007da0:	665a      	str	r2, [r3, #100]	; 0x64
 8007da2:	e002      	b.n	8007daa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a0b      	ldr	r2, [pc, #44]	; (8007dd4 <UART_Start_Receive_IT+0x10c>)
 8007da8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007dc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	08007f69 	.word	0x08007f69
 8007dd4:	08007e95 	.word	0x08007e95

08007dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d107      	bne.n	8007e18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0210 	bic.w	r2, r2, #16
 8007e16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff fb4d 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fb2a 	bl	80074e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ea2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea8:	2b22      	cmp	r3, #34	; 0x22
 8007eaa:	d151      	bne.n	8007f50 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eb4:	89bb      	ldrh	r3, [r7, #12]
 8007eb6:	b2d9      	uxtb	r1, r3
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	400a      	ands	r2, r1
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d138      	bne.n	8007f60 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007efc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10f      	bne.n	8007f42 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0210 	bic.w	r2, r2, #16
 8007f30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fae4 	bl	8007508 <HAL_UARTEx_RxEventCallback>
 8007f40:	e002      	b.n	8007f48 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fa f91e 	bl	8002184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f4e:	e007      	b.n	8007f60 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0208 	orr.w	r2, r2, #8
 8007f5e:	619a      	str	r2, [r3, #24]
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f76:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7c:	2b22      	cmp	r3, #34	; 0x22
 8007f7e:	d151      	bne.n	8008024 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f8e:	89ba      	ldrh	r2, [r7, #12]
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	4013      	ands	r3, r2
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9e:	1c9a      	adds	r2, r3, #2
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d138      	bne.n	8008034 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fd0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d10f      	bne.n	8008016 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0210 	bic.w	r2, r2, #16
 8008004:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fa7a 	bl	8007508 <HAL_UARTEx_RxEventCallback>
 8008014:	e002      	b.n	800801c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fa f8b4 	bl	8002184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008022:	e007      	b.n	8008034 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0208 	orr.w	r2, r2, #8
 8008032:	619a      	str	r2, [r3, #24]
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800803c:	b084      	sub	sp, #16
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	f107 001c 	add.w	r0, r7, #28
 800804a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b01      	cmp	r3, #1
 8008052:	d120      	bne.n	8008096 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <USB_CoreInit+0xac>)
 8008066:	4013      	ands	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d105      	bne.n	800808a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa5a 	bl	8008544 <USB_CoreReset>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e010      	b.n	80080b8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa4e 	bl	8008544 <USB_CoreReset>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10b      	bne.n	80080d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f043 0206 	orr.w	r2, r3, #6
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f043 0220 	orr.w	r2, r3, #32
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080e2:	b004      	add	sp, #16
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	ffbdffbf 	.word	0xffbdffbf

080080ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f023 0201 	bic.w	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d106      	bne.n	800813a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60da      	str	r2, [r3, #12]
 8008138:	e00b      	b.n	8008152 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
 800814c:	e001      	b.n	8008152 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e003      	b.n	800815a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008152:	2032      	movs	r0, #50	; 0x32
 8008154:	f7fb f814 	bl	8003180 <HAL_Delay>

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	e009      	b.n	8008198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3340      	adds	r3, #64	; 0x40
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	3301      	adds	r3, #1
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b0e      	cmp	r3, #14
 800819c:	d9f2      	bls.n	8008184 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d11c      	bne.n	80081de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e005      	b.n	80081ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	4619      	mov	r1, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	461a      	mov	r2, r3
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10c      	bne.n	800822a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f959 	bl	80084d0 <USB_SetDevSpeed>
 800821e:	e018      	b.n	8008252 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f954 	bl	80084d0 <USB_SetDevSpeed>
 8008228:	e013      	b.n	8008252 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	2b03      	cmp	r3, #3
 800822e:	d10c      	bne.n	800824a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008236:	2100      	movs	r1, #0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f949 	bl	80084d0 <USB_SetDevSpeed>
 800823e:	e008      	b.n	8008252 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008240:	2101      	movs	r1, #1
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f944 	bl	80084d0 <USB_SetDevSpeed>
 8008248:	e003      	b.n	8008252 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800824a:	2103      	movs	r1, #3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f93f 	bl	80084d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008252:	2110      	movs	r1, #16
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f8f3 	bl	8008440 <USB_FlushTxFifo>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f911 	bl	800848c <USB_FlushRxFifo>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	461a      	mov	r2, r3
 800827c:	2300      	movs	r3, #0
 800827e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	461a      	mov	r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	461a      	mov	r2, r3
 8008294:	2300      	movs	r3, #0
 8008296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008298:	2300      	movs	r3, #0
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	e043      	b.n	8008326 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082b4:	d118      	bne.n	80082e8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c8:	461a      	mov	r2, r3
 80082ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e013      	b.n	80082fa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082de:	461a      	mov	r2, r3
 80082e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	e008      	b.n	80082fa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f4:	461a      	mov	r2, r3
 80082f6:	2300      	movs	r3, #0
 80082f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	461a      	mov	r2, r3
 8008308:	2300      	movs	r3, #0
 800830a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	461a      	mov	r2, r3
 800831a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800831e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3301      	adds	r3, #1
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d3b7      	bcc.n	800829e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	e043      	b.n	80083bc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800834a:	d118      	bne.n	800837e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835e:	461a      	mov	r2, r3
 8008360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e013      	b.n	8008390 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	461a      	mov	r2, r3
 8008376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	e008      	b.n	8008390 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	461a      	mov	r2, r3
 800838c:	2300      	movs	r3, #0
 800838e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	2300      	movs	r3, #0
 80083a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3301      	adds	r3, #1
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3b7      	bcc.n	8008334 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80083e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d105      	bne.n	80083f8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f043 0210 	orr.w	r2, r3, #16
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <USB_DevInit+0x2d4>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f043 0208 	orr.w	r2, r3, #8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d105      	bne.n	8008428 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <USB_DevInit+0x2d8>)
 8008422:	4313      	orrs	r3, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008434:	b004      	add	sp, #16
 8008436:	4770      	bx	lr
 8008438:	803c3800 	.word	0x803c3800
 800843c:	40000004 	.word	0x40000004

08008440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	019b      	lsls	r3, r3, #6
 8008452:	f043 0220 	orr.w	r2, r3, #32
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <USB_FlushTxFifo+0x48>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d901      	bls.n	800846c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e006      	b.n	800847a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b20      	cmp	r3, #32
 8008476:	d0f0      	beq.n	800845a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	00030d40 	.word	0x00030d40

0800848c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2210      	movs	r2, #16
 800849c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <USB_FlushRxFifo+0x40>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d901      	bls.n	80084b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e006      	b.n	80084be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d0f0      	beq.n	800849e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	00030d40 	.word	0x00030d40

080084d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f0:	4313      	orrs	r3, r2
 80084f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <USB_CoreReset+0x64>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d901      	bls.n	8008562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e01b      	b.n	800859a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	daf2      	bge.n	8008550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f043 0201 	orr.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <USB_CoreReset+0x64>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d901      	bls.n	800858c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e006      	b.n	800859a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b01      	cmp	r3, #1
 8008596:	d0f0      	beq.n	800857a <USB_CoreReset+0x36>

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	00030d40 	.word	0x00030d40

080085ac <arm_pid_init_f32>:
 80085ac:	ed90 7a08 	vldr	s14, [r0, #32]
 80085b0:	edd0 7a06 	vldr	s15, [r0, #24]
 80085b4:	ed90 6a07 	vldr	s12, [r0, #28]
 80085b8:	eef1 6a67 	vneg.f32	s13, s15
 80085bc:	ed80 7a02 	vstr	s14, [r0, #8]
 80085c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80085c4:	ee37 6a07 	vadd.f32	s12, s14, s14
 80085c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085cc:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80085d0:	edc0 7a00 	vstr	s15, [r0]
 80085d4:	ed80 7a01 	vstr	s14, [r0, #4]
 80085d8:	b901      	cbnz	r1, 80085dc <arm_pid_init_f32+0x30>
 80085da:	4770      	bx	lr
 80085dc:	2300      	movs	r3, #0
 80085de:	60c3      	str	r3, [r0, #12]
 80085e0:	6103      	str	r3, [r0, #16]
 80085e2:	6143      	str	r3, [r0, #20]
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000058 	.word	0x20000058

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4d0d      	ldr	r5, [pc, #52]	; (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2600      	movs	r6, #0
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4d0b      	ldr	r5, [pc, #44]	; (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	; (8008638 <__libc_init_array+0x44>)
 8008608:	f004 ffea 	bl	800d5e0 <_init>
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2600      	movs	r6, #0
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800dbf4 	.word	0x0800dbf4
 8008630:	0800dbf4 	.word	0x0800dbf4
 8008634:	0800dbf4 	.word	0x0800dbf4
 8008638:	0800dbf8 	.word	0x0800dbf8

0800863c <memcpy>:
 800863c:	440a      	add	r2, r1
 800863e:	4291      	cmp	r1, r2
 8008640:	f100 33ff 	add.w	r3, r0, #4294967295
 8008644:	d100      	bne.n	8008648 <memcpy+0xc>
 8008646:	4770      	bx	lr
 8008648:	b510      	push	{r4, lr}
 800864a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008652:	4291      	cmp	r1, r2
 8008654:	d1f9      	bne.n	800864a <memcpy+0xe>
 8008656:	bd10      	pop	{r4, pc}

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <__cvt>:
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	ed2d 8b02 	vpush	{d8}
 800866e:	eeb0 8b40 	vmov.f64	d8, d0
 8008672:	b085      	sub	sp, #20
 8008674:	4617      	mov	r7, r2
 8008676:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008678:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800867a:	ee18 2a90 	vmov	r2, s17
 800867e:	f025 0520 	bic.w	r5, r5, #32
 8008682:	2a00      	cmp	r2, #0
 8008684:	bfb6      	itet	lt
 8008686:	222d      	movlt	r2, #45	; 0x2d
 8008688:	2200      	movge	r2, #0
 800868a:	eeb1 8b40 	vneglt.f64	d8, d0
 800868e:	2d46      	cmp	r5, #70	; 0x46
 8008690:	460c      	mov	r4, r1
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	d004      	beq.n	80086a0 <__cvt+0x38>
 8008696:	2d45      	cmp	r5, #69	; 0x45
 8008698:	d100      	bne.n	800869c <__cvt+0x34>
 800869a:	3401      	adds	r4, #1
 800869c:	2102      	movs	r1, #2
 800869e:	e000      	b.n	80086a2 <__cvt+0x3a>
 80086a0:	2103      	movs	r1, #3
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	ab02      	add	r3, sp, #8
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4622      	mov	r2, r4
 80086ac:	4633      	mov	r3, r6
 80086ae:	eeb0 0b48 	vmov.f64	d0, d8
 80086b2:	f001 fe1d 	bl	800a2f0 <_dtoa_r>
 80086b6:	2d47      	cmp	r5, #71	; 0x47
 80086b8:	d109      	bne.n	80086ce <__cvt+0x66>
 80086ba:	07fb      	lsls	r3, r7, #31
 80086bc:	d407      	bmi.n	80086ce <__cvt+0x66>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c2:	1a1b      	subs	r3, r3, r0
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	b005      	add	sp, #20
 80086c8:	ecbd 8b02 	vpop	{d8}
 80086cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ce:	2d46      	cmp	r5, #70	; 0x46
 80086d0:	eb00 0204 	add.w	r2, r0, r4
 80086d4:	d10c      	bne.n	80086f0 <__cvt+0x88>
 80086d6:	7803      	ldrb	r3, [r0, #0]
 80086d8:	2b30      	cmp	r3, #48	; 0x30
 80086da:	d107      	bne.n	80086ec <__cvt+0x84>
 80086dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e4:	bf1c      	itt	ne
 80086e6:	f1c4 0401 	rsbne	r4, r4, #1
 80086ea:	6034      	strne	r4, [r6, #0]
 80086ec:	6833      	ldr	r3, [r6, #0]
 80086ee:	441a      	add	r2, r3
 80086f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f8:	bf08      	it	eq
 80086fa:	9203      	streq	r2, [sp, #12]
 80086fc:	2130      	movs	r1, #48	; 0x30
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	4293      	cmp	r3, r2
 8008702:	d2dc      	bcs.n	80086be <__cvt+0x56>
 8008704:	1c5c      	adds	r4, r3, #1
 8008706:	9403      	str	r4, [sp, #12]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	e7f8      	b.n	80086fe <__cvt+0x96>

0800870c <__exponent>:
 800870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870e:	4603      	mov	r3, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	bfb8      	it	lt
 8008714:	4249      	neglt	r1, r1
 8008716:	f803 2b02 	strb.w	r2, [r3], #2
 800871a:	bfb4      	ite	lt
 800871c:	222d      	movlt	r2, #45	; 0x2d
 800871e:	222b      	movge	r2, #43	; 0x2b
 8008720:	2909      	cmp	r1, #9
 8008722:	7042      	strb	r2, [r0, #1]
 8008724:	dd2a      	ble.n	800877c <__exponent+0x70>
 8008726:	f10d 0407 	add.w	r4, sp, #7
 800872a:	46a4      	mov	ip, r4
 800872c:	270a      	movs	r7, #10
 800872e:	46a6      	mov	lr, r4
 8008730:	460a      	mov	r2, r1
 8008732:	fb91 f6f7 	sdiv	r6, r1, r7
 8008736:	fb07 1516 	mls	r5, r7, r6, r1
 800873a:	3530      	adds	r5, #48	; 0x30
 800873c:	2a63      	cmp	r2, #99	; 0x63
 800873e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008746:	4631      	mov	r1, r6
 8008748:	dcf1      	bgt.n	800872e <__exponent+0x22>
 800874a:	3130      	adds	r1, #48	; 0x30
 800874c:	f1ae 0502 	sub.w	r5, lr, #2
 8008750:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008754:	1c44      	adds	r4, r0, #1
 8008756:	4629      	mov	r1, r5
 8008758:	4561      	cmp	r1, ip
 800875a:	d30a      	bcc.n	8008772 <__exponent+0x66>
 800875c:	f10d 0209 	add.w	r2, sp, #9
 8008760:	eba2 020e 	sub.w	r2, r2, lr
 8008764:	4565      	cmp	r5, ip
 8008766:	bf88      	it	hi
 8008768:	2200      	movhi	r2, #0
 800876a:	4413      	add	r3, r2
 800876c:	1a18      	subs	r0, r3, r0
 800876e:	b003      	add	sp, #12
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800877a:	e7ed      	b.n	8008758 <__exponent+0x4c>
 800877c:	2330      	movs	r3, #48	; 0x30
 800877e:	3130      	adds	r1, #48	; 0x30
 8008780:	7083      	strb	r3, [r0, #2]
 8008782:	70c1      	strb	r1, [r0, #3]
 8008784:	1d03      	adds	r3, r0, #4
 8008786:	e7f1      	b.n	800876c <__exponent+0x60>

08008788 <_printf_float>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b08b      	sub	sp, #44	; 0x2c
 800878e:	460c      	mov	r4, r1
 8008790:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008794:	4616      	mov	r6, r2
 8008796:	461f      	mov	r7, r3
 8008798:	4605      	mov	r5, r0
 800879a:	f002 fe9b 	bl	800b4d4 <_localeconv_r>
 800879e:	f8d0 b000 	ldr.w	fp, [r0]
 80087a2:	4658      	mov	r0, fp
 80087a4:	f7f7 fd4c 	bl	8000240 <strlen>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	f8d8 3000 	ldr.w	r3, [r8]
 80087b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3307      	adds	r3, #7
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	f103 0108 	add.w	r1, r3, #8
 80087c0:	f8c8 1000 	str.w	r1, [r8]
 80087c4:	4682      	mov	sl, r0
 80087c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80087ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008a30 <_printf_float+0x2a8>
 80087d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80087d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80087da:	eeb4 6b47 	vcmp.f64	d6, d7
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	dd24      	ble.n	800882e <_printf_float+0xa6>
 80087e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d502      	bpl.n	80087f4 <_printf_float+0x6c>
 80087ee:	232d      	movs	r3, #45	; 0x2d
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <_printf_float+0x2b0>)
 80087f6:	4891      	ldr	r0, [pc, #580]	; (8008a3c <_printf_float+0x2b4>)
 80087f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087fc:	bf94      	ite	ls
 80087fe:	4698      	movls	r8, r3
 8008800:	4680      	movhi	r8, r0
 8008802:	2303      	movs	r3, #3
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	2300      	movs	r3, #0
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	9700      	str	r7, [sp, #0]
 8008812:	4633      	mov	r3, r6
 8008814:	aa09      	add	r2, sp, #36	; 0x24
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f9d3 	bl	8008bc4 <_printf_common>
 800881e:	3001      	adds	r0, #1
 8008820:	f040 808a 	bne.w	8008938 <_printf_float+0x1b0>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b00b      	add	sp, #44	; 0x2c
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	d709      	bvc.n	800884c <_printf_float+0xc4>
 8008838:	ee10 3a90 	vmov	r3, s1
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfbc      	itt	lt
 8008840:	232d      	movlt	r3, #45	; 0x2d
 8008842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008846:	487e      	ldr	r0, [pc, #504]	; (8008a40 <_printf_float+0x2b8>)
 8008848:	4b7e      	ldr	r3, [pc, #504]	; (8008a44 <_printf_float+0x2bc>)
 800884a:	e7d5      	b.n	80087f8 <_printf_float+0x70>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008852:	9104      	str	r1, [sp, #16]
 8008854:	1c59      	adds	r1, r3, #1
 8008856:	d13c      	bne.n	80088d2 <_printf_float+0x14a>
 8008858:	2306      	movs	r3, #6
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	2300      	movs	r3, #0
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	ab08      	add	r3, sp, #32
 8008862:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800886a:	ab07      	add	r3, sp, #28
 800886c:	6861      	ldr	r1, [r4, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	f10d 031b 	add.w	r3, sp, #27
 8008876:	4628      	mov	r0, r5
 8008878:	f7ff fef6 	bl	8008668 <__cvt>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	2b47      	cmp	r3, #71	; 0x47
 8008882:	4680      	mov	r8, r0
 8008884:	d108      	bne.n	8008898 <_printf_float+0x110>
 8008886:	1cc8      	adds	r0, r1, #3
 8008888:	db02      	blt.n	8008890 <_printf_float+0x108>
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	4299      	cmp	r1, r3
 800888e:	dd41      	ble.n	8008914 <_printf_float+0x18c>
 8008890:	f1a9 0902 	sub.w	r9, r9, #2
 8008894:	fa5f f989 	uxtb.w	r9, r9
 8008898:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800889c:	d820      	bhi.n	80088e0 <_printf_float+0x158>
 800889e:	3901      	subs	r1, #1
 80088a0:	464a      	mov	r2, r9
 80088a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	f7ff ff30 	bl	800870c <__exponent>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	9004      	str	r0, [sp, #16]
 80088b0:	1813      	adds	r3, r2, r0
 80088b2:	2a01      	cmp	r2, #1
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	dc02      	bgt.n	80088be <_printf_float+0x136>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d501      	bpl.n	80088c2 <_printf_float+0x13a>
 80088be:	3301      	adds	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0a2      	beq.n	8008810 <_printf_float+0x88>
 80088ca:	232d      	movs	r3, #45	; 0x2d
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e79e      	b.n	8008810 <_printf_float+0x88>
 80088d2:	9904      	ldr	r1, [sp, #16]
 80088d4:	2947      	cmp	r1, #71	; 0x47
 80088d6:	d1c1      	bne.n	800885c <_printf_float+0xd4>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1bf      	bne.n	800885c <_printf_float+0xd4>
 80088dc:	2301      	movs	r3, #1
 80088de:	e7bc      	b.n	800885a <_printf_float+0xd2>
 80088e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088e4:	d118      	bne.n	8008918 <_printf_float+0x190>
 80088e6:	2900      	cmp	r1, #0
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	dd0b      	ble.n	8008904 <_printf_float+0x17c>
 80088ec:	6121      	str	r1, [r4, #16]
 80088ee:	b913      	cbnz	r3, 80088f6 <_printf_float+0x16e>
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	07d0      	lsls	r0, r2, #31
 80088f4:	d502      	bpl.n	80088fc <_printf_float+0x174>
 80088f6:	3301      	adds	r3, #1
 80088f8:	440b      	add	r3, r1
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	2300      	movs	r3, #0
 80088fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	e7de      	b.n	80088c2 <_printf_float+0x13a>
 8008904:	b913      	cbnz	r3, 800890c <_printf_float+0x184>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d2      	lsls	r2, r2, #31
 800890a:	d501      	bpl.n	8008910 <_printf_float+0x188>
 800890c:	3302      	adds	r3, #2
 800890e:	e7f4      	b.n	80088fa <_printf_float+0x172>
 8008910:	2301      	movs	r3, #1
 8008912:	e7f2      	b.n	80088fa <_printf_float+0x172>
 8008914:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	4299      	cmp	r1, r3
 800891c:	db05      	blt.n	800892a <_printf_float+0x1a2>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	6121      	str	r1, [r4, #16]
 8008922:	07d8      	lsls	r0, r3, #31
 8008924:	d5ea      	bpl.n	80088fc <_printf_float+0x174>
 8008926:	1c4b      	adds	r3, r1, #1
 8008928:	e7e7      	b.n	80088fa <_printf_float+0x172>
 800892a:	2900      	cmp	r1, #0
 800892c:	bfd4      	ite	le
 800892e:	f1c1 0202 	rsble	r2, r1, #2
 8008932:	2201      	movgt	r2, #1
 8008934:	4413      	add	r3, r2
 8008936:	e7e0      	b.n	80088fa <_printf_float+0x172>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	055a      	lsls	r2, r3, #21
 800893c:	d407      	bmi.n	800894e <_printf_float+0x1c6>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	4642      	mov	r2, r8
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	d12a      	bne.n	80089a2 <_printf_float+0x21a>
 800894c:	e76a      	b.n	8008824 <_printf_float+0x9c>
 800894e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008952:	f240 80e2 	bls.w	8008b1a <_printf_float+0x392>
 8008956:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800895a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	d133      	bne.n	80089cc <_printf_float+0x244>
 8008964:	4a38      	ldr	r2, [pc, #224]	; (8008a48 <_printf_float+0x2c0>)
 8008966:	2301      	movs	r3, #1
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af58 	beq.w	8008824 <_printf_float+0x9c>
 8008974:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008978:	429a      	cmp	r2, r3
 800897a:	db02      	blt.n	8008982 <_printf_float+0x1fa>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07d8      	lsls	r0, r3, #31
 8008980:	d50f      	bpl.n	80089a2 <_printf_float+0x21a>
 8008982:	4653      	mov	r3, sl
 8008984:	465a      	mov	r2, fp
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f af49 	beq.w	8008824 <_printf_float+0x9c>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 091a 	add.w	r9, r4, #26
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	3b01      	subs	r3, #1
 800899e:	4543      	cmp	r3, r8
 80089a0:	dc09      	bgt.n	80089b6 <_printf_float+0x22e>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	079b      	lsls	r3, r3, #30
 80089a6:	f100 8108 	bmi.w	8008bba <_printf_float+0x432>
 80089aa:	68e0      	ldr	r0, [r4, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	e738      	b.n	8008828 <_printf_float+0xa0>
 80089b6:	2301      	movs	r3, #1
 80089b8:	464a      	mov	r2, r9
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f af2f 	beq.w	8008824 <_printf_float+0x9c>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7e6      	b.n	800899a <_printf_float+0x212>
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc3c      	bgt.n	8008a4c <_printf_float+0x2c4>
 80089d2:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <_printf_float+0x2c0>)
 80089d4:	2301      	movs	r3, #1
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f af21 	beq.w	8008824 <_printf_float+0x9c>
 80089e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d102      	bne.n	80089f0 <_printf_float+0x268>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d5d8      	bpl.n	80089a2 <_printf_float+0x21a>
 80089f0:	4653      	mov	r3, sl
 80089f2:	465a      	mov	r2, fp
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af12 	beq.w	8008824 <_printf_float+0x9c>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	f104 0a1a 	add.w	sl, r4, #26
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	454b      	cmp	r3, r9
 8008a0e:	dc01      	bgt.n	8008a14 <_printf_float+0x28c>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	e795      	b.n	8008940 <_printf_float+0x1b8>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af00 	beq.w	8008824 <_printf_float+0x9c>
 8008a24:	f109 0901 	add.w	r9, r9, #1
 8008a28:	e7ee      	b.n	8008a08 <_printf_float+0x280>
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w
 8008a30:	ffffffff 	.word	0xffffffff
 8008a34:	7fefffff 	.word	0x7fefffff
 8008a38:	0800d828 	.word	0x0800d828
 8008a3c:	0800d82c 	.word	0x0800d82c
 8008a40:	0800d834 	.word	0x0800d834
 8008a44:	0800d830 	.word	0x0800d830
 8008a48:	0800db39 	.word	0x0800db39
 8008a4c:	9a08      	ldr	r2, [sp, #32]
 8008a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfa8      	it	ge
 8008a54:	461a      	movge	r2, r3
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	4691      	mov	r9, r2
 8008a5a:	dc38      	bgt.n	8008ace <_printf_float+0x346>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a64:	f104 021a 	add.w	r2, r4, #26
 8008a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a6a:	9905      	ldr	r1, [sp, #20]
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	eba3 0309 	sub.w	r3, r3, r9
 8008a72:	428b      	cmp	r3, r1
 8008a74:	dc33      	bgt.n	8008ade <_printf_float+0x356>
 8008a76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	db3c      	blt.n	8008af8 <_printf_float+0x370>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07da      	lsls	r2, r3, #31
 8008a82:	d439      	bmi.n	8008af8 <_printf_float+0x370>
 8008a84:	9a08      	ldr	r2, [sp, #32]
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	9907      	ldr	r1, [sp, #28]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	eba2 0901 	sub.w	r9, r2, r1
 8008a90:	4599      	cmp	r9, r3
 8008a92:	bfa8      	it	ge
 8008a94:	4699      	movge	r9, r3
 8008a96:	f1b9 0f00 	cmp.w	r9, #0
 8008a9a:	dc35      	bgt.n	8008b08 <_printf_float+0x380>
 8008a9c:	f04f 0800 	mov.w	r8, #0
 8008aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aa4:	f104 0a1a 	add.w	sl, r4, #26
 8008aa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	eba3 0309 	sub.w	r3, r3, r9
 8008ab2:	4543      	cmp	r3, r8
 8008ab4:	f77f af75 	ble.w	80089a2 <_printf_float+0x21a>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4652      	mov	r2, sl
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f aeae 	beq.w	8008824 <_printf_float+0x9c>
 8008ac8:	f108 0801 	add.w	r8, r8, #1
 8008acc:	e7ec      	b.n	8008aa8 <_printf_float+0x320>
 8008ace:	4613      	mov	r3, r2
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4642      	mov	r2, r8
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d1bf      	bne.n	8008a5c <_printf_float+0x2d4>
 8008adc:	e6a2      	b.n	8008824 <_printf_float+0x9c>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	9204      	str	r2, [sp, #16]
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f ae9b 	beq.w	8008824 <_printf_float+0x9c>
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	e7b7      	b.n	8008a68 <_printf_float+0x2e0>
 8008af8:	4653      	mov	r3, sl
 8008afa:	465a      	mov	r2, fp
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	d1be      	bne.n	8008a84 <_printf_float+0x2fc>
 8008b06:	e68d      	b.n	8008824 <_printf_float+0x9c>
 8008b08:	9a04      	ldr	r2, [sp, #16]
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	4442      	add	r2, r8
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1c1      	bne.n	8008a9c <_printf_float+0x314>
 8008b18:	e684      	b.n	8008824 <_printf_float+0x9c>
 8008b1a:	9a08      	ldr	r2, [sp, #32]
 8008b1c:	2a01      	cmp	r2, #1
 8008b1e:	dc01      	bgt.n	8008b24 <_printf_float+0x39c>
 8008b20:	07db      	lsls	r3, r3, #31
 8008b22:	d537      	bpl.n	8008b94 <_printf_float+0x40c>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4642      	mov	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f ae78 	beq.w	8008824 <_printf_float+0x9c>
 8008b34:	4653      	mov	r3, sl
 8008b36:	465a      	mov	r2, fp
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f ae70 	beq.w	8008824 <_printf_float+0x9c>
 8008b44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	d01b      	beq.n	8008b8a <_printf_float+0x402>
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	f108 0201 	add.w	r2, r8, #1
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	d10e      	bne.n	8008b82 <_printf_float+0x3fa>
 8008b64:	e65e      	b.n	8008824 <_printf_float+0x9c>
 8008b66:	2301      	movs	r3, #1
 8008b68:	464a      	mov	r2, r9
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	f43f ae57 	beq.w	8008824 <_printf_float+0x9c>
 8008b76:	f108 0801 	add.w	r8, r8, #1
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4543      	cmp	r3, r8
 8008b80:	dcf1      	bgt.n	8008b66 <_printf_float+0x3de>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b88:	e6db      	b.n	8008942 <_printf_float+0x1ba>
 8008b8a:	f04f 0800 	mov.w	r8, #0
 8008b8e:	f104 091a 	add.w	r9, r4, #26
 8008b92:	e7f2      	b.n	8008b7a <_printf_float+0x3f2>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4642      	mov	r2, r8
 8008b98:	e7df      	b.n	8008b5a <_printf_float+0x3d2>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae3d 	beq.w	8008824 <_printf_float+0x9c>
 8008baa:	f108 0801 	add.w	r8, r8, #1
 8008bae:	68e3      	ldr	r3, [r4, #12]
 8008bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb2:	1a5b      	subs	r3, r3, r1
 8008bb4:	4543      	cmp	r3, r8
 8008bb6:	dcf0      	bgt.n	8008b9a <_printf_float+0x412>
 8008bb8:	e6f7      	b.n	80089aa <_printf_float+0x222>
 8008bba:	f04f 0800 	mov.w	r8, #0
 8008bbe:	f104 0919 	add.w	r9, r4, #25
 8008bc2:	e7f4      	b.n	8008bae <_printf_float+0x426>

08008bc4 <_printf_common>:
 8008bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	4616      	mov	r6, r2
 8008bca:	4699      	mov	r9, r3
 8008bcc:	688a      	ldr	r2, [r1, #8]
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bfb8      	it	lt
 8008bd8:	4613      	movlt	r3, r2
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be0:	4607      	mov	r7, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b10a      	cbz	r2, 8008bea <_printf_common+0x26>
 8008be6:	3301      	adds	r3, #1
 8008be8:	6033      	str	r3, [r6, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	0699      	lsls	r1, r3, #26
 8008bee:	bf42      	ittt	mi
 8008bf0:	6833      	ldrmi	r3, [r6, #0]
 8008bf2:	3302      	addmi	r3, #2
 8008bf4:	6033      	strmi	r3, [r6, #0]
 8008bf6:	6825      	ldr	r5, [r4, #0]
 8008bf8:	f015 0506 	ands.w	r5, r5, #6
 8008bfc:	d106      	bne.n	8008c0c <_printf_common+0x48>
 8008bfe:	f104 0a19 	add.w	sl, r4, #25
 8008c02:	68e3      	ldr	r3, [r4, #12]
 8008c04:	6832      	ldr	r2, [r6, #0]
 8008c06:	1a9b      	subs	r3, r3, r2
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	dc26      	bgt.n	8008c5a <_printf_common+0x96>
 8008c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c10:	1e13      	subs	r3, r2, #0
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	bf18      	it	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	0692      	lsls	r2, r2, #26
 8008c1a:	d42b      	bmi.n	8008c74 <_printf_common+0xb0>
 8008c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d01e      	beq.n	8008c68 <_printf_common+0xa4>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	68e5      	ldr	r5, [r4, #12]
 8008c2e:	6832      	ldr	r2, [r6, #0]
 8008c30:	f003 0306 	and.w	r3, r3, #6
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	bf08      	it	eq
 8008c38:	1aad      	subeq	r5, r5, r2
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	bf0c      	ite	eq
 8008c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c44:	2500      	movne	r5, #0
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bfc4      	itt	gt
 8008c4a:	1a9b      	subgt	r3, r3, r2
 8008c4c:	18ed      	addgt	r5, r5, r3
 8008c4e:	2600      	movs	r6, #0
 8008c50:	341a      	adds	r4, #26
 8008c52:	42b5      	cmp	r5, r6
 8008c54:	d11a      	bne.n	8008c8c <_printf_common+0xc8>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e008      	b.n	8008c6c <_printf_common+0xa8>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4638      	mov	r0, r7
 8008c62:	47c0      	blx	r8
 8008c64:	3001      	adds	r0, #1
 8008c66:	d103      	bne.n	8008c70 <_printf_common+0xac>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	3501      	adds	r5, #1
 8008c72:	e7c6      	b.n	8008c02 <_printf_common+0x3e>
 8008c74:	18e1      	adds	r1, r4, r3
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	2030      	movs	r0, #48	; 0x30
 8008c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c7e:	4422      	add	r2, r4
 8008c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c88:	3302      	adds	r3, #2
 8008c8a:	e7c7      	b.n	8008c1c <_printf_common+0x58>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4649      	mov	r1, r9
 8008c92:	4638      	mov	r0, r7
 8008c94:	47c0      	blx	r8
 8008c96:	3001      	adds	r0, #1
 8008c98:	d0e6      	beq.n	8008c68 <_printf_common+0xa4>
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7d9      	b.n	8008c52 <_printf_common+0x8e>
	...

08008ca0 <_printf_i>:
 8008ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	4691      	mov	r9, r2
 8008ca8:	7e27      	ldrb	r7, [r4, #24]
 8008caa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cac:	2f78      	cmp	r7, #120	; 0x78
 8008cae:	4680      	mov	r8, r0
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb6:	d807      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cb8:	2f62      	cmp	r7, #98	; 0x62
 8008cba:	d80a      	bhi.n	8008cd2 <_printf_i+0x32>
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	f000 80d8 	beq.w	8008e72 <_printf_i+0x1d2>
 8008cc2:	2f58      	cmp	r7, #88	; 0x58
 8008cc4:	f000 80a3 	beq.w	8008e0e <_printf_i+0x16e>
 8008cc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd0:	e03a      	b.n	8008d48 <_printf_i+0xa8>
 8008cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd6:	2b15      	cmp	r3, #21
 8008cd8:	d8f6      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cda:	a001      	add	r0, pc, #4	; (adr r0, 8008ce0 <_printf_i+0x40>)
 8008cdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008cc9 	.word	0x08008cc9
 8008cec:	08008cc9 	.word	0x08008cc9
 8008cf0:	08008cc9 	.word	0x08008cc9
 8008cf4:	08008cc9 	.word	0x08008cc9
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008cc9 	.word	0x08008cc9
 8008d00:	08008cc9 	.word	0x08008cc9
 8008d04:	08008cc9 	.word	0x08008cc9
 8008d08:	08008cc9 	.word	0x08008cc9
 8008d0c:	08008e59 	.word	0x08008e59
 8008d10:	08008d7d 	.word	0x08008d7d
 8008d14:	08008e3b 	.word	0x08008e3b
 8008d18:	08008cc9 	.word	0x08008cc9
 8008d1c:	08008cc9 	.word	0x08008cc9
 8008d20:	08008e7b 	.word	0x08008e7b
 8008d24:	08008cc9 	.word	0x08008cc9
 8008d28:	08008d7d 	.word	0x08008d7d
 8008d2c:	08008cc9 	.word	0x08008cc9
 8008d30:	08008cc9 	.word	0x08008cc9
 8008d34:	08008e43 	.word	0x08008e43
 8008d38:	680b      	ldr	r3, [r1, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	600a      	str	r2, [r1, #0]
 8008d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0a3      	b.n	8008e94 <_printf_i+0x1f4>
 8008d4c:	6825      	ldr	r5, [r4, #0]
 8008d4e:	6808      	ldr	r0, [r1, #0]
 8008d50:	062e      	lsls	r6, r5, #24
 8008d52:	f100 0304 	add.w	r3, r0, #4
 8008d56:	d50a      	bpl.n	8008d6e <_printf_i+0xce>
 8008d58:	6805      	ldr	r5, [r0, #0]
 8008d5a:	600b      	str	r3, [r1, #0]
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	da03      	bge.n	8008d68 <_printf_i+0xc8>
 8008d60:	232d      	movs	r3, #45	; 0x2d
 8008d62:	426d      	negs	r5, r5
 8008d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d68:	485e      	ldr	r0, [pc, #376]	; (8008ee4 <_printf_i+0x244>)
 8008d6a:	230a      	movs	r3, #10
 8008d6c:	e019      	b.n	8008da2 <_printf_i+0x102>
 8008d6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d72:	6805      	ldr	r5, [r0, #0]
 8008d74:	600b      	str	r3, [r1, #0]
 8008d76:	bf18      	it	ne
 8008d78:	b22d      	sxthne	r5, r5
 8008d7a:	e7ef      	b.n	8008d5c <_printf_i+0xbc>
 8008d7c:	680b      	ldr	r3, [r1, #0]
 8008d7e:	6825      	ldr	r5, [r4, #0]
 8008d80:	1d18      	adds	r0, r3, #4
 8008d82:	6008      	str	r0, [r1, #0]
 8008d84:	0628      	lsls	r0, r5, #24
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0xec>
 8008d88:	681d      	ldr	r5, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0xf2>
 8008d8c:	0669      	lsls	r1, r5, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0xe8>
 8008d90:	881d      	ldrh	r5, [r3, #0]
 8008d92:	4854      	ldr	r0, [pc, #336]	; (8008ee4 <_printf_i+0x244>)
 8008d94:	2f6f      	cmp	r7, #111	; 0x6f
 8008d96:	bf0c      	ite	eq
 8008d98:	2308      	moveq	r3, #8
 8008d9a:	230a      	movne	r3, #10
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008da2:	6866      	ldr	r6, [r4, #4]
 8008da4:	60a6      	str	r6, [r4, #8]
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	bfa2      	ittt	ge
 8008daa:	6821      	ldrge	r1, [r4, #0]
 8008dac:	f021 0104 	bicge.w	r1, r1, #4
 8008db0:	6021      	strge	r1, [r4, #0]
 8008db2:	b90d      	cbnz	r5, 8008db8 <_printf_i+0x118>
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	d04d      	beq.n	8008e54 <_printf_i+0x1b4>
 8008db8:	4616      	mov	r6, r2
 8008dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8008dc2:	5dc7      	ldrb	r7, [r0, r7]
 8008dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc8:	462f      	mov	r7, r5
 8008dca:	42bb      	cmp	r3, r7
 8008dcc:	460d      	mov	r5, r1
 8008dce:	d9f4      	bls.n	8008dba <_printf_i+0x11a>
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d10b      	bne.n	8008dec <_printf_i+0x14c>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	07df      	lsls	r7, r3, #31
 8008dd8:	d508      	bpl.n	8008dec <_printf_i+0x14c>
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	4299      	cmp	r1, r3
 8008de0:	bfde      	ittt	le
 8008de2:	2330      	movle	r3, #48	; 0x30
 8008de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dec:	1b92      	subs	r2, r2, r6
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	f8cd a000 	str.w	sl, [sp]
 8008df4:	464b      	mov	r3, r9
 8008df6:	aa03      	add	r2, sp, #12
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fee2 	bl	8008bc4 <_printf_common>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d14c      	bne.n	8008e9e <_printf_i+0x1fe>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b004      	add	sp, #16
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	4835      	ldr	r0, [pc, #212]	; (8008ee4 <_printf_i+0x244>)
 8008e10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	680e      	ldr	r6, [r1, #0]
 8008e18:	061f      	lsls	r7, r3, #24
 8008e1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e1e:	600e      	str	r6, [r1, #0]
 8008e20:	d514      	bpl.n	8008e4c <_printf_i+0x1ac>
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	bf44      	itt	mi
 8008e26:	f043 0320 	orrmi.w	r3, r3, #32
 8008e2a:	6023      	strmi	r3, [r4, #0]
 8008e2c:	b91d      	cbnz	r5, 8008e36 <_printf_i+0x196>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f023 0320 	bic.w	r3, r3, #32
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	2310      	movs	r3, #16
 8008e38:	e7b0      	b.n	8008d9c <_printf_i+0xfc>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	f043 0320 	orr.w	r3, r3, #32
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	2378      	movs	r3, #120	; 0x78
 8008e44:	4828      	ldr	r0, [pc, #160]	; (8008ee8 <_printf_i+0x248>)
 8008e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e4a:	e7e3      	b.n	8008e14 <_printf_i+0x174>
 8008e4c:	065e      	lsls	r6, r3, #25
 8008e4e:	bf48      	it	mi
 8008e50:	b2ad      	uxthmi	r5, r5
 8008e52:	e7e6      	b.n	8008e22 <_printf_i+0x182>
 8008e54:	4616      	mov	r6, r2
 8008e56:	e7bb      	b.n	8008dd0 <_printf_i+0x130>
 8008e58:	680b      	ldr	r3, [r1, #0]
 8008e5a:	6826      	ldr	r6, [r4, #0]
 8008e5c:	6960      	ldr	r0, [r4, #20]
 8008e5e:	1d1d      	adds	r5, r3, #4
 8008e60:	600d      	str	r5, [r1, #0]
 8008e62:	0635      	lsls	r5, r6, #24
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	d501      	bpl.n	8008e6c <_printf_i+0x1cc>
 8008e68:	6018      	str	r0, [r3, #0]
 8008e6a:	e002      	b.n	8008e72 <_printf_i+0x1d2>
 8008e6c:	0671      	lsls	r1, r6, #25
 8008e6e:	d5fb      	bpl.n	8008e68 <_printf_i+0x1c8>
 8008e70:	8018      	strh	r0, [r3, #0]
 8008e72:	2300      	movs	r3, #0
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	4616      	mov	r6, r2
 8008e78:	e7ba      	b.n	8008df0 <_printf_i+0x150>
 8008e7a:	680b      	ldr	r3, [r1, #0]
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	600a      	str	r2, [r1, #0]
 8008e80:	681e      	ldr	r6, [r3, #0]
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	2100      	movs	r1, #0
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7f7 f9e2 	bl	8000250 <memchr>
 8008e8c:	b108      	cbz	r0, 8008e92 <_printf_i+0x1f2>
 8008e8e:	1b80      	subs	r0, r0, r6
 8008e90:	6060      	str	r0, [r4, #4]
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	2300      	movs	r3, #0
 8008e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9c:	e7a8      	b.n	8008df0 <_printf_i+0x150>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	47d0      	blx	sl
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d0ab      	beq.n	8008e04 <_printf_i+0x164>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	079b      	lsls	r3, r3, #30
 8008eb0:	d413      	bmi.n	8008eda <_printf_i+0x23a>
 8008eb2:	68e0      	ldr	r0, [r4, #12]
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	bfb8      	it	lt
 8008eba:	4618      	movlt	r0, r3
 8008ebc:	e7a4      	b.n	8008e08 <_printf_i+0x168>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	47d0      	blx	sl
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d09b      	beq.n	8008e04 <_printf_i+0x164>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	9903      	ldr	r1, [sp, #12]
 8008ed2:	1a5b      	subs	r3, r3, r1
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	dcf2      	bgt.n	8008ebe <_printf_i+0x21e>
 8008ed8:	e7eb      	b.n	8008eb2 <_printf_i+0x212>
 8008eda:	2500      	movs	r5, #0
 8008edc:	f104 0619 	add.w	r6, r4, #25
 8008ee0:	e7f5      	b.n	8008ece <_printf_i+0x22e>
 8008ee2:	bf00      	nop
 8008ee4:	0800d838 	.word	0x0800d838
 8008ee8:	0800d849 	.word	0x0800d849

08008eec <_scanf_float>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	b087      	sub	sp, #28
 8008ef2:	4617      	mov	r7, r2
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	688b      	ldr	r3, [r1, #8]
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008efe:	bf83      	ittte	hi
 8008f00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f04:	195b      	addhi	r3, r3, r5
 8008f06:	9302      	strhi	r3, [sp, #8]
 8008f08:	2300      	movls	r3, #0
 8008f0a:	bf86      	itte	hi
 8008f0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f10:	608b      	strhi	r3, [r1, #8]
 8008f12:	9302      	strls	r3, [sp, #8]
 8008f14:	680b      	ldr	r3, [r1, #0]
 8008f16:	468b      	mov	fp, r1
 8008f18:	2500      	movs	r5, #0
 8008f1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f26:	4680      	mov	r8, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	465e      	mov	r6, fp
 8008f2c:	46aa      	mov	sl, r5
 8008f2e:	46a9      	mov	r9, r5
 8008f30:	9501      	str	r5, [sp, #4]
 8008f32:	68a2      	ldr	r2, [r4, #8]
 8008f34:	b152      	cbz	r2, 8008f4c <_scanf_float+0x60>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f3c:	d864      	bhi.n	8009008 <_scanf_float+0x11c>
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d83c      	bhi.n	8008fbc <_scanf_float+0xd0>
 8008f42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f46:	b2c8      	uxtb	r0, r1
 8008f48:	280e      	cmp	r0, #14
 8008f4a:	d93a      	bls.n	8008fc2 <_scanf_float+0xd6>
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	d003      	beq.n	8008f5a <_scanf_float+0x6e>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f5e:	f1ba 0f01 	cmp.w	sl, #1
 8008f62:	f200 8113 	bhi.w	800918c <_scanf_float+0x2a0>
 8008f66:	455e      	cmp	r6, fp
 8008f68:	f200 8105 	bhi.w	8009176 <_scanf_float+0x28a>
 8008f6c:	2501      	movs	r5, #1
 8008f6e:	4628      	mov	r0, r5
 8008f70:	b007      	add	sp, #28
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f7a:	2a0d      	cmp	r2, #13
 8008f7c:	d8e6      	bhi.n	8008f4c <_scanf_float+0x60>
 8008f7e:	a101      	add	r1, pc, #4	; (adr r1, 8008f84 <_scanf_float+0x98>)
 8008f80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f84:	080090c3 	.word	0x080090c3
 8008f88:	08008f4d 	.word	0x08008f4d
 8008f8c:	08008f4d 	.word	0x08008f4d
 8008f90:	08008f4d 	.word	0x08008f4d
 8008f94:	08009123 	.word	0x08009123
 8008f98:	080090fb 	.word	0x080090fb
 8008f9c:	08008f4d 	.word	0x08008f4d
 8008fa0:	08008f4d 	.word	0x08008f4d
 8008fa4:	080090d1 	.word	0x080090d1
 8008fa8:	08008f4d 	.word	0x08008f4d
 8008fac:	08008f4d 	.word	0x08008f4d
 8008fb0:	08008f4d 	.word	0x08008f4d
 8008fb4:	08008f4d 	.word	0x08008f4d
 8008fb8:	08009089 	.word	0x08009089
 8008fbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008fc0:	e7db      	b.n	8008f7a <_scanf_float+0x8e>
 8008fc2:	290e      	cmp	r1, #14
 8008fc4:	d8c2      	bhi.n	8008f4c <_scanf_float+0x60>
 8008fc6:	a001      	add	r0, pc, #4	; (adr r0, 8008fcc <_scanf_float+0xe0>)
 8008fc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008fcc:	0800907b 	.word	0x0800907b
 8008fd0:	08008f4d 	.word	0x08008f4d
 8008fd4:	0800907b 	.word	0x0800907b
 8008fd8:	0800910f 	.word	0x0800910f
 8008fdc:	08008f4d 	.word	0x08008f4d
 8008fe0:	08009029 	.word	0x08009029
 8008fe4:	08009065 	.word	0x08009065
 8008fe8:	08009065 	.word	0x08009065
 8008fec:	08009065 	.word	0x08009065
 8008ff0:	08009065 	.word	0x08009065
 8008ff4:	08009065 	.word	0x08009065
 8008ff8:	08009065 	.word	0x08009065
 8008ffc:	08009065 	.word	0x08009065
 8009000:	08009065 	.word	0x08009065
 8009004:	08009065 	.word	0x08009065
 8009008:	2b6e      	cmp	r3, #110	; 0x6e
 800900a:	d809      	bhi.n	8009020 <_scanf_float+0x134>
 800900c:	2b60      	cmp	r3, #96	; 0x60
 800900e:	d8b2      	bhi.n	8008f76 <_scanf_float+0x8a>
 8009010:	2b54      	cmp	r3, #84	; 0x54
 8009012:	d077      	beq.n	8009104 <_scanf_float+0x218>
 8009014:	2b59      	cmp	r3, #89	; 0x59
 8009016:	d199      	bne.n	8008f4c <_scanf_float+0x60>
 8009018:	2d07      	cmp	r5, #7
 800901a:	d197      	bne.n	8008f4c <_scanf_float+0x60>
 800901c:	2508      	movs	r5, #8
 800901e:	e029      	b.n	8009074 <_scanf_float+0x188>
 8009020:	2b74      	cmp	r3, #116	; 0x74
 8009022:	d06f      	beq.n	8009104 <_scanf_float+0x218>
 8009024:	2b79      	cmp	r3, #121	; 0x79
 8009026:	e7f6      	b.n	8009016 <_scanf_float+0x12a>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	05c8      	lsls	r0, r1, #23
 800902c:	d51a      	bpl.n	8009064 <_scanf_float+0x178>
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009034:	6021      	str	r1, [r4, #0]
 8009036:	f109 0901 	add.w	r9, r9, #1
 800903a:	b11b      	cbz	r3, 8009044 <_scanf_float+0x158>
 800903c:	3b01      	subs	r3, #1
 800903e:	3201      	adds	r2, #1
 8009040:	9302      	str	r3, [sp, #8]
 8009042:	60a2      	str	r2, [r4, #8]
 8009044:	68a3      	ldr	r3, [r4, #8]
 8009046:	3b01      	subs	r3, #1
 8009048:	60a3      	str	r3, [r4, #8]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	3301      	adds	r3, #1
 800904e:	6123      	str	r3, [r4, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3b01      	subs	r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	f340 8084 	ble.w	8009164 <_scanf_float+0x278>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	e766      	b.n	8008f32 <_scanf_float+0x46>
 8009064:	eb1a 0f05 	cmn.w	sl, r5
 8009068:	f47f af70 	bne.w	8008f4c <_scanf_float+0x60>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009072:	6022      	str	r2, [r4, #0]
 8009074:	f806 3b01 	strb.w	r3, [r6], #1
 8009078:	e7e4      	b.n	8009044 <_scanf_float+0x158>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	0610      	lsls	r0, r2, #24
 800907e:	f57f af65 	bpl.w	8008f4c <_scanf_float+0x60>
 8009082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009086:	e7f4      	b.n	8009072 <_scanf_float+0x186>
 8009088:	f1ba 0f00 	cmp.w	sl, #0
 800908c:	d10e      	bne.n	80090ac <_scanf_float+0x1c0>
 800908e:	f1b9 0f00 	cmp.w	r9, #0
 8009092:	d10e      	bne.n	80090b2 <_scanf_float+0x1c6>
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800909a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800909e:	d108      	bne.n	80090b2 <_scanf_float+0x1c6>
 80090a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	f04f 0a01 	mov.w	sl, #1
 80090aa:	e7e3      	b.n	8009074 <_scanf_float+0x188>
 80090ac:	f1ba 0f02 	cmp.w	sl, #2
 80090b0:	d055      	beq.n	800915e <_scanf_float+0x272>
 80090b2:	2d01      	cmp	r5, #1
 80090b4:	d002      	beq.n	80090bc <_scanf_float+0x1d0>
 80090b6:	2d04      	cmp	r5, #4
 80090b8:	f47f af48 	bne.w	8008f4c <_scanf_float+0x60>
 80090bc:	3501      	adds	r5, #1
 80090be:	b2ed      	uxtb	r5, r5
 80090c0:	e7d8      	b.n	8009074 <_scanf_float+0x188>
 80090c2:	f1ba 0f01 	cmp.w	sl, #1
 80090c6:	f47f af41 	bne.w	8008f4c <_scanf_float+0x60>
 80090ca:	f04f 0a02 	mov.w	sl, #2
 80090ce:	e7d1      	b.n	8009074 <_scanf_float+0x188>
 80090d0:	b97d      	cbnz	r5, 80090f2 <_scanf_float+0x206>
 80090d2:	f1b9 0f00 	cmp.w	r9, #0
 80090d6:	f47f af3c 	bne.w	8008f52 <_scanf_float+0x66>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090e4:	f47f af39 	bne.w	8008f5a <_scanf_float+0x6e>
 80090e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090ec:	6022      	str	r2, [r4, #0]
 80090ee:	2501      	movs	r5, #1
 80090f0:	e7c0      	b.n	8009074 <_scanf_float+0x188>
 80090f2:	2d03      	cmp	r5, #3
 80090f4:	d0e2      	beq.n	80090bc <_scanf_float+0x1d0>
 80090f6:	2d05      	cmp	r5, #5
 80090f8:	e7de      	b.n	80090b8 <_scanf_float+0x1cc>
 80090fa:	2d02      	cmp	r5, #2
 80090fc:	f47f af26 	bne.w	8008f4c <_scanf_float+0x60>
 8009100:	2503      	movs	r5, #3
 8009102:	e7b7      	b.n	8009074 <_scanf_float+0x188>
 8009104:	2d06      	cmp	r5, #6
 8009106:	f47f af21 	bne.w	8008f4c <_scanf_float+0x60>
 800910a:	2507      	movs	r5, #7
 800910c:	e7b2      	b.n	8009074 <_scanf_float+0x188>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	0591      	lsls	r1, r2, #22
 8009112:	f57f af1b 	bpl.w	8008f4c <_scanf_float+0x60>
 8009116:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800911a:	6022      	str	r2, [r4, #0]
 800911c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009120:	e7a8      	b.n	8009074 <_scanf_float+0x188>
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009128:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800912c:	d006      	beq.n	800913c <_scanf_float+0x250>
 800912e:	0550      	lsls	r0, r2, #21
 8009130:	f57f af0c 	bpl.w	8008f4c <_scanf_float+0x60>
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	f43f af0f 	beq.w	8008f5a <_scanf_float+0x6e>
 800913c:	0591      	lsls	r1, r2, #22
 800913e:	bf58      	it	pl
 8009140:	9901      	ldrpl	r1, [sp, #4]
 8009142:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009146:	bf58      	it	pl
 8009148:	eba9 0101 	subpl.w	r1, r9, r1
 800914c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009150:	bf58      	it	pl
 8009152:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009156:	6022      	str	r2, [r4, #0]
 8009158:	f04f 0900 	mov.w	r9, #0
 800915c:	e78a      	b.n	8009074 <_scanf_float+0x188>
 800915e:	f04f 0a03 	mov.w	sl, #3
 8009162:	e787      	b.n	8009074 <_scanf_float+0x188>
 8009164:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009168:	4639      	mov	r1, r7
 800916a:	4640      	mov	r0, r8
 800916c:	4798      	blx	r3
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f aedf 	beq.w	8008f32 <_scanf_float+0x46>
 8009174:	e6ea      	b.n	8008f4c <_scanf_float+0x60>
 8009176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800917a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800917e:	463a      	mov	r2, r7
 8009180:	4640      	mov	r0, r8
 8009182:	4798      	blx	r3
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	3b01      	subs	r3, #1
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	e6ec      	b.n	8008f66 <_scanf_float+0x7a>
 800918c:	1e6b      	subs	r3, r5, #1
 800918e:	2b06      	cmp	r3, #6
 8009190:	d825      	bhi.n	80091de <_scanf_float+0x2f2>
 8009192:	2d02      	cmp	r5, #2
 8009194:	d836      	bhi.n	8009204 <_scanf_float+0x318>
 8009196:	455e      	cmp	r6, fp
 8009198:	f67f aee8 	bls.w	8008f6c <_scanf_float+0x80>
 800919c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091a4:	463a      	mov	r2, r7
 80091a6:	4640      	mov	r0, r8
 80091a8:	4798      	blx	r3
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	e7f1      	b.n	8009196 <_scanf_float+0x2aa>
 80091b2:	9802      	ldr	r0, [sp, #8]
 80091b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091bc:	9002      	str	r0, [sp, #8]
 80091be:	463a      	mov	r2, r7
 80091c0:	4640      	mov	r0, r8
 80091c2:	4798      	blx	r3
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	6123      	str	r3, [r4, #16]
 80091ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ce:	fa5f fa8a 	uxtb.w	sl, sl
 80091d2:	f1ba 0f02 	cmp.w	sl, #2
 80091d6:	d1ec      	bne.n	80091b2 <_scanf_float+0x2c6>
 80091d8:	3d03      	subs	r5, #3
 80091da:	b2ed      	uxtb	r5, r5
 80091dc:	1b76      	subs	r6, r6, r5
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	05da      	lsls	r2, r3, #23
 80091e2:	d52f      	bpl.n	8009244 <_scanf_float+0x358>
 80091e4:	055b      	lsls	r3, r3, #21
 80091e6:	d510      	bpl.n	800920a <_scanf_float+0x31e>
 80091e8:	455e      	cmp	r6, fp
 80091ea:	f67f aebf 	bls.w	8008f6c <_scanf_float+0x80>
 80091ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091f6:	463a      	mov	r2, r7
 80091f8:	4640      	mov	r0, r8
 80091fa:	4798      	blx	r3
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	3b01      	subs	r3, #1
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	e7f1      	b.n	80091e8 <_scanf_float+0x2fc>
 8009204:	46aa      	mov	sl, r5
 8009206:	9602      	str	r6, [sp, #8]
 8009208:	e7df      	b.n	80091ca <_scanf_float+0x2de>
 800920a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800920e:	6923      	ldr	r3, [r4, #16]
 8009210:	2965      	cmp	r1, #101	; 0x65
 8009212:	f103 33ff 	add.w	r3, r3, #4294967295
 8009216:	f106 35ff 	add.w	r5, r6, #4294967295
 800921a:	6123      	str	r3, [r4, #16]
 800921c:	d00c      	beq.n	8009238 <_scanf_float+0x34c>
 800921e:	2945      	cmp	r1, #69	; 0x45
 8009220:	d00a      	beq.n	8009238 <_scanf_float+0x34c>
 8009222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009226:	463a      	mov	r2, r7
 8009228:	4640      	mov	r0, r8
 800922a:	4798      	blx	r3
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009232:	3b01      	subs	r3, #1
 8009234:	1eb5      	subs	r5, r6, #2
 8009236:	6123      	str	r3, [r4, #16]
 8009238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800923c:	463a      	mov	r2, r7
 800923e:	4640      	mov	r0, r8
 8009240:	4798      	blx	r3
 8009242:	462e      	mov	r6, r5
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	f015 0510 	ands.w	r5, r5, #16
 800924a:	d14d      	bne.n	80092e8 <_scanf_float+0x3fc>
 800924c:	7035      	strb	r5, [r6, #0]
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009258:	d11a      	bne.n	8009290 <_scanf_float+0x3a4>
 800925a:	9b01      	ldr	r3, [sp, #4]
 800925c:	454b      	cmp	r3, r9
 800925e:	eba3 0209 	sub.w	r2, r3, r9
 8009262:	d122      	bne.n	80092aa <_scanf_float+0x3be>
 8009264:	2200      	movs	r2, #0
 8009266:	4659      	mov	r1, fp
 8009268:	4640      	mov	r0, r8
 800926a:	f000 fecb 	bl	800a004 <_strtod_r>
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	6821      	ldr	r1, [r4, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f011 0f02 	tst.w	r1, #2
 8009278:	f103 0204 	add.w	r2, r3, #4
 800927c:	d020      	beq.n	80092c0 <_scanf_float+0x3d4>
 800927e:	9903      	ldr	r1, [sp, #12]
 8009280:	600a      	str	r2, [r1, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	ed83 0b00 	vstr	d0, [r3]
 8009288:	68e3      	ldr	r3, [r4, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60e3      	str	r3, [r4, #12]
 800928e:	e66e      	b.n	8008f6e <_scanf_float+0x82>
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0e6      	beq.n	8009264 <_scanf_float+0x378>
 8009296:	9905      	ldr	r1, [sp, #20]
 8009298:	230a      	movs	r3, #10
 800929a:	462a      	mov	r2, r5
 800929c:	3101      	adds	r1, #1
 800929e:	4640      	mov	r0, r8
 80092a0:	f000 ff3a 	bl	800a118 <_strtol_r>
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	9e05      	ldr	r6, [sp, #20]
 80092a8:	1ac2      	subs	r2, r0, r3
 80092aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092ae:	429e      	cmp	r6, r3
 80092b0:	bf28      	it	cs
 80092b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092b6:	490d      	ldr	r1, [pc, #52]	; (80092ec <_scanf_float+0x400>)
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f821 	bl	8009300 <siprintf>
 80092be:	e7d1      	b.n	8009264 <_scanf_float+0x378>
 80092c0:	f011 0f04 	tst.w	r1, #4
 80092c4:	9903      	ldr	r1, [sp, #12]
 80092c6:	600a      	str	r2, [r1, #0]
 80092c8:	d1db      	bne.n	8009282 <_scanf_float+0x396>
 80092ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80092ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d2:	681e      	ldr	r6, [r3, #0]
 80092d4:	d705      	bvc.n	80092e2 <_scanf_float+0x3f6>
 80092d6:	4806      	ldr	r0, [pc, #24]	; (80092f0 <_scanf_float+0x404>)
 80092d8:	f000 f80c 	bl	80092f4 <nanf>
 80092dc:	ed86 0a00 	vstr	s0, [r6]
 80092e0:	e7d2      	b.n	8009288 <_scanf_float+0x39c>
 80092e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80092e6:	e7f9      	b.n	80092dc <_scanf_float+0x3f0>
 80092e8:	2500      	movs	r5, #0
 80092ea:	e640      	b.n	8008f6e <_scanf_float+0x82>
 80092ec:	0800d85a 	.word	0x0800d85a
 80092f0:	0800db8b 	.word	0x0800db8b

080092f4 <nanf>:
 80092f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092fc <nanf+0x8>
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	7fc00000 	.word	0x7fc00000

08009300 <siprintf>:
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	b500      	push	{lr}
 8009304:	b09c      	sub	sp, #112	; 0x70
 8009306:	ab1d      	add	r3, sp, #116	; 0x74
 8009308:	9002      	str	r0, [sp, #8]
 800930a:	9006      	str	r0, [sp, #24]
 800930c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <siprintf+0x38>)
 8009312:	9107      	str	r1, [sp, #28]
 8009314:	9104      	str	r1, [sp, #16]
 8009316:	4909      	ldr	r1, [pc, #36]	; (800933c <siprintf+0x3c>)
 8009318:	f853 2b04 	ldr.w	r2, [r3], #4
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	a902      	add	r1, sp, #8
 8009324:	f002 fed8 	bl	800c0d8 <_svfiprintf_r>
 8009328:	9b02      	ldr	r3, [sp, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	b01c      	add	sp, #112	; 0x70
 8009330:	f85d eb04 	ldr.w	lr, [sp], #4
 8009334:	b003      	add	sp, #12
 8009336:	4770      	bx	lr
 8009338:	20000058 	.word	0x20000058
 800933c:	ffff0208 	.word	0xffff0208

08009340 <siscanf>:
 8009340:	b40e      	push	{r1, r2, r3}
 8009342:	b510      	push	{r4, lr}
 8009344:	b09f      	sub	sp, #124	; 0x7c
 8009346:	ac21      	add	r4, sp, #132	; 0x84
 8009348:	f44f 7101 	mov.w	r1, #516	; 0x204
 800934c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009350:	9201      	str	r2, [sp, #4]
 8009352:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009356:	9004      	str	r0, [sp, #16]
 8009358:	9008      	str	r0, [sp, #32]
 800935a:	f7f6 ff71 	bl	8000240 <strlen>
 800935e:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <siscanf+0x50>)
 8009360:	9005      	str	r0, [sp, #20]
 8009362:	9009      	str	r0, [sp, #36]	; 0x24
 8009364:	930d      	str	r3, [sp, #52]	; 0x34
 8009366:	480b      	ldr	r0, [pc, #44]	; (8009394 <siscanf+0x54>)
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	9403      	str	r4, [sp, #12]
 800936e:	2300      	movs	r3, #0
 8009370:	9311      	str	r3, [sp, #68]	; 0x44
 8009372:	9316      	str	r3, [sp, #88]	; 0x58
 8009374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009378:	f8ad 301e 	strh.w	r3, [sp, #30]
 800937c:	a904      	add	r1, sp, #16
 800937e:	4623      	mov	r3, r4
 8009380:	f003 f804 	bl	800c38c <__ssvfiscanf_r>
 8009384:	b01f      	add	sp, #124	; 0x7c
 8009386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938a:	b003      	add	sp, #12
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	080093bb 	.word	0x080093bb
 8009394:	20000058 	.word	0x20000058

08009398 <__sread>:
 8009398:	b510      	push	{r4, lr}
 800939a:	460c      	mov	r4, r1
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	f003 fab8 	bl	800c914 <_read_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	bfab      	itete	ge
 80093a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093aa:	89a3      	ldrhlt	r3, [r4, #12]
 80093ac:	181b      	addge	r3, r3, r0
 80093ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093b2:	bfac      	ite	ge
 80093b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80093b6:	81a3      	strhlt	r3, [r4, #12]
 80093b8:	bd10      	pop	{r4, pc}

080093ba <__seofread>:
 80093ba:	2000      	movs	r0, #0
 80093bc:	4770      	bx	lr

080093be <__swrite>:
 80093be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	461f      	mov	r7, r3
 80093c4:	898b      	ldrh	r3, [r1, #12]
 80093c6:	05db      	lsls	r3, r3, #23
 80093c8:	4605      	mov	r5, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	4616      	mov	r6, r2
 80093ce:	d505      	bpl.n	80093dc <__swrite+0x1e>
 80093d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d4:	2302      	movs	r3, #2
 80093d6:	2200      	movs	r2, #0
 80093d8:	f002 f880 	bl	800b4dc <_lseek_r>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	4628      	mov	r0, r5
 80093ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	f000 becd 	b.w	800a190 <_write_r>

080093f6 <__sseek>:
 80093f6:	b510      	push	{r4, lr}
 80093f8:	460c      	mov	r4, r1
 80093fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093fe:	f002 f86d 	bl	800b4dc <_lseek_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	bf15      	itete	ne
 8009408:	6560      	strne	r0, [r4, #84]	; 0x54
 800940a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800940e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009412:	81a3      	strheq	r3, [r4, #12]
 8009414:	bf18      	it	ne
 8009416:	81a3      	strhne	r3, [r4, #12]
 8009418:	bd10      	pop	{r4, pc}

0800941a <__sclose>:
 800941a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941e:	f000 bec9 	b.w	800a1b4 <_close_r>

08009422 <sulp>:
 8009422:	b570      	push	{r4, r5, r6, lr}
 8009424:	4604      	mov	r4, r0
 8009426:	460d      	mov	r5, r1
 8009428:	4616      	mov	r6, r2
 800942a:	ec45 4b10 	vmov	d0, r4, r5
 800942e:	f002 fbed 	bl	800bc0c <__ulp>
 8009432:	b17e      	cbz	r6, 8009454 <sulp+0x32>
 8009434:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009438:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800943c:	2b00      	cmp	r3, #0
 800943e:	dd09      	ble.n	8009454 <sulp+0x32>
 8009440:	051b      	lsls	r3, r3, #20
 8009442:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009446:	2000      	movs	r0, #0
 8009448:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800944c:	ec41 0b17 	vmov	d7, r0, r1
 8009450:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009454:	bd70      	pop	{r4, r5, r6, pc}
	...

08009458 <_strtod_l>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	ed2d 8b0c 	vpush	{d8-d13}
 8009460:	b09d      	sub	sp, #116	; 0x74
 8009462:	461f      	mov	r7, r3
 8009464:	2300      	movs	r3, #0
 8009466:	9318      	str	r3, [sp, #96]	; 0x60
 8009468:	4ba6      	ldr	r3, [pc, #664]	; (8009704 <_strtod_l+0x2ac>)
 800946a:	9213      	str	r2, [sp, #76]	; 0x4c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	9308      	str	r3, [sp, #32]
 8009470:	4604      	mov	r4, r0
 8009472:	4618      	mov	r0, r3
 8009474:	468a      	mov	sl, r1
 8009476:	f7f6 fee3 	bl	8000240 <strlen>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	4605      	mov	r5, r0
 8009480:	f04f 0900 	mov.w	r9, #0
 8009484:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	2a2b      	cmp	r2, #43	; 0x2b
 800948e:	d04d      	beq.n	800952c <_strtod_l+0xd4>
 8009490:	d83a      	bhi.n	8009508 <_strtod_l+0xb0>
 8009492:	2a0d      	cmp	r2, #13
 8009494:	d833      	bhi.n	80094fe <_strtod_l+0xa6>
 8009496:	2a08      	cmp	r2, #8
 8009498:	d833      	bhi.n	8009502 <_strtod_l+0xaa>
 800949a:	2a00      	cmp	r2, #0
 800949c:	d03d      	beq.n	800951a <_strtod_l+0xc2>
 800949e:	2300      	movs	r3, #0
 80094a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80094a4:	7833      	ldrb	r3, [r6, #0]
 80094a6:	2b30      	cmp	r3, #48	; 0x30
 80094a8:	f040 80b6 	bne.w	8009618 <_strtod_l+0x1c0>
 80094ac:	7873      	ldrb	r3, [r6, #1]
 80094ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094b2:	2b58      	cmp	r3, #88	; 0x58
 80094b4:	d16d      	bne.n	8009592 <_strtod_l+0x13a>
 80094b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	ab18      	add	r3, sp, #96	; 0x60
 80094bc:	9702      	str	r7, [sp, #8]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4a91      	ldr	r2, [pc, #580]	; (8009708 <_strtod_l+0x2b0>)
 80094c2:	ab19      	add	r3, sp, #100	; 0x64
 80094c4:	a917      	add	r1, sp, #92	; 0x5c
 80094c6:	4620      	mov	r0, r4
 80094c8:	f001 fcfc 	bl	800aec4 <__gethex>
 80094cc:	f010 0507 	ands.w	r5, r0, #7
 80094d0:	4607      	mov	r7, r0
 80094d2:	d005      	beq.n	80094e0 <_strtod_l+0x88>
 80094d4:	2d06      	cmp	r5, #6
 80094d6:	d12b      	bne.n	8009530 <_strtod_l+0xd8>
 80094d8:	3601      	adds	r6, #1
 80094da:	2300      	movs	r3, #0
 80094dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80094de:	930b      	str	r3, [sp, #44]	; 0x2c
 80094e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 856e 	bne.w	8009fc4 <_strtod_l+0xb6c>
 80094e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ea:	b1e3      	cbz	r3, 8009526 <_strtod_l+0xce>
 80094ec:	ec49 8b17 	vmov	d7, r8, r9
 80094f0:	eeb1 0b47 	vneg.f64	d0, d7
 80094f4:	b01d      	add	sp, #116	; 0x74
 80094f6:	ecbd 8b0c 	vpop	{d8-d13}
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	2a20      	cmp	r2, #32
 8009500:	d1cd      	bne.n	800949e <_strtod_l+0x46>
 8009502:	3301      	adds	r3, #1
 8009504:	9317      	str	r3, [sp, #92]	; 0x5c
 8009506:	e7bf      	b.n	8009488 <_strtod_l+0x30>
 8009508:	2a2d      	cmp	r2, #45	; 0x2d
 800950a:	d1c8      	bne.n	800949e <_strtod_l+0x46>
 800950c:	2201      	movs	r2, #1
 800950e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	9217      	str	r2, [sp, #92]	; 0x5c
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1c3      	bne.n	80094a2 <_strtod_l+0x4a>
 800951a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800951c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009520:	2b00      	cmp	r3, #0
 8009522:	f040 854d 	bne.w	8009fc0 <_strtod_l+0xb68>
 8009526:	ec49 8b10 	vmov	d0, r8, r9
 800952a:	e7e3      	b.n	80094f4 <_strtod_l+0x9c>
 800952c:	2200      	movs	r2, #0
 800952e:	e7ee      	b.n	800950e <_strtod_l+0xb6>
 8009530:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009532:	b13a      	cbz	r2, 8009544 <_strtod_l+0xec>
 8009534:	2135      	movs	r1, #53	; 0x35
 8009536:	a81a      	add	r0, sp, #104	; 0x68
 8009538:	f002 fc74 	bl	800be24 <__copybits>
 800953c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800953e:	4620      	mov	r0, r4
 8009540:	f002 f838 	bl	800b5b4 <_Bfree>
 8009544:	3d01      	subs	r5, #1
 8009546:	2d05      	cmp	r5, #5
 8009548:	d807      	bhi.n	800955a <_strtod_l+0x102>
 800954a:	e8df f005 	tbb	[pc, r5]
 800954e:	0b0e      	.short	0x0b0e
 8009550:	030e1d18 	.word	0x030e1d18
 8009554:	f04f 0900 	mov.w	r9, #0
 8009558:	46c8      	mov	r8, r9
 800955a:	073b      	lsls	r3, r7, #28
 800955c:	d5c0      	bpl.n	80094e0 <_strtod_l+0x88>
 800955e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009562:	e7bd      	b.n	80094e0 <_strtod_l+0x88>
 8009564:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8009568:	e7f7      	b.n	800955a <_strtod_l+0x102>
 800956a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800956e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009570:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009574:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009578:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800957c:	e7ed      	b.n	800955a <_strtod_l+0x102>
 800957e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800970c <_strtod_l+0x2b4>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	e7e8      	b.n	800955a <_strtod_l+0x102>
 8009588:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800958c:	f04f 38ff 	mov.w	r8, #4294967295
 8009590:	e7e3      	b.n	800955a <_strtod_l+0x102>
 8009592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	9217      	str	r2, [sp, #92]	; 0x5c
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b30      	cmp	r3, #48	; 0x30
 800959c:	d0f9      	beq.n	8009592 <_strtod_l+0x13a>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d09e      	beq.n	80094e0 <_strtod_l+0x88>
 80095a2:	2301      	movs	r3, #1
 80095a4:	9306      	str	r3, [sp, #24]
 80095a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095a8:	930c      	str	r3, [sp, #48]	; 0x30
 80095aa:	2300      	movs	r3, #0
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	930a      	str	r3, [sp, #40]	; 0x28
 80095b0:	461e      	mov	r6, r3
 80095b2:	220a      	movs	r2, #10
 80095b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80095b6:	f890 b000 	ldrb.w	fp, [r0]
 80095ba:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80095be:	b2d9      	uxtb	r1, r3
 80095c0:	2909      	cmp	r1, #9
 80095c2:	d92b      	bls.n	800961c <_strtod_l+0x1c4>
 80095c4:	9908      	ldr	r1, [sp, #32]
 80095c6:	462a      	mov	r2, r5
 80095c8:	f003 fa08 	bl	800c9dc <strncmp>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d035      	beq.n	800963c <_strtod_l+0x1e4>
 80095d0:	2000      	movs	r0, #0
 80095d2:	465a      	mov	r2, fp
 80095d4:	4633      	mov	r3, r6
 80095d6:	4683      	mov	fp, r0
 80095d8:	4601      	mov	r1, r0
 80095da:	2a65      	cmp	r2, #101	; 0x65
 80095dc:	d001      	beq.n	80095e2 <_strtod_l+0x18a>
 80095de:	2a45      	cmp	r2, #69	; 0x45
 80095e0:	d118      	bne.n	8009614 <_strtod_l+0x1bc>
 80095e2:	b91b      	cbnz	r3, 80095ec <_strtod_l+0x194>
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	4303      	orrs	r3, r0
 80095e8:	d097      	beq.n	800951a <_strtod_l+0xc2>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80095f0:	f10a 0201 	add.w	r2, sl, #1
 80095f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80095f6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80095fa:	2a2b      	cmp	r2, #43	; 0x2b
 80095fc:	d077      	beq.n	80096ee <_strtod_l+0x296>
 80095fe:	2a2d      	cmp	r2, #45	; 0x2d
 8009600:	d07d      	beq.n	80096fe <_strtod_l+0x2a6>
 8009602:	f04f 0e00 	mov.w	lr, #0
 8009606:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800960a:	2d09      	cmp	r5, #9
 800960c:	f240 8084 	bls.w	8009718 <_strtod_l+0x2c0>
 8009610:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009614:	2500      	movs	r5, #0
 8009616:	e09f      	b.n	8009758 <_strtod_l+0x300>
 8009618:	2300      	movs	r3, #0
 800961a:	e7c3      	b.n	80095a4 <_strtod_l+0x14c>
 800961c:	2e08      	cmp	r6, #8
 800961e:	bfd5      	itete	le
 8009620:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009622:	9904      	ldrgt	r1, [sp, #16]
 8009624:	fb02 3301 	mlale	r3, r2, r1, r3
 8009628:	fb02 3301 	mlagt	r3, r2, r1, r3
 800962c:	f100 0001 	add.w	r0, r0, #1
 8009630:	bfd4      	ite	le
 8009632:	930a      	strle	r3, [sp, #40]	; 0x28
 8009634:	9304      	strgt	r3, [sp, #16]
 8009636:	3601      	adds	r6, #1
 8009638:	9017      	str	r0, [sp, #92]	; 0x5c
 800963a:	e7bb      	b.n	80095b4 <_strtod_l+0x15c>
 800963c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800963e:	195a      	adds	r2, r3, r5
 8009640:	9217      	str	r2, [sp, #92]	; 0x5c
 8009642:	5d5a      	ldrb	r2, [r3, r5]
 8009644:	b3ae      	cbz	r6, 80096b2 <_strtod_l+0x25a>
 8009646:	4683      	mov	fp, r0
 8009648:	4633      	mov	r3, r6
 800964a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800964e:	2909      	cmp	r1, #9
 8009650:	d912      	bls.n	8009678 <_strtod_l+0x220>
 8009652:	2101      	movs	r1, #1
 8009654:	e7c1      	b.n	80095da <_strtod_l+0x182>
 8009656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	9217      	str	r2, [sp, #92]	; 0x5c
 800965c:	785a      	ldrb	r2, [r3, #1]
 800965e:	3001      	adds	r0, #1
 8009660:	2a30      	cmp	r2, #48	; 0x30
 8009662:	d0f8      	beq.n	8009656 <_strtod_l+0x1fe>
 8009664:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009668:	2b08      	cmp	r3, #8
 800966a:	f200 84b0 	bhi.w	8009fce <_strtod_l+0xb76>
 800966e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009670:	930c      	str	r3, [sp, #48]	; 0x30
 8009672:	4683      	mov	fp, r0
 8009674:	2000      	movs	r0, #0
 8009676:	4603      	mov	r3, r0
 8009678:	3a30      	subs	r2, #48	; 0x30
 800967a:	f100 0101 	add.w	r1, r0, #1
 800967e:	d012      	beq.n	80096a6 <_strtod_l+0x24e>
 8009680:	448b      	add	fp, r1
 8009682:	eb00 0c03 	add.w	ip, r0, r3
 8009686:	4619      	mov	r1, r3
 8009688:	250a      	movs	r5, #10
 800968a:	4561      	cmp	r1, ip
 800968c:	d113      	bne.n	80096b6 <_strtod_l+0x25e>
 800968e:	1819      	adds	r1, r3, r0
 8009690:	2908      	cmp	r1, #8
 8009692:	f103 0301 	add.w	r3, r3, #1
 8009696:	4403      	add	r3, r0
 8009698:	dc1d      	bgt.n	80096d6 <_strtod_l+0x27e>
 800969a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800969c:	210a      	movs	r1, #10
 800969e:	fb01 2200 	mla	r2, r1, r0, r2
 80096a2:	920a      	str	r2, [sp, #40]	; 0x28
 80096a4:	2100      	movs	r1, #0
 80096a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096a8:	1c50      	adds	r0, r2, #1
 80096aa:	9017      	str	r0, [sp, #92]	; 0x5c
 80096ac:	7852      	ldrb	r2, [r2, #1]
 80096ae:	4608      	mov	r0, r1
 80096b0:	e7cb      	b.n	800964a <_strtod_l+0x1f2>
 80096b2:	4630      	mov	r0, r6
 80096b4:	e7d4      	b.n	8009660 <_strtod_l+0x208>
 80096b6:	2908      	cmp	r1, #8
 80096b8:	dc04      	bgt.n	80096c4 <_strtod_l+0x26c>
 80096ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80096bc:	436f      	muls	r7, r5
 80096be:	970a      	str	r7, [sp, #40]	; 0x28
 80096c0:	3101      	adds	r1, #1
 80096c2:	e7e2      	b.n	800968a <_strtod_l+0x232>
 80096c4:	f101 0e01 	add.w	lr, r1, #1
 80096c8:	f1be 0f10 	cmp.w	lr, #16
 80096cc:	bfde      	ittt	le
 80096ce:	9f04      	ldrle	r7, [sp, #16]
 80096d0:	436f      	mulle	r7, r5
 80096d2:	9704      	strle	r7, [sp, #16]
 80096d4:	e7f4      	b.n	80096c0 <_strtod_l+0x268>
 80096d6:	2b10      	cmp	r3, #16
 80096d8:	bfdf      	itttt	le
 80096da:	9804      	ldrle	r0, [sp, #16]
 80096dc:	210a      	movle	r1, #10
 80096de:	fb01 2200 	mlale	r2, r1, r0, r2
 80096e2:	9204      	strle	r2, [sp, #16]
 80096e4:	e7de      	b.n	80096a4 <_strtod_l+0x24c>
 80096e6:	f04f 0b00 	mov.w	fp, #0
 80096ea:	2101      	movs	r1, #1
 80096ec:	e77a      	b.n	80095e4 <_strtod_l+0x18c>
 80096ee:	f04f 0e00 	mov.w	lr, #0
 80096f2:	f10a 0202 	add.w	r2, sl, #2
 80096f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80096f8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80096fc:	e783      	b.n	8009606 <_strtod_l+0x1ae>
 80096fe:	f04f 0e01 	mov.w	lr, #1
 8009702:	e7f6      	b.n	80096f2 <_strtod_l+0x29a>
 8009704:	0800d9b0 	.word	0x0800d9b0
 8009708:	0800d860 	.word	0x0800d860
 800970c:	7ff00000 	.word	0x7ff00000
 8009710:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009712:	1c55      	adds	r5, r2, #1
 8009714:	9517      	str	r5, [sp, #92]	; 0x5c
 8009716:	7852      	ldrb	r2, [r2, #1]
 8009718:	2a30      	cmp	r2, #48	; 0x30
 800971a:	d0f9      	beq.n	8009710 <_strtod_l+0x2b8>
 800971c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009720:	2d08      	cmp	r5, #8
 8009722:	f63f af77 	bhi.w	8009614 <_strtod_l+0x1bc>
 8009726:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800972a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800972c:	9208      	str	r2, [sp, #32]
 800972e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009730:	1c55      	adds	r5, r2, #1
 8009732:	9517      	str	r5, [sp, #92]	; 0x5c
 8009734:	7852      	ldrb	r2, [r2, #1]
 8009736:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800973a:	2f09      	cmp	r7, #9
 800973c:	d937      	bls.n	80097ae <_strtod_l+0x356>
 800973e:	9f08      	ldr	r7, [sp, #32]
 8009740:	1bed      	subs	r5, r5, r7
 8009742:	2d08      	cmp	r5, #8
 8009744:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009748:	dc02      	bgt.n	8009750 <_strtod_l+0x2f8>
 800974a:	4565      	cmp	r5, ip
 800974c:	bfa8      	it	ge
 800974e:	4665      	movge	r5, ip
 8009750:	f1be 0f00 	cmp.w	lr, #0
 8009754:	d000      	beq.n	8009758 <_strtod_l+0x300>
 8009756:	426d      	negs	r5, r5
 8009758:	2b00      	cmp	r3, #0
 800975a:	d14f      	bne.n	80097fc <_strtod_l+0x3a4>
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	4303      	orrs	r3, r0
 8009760:	f47f aebe 	bne.w	80094e0 <_strtod_l+0x88>
 8009764:	2900      	cmp	r1, #0
 8009766:	f47f aed8 	bne.w	800951a <_strtod_l+0xc2>
 800976a:	2a69      	cmp	r2, #105	; 0x69
 800976c:	d027      	beq.n	80097be <_strtod_l+0x366>
 800976e:	dc24      	bgt.n	80097ba <_strtod_l+0x362>
 8009770:	2a49      	cmp	r2, #73	; 0x49
 8009772:	d024      	beq.n	80097be <_strtod_l+0x366>
 8009774:	2a4e      	cmp	r2, #78	; 0x4e
 8009776:	f47f aed0 	bne.w	800951a <_strtod_l+0xc2>
 800977a:	499b      	ldr	r1, [pc, #620]	; (80099e8 <_strtod_l+0x590>)
 800977c:	a817      	add	r0, sp, #92	; 0x5c
 800977e:	f001 fdf9 	bl	800b374 <__match>
 8009782:	2800      	cmp	r0, #0
 8009784:	f43f aec9 	beq.w	800951a <_strtod_l+0xc2>
 8009788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b28      	cmp	r3, #40	; 0x28
 800978e:	d12d      	bne.n	80097ec <_strtod_l+0x394>
 8009790:	4996      	ldr	r1, [pc, #600]	; (80099ec <_strtod_l+0x594>)
 8009792:	aa1a      	add	r2, sp, #104	; 0x68
 8009794:	a817      	add	r0, sp, #92	; 0x5c
 8009796:	f001 fe01 	bl	800b39c <__hexnan>
 800979a:	2805      	cmp	r0, #5
 800979c:	d126      	bne.n	80097ec <_strtod_l+0x394>
 800979e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80097a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80097a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80097ac:	e698      	b.n	80094e0 <_strtod_l+0x88>
 80097ae:	250a      	movs	r5, #10
 80097b0:	fb05 250c 	mla	r5, r5, ip, r2
 80097b4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80097b8:	e7b9      	b.n	800972e <_strtod_l+0x2d6>
 80097ba:	2a6e      	cmp	r2, #110	; 0x6e
 80097bc:	e7db      	b.n	8009776 <_strtod_l+0x31e>
 80097be:	498c      	ldr	r1, [pc, #560]	; (80099f0 <_strtod_l+0x598>)
 80097c0:	a817      	add	r0, sp, #92	; 0x5c
 80097c2:	f001 fdd7 	bl	800b374 <__match>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f43f aea7 	beq.w	800951a <_strtod_l+0xc2>
 80097cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ce:	4989      	ldr	r1, [pc, #548]	; (80099f4 <_strtod_l+0x59c>)
 80097d0:	3b01      	subs	r3, #1
 80097d2:	a817      	add	r0, sp, #92	; 0x5c
 80097d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80097d6:	f001 fdcd 	bl	800b374 <__match>
 80097da:	b910      	cbnz	r0, 80097e2 <_strtod_l+0x38a>
 80097dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097de:	3301      	adds	r3, #1
 80097e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80097e2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009a08 <_strtod_l+0x5b0>
 80097e6:	f04f 0800 	mov.w	r8, #0
 80097ea:	e679      	b.n	80094e0 <_strtod_l+0x88>
 80097ec:	4882      	ldr	r0, [pc, #520]	; (80099f8 <_strtod_l+0x5a0>)
 80097ee:	f003 f8a3 	bl	800c938 <nan>
 80097f2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80097f6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80097fa:	e671      	b.n	80094e0 <_strtod_l+0x88>
 80097fc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009800:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009804:	eba5 020b 	sub.w	r2, r5, fp
 8009808:	2e00      	cmp	r6, #0
 800980a:	bf08      	it	eq
 800980c:	461e      	moveq	r6, r3
 800980e:	2b10      	cmp	r3, #16
 8009810:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009814:	9206      	str	r2, [sp, #24]
 8009816:	461a      	mov	r2, r3
 8009818:	bfa8      	it	ge
 800981a:	2210      	movge	r2, #16
 800981c:	2b09      	cmp	r3, #9
 800981e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009822:	dd0e      	ble.n	8009842 <_strtod_l+0x3ea>
 8009824:	4975      	ldr	r1, [pc, #468]	; (80099fc <_strtod_l+0x5a4>)
 8009826:	eddd 7a04 	vldr	s15, [sp, #16]
 800982a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800982e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8009832:	ed9d 5b08 	vldr	d5, [sp, #32]
 8009836:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800983a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800983e:	ec59 8b17 	vmov	r8, r9, d7
 8009842:	2b0f      	cmp	r3, #15
 8009844:	dc37      	bgt.n	80098b6 <_strtod_l+0x45e>
 8009846:	9906      	ldr	r1, [sp, #24]
 8009848:	2900      	cmp	r1, #0
 800984a:	f43f ae49 	beq.w	80094e0 <_strtod_l+0x88>
 800984e:	dd23      	ble.n	8009898 <_strtod_l+0x440>
 8009850:	2916      	cmp	r1, #22
 8009852:	dc0b      	bgt.n	800986c <_strtod_l+0x414>
 8009854:	4b69      	ldr	r3, [pc, #420]	; (80099fc <_strtod_l+0x5a4>)
 8009856:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800985a:	ed93 7b00 	vldr	d7, [r3]
 800985e:	ec49 8b16 	vmov	d6, r8, r9
 8009862:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009866:	ec59 8b17 	vmov	r8, r9, d7
 800986a:	e639      	b.n	80094e0 <_strtod_l+0x88>
 800986c:	9806      	ldr	r0, [sp, #24]
 800986e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009872:	4281      	cmp	r1, r0
 8009874:	db1f      	blt.n	80098b6 <_strtod_l+0x45e>
 8009876:	4a61      	ldr	r2, [pc, #388]	; (80099fc <_strtod_l+0x5a4>)
 8009878:	f1c3 030f 	rsb	r3, r3, #15
 800987c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009880:	ed91 7b00 	vldr	d7, [r1]
 8009884:	ec49 8b16 	vmov	d6, r8, r9
 8009888:	1ac3      	subs	r3, r0, r3
 800988a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800988e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009892:	ed92 6b00 	vldr	d6, [r2]
 8009896:	e7e4      	b.n	8009862 <_strtod_l+0x40a>
 8009898:	9906      	ldr	r1, [sp, #24]
 800989a:	3116      	adds	r1, #22
 800989c:	db0b      	blt.n	80098b6 <_strtod_l+0x45e>
 800989e:	4b57      	ldr	r3, [pc, #348]	; (80099fc <_strtod_l+0x5a4>)
 80098a0:	ebab 0505 	sub.w	r5, fp, r5
 80098a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80098a8:	ed95 7b00 	vldr	d7, [r5]
 80098ac:	ec49 8b16 	vmov	d6, r8, r9
 80098b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80098b4:	e7d7      	b.n	8009866 <_strtod_l+0x40e>
 80098b6:	9906      	ldr	r1, [sp, #24]
 80098b8:	1a9a      	subs	r2, r3, r2
 80098ba:	440a      	add	r2, r1
 80098bc:	2a00      	cmp	r2, #0
 80098be:	dd74      	ble.n	80099aa <_strtod_l+0x552>
 80098c0:	f012 000f 	ands.w	r0, r2, #15
 80098c4:	d00a      	beq.n	80098dc <_strtod_l+0x484>
 80098c6:	494d      	ldr	r1, [pc, #308]	; (80099fc <_strtod_l+0x5a4>)
 80098c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80098cc:	ed91 7b00 	vldr	d7, [r1]
 80098d0:	ec49 8b16 	vmov	d6, r8, r9
 80098d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098d8:	ec59 8b17 	vmov	r8, r9, d7
 80098dc:	f032 020f 	bics.w	r2, r2, #15
 80098e0:	d04f      	beq.n	8009982 <_strtod_l+0x52a>
 80098e2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80098e6:	dd22      	ble.n	800992e <_strtod_l+0x4d6>
 80098e8:	2500      	movs	r5, #0
 80098ea:	462e      	mov	r6, r5
 80098ec:	950a      	str	r5, [sp, #40]	; 0x28
 80098ee:	462f      	mov	r7, r5
 80098f0:	2322      	movs	r3, #34	; 0x22
 80098f2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009a08 <_strtod_l+0x5b0>
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f43f adee 	beq.w	80094e0 <_strtod_l+0x88>
 8009904:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009906:	4620      	mov	r0, r4
 8009908:	f001 fe54 	bl	800b5b4 <_Bfree>
 800990c:	4639      	mov	r1, r7
 800990e:	4620      	mov	r0, r4
 8009910:	f001 fe50 	bl	800b5b4 <_Bfree>
 8009914:	4631      	mov	r1, r6
 8009916:	4620      	mov	r0, r4
 8009918:	f001 fe4c 	bl	800b5b4 <_Bfree>
 800991c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800991e:	4620      	mov	r0, r4
 8009920:	f001 fe48 	bl	800b5b4 <_Bfree>
 8009924:	4629      	mov	r1, r5
 8009926:	4620      	mov	r0, r4
 8009928:	f001 fe44 	bl	800b5b4 <_Bfree>
 800992c:	e5d8      	b.n	80094e0 <_strtod_l+0x88>
 800992e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009932:	2000      	movs	r0, #0
 8009934:	4f32      	ldr	r7, [pc, #200]	; (8009a00 <_strtod_l+0x5a8>)
 8009936:	1112      	asrs	r2, r2, #4
 8009938:	4601      	mov	r1, r0
 800993a:	2a01      	cmp	r2, #1
 800993c:	dc24      	bgt.n	8009988 <_strtod_l+0x530>
 800993e:	b108      	cbz	r0, 8009944 <_strtod_l+0x4ec>
 8009940:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009944:	4a2e      	ldr	r2, [pc, #184]	; (8009a00 <_strtod_l+0x5a8>)
 8009946:	482f      	ldr	r0, [pc, #188]	; (8009a04 <_strtod_l+0x5ac>)
 8009948:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800994c:	ed91 7b00 	vldr	d7, [r1]
 8009950:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009954:	ec49 8b16 	vmov	d6, r8, r9
 8009958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800995c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009960:	9905      	ldr	r1, [sp, #20]
 8009962:	4a29      	ldr	r2, [pc, #164]	; (8009a08 <_strtod_l+0x5b0>)
 8009964:	400a      	ands	r2, r1
 8009966:	4282      	cmp	r2, r0
 8009968:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800996c:	d8bc      	bhi.n	80098e8 <_strtod_l+0x490>
 800996e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009972:	4282      	cmp	r2, r0
 8009974:	bf86      	itte	hi
 8009976:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009a0c <_strtod_l+0x5b4>
 800997a:	f04f 38ff 	movhi.w	r8, #4294967295
 800997e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009982:	2200      	movs	r2, #0
 8009984:	9204      	str	r2, [sp, #16]
 8009986:	e07f      	b.n	8009a88 <_strtod_l+0x630>
 8009988:	f012 0f01 	tst.w	r2, #1
 800998c:	d00a      	beq.n	80099a4 <_strtod_l+0x54c>
 800998e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8009992:	ed90 7b00 	vldr	d7, [r0]
 8009996:	ed9d 6b04 	vldr	d6, [sp, #16]
 800999a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800999e:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099a2:	2001      	movs	r0, #1
 80099a4:	3101      	adds	r1, #1
 80099a6:	1052      	asrs	r2, r2, #1
 80099a8:	e7c7      	b.n	800993a <_strtod_l+0x4e2>
 80099aa:	d0ea      	beq.n	8009982 <_strtod_l+0x52a>
 80099ac:	4252      	negs	r2, r2
 80099ae:	f012 000f 	ands.w	r0, r2, #15
 80099b2:	d00a      	beq.n	80099ca <_strtod_l+0x572>
 80099b4:	4911      	ldr	r1, [pc, #68]	; (80099fc <_strtod_l+0x5a4>)
 80099b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80099ba:	ed91 7b00 	vldr	d7, [r1]
 80099be:	ec49 8b16 	vmov	d6, r8, r9
 80099c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80099c6:	ec59 8b17 	vmov	r8, r9, d7
 80099ca:	1112      	asrs	r2, r2, #4
 80099cc:	d0d9      	beq.n	8009982 <_strtod_l+0x52a>
 80099ce:	2a1f      	cmp	r2, #31
 80099d0:	dd1e      	ble.n	8009a10 <_strtod_l+0x5b8>
 80099d2:	2500      	movs	r5, #0
 80099d4:	462e      	mov	r6, r5
 80099d6:	950a      	str	r5, [sp, #40]	; 0x28
 80099d8:	462f      	mov	r7, r5
 80099da:	2322      	movs	r3, #34	; 0x22
 80099dc:	f04f 0800 	mov.w	r8, #0
 80099e0:	f04f 0900 	mov.w	r9, #0
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	e789      	b.n	80098fc <_strtod_l+0x4a4>
 80099e8:	0800d835 	.word	0x0800d835
 80099ec:	0800d874 	.word	0x0800d874
 80099f0:	0800d82d 	.word	0x0800d82d
 80099f4:	0800d8b3 	.word	0x0800d8b3
 80099f8:	0800db8b 	.word	0x0800db8b
 80099fc:	0800da50 	.word	0x0800da50
 8009a00:	0800da28 	.word	0x0800da28
 8009a04:	7ca00000 	.word	0x7ca00000
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	7fefffff 	.word	0x7fefffff
 8009a10:	f012 0110 	ands.w	r1, r2, #16
 8009a14:	bf18      	it	ne
 8009a16:	216a      	movne	r1, #106	; 0x6a
 8009a18:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009a1c:	9104      	str	r1, [sp, #16]
 8009a1e:	49c0      	ldr	r1, [pc, #768]	; (8009d20 <_strtod_l+0x8c8>)
 8009a20:	2000      	movs	r0, #0
 8009a22:	07d7      	lsls	r7, r2, #31
 8009a24:	d508      	bpl.n	8009a38 <_strtod_l+0x5e0>
 8009a26:	ed9d 6b08 	vldr	d6, [sp, #32]
 8009a2a:	ed91 7b00 	vldr	d7, [r1]
 8009a2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a32:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a36:	2001      	movs	r0, #1
 8009a38:	1052      	asrs	r2, r2, #1
 8009a3a:	f101 0108 	add.w	r1, r1, #8
 8009a3e:	d1f0      	bne.n	8009a22 <_strtod_l+0x5ca>
 8009a40:	b108      	cbz	r0, 8009a46 <_strtod_l+0x5ee>
 8009a42:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009a46:	9a04      	ldr	r2, [sp, #16]
 8009a48:	b1ba      	cbz	r2, 8009a7a <_strtod_l+0x622>
 8009a4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009a4e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	4649      	mov	r1, r9
 8009a56:	dd10      	ble.n	8009a7a <_strtod_l+0x622>
 8009a58:	2a1f      	cmp	r2, #31
 8009a5a:	f340 8132 	ble.w	8009cc2 <_strtod_l+0x86a>
 8009a5e:	2a34      	cmp	r2, #52	; 0x34
 8009a60:	bfde      	ittt	le
 8009a62:	3a20      	suble	r2, #32
 8009a64:	f04f 30ff 	movle.w	r0, #4294967295
 8009a68:	fa00 f202 	lslle.w	r2, r0, r2
 8009a6c:	f04f 0800 	mov.w	r8, #0
 8009a70:	bfcc      	ite	gt
 8009a72:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a76:	ea02 0901 	andle.w	r9, r2, r1
 8009a7a:	ec49 8b17 	vmov	d7, r8, r9
 8009a7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	d0a4      	beq.n	80099d2 <_strtod_l+0x57a>
 8009a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a8e:	4632      	mov	r2, r6
 8009a90:	4620      	mov	r0, r4
 8009a92:	f001 fdfb 	bl	800b68c <__s2b>
 8009a96:	900a      	str	r0, [sp, #40]	; 0x28
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f43f af25 	beq.w	80098e8 <_strtod_l+0x490>
 8009a9e:	9b06      	ldr	r3, [sp, #24]
 8009aa0:	ebab 0505 	sub.w	r5, fp, r5
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfb4      	ite	lt
 8009aa8:	462b      	movlt	r3, r5
 8009aaa:	2300      	movge	r3, #0
 8009aac:	930c      	str	r3, [sp, #48]	; 0x30
 8009aae:	9b06      	ldr	r3, [sp, #24]
 8009ab0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009d08 <_strtod_l+0x8b0>
 8009ab4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009d10 <_strtod_l+0x8b8>
 8009ab8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009d18 <_strtod_l+0x8c0>
 8009abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ac0:	2500      	movs	r5, #0
 8009ac2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ac4:	462e      	mov	r6, r5
 8009ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac8:	4620      	mov	r0, r4
 8009aca:	6859      	ldr	r1, [r3, #4]
 8009acc:	f001 fd32 	bl	800b534 <_Balloc>
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f43f af0c 	beq.w	80098f0 <_strtod_l+0x498>
 8009ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f103 010c 	add.w	r1, r3, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7fe fda9 	bl	800863c <memcpy>
 8009aea:	ec49 8b10 	vmov	d0, r8, r9
 8009aee:	aa1a      	add	r2, sp, #104	; 0x68
 8009af0:	a919      	add	r1, sp, #100	; 0x64
 8009af2:	4620      	mov	r0, r4
 8009af4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009af8:	f002 f904 	bl	800bd04 <__d2b>
 8009afc:	9018      	str	r0, [sp, #96]	; 0x60
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f aef6 	beq.w	80098f0 <_strtod_l+0x498>
 8009b04:	2101      	movs	r1, #1
 8009b06:	4620      	mov	r0, r4
 8009b08:	f001 fe5a 	bl	800b7c0 <__i2b>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f aeee 	beq.w	80098f0 <_strtod_l+0x498>
 8009b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfab      	itete	ge
 8009b1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009b1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009b20:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8009b24:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009b28:	bfac      	ite	ge
 8009b2a:	eb03 0b02 	addge.w	fp, r3, r2
 8009b2e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	440b      	add	r3, r1
 8009b38:	4a7a      	ldr	r2, [pc, #488]	; (8009d24 <_strtod_l+0x8cc>)
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009b42:	f280 80d1 	bge.w	8009ce8 <_strtod_l+0x890>
 8009b46:	1ad2      	subs	r2, r2, r3
 8009b48:	2a1f      	cmp	r2, #31
 8009b4a:	eba1 0102 	sub.w	r1, r1, r2
 8009b4e:	f04f 0001 	mov.w	r0, #1
 8009b52:	f300 80bd 	bgt.w	8009cd0 <_strtod_l+0x878>
 8009b56:	fa00 f302 	lsl.w	r3, r0, r2
 8009b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b60:	eb0b 0301 	add.w	r3, fp, r1
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	459b      	cmp	fp, r3
 8009b68:	448a      	add	sl, r1
 8009b6a:	4492      	add	sl, r2
 8009b6c:	465a      	mov	r2, fp
 8009b6e:	bfa8      	it	ge
 8009b70:	461a      	movge	r2, r3
 8009b72:	4552      	cmp	r2, sl
 8009b74:	bfa8      	it	ge
 8009b76:	4652      	movge	r2, sl
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	bfc2      	ittt	gt
 8009b7c:	1a9b      	subgt	r3, r3, r2
 8009b7e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009b82:	ebab 0b02 	subgt.w	fp, fp, r2
 8009b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	dd18      	ble.n	8009bbe <_strtod_l+0x766>
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4620      	mov	r0, r4
 8009b90:	9315      	str	r3, [sp, #84]	; 0x54
 8009b92:	f001 fed1 	bl	800b938 <__pow5mult>
 8009b96:	4606      	mov	r6, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	f43f aea9 	beq.w	80098f0 <_strtod_l+0x498>
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f001 fe22 	bl	800b7ec <__multiply>
 8009ba8:	9014      	str	r0, [sp, #80]	; 0x50
 8009baa:	2800      	cmp	r0, #0
 8009bac:	f43f aea0 	beq.w	80098f0 <_strtod_l+0x498>
 8009bb0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f001 fcfe 	bl	800b5b4 <_Bfree>
 8009bb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bbc:	9218      	str	r2, [sp, #96]	; 0x60
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f300 8097 	bgt.w	8009cf2 <_strtod_l+0x89a>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd08      	ble.n	8009bdc <_strtod_l+0x784>
 8009bca:	4639      	mov	r1, r7
 8009bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f001 feb2 	bl	800b938 <__pow5mult>
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f ae8a 	beq.w	80098f0 <_strtod_l+0x498>
 8009bdc:	f1ba 0f00 	cmp.w	sl, #0
 8009be0:	dd08      	ble.n	8009bf4 <_strtod_l+0x79c>
 8009be2:	4639      	mov	r1, r7
 8009be4:	4652      	mov	r2, sl
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 ff00 	bl	800b9ec <__lshift>
 8009bec:	4607      	mov	r7, r0
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f ae7e 	beq.w	80098f0 <_strtod_l+0x498>
 8009bf4:	f1bb 0f00 	cmp.w	fp, #0
 8009bf8:	dd08      	ble.n	8009c0c <_strtod_l+0x7b4>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	465a      	mov	r2, fp
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 fef4 	bl	800b9ec <__lshift>
 8009c04:	4606      	mov	r6, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f43f ae72 	beq.w	80098f0 <_strtod_l+0x498>
 8009c0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c0e:	463a      	mov	r2, r7
 8009c10:	4620      	mov	r0, r4
 8009c12:	f001 ff73 	bl	800bafc <__mdiff>
 8009c16:	4605      	mov	r5, r0
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	f43f ae69 	beq.w	80098f0 <_strtod_l+0x498>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009c24:	60c3      	str	r3, [r0, #12]
 8009c26:	4631      	mov	r1, r6
 8009c28:	f001 ff4c 	bl	800bac4 <__mcmp>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	da7f      	bge.n	8009d30 <_strtod_l+0x8d8>
 8009c30:	ea5a 0308 	orrs.w	r3, sl, r8
 8009c34:	f040 80a5 	bne.w	8009d82 <_strtod_l+0x92a>
 8009c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 80a0 	bne.w	8009d82 <_strtod_l+0x92a>
 8009c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c46:	0d1b      	lsrs	r3, r3, #20
 8009c48:	051b      	lsls	r3, r3, #20
 8009c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c4e:	f240 8098 	bls.w	8009d82 <_strtod_l+0x92a>
 8009c52:	696b      	ldr	r3, [r5, #20]
 8009c54:	b91b      	cbnz	r3, 8009c5e <_strtod_l+0x806>
 8009c56:	692b      	ldr	r3, [r5, #16]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	f340 8092 	ble.w	8009d82 <_strtod_l+0x92a>
 8009c5e:	4629      	mov	r1, r5
 8009c60:	2201      	movs	r2, #1
 8009c62:	4620      	mov	r0, r4
 8009c64:	f001 fec2 	bl	800b9ec <__lshift>
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	f001 ff2a 	bl	800bac4 <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f340 8086 	ble.w	8009d82 <_strtod_l+0x92a>
 8009c76:	9904      	ldr	r1, [sp, #16]
 8009c78:	4a2b      	ldr	r2, [pc, #172]	; (8009d28 <_strtod_l+0x8d0>)
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	f000 80a1 	beq.w	8009dc4 <_strtod_l+0x96c>
 8009c82:	ea02 0109 	and.w	r1, r2, r9
 8009c86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c8a:	f300 809b 	bgt.w	8009dc4 <_strtod_l+0x96c>
 8009c8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c92:	f77f aea2 	ble.w	80099da <_strtod_l+0x582>
 8009c96:	4a25      	ldr	r2, [pc, #148]	; (8009d2c <_strtod_l+0x8d4>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009c9e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8009ca2:	ec49 8b17 	vmov	d7, r8, r9
 8009ca6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009caa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	bf08      	it	eq
 8009cb6:	2322      	moveq	r3, #34	; 0x22
 8009cb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009cbc:	bf08      	it	eq
 8009cbe:	6023      	streq	r3, [r4, #0]
 8009cc0:	e620      	b.n	8009904 <_strtod_l+0x4ac>
 8009cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8009cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8009cca:	ea02 0808 	and.w	r8, r2, r8
 8009cce:	e6d4      	b.n	8009a7a <_strtod_l+0x622>
 8009cd0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009cd4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009cd8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009cdc:	33e2      	adds	r3, #226	; 0xe2
 8009cde:	fa00 f303 	lsl.w	r3, r0, r3
 8009ce2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8009ce6:	e73b      	b.n	8009b60 <_strtod_l+0x708>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	2301      	movs	r3, #1
 8009cec:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009cf0:	e736      	b.n	8009b60 <_strtod_l+0x708>
 8009cf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f001 fe78 	bl	800b9ec <__lshift>
 8009cfc:	9018      	str	r0, [sp, #96]	; 0x60
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f47f af60 	bne.w	8009bc4 <_strtod_l+0x76c>
 8009d04:	e5f4      	b.n	80098f0 <_strtod_l+0x498>
 8009d06:	bf00      	nop
 8009d08:	94a03595 	.word	0x94a03595
 8009d0c:	3fcfffff 	.word	0x3fcfffff
 8009d10:	94a03595 	.word	0x94a03595
 8009d14:	3fdfffff 	.word	0x3fdfffff
 8009d18:	35afe535 	.word	0x35afe535
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	0800d888 	.word	0x0800d888
 8009d24:	fffffc02 	.word	0xfffffc02
 8009d28:	7ff00000 	.word	0x7ff00000
 8009d2c:	39500000 	.word	0x39500000
 8009d30:	46cb      	mov	fp, r9
 8009d32:	d165      	bne.n	8009e00 <_strtod_l+0x9a8>
 8009d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d38:	f1ba 0f00 	cmp.w	sl, #0
 8009d3c:	d02a      	beq.n	8009d94 <_strtod_l+0x93c>
 8009d3e:	4aaa      	ldr	r2, [pc, #680]	; (8009fe8 <_strtod_l+0xb90>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d12b      	bne.n	8009d9c <_strtod_l+0x944>
 8009d44:	9b04      	ldr	r3, [sp, #16]
 8009d46:	4641      	mov	r1, r8
 8009d48:	b1fb      	cbz	r3, 8009d8a <_strtod_l+0x932>
 8009d4a:	4aa8      	ldr	r2, [pc, #672]	; (8009fec <_strtod_l+0xb94>)
 8009d4c:	ea09 0202 	and.w	r2, r9, r2
 8009d50:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	d81a      	bhi.n	8009d90 <_strtod_l+0x938>
 8009d5a:	0d12      	lsrs	r2, r2, #20
 8009d5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d60:	fa00 f303 	lsl.w	r3, r0, r3
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d119      	bne.n	8009d9c <_strtod_l+0x944>
 8009d68:	4ba1      	ldr	r3, [pc, #644]	; (8009ff0 <_strtod_l+0xb98>)
 8009d6a:	459b      	cmp	fp, r3
 8009d6c:	d102      	bne.n	8009d74 <_strtod_l+0x91c>
 8009d6e:	3101      	adds	r1, #1
 8009d70:	f43f adbe 	beq.w	80098f0 <_strtod_l+0x498>
 8009d74:	4b9d      	ldr	r3, [pc, #628]	; (8009fec <_strtod_l+0xb94>)
 8009d76:	ea0b 0303 	and.w	r3, fp, r3
 8009d7a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d186      	bne.n	8009c96 <_strtod_l+0x83e>
 8009d88:	e5bc      	b.n	8009904 <_strtod_l+0x4ac>
 8009d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8e:	e7e9      	b.n	8009d64 <_strtod_l+0x90c>
 8009d90:	4603      	mov	r3, r0
 8009d92:	e7e7      	b.n	8009d64 <_strtod_l+0x90c>
 8009d94:	ea53 0308 	orrs.w	r3, r3, r8
 8009d98:	f43f af6d 	beq.w	8009c76 <_strtod_l+0x81e>
 8009d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9e:	b1db      	cbz	r3, 8009dd8 <_strtod_l+0x980>
 8009da0:	ea13 0f0b 	tst.w	r3, fp
 8009da4:	d0ed      	beq.n	8009d82 <_strtod_l+0x92a>
 8009da6:	9a04      	ldr	r2, [sp, #16]
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f1ba 0f00 	cmp.w	sl, #0
 8009db0:	d016      	beq.n	8009de0 <_strtod_l+0x988>
 8009db2:	f7ff fb36 	bl	8009422 <sulp>
 8009db6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009dba:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009dbe:	ec59 8b17 	vmov	r8, r9, d7
 8009dc2:	e7de      	b.n	8009d82 <_strtod_l+0x92a>
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009dca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009dce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009dd2:	f04f 38ff 	mov.w	r8, #4294967295
 8009dd6:	e7d4      	b.n	8009d82 <_strtod_l+0x92a>
 8009dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dda:	ea13 0f08 	tst.w	r3, r8
 8009dde:	e7e1      	b.n	8009da4 <_strtod_l+0x94c>
 8009de0:	f7ff fb1f 	bl	8009422 <sulp>
 8009de4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009de8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009dec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009df0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009dfc:	d1c1      	bne.n	8009d82 <_strtod_l+0x92a>
 8009dfe:	e5ec      	b.n	80099da <_strtod_l+0x582>
 8009e00:	4631      	mov	r1, r6
 8009e02:	4628      	mov	r0, r5
 8009e04:	f001 ffda 	bl	800bdbc <__ratio>
 8009e08:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009e0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e14:	d867      	bhi.n	8009ee6 <_strtod_l+0xa8e>
 8009e16:	f1ba 0f00 	cmp.w	sl, #0
 8009e1a:	d044      	beq.n	8009ea6 <_strtod_l+0xa4e>
 8009e1c:	4b75      	ldr	r3, [pc, #468]	; (8009ff4 <_strtod_l+0xb9c>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009e24:	4971      	ldr	r1, [pc, #452]	; (8009fec <_strtod_l+0xb94>)
 8009e26:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a000 <_strtod_l+0xba8>
 8009e2a:	ea0b 0001 	and.w	r0, fp, r1
 8009e2e:	4560      	cmp	r0, ip
 8009e30:	900d      	str	r0, [sp, #52]	; 0x34
 8009e32:	f040 808b 	bne.w	8009f4c <_strtod_l+0xaf4>
 8009e36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e3a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009e3e:	ec49 8b10 	vmov	d0, r8, r9
 8009e42:	ec43 2b1c 	vmov	d12, r2, r3
 8009e46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e4a:	f001 fedf 	bl	800bc0c <__ulp>
 8009e4e:	ec49 8b1d 	vmov	d13, r8, r9
 8009e52:	eeac db00 	vfma.f64	d13, d12, d0
 8009e56:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e5c:	4963      	ldr	r1, [pc, #396]	; (8009fec <_strtod_l+0xb94>)
 8009e5e:	4a66      	ldr	r2, [pc, #408]	; (8009ff8 <_strtod_l+0xba0>)
 8009e60:	4019      	ands	r1, r3
 8009e62:	4291      	cmp	r1, r2
 8009e64:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009e68:	d947      	bls.n	8009efa <_strtod_l+0xaa2>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d103      	bne.n	8009e7c <_strtod_l+0xa24>
 8009e74:	9b08      	ldr	r3, [sp, #32]
 8009e76:	3301      	adds	r3, #1
 8009e78:	f43f ad3a 	beq.w	80098f0 <_strtod_l+0x498>
 8009e7c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009ff0 <_strtod_l+0xb98>
 8009e80:	f04f 38ff 	mov.w	r8, #4294967295
 8009e84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e86:	4620      	mov	r0, r4
 8009e88:	f001 fb94 	bl	800b5b4 <_Bfree>
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f001 fb90 	bl	800b5b4 <_Bfree>
 8009e94:	4631      	mov	r1, r6
 8009e96:	4620      	mov	r0, r4
 8009e98:	f001 fb8c 	bl	800b5b4 <_Bfree>
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f001 fb88 	bl	800b5b4 <_Bfree>
 8009ea4:	e60f      	b.n	8009ac6 <_strtod_l+0x66e>
 8009ea6:	f1b8 0f00 	cmp.w	r8, #0
 8009eaa:	d112      	bne.n	8009ed2 <_strtod_l+0xa7a>
 8009eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb0:	b9b3      	cbnz	r3, 8009ee0 <_strtod_l+0xa88>
 8009eb2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009eb6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009ec2:	d401      	bmi.n	8009ec8 <_strtod_l+0xa70>
 8009ec4:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009ec8:	eeb1 7b48 	vneg.f64	d7, d8
 8009ecc:	ec53 2b17 	vmov	r2, r3, d7
 8009ed0:	e7a8      	b.n	8009e24 <_strtod_l+0x9cc>
 8009ed2:	f1b8 0f01 	cmp.w	r8, #1
 8009ed6:	d103      	bne.n	8009ee0 <_strtod_l+0xa88>
 8009ed8:	f1b9 0f00 	cmp.w	r9, #0
 8009edc:	f43f ad7d 	beq.w	80099da <_strtod_l+0x582>
 8009ee0:	4b46      	ldr	r3, [pc, #280]	; (8009ffc <_strtod_l+0xba4>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	e79c      	b.n	8009e20 <_strtod_l+0x9c8>
 8009ee6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009eea:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	d0e9      	beq.n	8009ec8 <_strtod_l+0xa70>
 8009ef4:	ec53 2b18 	vmov	r2, r3, d8
 8009ef8:	e794      	b.n	8009e24 <_strtod_l+0x9cc>
 8009efa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1bf      	bne.n	8009e84 <_strtod_l+0xa2c>
 8009f04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f0a:	0d1b      	lsrs	r3, r3, #20
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d1b8      	bne.n	8009e84 <_strtod_l+0xa2c>
 8009f12:	ec51 0b18 	vmov	r0, r1, d8
 8009f16:	f7f6 fbbf 	bl	8000698 <__aeabi_d2lz>
 8009f1a:	f7f6 fb77 	bl	800060c <__aeabi_l2d>
 8009f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f22:	ec41 0b17 	vmov	d7, r0, r1
 8009f26:	ea43 0308 	orr.w	r3, r3, r8
 8009f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f2e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009f32:	d03e      	beq.n	8009fb2 <_strtod_l+0xb5a>
 8009f34:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	f53f ace2 	bmi.w	8009904 <_strtod_l+0x4ac>
 8009f40:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f48:	dd9c      	ble.n	8009e84 <_strtod_l+0xa2c>
 8009f4a:	e4db      	b.n	8009904 <_strtod_l+0x4ac>
 8009f4c:	9904      	ldr	r1, [sp, #16]
 8009f4e:	b301      	cbz	r1, 8009f92 <_strtod_l+0xb3a>
 8009f50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f52:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009f56:	d81c      	bhi.n	8009f92 <_strtod_l+0xb3a>
 8009f58:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009fe0 <_strtod_l+0xb88>
 8009f5c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	d811      	bhi.n	8009f8a <_strtod_l+0xb32>
 8009f66:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009f6a:	ee18 3a10 	vmov	r3, s16
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	bf38      	it	cc
 8009f72:	2301      	movcc	r3, #1
 8009f74:	ee08 3a10 	vmov	s16, r3
 8009f78:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009f7c:	f1ba 0f00 	cmp.w	sl, #0
 8009f80:	d114      	bne.n	8009fac <_strtod_l+0xb54>
 8009f82:	eeb1 7b48 	vneg.f64	d7, d8
 8009f86:	ec53 2b17 	vmov	r2, r3, d7
 8009f8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f8c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009f90:	1a0b      	subs	r3, r1, r0
 8009f92:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009f96:	ec43 2b1c 	vmov	d12, r2, r3
 8009f9a:	f001 fe37 	bl	800bc0c <__ulp>
 8009f9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009fa2:	eeac 7b00 	vfma.f64	d7, d12, d0
 8009fa6:	ec59 8b17 	vmov	r8, r9, d7
 8009faa:	e7a8      	b.n	8009efe <_strtod_l+0xaa6>
 8009fac:	ec53 2b18 	vmov	r2, r3, d8
 8009fb0:	e7eb      	b.n	8009f8a <_strtod_l+0xb32>
 8009fb2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fba:	f57f af63 	bpl.w	8009e84 <_strtod_l+0xa2c>
 8009fbe:	e4a1      	b.n	8009904 <_strtod_l+0x4ac>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	f7ff ba8d 	b.w	80094e8 <_strtod_l+0x90>
 8009fce:	2a65      	cmp	r2, #101	; 0x65
 8009fd0:	f43f ab89 	beq.w	80096e6 <_strtod_l+0x28e>
 8009fd4:	2a45      	cmp	r2, #69	; 0x45
 8009fd6:	f43f ab86 	beq.w	80096e6 <_strtod_l+0x28e>
 8009fda:	2101      	movs	r1, #1
 8009fdc:	f7ff bbbe 	b.w	800975c <_strtod_l+0x304>
 8009fe0:	ffc00000 	.word	0xffc00000
 8009fe4:	41dfffff 	.word	0x41dfffff
 8009fe8:	000fffff 	.word	0x000fffff
 8009fec:	7ff00000 	.word	0x7ff00000
 8009ff0:	7fefffff 	.word	0x7fefffff
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	7c9fffff 	.word	0x7c9fffff
 8009ffc:	bff00000 	.word	0xbff00000
 800a000:	7fe00000 	.word	0x7fe00000

0800a004 <_strtod_r>:
 800a004:	4b01      	ldr	r3, [pc, #4]	; (800a00c <_strtod_r+0x8>)
 800a006:	f7ff ba27 	b.w	8009458 <_strtod_l>
 800a00a:	bf00      	nop
 800a00c:	200000c0 	.word	0x200000c0

0800a010 <_strtol_l.isra.0>:
 800a010:	2b01      	cmp	r3, #1
 800a012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a016:	d001      	beq.n	800a01c <_strtol_l.isra.0+0xc>
 800a018:	2b24      	cmp	r3, #36	; 0x24
 800a01a:	d906      	bls.n	800a02a <_strtol_l.isra.0+0x1a>
 800a01c:	f7fe fae4 	bl	80085e8 <__errno>
 800a020:	2316      	movs	r3, #22
 800a022:	6003      	str	r3, [r0, #0]
 800a024:	2000      	movs	r0, #0
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	4f3a      	ldr	r7, [pc, #232]	; (800a114 <_strtol_l.isra.0+0x104>)
 800a02c:	468e      	mov	lr, r1
 800a02e:	4676      	mov	r6, lr
 800a030:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a034:	5de5      	ldrb	r5, [r4, r7]
 800a036:	f015 0508 	ands.w	r5, r5, #8
 800a03a:	d1f8      	bne.n	800a02e <_strtol_l.isra.0+0x1e>
 800a03c:	2c2d      	cmp	r4, #45	; 0x2d
 800a03e:	d134      	bne.n	800a0aa <_strtol_l.isra.0+0x9a>
 800a040:	f89e 4000 	ldrb.w	r4, [lr]
 800a044:	f04f 0801 	mov.w	r8, #1
 800a048:	f106 0e02 	add.w	lr, r6, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05c      	beq.n	800a10a <_strtol_l.isra.0+0xfa>
 800a050:	2b10      	cmp	r3, #16
 800a052:	d10c      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a054:	2c30      	cmp	r4, #48	; 0x30
 800a056:	d10a      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a058:	f89e 4000 	ldrb.w	r4, [lr]
 800a05c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a060:	2c58      	cmp	r4, #88	; 0x58
 800a062:	d14d      	bne.n	800a100 <_strtol_l.isra.0+0xf0>
 800a064:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a068:	2310      	movs	r3, #16
 800a06a:	f10e 0e02 	add.w	lr, lr, #2
 800a06e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a072:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a076:	2600      	movs	r6, #0
 800a078:	fbbc f9f3 	udiv	r9, ip, r3
 800a07c:	4635      	mov	r5, r6
 800a07e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a082:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a086:	2f09      	cmp	r7, #9
 800a088:	d818      	bhi.n	800a0bc <_strtol_l.isra.0+0xac>
 800a08a:	463c      	mov	r4, r7
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	dd24      	ble.n	800a0da <_strtol_l.isra.0+0xca>
 800a090:	2e00      	cmp	r6, #0
 800a092:	db1f      	blt.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a094:	45a9      	cmp	r9, r5
 800a096:	d31d      	bcc.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a098:	d101      	bne.n	800a09e <_strtol_l.isra.0+0x8e>
 800a09a:	45a2      	cmp	sl, r4
 800a09c:	db1a      	blt.n	800a0d4 <_strtol_l.isra.0+0xc4>
 800a09e:	fb05 4503 	mla	r5, r5, r3, r4
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a0a8:	e7eb      	b.n	800a082 <_strtol_l.isra.0+0x72>
 800a0aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a0ac:	bf08      	it	eq
 800a0ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a0b2:	46a8      	mov	r8, r5
 800a0b4:	bf08      	it	eq
 800a0b6:	f106 0e02 	addeq.w	lr, r6, #2
 800a0ba:	e7c7      	b.n	800a04c <_strtol_l.isra.0+0x3c>
 800a0bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a0c0:	2f19      	cmp	r7, #25
 800a0c2:	d801      	bhi.n	800a0c8 <_strtol_l.isra.0+0xb8>
 800a0c4:	3c37      	subs	r4, #55	; 0x37
 800a0c6:	e7e1      	b.n	800a08c <_strtol_l.isra.0+0x7c>
 800a0c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a0cc:	2f19      	cmp	r7, #25
 800a0ce:	d804      	bhi.n	800a0da <_strtol_l.isra.0+0xca>
 800a0d0:	3c57      	subs	r4, #87	; 0x57
 800a0d2:	e7db      	b.n	800a08c <_strtol_l.isra.0+0x7c>
 800a0d4:	f04f 36ff 	mov.w	r6, #4294967295
 800a0d8:	e7e4      	b.n	800a0a4 <_strtol_l.isra.0+0x94>
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	da05      	bge.n	800a0ea <_strtol_l.isra.0+0xda>
 800a0de:	2322      	movs	r3, #34	; 0x22
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	4665      	mov	r5, ip
 800a0e4:	b942      	cbnz	r2, 800a0f8 <_strtol_l.isra.0+0xe8>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	e79d      	b.n	800a026 <_strtol_l.isra.0+0x16>
 800a0ea:	f1b8 0f00 	cmp.w	r8, #0
 800a0ee:	d000      	beq.n	800a0f2 <_strtol_l.isra.0+0xe2>
 800a0f0:	426d      	negs	r5, r5
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d0f7      	beq.n	800a0e6 <_strtol_l.isra.0+0xd6>
 800a0f6:	b10e      	cbz	r6, 800a0fc <_strtol_l.isra.0+0xec>
 800a0f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a0fc:	6011      	str	r1, [r2, #0]
 800a0fe:	e7f2      	b.n	800a0e6 <_strtol_l.isra.0+0xd6>
 800a100:	2430      	movs	r4, #48	; 0x30
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1b3      	bne.n	800a06e <_strtol_l.isra.0+0x5e>
 800a106:	2308      	movs	r3, #8
 800a108:	e7b1      	b.n	800a06e <_strtol_l.isra.0+0x5e>
 800a10a:	2c30      	cmp	r4, #48	; 0x30
 800a10c:	d0a4      	beq.n	800a058 <_strtol_l.isra.0+0x48>
 800a10e:	230a      	movs	r3, #10
 800a110:	e7ad      	b.n	800a06e <_strtol_l.isra.0+0x5e>
 800a112:	bf00      	nop
 800a114:	0800d721 	.word	0x0800d721

0800a118 <_strtol_r>:
 800a118:	f7ff bf7a 	b.w	800a010 <_strtol_l.isra.0>

0800a11c <_vsniprintf_r>:
 800a11c:	b530      	push	{r4, r5, lr}
 800a11e:	1e14      	subs	r4, r2, #0
 800a120:	4605      	mov	r5, r0
 800a122:	b09b      	sub	sp, #108	; 0x6c
 800a124:	4618      	mov	r0, r3
 800a126:	da05      	bge.n	800a134 <_vsniprintf_r+0x18>
 800a128:	238b      	movs	r3, #139	; 0x8b
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	b01b      	add	sp, #108	; 0x6c
 800a132:	bd30      	pop	{r4, r5, pc}
 800a134:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a138:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a13c:	bf14      	ite	ne
 800a13e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a142:	4623      	moveq	r3, r4
 800a144:	9302      	str	r3, [sp, #8]
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a14c:	9100      	str	r1, [sp, #0]
 800a14e:	9104      	str	r1, [sp, #16]
 800a150:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a154:	4602      	mov	r2, r0
 800a156:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a158:	4669      	mov	r1, sp
 800a15a:	4628      	mov	r0, r5
 800a15c:	f001 ffbc 	bl	800c0d8 <_svfiprintf_r>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	bfbc      	itt	lt
 800a164:	238b      	movlt	r3, #139	; 0x8b
 800a166:	602b      	strlt	r3, [r5, #0]
 800a168:	2c00      	cmp	r4, #0
 800a16a:	d0e1      	beq.n	800a130 <_vsniprintf_r+0x14>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	e7dd      	b.n	800a130 <_vsniprintf_r+0x14>

0800a174 <vsniprintf>:
 800a174:	b507      	push	{r0, r1, r2, lr}
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4613      	mov	r3, r2
 800a17a:	460a      	mov	r2, r1
 800a17c:	4601      	mov	r1, r0
 800a17e:	4803      	ldr	r0, [pc, #12]	; (800a18c <vsniprintf+0x18>)
 800a180:	6800      	ldr	r0, [r0, #0]
 800a182:	f7ff ffcb 	bl	800a11c <_vsniprintf_r>
 800a186:	b003      	add	sp, #12
 800a188:	f85d fb04 	ldr.w	pc, [sp], #4
 800a18c:	20000058 	.word	0x20000058

0800a190 <_write_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	; (800a1b0 <_write_r+0x20>)
 800a194:	4604      	mov	r4, r0
 800a196:	4608      	mov	r0, r1
 800a198:	4611      	mov	r1, r2
 800a19a:	2200      	movs	r2, #0
 800a19c:	602a      	str	r2, [r5, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f7f8 fc2f 	bl	8002a02 <_write>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_write_r+0x1e>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_write_r+0x1e>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	20000874 	.word	0x20000874

0800a1b4 <_close_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d06      	ldr	r5, [pc, #24]	; (800a1d0 <_close_r+0x1c>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f8 fc3b 	bl	8002a3a <_close>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_close_r+0x1a>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_close_r+0x1a>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	20000874 	.word	0x20000874

0800a1d4 <quorem>:
 800a1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	6903      	ldr	r3, [r0, #16]
 800a1da:	690c      	ldr	r4, [r1, #16]
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	4607      	mov	r7, r0
 800a1e0:	f2c0 8081 	blt.w	800a2e6 <quorem+0x112>
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	f101 0814 	add.w	r8, r1, #20
 800a1ea:	f100 0514 	add.w	r5, r0, #20
 800a1ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	429a      	cmp	r2, r3
 800a200:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a208:	fbb2 f6f3 	udiv	r6, r2, r3
 800a20c:	d331      	bcc.n	800a272 <quorem+0x9e>
 800a20e:	f04f 0e00 	mov.w	lr, #0
 800a212:	4640      	mov	r0, r8
 800a214:	46ac      	mov	ip, r5
 800a216:	46f2      	mov	sl, lr
 800a218:	f850 2b04 	ldr.w	r2, [r0], #4
 800a21c:	b293      	uxth	r3, r2
 800a21e:	fb06 e303 	mla	r3, r6, r3, lr
 800a222:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a226:	b29b      	uxth	r3, r3
 800a228:	ebaa 0303 	sub.w	r3, sl, r3
 800a22c:	0c12      	lsrs	r2, r2, #16
 800a22e:	f8dc a000 	ldr.w	sl, [ip]
 800a232:	fb06 e202 	mla	r2, r6, r2, lr
 800a236:	fa13 f38a 	uxtah	r3, r3, sl
 800a23a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a23e:	fa1f fa82 	uxth.w	sl, r2
 800a242:	f8dc 2000 	ldr.w	r2, [ip]
 800a246:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a24a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a24e:	b29b      	uxth	r3, r3
 800a250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a254:	4581      	cmp	r9, r0
 800a256:	f84c 3b04 	str.w	r3, [ip], #4
 800a25a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a25e:	d2db      	bcs.n	800a218 <quorem+0x44>
 800a260:	f855 300b 	ldr.w	r3, [r5, fp]
 800a264:	b92b      	cbnz	r3, 800a272 <quorem+0x9e>
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	3b04      	subs	r3, #4
 800a26a:	429d      	cmp	r5, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	d32e      	bcc.n	800a2ce <quorem+0xfa>
 800a270:	613c      	str	r4, [r7, #16]
 800a272:	4638      	mov	r0, r7
 800a274:	f001 fc26 	bl	800bac4 <__mcmp>
 800a278:	2800      	cmp	r0, #0
 800a27a:	db24      	blt.n	800a2c6 <quorem+0xf2>
 800a27c:	3601      	adds	r6, #1
 800a27e:	4628      	mov	r0, r5
 800a280:	f04f 0c00 	mov.w	ip, #0
 800a284:	f858 2b04 	ldr.w	r2, [r8], #4
 800a288:	f8d0 e000 	ldr.w	lr, [r0]
 800a28c:	b293      	uxth	r3, r2
 800a28e:	ebac 0303 	sub.w	r3, ip, r3
 800a292:	0c12      	lsrs	r2, r2, #16
 800a294:	fa13 f38e 	uxtah	r3, r3, lr
 800a298:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a29c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2a6:	45c1      	cmp	r9, r8
 800a2a8:	f840 3b04 	str.w	r3, [r0], #4
 800a2ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2b0:	d2e8      	bcs.n	800a284 <quorem+0xb0>
 800a2b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2ba:	b922      	cbnz	r2, 800a2c6 <quorem+0xf2>
 800a2bc:	3b04      	subs	r3, #4
 800a2be:	429d      	cmp	r5, r3
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	d30a      	bcc.n	800a2da <quorem+0x106>
 800a2c4:	613c      	str	r4, [r7, #16]
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	b003      	add	sp, #12
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d1cc      	bne.n	800a270 <quorem+0x9c>
 800a2d6:	3c01      	subs	r4, #1
 800a2d8:	e7c7      	b.n	800a26a <quorem+0x96>
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	3b04      	subs	r3, #4
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	d1f0      	bne.n	800a2c4 <quorem+0xf0>
 800a2e2:	3c01      	subs	r4, #1
 800a2e4:	e7eb      	b.n	800a2be <quorem+0xea>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e7ee      	b.n	800a2c8 <quorem+0xf4>
 800a2ea:	0000      	movs	r0, r0
 800a2ec:	0000      	movs	r0, r0
	...

0800a2f0 <_dtoa_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ec59 8b10 	vmov	r8, r9, d0
 800a2f8:	b095      	sub	sp, #84	; 0x54
 800a2fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2fc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a2fe:	9107      	str	r1, [sp, #28]
 800a300:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a304:	4606      	mov	r6, r0
 800a306:	9209      	str	r2, [sp, #36]	; 0x24
 800a308:	9310      	str	r3, [sp, #64]	; 0x40
 800a30a:	b975      	cbnz	r5, 800a32a <_dtoa_r+0x3a>
 800a30c:	2010      	movs	r0, #16
 800a30e:	f001 f8f7 	bl	800b500 <malloc>
 800a312:	4602      	mov	r2, r0
 800a314:	6270      	str	r0, [r6, #36]	; 0x24
 800a316:	b920      	cbnz	r0, 800a322 <_dtoa_r+0x32>
 800a318:	4bab      	ldr	r3, [pc, #684]	; (800a5c8 <_dtoa_r+0x2d8>)
 800a31a:	21ea      	movs	r1, #234	; 0xea
 800a31c:	48ab      	ldr	r0, [pc, #684]	; (800a5cc <_dtoa_r+0x2dc>)
 800a31e:	f002 fc35 	bl	800cb8c <__assert_func>
 800a322:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a326:	6005      	str	r5, [r0, #0]
 800a328:	60c5      	str	r5, [r0, #12]
 800a32a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a32c:	6819      	ldr	r1, [r3, #0]
 800a32e:	b151      	cbz	r1, 800a346 <_dtoa_r+0x56>
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	604a      	str	r2, [r1, #4]
 800a334:	2301      	movs	r3, #1
 800a336:	4093      	lsls	r3, r2
 800a338:	608b      	str	r3, [r1, #8]
 800a33a:	4630      	mov	r0, r6
 800a33c:	f001 f93a 	bl	800b5b4 <_Bfree>
 800a340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	f1b9 0300 	subs.w	r3, r9, #0
 800a34a:	bfbb      	ittet	lt
 800a34c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a350:	9303      	strlt	r3, [sp, #12]
 800a352:	2300      	movge	r3, #0
 800a354:	2201      	movlt	r2, #1
 800a356:	bfac      	ite	ge
 800a358:	6023      	strge	r3, [r4, #0]
 800a35a:	6022      	strlt	r2, [r4, #0]
 800a35c:	4b9c      	ldr	r3, [pc, #624]	; (800a5d0 <_dtoa_r+0x2e0>)
 800a35e:	9c03      	ldr	r4, [sp, #12]
 800a360:	43a3      	bics	r3, r4
 800a362:	d11a      	bne.n	800a39a <_dtoa_r+0xaa>
 800a364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a366:	f242 730f 	movw	r3, #9999	; 0x270f
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a370:	ea53 0308 	orrs.w	r3, r3, r8
 800a374:	f000 8512 	beq.w	800ad9c <_dtoa_r+0xaac>
 800a378:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a37a:	b953      	cbnz	r3, 800a392 <_dtoa_r+0xa2>
 800a37c:	4b95      	ldr	r3, [pc, #596]	; (800a5d4 <_dtoa_r+0x2e4>)
 800a37e:	e01f      	b.n	800a3c0 <_dtoa_r+0xd0>
 800a380:	4b95      	ldr	r3, [pc, #596]	; (800a5d8 <_dtoa_r+0x2e8>)
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	9800      	ldr	r0, [sp, #0]
 800a38c:	b015      	add	sp, #84	; 0x54
 800a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a392:	4b90      	ldr	r3, [pc, #576]	; (800a5d4 <_dtoa_r+0x2e4>)
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	3303      	adds	r3, #3
 800a398:	e7f5      	b.n	800a386 <_dtoa_r+0x96>
 800a39a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a39e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a3aa:	d10b      	bne.n	800a3c4 <_dtoa_r+0xd4>
 800a3ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 84ee 	beq.w	800ad96 <_dtoa_r+0xaa6>
 800a3ba:	4888      	ldr	r0, [pc, #544]	; (800a5dc <_dtoa_r+0x2ec>)
 800a3bc:	6018      	str	r0, [r3, #0]
 800a3be:	1e43      	subs	r3, r0, #1
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	e7e2      	b.n	800a38a <_dtoa_r+0x9a>
 800a3c4:	a913      	add	r1, sp, #76	; 0x4c
 800a3c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a3ca:	aa12      	add	r2, sp, #72	; 0x48
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f001 fc99 	bl	800bd04 <__d2b>
 800a3d2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a3da:	2900      	cmp	r1, #0
 800a3dc:	d047      	beq.n	800a46e <_dtoa_r+0x17e>
 800a3de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a3e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a3e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a3ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a3f4:	2400      	movs	r4, #0
 800a3f6:	ec43 2b16 	vmov	d6, r2, r3
 800a3fa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a3fe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a5b0 <_dtoa_r+0x2c0>
 800a402:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a406:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a5b8 <_dtoa_r+0x2c8>
 800a40a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a40e:	eeb0 7b46 	vmov.f64	d7, d6
 800a412:	ee06 1a90 	vmov	s13, r1
 800a416:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a41a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a5c0 <_dtoa_r+0x2d0>
 800a41e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a422:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a426:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42e:	ee16 ba90 	vmov	fp, s13
 800a432:	9411      	str	r4, [sp, #68]	; 0x44
 800a434:	d508      	bpl.n	800a448 <_dtoa_r+0x158>
 800a436:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a43a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a442:	bf18      	it	ne
 800a444:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a448:	f1bb 0f16 	cmp.w	fp, #22
 800a44c:	d832      	bhi.n	800a4b4 <_dtoa_r+0x1c4>
 800a44e:	4b64      	ldr	r3, [pc, #400]	; (800a5e0 <_dtoa_r+0x2f0>)
 800a450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a454:	ed93 7b00 	vldr	d7, [r3]
 800a458:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a45c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	d501      	bpl.n	800a46a <_dtoa_r+0x17a>
 800a466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a46a:	2300      	movs	r3, #0
 800a46c:	e023      	b.n	800a4b6 <_dtoa_r+0x1c6>
 800a46e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a470:	4401      	add	r1, r0
 800a472:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a476:	2b20      	cmp	r3, #32
 800a478:	bfc3      	ittte	gt
 800a47a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a47e:	fa04 f303 	lslgt.w	r3, r4, r3
 800a482:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a486:	f1c3 0320 	rsble	r3, r3, #32
 800a48a:	bfc6      	itte	gt
 800a48c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a490:	ea43 0308 	orrgt.w	r3, r3, r8
 800a494:	fa08 f303 	lslle.w	r3, r8, r3
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a4a0:	3901      	subs	r1, #1
 800a4a2:	ed8d 7b00 	vstr	d7, [sp]
 800a4a6:	9c01      	ldr	r4, [sp, #4]
 800a4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a4b0:	2401      	movs	r4, #1
 800a4b2:	e7a0      	b.n	800a3f6 <_dtoa_r+0x106>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b8:	1a43      	subs	r3, r0, r1
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	bf45      	ittet	mi
 800a4be:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4c2:	9305      	strmi	r3, [sp, #20]
 800a4c4:	2300      	movpl	r3, #0
 800a4c6:	2300      	movmi	r3, #0
 800a4c8:	9206      	str	r2, [sp, #24]
 800a4ca:	bf54      	ite	pl
 800a4cc:	9305      	strpl	r3, [sp, #20]
 800a4ce:	9306      	strmi	r3, [sp, #24]
 800a4d0:	f1bb 0f00 	cmp.w	fp, #0
 800a4d4:	db18      	blt.n	800a508 <_dtoa_r+0x218>
 800a4d6:	9b06      	ldr	r3, [sp, #24]
 800a4d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a4dc:	445b      	add	r3, fp
 800a4de:	9306      	str	r3, [sp, #24]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9a07      	ldr	r2, [sp, #28]
 800a4e4:	2a09      	cmp	r2, #9
 800a4e6:	d849      	bhi.n	800a57c <_dtoa_r+0x28c>
 800a4e8:	2a05      	cmp	r2, #5
 800a4ea:	bfc4      	itt	gt
 800a4ec:	3a04      	subgt	r2, #4
 800a4ee:	9207      	strgt	r2, [sp, #28]
 800a4f0:	9a07      	ldr	r2, [sp, #28]
 800a4f2:	f1a2 0202 	sub.w	r2, r2, #2
 800a4f6:	bfcc      	ite	gt
 800a4f8:	2400      	movgt	r4, #0
 800a4fa:	2401      	movle	r4, #1
 800a4fc:	2a03      	cmp	r2, #3
 800a4fe:	d848      	bhi.n	800a592 <_dtoa_r+0x2a2>
 800a500:	e8df f002 	tbb	[pc, r2]
 800a504:	3a2c2e0b 	.word	0x3a2c2e0b
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	eba3 030b 	sub.w	r3, r3, fp
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	920e      	str	r2, [sp, #56]	; 0x38
 800a514:	f1cb 0300 	rsb	r3, fp, #0
 800a518:	e7e3      	b.n	800a4e2 <_dtoa_r+0x1f2>
 800a51a:	2200      	movs	r2, #0
 800a51c:	9208      	str	r2, [sp, #32]
 800a51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a520:	2a00      	cmp	r2, #0
 800a522:	dc39      	bgt.n	800a598 <_dtoa_r+0x2a8>
 800a524:	f04f 0a01 	mov.w	sl, #1
 800a528:	46d1      	mov	r9, sl
 800a52a:	4652      	mov	r2, sl
 800a52c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a530:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a532:	2100      	movs	r1, #0
 800a534:	6079      	str	r1, [r7, #4]
 800a536:	2004      	movs	r0, #4
 800a538:	f100 0c14 	add.w	ip, r0, #20
 800a53c:	4594      	cmp	ip, r2
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	d92f      	bls.n	800a5a2 <_dtoa_r+0x2b2>
 800a542:	4630      	mov	r0, r6
 800a544:	930c      	str	r3, [sp, #48]	; 0x30
 800a546:	f000 fff5 	bl	800b534 <_Balloc>
 800a54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a54c:	9000      	str	r0, [sp, #0]
 800a54e:	4602      	mov	r2, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d149      	bne.n	800a5e8 <_dtoa_r+0x2f8>
 800a554:	4b23      	ldr	r3, [pc, #140]	; (800a5e4 <_dtoa_r+0x2f4>)
 800a556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a55a:	e6df      	b.n	800a31c <_dtoa_r+0x2c>
 800a55c:	2201      	movs	r2, #1
 800a55e:	e7dd      	b.n	800a51c <_dtoa_r+0x22c>
 800a560:	2200      	movs	r2, #0
 800a562:	9208      	str	r2, [sp, #32]
 800a564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a566:	eb0b 0a02 	add.w	sl, fp, r2
 800a56a:	f10a 0901 	add.w	r9, sl, #1
 800a56e:	464a      	mov	r2, r9
 800a570:	2a01      	cmp	r2, #1
 800a572:	bfb8      	it	lt
 800a574:	2201      	movlt	r2, #1
 800a576:	e7db      	b.n	800a530 <_dtoa_r+0x240>
 800a578:	2201      	movs	r2, #1
 800a57a:	e7f2      	b.n	800a562 <_dtoa_r+0x272>
 800a57c:	2401      	movs	r4, #1
 800a57e:	2200      	movs	r2, #0
 800a580:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a584:	f04f 3aff 	mov.w	sl, #4294967295
 800a588:	2100      	movs	r1, #0
 800a58a:	46d1      	mov	r9, sl
 800a58c:	2212      	movs	r2, #18
 800a58e:	9109      	str	r1, [sp, #36]	; 0x24
 800a590:	e7ce      	b.n	800a530 <_dtoa_r+0x240>
 800a592:	2201      	movs	r2, #1
 800a594:	9208      	str	r2, [sp, #32]
 800a596:	e7f5      	b.n	800a584 <_dtoa_r+0x294>
 800a598:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a59c:	46d1      	mov	r9, sl
 800a59e:	4652      	mov	r2, sl
 800a5a0:	e7c6      	b.n	800a530 <_dtoa_r+0x240>
 800a5a2:	3101      	adds	r1, #1
 800a5a4:	6079      	str	r1, [r7, #4]
 800a5a6:	0040      	lsls	r0, r0, #1
 800a5a8:	e7c6      	b.n	800a538 <_dtoa_r+0x248>
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	636f4361 	.word	0x636f4361
 800a5b4:	3fd287a7 	.word	0x3fd287a7
 800a5b8:	8b60c8b3 	.word	0x8b60c8b3
 800a5bc:	3fc68a28 	.word	0x3fc68a28
 800a5c0:	509f79fb 	.word	0x509f79fb
 800a5c4:	3fd34413 	.word	0x3fd34413
 800a5c8:	0800d8bd 	.word	0x0800d8bd
 800a5cc:	0800d8d4 	.word	0x0800d8d4
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	0800d8b9 	.word	0x0800d8b9
 800a5d8:	0800d8b0 	.word	0x0800d8b0
 800a5dc:	0800db3a 	.word	0x0800db3a
 800a5e0:	0800da50 	.word	0x0800da50
 800a5e4:	0800d933 	.word	0x0800d933
 800a5e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a5ea:	9900      	ldr	r1, [sp, #0]
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	f1b9 0f0e 	cmp.w	r9, #14
 800a5f2:	d872      	bhi.n	800a6da <_dtoa_r+0x3ea>
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	d070      	beq.n	800a6da <_dtoa_r+0x3ea>
 800a5f8:	f1bb 0f00 	cmp.w	fp, #0
 800a5fc:	f340 80a6 	ble.w	800a74c <_dtoa_r+0x45c>
 800a600:	49ca      	ldr	r1, [pc, #808]	; (800a92c <_dtoa_r+0x63c>)
 800a602:	f00b 020f 	and.w	r2, fp, #15
 800a606:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a60a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a60e:	ed92 7b00 	vldr	d7, [r2]
 800a612:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a616:	f000 808d 	beq.w	800a734 <_dtoa_r+0x444>
 800a61a:	4ac5      	ldr	r2, [pc, #788]	; (800a930 <_dtoa_r+0x640>)
 800a61c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a620:	ed92 6b08 	vldr	d6, [r2, #32]
 800a624:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a628:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a62c:	f001 010f 	and.w	r1, r1, #15
 800a630:	2203      	movs	r2, #3
 800a632:	48bf      	ldr	r0, [pc, #764]	; (800a930 <_dtoa_r+0x640>)
 800a634:	2900      	cmp	r1, #0
 800a636:	d17f      	bne.n	800a738 <_dtoa_r+0x448>
 800a638:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a63c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a644:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a646:	2900      	cmp	r1, #0
 800a648:	f000 80b2 	beq.w	800a7b0 <_dtoa_r+0x4c0>
 800a64c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a650:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a654:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65c:	f140 80a8 	bpl.w	800a7b0 <_dtoa_r+0x4c0>
 800a660:	f1b9 0f00 	cmp.w	r9, #0
 800a664:	f000 80a4 	beq.w	800a7b0 <_dtoa_r+0x4c0>
 800a668:	f1ba 0f00 	cmp.w	sl, #0
 800a66c:	dd31      	ble.n	800a6d2 <_dtoa_r+0x3e2>
 800a66e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a672:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a676:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a67a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a67e:	3201      	adds	r2, #1
 800a680:	4650      	mov	r0, sl
 800a682:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a686:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a68a:	ee07 2a90 	vmov	s15, r2
 800a68e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a692:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a696:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a69a:	9c03      	ldr	r4, [sp, #12]
 800a69c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a6a0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f040 8086 	bne.w	800a7b6 <_dtoa_r+0x4c6>
 800a6aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a6b2:	ec42 1b17 	vmov	d7, r1, r2
 800a6b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6be:	f300 8272 	bgt.w	800aba6 <_dtoa_r+0x8b6>
 800a6c2:	eeb1 7b47 	vneg.f64	d7, d7
 800a6c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ce:	f100 8267 	bmi.w	800aba0 <_dtoa_r+0x8b0>
 800a6d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a6d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a6da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	f2c0 8129 	blt.w	800a934 <_dtoa_r+0x644>
 800a6e2:	f1bb 0f0e 	cmp.w	fp, #14
 800a6e6:	f300 8125 	bgt.w	800a934 <_dtoa_r+0x644>
 800a6ea:	4b90      	ldr	r3, [pc, #576]	; (800a92c <_dtoa_r+0x63c>)
 800a6ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6f0:	ed93 6b00 	vldr	d6, [r3]
 800a6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f280 80c3 	bge.w	800a882 <_dtoa_r+0x592>
 800a6fc:	f1b9 0f00 	cmp.w	r9, #0
 800a700:	f300 80bf 	bgt.w	800a882 <_dtoa_r+0x592>
 800a704:	f040 824c 	bne.w	800aba0 <_dtoa_r+0x8b0>
 800a708:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a70c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a710:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a714:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71c:	464c      	mov	r4, r9
 800a71e:	464f      	mov	r7, r9
 800a720:	f280 8222 	bge.w	800ab68 <_dtoa_r+0x878>
 800a724:	f8dd 8000 	ldr.w	r8, [sp]
 800a728:	2331      	movs	r3, #49	; 0x31
 800a72a:	f808 3b01 	strb.w	r3, [r8], #1
 800a72e:	f10b 0b01 	add.w	fp, fp, #1
 800a732:	e21e      	b.n	800ab72 <_dtoa_r+0x882>
 800a734:	2202      	movs	r2, #2
 800a736:	e77c      	b.n	800a632 <_dtoa_r+0x342>
 800a738:	07cc      	lsls	r4, r1, #31
 800a73a:	d504      	bpl.n	800a746 <_dtoa_r+0x456>
 800a73c:	ed90 6b00 	vldr	d6, [r0]
 800a740:	3201      	adds	r2, #1
 800a742:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a746:	1049      	asrs	r1, r1, #1
 800a748:	3008      	adds	r0, #8
 800a74a:	e773      	b.n	800a634 <_dtoa_r+0x344>
 800a74c:	d02e      	beq.n	800a7ac <_dtoa_r+0x4bc>
 800a74e:	f1cb 0100 	rsb	r1, fp, #0
 800a752:	4a76      	ldr	r2, [pc, #472]	; (800a92c <_dtoa_r+0x63c>)
 800a754:	f001 000f 	and.w	r0, r1, #15
 800a758:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a75c:	ed92 7b00 	vldr	d7, [r2]
 800a760:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a764:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a768:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a76c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a770:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a774:	486e      	ldr	r0, [pc, #440]	; (800a930 <_dtoa_r+0x640>)
 800a776:	1109      	asrs	r1, r1, #4
 800a778:	2400      	movs	r4, #0
 800a77a:	2202      	movs	r2, #2
 800a77c:	b939      	cbnz	r1, 800a78e <_dtoa_r+0x49e>
 800a77e:	2c00      	cmp	r4, #0
 800a780:	f43f af60 	beq.w	800a644 <_dtoa_r+0x354>
 800a784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a78c:	e75a      	b.n	800a644 <_dtoa_r+0x354>
 800a78e:	07cf      	lsls	r7, r1, #31
 800a790:	d509      	bpl.n	800a7a6 <_dtoa_r+0x4b6>
 800a792:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a796:	ed90 7b00 	vldr	d7, [r0]
 800a79a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a79e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a7a2:	3201      	adds	r2, #1
 800a7a4:	2401      	movs	r4, #1
 800a7a6:	1049      	asrs	r1, r1, #1
 800a7a8:	3008      	adds	r0, #8
 800a7aa:	e7e7      	b.n	800a77c <_dtoa_r+0x48c>
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	e749      	b.n	800a644 <_dtoa_r+0x354>
 800a7b0:	465f      	mov	r7, fp
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	e765      	b.n	800a682 <_dtoa_r+0x392>
 800a7b6:	ec42 1b17 	vmov	d7, r1, r2
 800a7ba:	4a5c      	ldr	r2, [pc, #368]	; (800a92c <_dtoa_r+0x63c>)
 800a7bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a7c0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a7c4:	9a00      	ldr	r2, [sp, #0]
 800a7c6:	1814      	adds	r4, r2, r0
 800a7c8:	9a08      	ldr	r2, [sp, #32]
 800a7ca:	b352      	cbz	r2, 800a822 <_dtoa_r+0x532>
 800a7cc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a7d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a7d4:	f8dd 8000 	ldr.w	r8, [sp]
 800a7d8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a7dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a7e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7e8:	ee14 2a90 	vmov	r2, s9
 800a7ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7f0:	3230      	adds	r2, #48	; 0x30
 800a7f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fe:	f808 2b01 	strb.w	r2, [r8], #1
 800a802:	d439      	bmi.n	800a878 <_dtoa_r+0x588>
 800a804:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a808:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a810:	d472      	bmi.n	800a8f8 <_dtoa_r+0x608>
 800a812:	45a0      	cmp	r8, r4
 800a814:	f43f af5d 	beq.w	800a6d2 <_dtoa_r+0x3e2>
 800a818:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a81c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a820:	e7e0      	b.n	800a7e4 <_dtoa_r+0x4f4>
 800a822:	f8dd 8000 	ldr.w	r8, [sp]
 800a826:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a82a:	4621      	mov	r1, r4
 800a82c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a830:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a834:	ee14 2a90 	vmov	r2, s9
 800a838:	3230      	adds	r2, #48	; 0x30
 800a83a:	f808 2b01 	strb.w	r2, [r8], #1
 800a83e:	45a0      	cmp	r8, r4
 800a840:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a844:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a848:	d118      	bne.n	800a87c <_dtoa_r+0x58c>
 800a84a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a84e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a852:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	dc4d      	bgt.n	800a8f8 <_dtoa_r+0x608>
 800a85c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a860:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a868:	f57f af33 	bpl.w	800a6d2 <_dtoa_r+0x3e2>
 800a86c:	4688      	mov	r8, r1
 800a86e:	3901      	subs	r1, #1
 800a870:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a874:	2b30      	cmp	r3, #48	; 0x30
 800a876:	d0f9      	beq.n	800a86c <_dtoa_r+0x57c>
 800a878:	46bb      	mov	fp, r7
 800a87a:	e02a      	b.n	800a8d2 <_dtoa_r+0x5e2>
 800a87c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a880:	e7d6      	b.n	800a830 <_dtoa_r+0x540>
 800a882:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a886:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a88a:	f8dd 8000 	ldr.w	r8, [sp]
 800a88e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a892:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a896:	ee15 3a10 	vmov	r3, s10
 800a89a:	3330      	adds	r3, #48	; 0x30
 800a89c:	f808 3b01 	strb.w	r3, [r8], #1
 800a8a0:	9b00      	ldr	r3, [sp, #0]
 800a8a2:	eba8 0303 	sub.w	r3, r8, r3
 800a8a6:	4599      	cmp	r9, r3
 800a8a8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a8ac:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a8b0:	d133      	bne.n	800a91a <_dtoa_r+0x62a>
 800a8b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a8b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	dc1a      	bgt.n	800a8f6 <_dtoa_r+0x606>
 800a8c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c8:	d103      	bne.n	800a8d2 <_dtoa_r+0x5e2>
 800a8ca:	ee15 3a10 	vmov	r3, s10
 800a8ce:	07d9      	lsls	r1, r3, #31
 800a8d0:	d411      	bmi.n	800a8f6 <_dtoa_r+0x606>
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f000 fe6d 	bl	800b5b4 <_Bfree>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8de:	f888 3000 	strb.w	r3, [r8]
 800a8e2:	f10b 0301 	add.w	r3, fp, #1
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f43f ad4d 	beq.w	800a38a <_dtoa_r+0x9a>
 800a8f0:	f8c3 8000 	str.w	r8, [r3]
 800a8f4:	e549      	b.n	800a38a <_dtoa_r+0x9a>
 800a8f6:	465f      	mov	r7, fp
 800a8f8:	4643      	mov	r3, r8
 800a8fa:	4698      	mov	r8, r3
 800a8fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a900:	2a39      	cmp	r2, #57	; 0x39
 800a902:	d106      	bne.n	800a912 <_dtoa_r+0x622>
 800a904:	9a00      	ldr	r2, [sp, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d1f7      	bne.n	800a8fa <_dtoa_r+0x60a>
 800a90a:	9900      	ldr	r1, [sp, #0]
 800a90c:	2230      	movs	r2, #48	; 0x30
 800a90e:	3701      	adds	r7, #1
 800a910:	700a      	strb	r2, [r1, #0]
 800a912:	781a      	ldrb	r2, [r3, #0]
 800a914:	3201      	adds	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]
 800a918:	e7ae      	b.n	800a878 <_dtoa_r+0x588>
 800a91a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a91e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	d1b2      	bne.n	800a88e <_dtoa_r+0x59e>
 800a928:	e7d3      	b.n	800a8d2 <_dtoa_r+0x5e2>
 800a92a:	bf00      	nop
 800a92c:	0800da50 	.word	0x0800da50
 800a930:	0800da28 	.word	0x0800da28
 800a934:	9908      	ldr	r1, [sp, #32]
 800a936:	2900      	cmp	r1, #0
 800a938:	f000 80d1 	beq.w	800aade <_dtoa_r+0x7ee>
 800a93c:	9907      	ldr	r1, [sp, #28]
 800a93e:	2901      	cmp	r1, #1
 800a940:	f300 80b4 	bgt.w	800aaac <_dtoa_r+0x7bc>
 800a944:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a946:	2900      	cmp	r1, #0
 800a948:	f000 80ac 	beq.w	800aaa4 <_dtoa_r+0x7b4>
 800a94c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a950:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a954:	461c      	mov	r4, r3
 800a956:	930a      	str	r3, [sp, #40]	; 0x28
 800a958:	9b05      	ldr	r3, [sp, #20]
 800a95a:	4413      	add	r3, r2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	2101      	movs	r1, #1
 800a962:	4413      	add	r3, r2
 800a964:	4630      	mov	r0, r6
 800a966:	9306      	str	r3, [sp, #24]
 800a968:	f000 ff2a 	bl	800b7c0 <__i2b>
 800a96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96e:	4607      	mov	r7, r0
 800a970:	f1b8 0f00 	cmp.w	r8, #0
 800a974:	dd0d      	ble.n	800a992 <_dtoa_r+0x6a2>
 800a976:	9a06      	ldr	r2, [sp, #24]
 800a978:	2a00      	cmp	r2, #0
 800a97a:	dd0a      	ble.n	800a992 <_dtoa_r+0x6a2>
 800a97c:	4542      	cmp	r2, r8
 800a97e:	9905      	ldr	r1, [sp, #20]
 800a980:	bfa8      	it	ge
 800a982:	4642      	movge	r2, r8
 800a984:	1a89      	subs	r1, r1, r2
 800a986:	9105      	str	r1, [sp, #20]
 800a988:	9906      	ldr	r1, [sp, #24]
 800a98a:	eba8 0802 	sub.w	r8, r8, r2
 800a98e:	1a8a      	subs	r2, r1, r2
 800a990:	9206      	str	r2, [sp, #24]
 800a992:	b303      	cbz	r3, 800a9d6 <_dtoa_r+0x6e6>
 800a994:	9a08      	ldr	r2, [sp, #32]
 800a996:	2a00      	cmp	r2, #0
 800a998:	f000 80a6 	beq.w	800aae8 <_dtoa_r+0x7f8>
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	dd13      	ble.n	800a9c8 <_dtoa_r+0x6d8>
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a9a8:	f000 ffc6 	bl	800b938 <__pow5mult>
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 ff1a 	bl	800b7ec <__multiply>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	900a      	str	r0, [sp, #40]	; 0x28
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f000 fdf9 	bl	800b5b4 <_Bfree>
 800a9c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9c6:	4615      	mov	r5, r2
 800a9c8:	1b1a      	subs	r2, r3, r4
 800a9ca:	d004      	beq.n	800a9d6 <_dtoa_r+0x6e6>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f000 ffb2 	bl	800b938 <__pow5mult>
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 fef1 	bl	800b7c0 <__i2b>
 800a9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	f340 8082 	ble.w	800aaec <_dtoa_r+0x7fc>
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f000 ffa3 	bl	800b938 <__pow5mult>
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	dd7b      	ble.n	800aaf2 <_dtoa_r+0x802>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a9fe:	6922      	ldr	r2, [r4, #16]
 800aa00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aa04:	6910      	ldr	r0, [r2, #16]
 800aa06:	f000 fe8b 	bl	800b720 <__hi0bits>
 800aa0a:	f1c0 0020 	rsb	r0, r0, #32
 800aa0e:	9b06      	ldr	r3, [sp, #24]
 800aa10:	4418      	add	r0, r3
 800aa12:	f010 001f 	ands.w	r0, r0, #31
 800aa16:	f000 808d 	beq.w	800ab34 <_dtoa_r+0x844>
 800aa1a:	f1c0 0220 	rsb	r2, r0, #32
 800aa1e:	2a04      	cmp	r2, #4
 800aa20:	f340 8086 	ble.w	800ab30 <_dtoa_r+0x840>
 800aa24:	f1c0 001c 	rsb	r0, r0, #28
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	4403      	add	r3, r0
 800aa2c:	9305      	str	r3, [sp, #20]
 800aa2e:	9b06      	ldr	r3, [sp, #24]
 800aa30:	4403      	add	r3, r0
 800aa32:	4480      	add	r8, r0
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	9b05      	ldr	r3, [sp, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dd05      	ble.n	800aa48 <_dtoa_r+0x758>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4630      	mov	r0, r6
 800aa42:	f000 ffd3 	bl	800b9ec <__lshift>
 800aa46:	4605      	mov	r5, r0
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dd05      	ble.n	800aa5a <_dtoa_r+0x76a>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	461a      	mov	r2, r3
 800aa52:	4630      	mov	r0, r6
 800aa54:	f000 ffca 	bl	800b9ec <__lshift>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d06b      	beq.n	800ab38 <_dtoa_r+0x848>
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f001 f82e 	bl	800bac4 <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	da65      	bge.n	800ab38 <_dtoa_r+0x848>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4629      	mov	r1, r5
 800aa70:	220a      	movs	r2, #10
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 fdc0 	bl	800b5f8 <__multadd>
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa7e:	4605      	mov	r5, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8192 	beq.w	800adaa <_dtoa_r+0xaba>
 800aa86:	4639      	mov	r1, r7
 800aa88:	2300      	movs	r3, #0
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f000 fdb3 	bl	800b5f8 <__multadd>
 800aa92:	f1ba 0f00 	cmp.w	sl, #0
 800aa96:	4607      	mov	r7, r0
 800aa98:	f300 808e 	bgt.w	800abb8 <_dtoa_r+0x8c8>
 800aa9c:	9b07      	ldr	r3, [sp, #28]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	dc51      	bgt.n	800ab46 <_dtoa_r+0x856>
 800aaa2:	e089      	b.n	800abb8 <_dtoa_r+0x8c8>
 800aaa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aaa6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aaaa:	e751      	b.n	800a950 <_dtoa_r+0x660>
 800aaac:	f109 34ff 	add.w	r4, r9, #4294967295
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	bfbf      	itttt	lt
 800aab4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800aab6:	1ae3      	sublt	r3, r4, r3
 800aab8:	18d2      	addlt	r2, r2, r3
 800aaba:	4613      	movlt	r3, r2
 800aabc:	bfb7      	itett	lt
 800aabe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aac0:	1b1c      	subge	r4, r3, r4
 800aac2:	4623      	movlt	r3, r4
 800aac4:	2400      	movlt	r4, #0
 800aac6:	f1b9 0f00 	cmp.w	r9, #0
 800aaca:	bfb5      	itete	lt
 800aacc:	9a05      	ldrlt	r2, [sp, #20]
 800aace:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800aad2:	eba2 0809 	sublt.w	r8, r2, r9
 800aad6:	464a      	movge	r2, r9
 800aad8:	bfb8      	it	lt
 800aada:	2200      	movlt	r2, #0
 800aadc:	e73b      	b.n	800a956 <_dtoa_r+0x666>
 800aade:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800aae2:	9f08      	ldr	r7, [sp, #32]
 800aae4:	461c      	mov	r4, r3
 800aae6:	e743      	b.n	800a970 <_dtoa_r+0x680>
 800aae8:	461a      	mov	r2, r3
 800aaea:	e76f      	b.n	800a9cc <_dtoa_r+0x6dc>
 800aaec:	9b07      	ldr	r3, [sp, #28]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	dc18      	bgt.n	800ab24 <_dtoa_r+0x834>
 800aaf2:	9b02      	ldr	r3, [sp, #8]
 800aaf4:	b9b3      	cbnz	r3, 800ab24 <_dtoa_r+0x834>
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aafc:	b9a2      	cbnz	r2, 800ab28 <_dtoa_r+0x838>
 800aafe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab02:	0d12      	lsrs	r2, r2, #20
 800ab04:	0512      	lsls	r2, r2, #20
 800ab06:	b18a      	cbz	r2, 800ab2c <_dtoa_r+0x83c>
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	9b06      	ldr	r3, [sp, #24]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9306      	str	r3, [sp, #24]
 800ab14:	2301      	movs	r3, #1
 800ab16:	930a      	str	r3, [sp, #40]	; 0x28
 800ab18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f47f af6f 	bne.w	800a9fe <_dtoa_r+0x70e>
 800ab20:	2001      	movs	r0, #1
 800ab22:	e774      	b.n	800aa0e <_dtoa_r+0x71e>
 800ab24:	2300      	movs	r3, #0
 800ab26:	e7f6      	b.n	800ab16 <_dtoa_r+0x826>
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	e7f4      	b.n	800ab16 <_dtoa_r+0x826>
 800ab2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab2e:	e7f3      	b.n	800ab18 <_dtoa_r+0x828>
 800ab30:	d081      	beq.n	800aa36 <_dtoa_r+0x746>
 800ab32:	4610      	mov	r0, r2
 800ab34:	301c      	adds	r0, #28
 800ab36:	e777      	b.n	800aa28 <_dtoa_r+0x738>
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	dc37      	bgt.n	800abae <_dtoa_r+0x8be>
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	dd34      	ble.n	800abae <_dtoa_r+0x8be>
 800ab44:	46ca      	mov	sl, r9
 800ab46:	f1ba 0f00 	cmp.w	sl, #0
 800ab4a:	d10d      	bne.n	800ab68 <_dtoa_r+0x878>
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4653      	mov	r3, sl
 800ab50:	2205      	movs	r2, #5
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 fd50 	bl	800b5f8 <__multadd>
 800ab58:	4601      	mov	r1, r0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f000 ffb1 	bl	800bac4 <__mcmp>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f73f adde 	bgt.w	800a724 <_dtoa_r+0x434>
 800ab68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6a:	f8dd 8000 	ldr.w	r8, [sp]
 800ab6e:	ea6f 0b03 	mvn.w	fp, r3
 800ab72:	f04f 0900 	mov.w	r9, #0
 800ab76:	4621      	mov	r1, r4
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f000 fd1b 	bl	800b5b4 <_Bfree>
 800ab7e:	2f00      	cmp	r7, #0
 800ab80:	f43f aea7 	beq.w	800a8d2 <_dtoa_r+0x5e2>
 800ab84:	f1b9 0f00 	cmp.w	r9, #0
 800ab88:	d005      	beq.n	800ab96 <_dtoa_r+0x8a6>
 800ab8a:	45b9      	cmp	r9, r7
 800ab8c:	d003      	beq.n	800ab96 <_dtoa_r+0x8a6>
 800ab8e:	4649      	mov	r1, r9
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 fd0f 	bl	800b5b4 <_Bfree>
 800ab96:	4639      	mov	r1, r7
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 fd0b 	bl	800b5b4 <_Bfree>
 800ab9e:	e698      	b.n	800a8d2 <_dtoa_r+0x5e2>
 800aba0:	2400      	movs	r4, #0
 800aba2:	4627      	mov	r7, r4
 800aba4:	e7e0      	b.n	800ab68 <_dtoa_r+0x878>
 800aba6:	46bb      	mov	fp, r7
 800aba8:	4604      	mov	r4, r0
 800abaa:	4607      	mov	r7, r0
 800abac:	e5ba      	b.n	800a724 <_dtoa_r+0x434>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	46ca      	mov	sl, r9
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 8100 	beq.w	800adb8 <_dtoa_r+0xac8>
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	dd05      	ble.n	800abca <_dtoa_r+0x8da>
 800abbe:	4639      	mov	r1, r7
 800abc0:	4642      	mov	r2, r8
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 ff12 	bl	800b9ec <__lshift>
 800abc8:	4607      	mov	r7, r0
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d05d      	beq.n	800ac8c <_dtoa_r+0x99c>
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	4630      	mov	r0, r6
 800abd4:	f000 fcae 	bl	800b534 <_Balloc>
 800abd8:	4680      	mov	r8, r0
 800abda:	b928      	cbnz	r0, 800abe8 <_dtoa_r+0x8f8>
 800abdc:	4b82      	ldr	r3, [pc, #520]	; (800ade8 <_dtoa_r+0xaf8>)
 800abde:	4602      	mov	r2, r0
 800abe0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abe4:	f7ff bb9a 	b.w	800a31c <_dtoa_r+0x2c>
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	3202      	adds	r2, #2
 800abec:	0092      	lsls	r2, r2, #2
 800abee:	f107 010c 	add.w	r1, r7, #12
 800abf2:	300c      	adds	r0, #12
 800abf4:	f7fd fd22 	bl	800863c <memcpy>
 800abf8:	2201      	movs	r2, #1
 800abfa:	4641      	mov	r1, r8
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 fef5 	bl	800b9ec <__lshift>
 800ac02:	9b00      	ldr	r3, [sp, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	9305      	str	r3, [sp, #20]
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	4453      	add	r3, sl
 800ac0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac0e:	9b02      	ldr	r3, [sp, #8]
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	46b9      	mov	r9, r7
 800ac16:	9308      	str	r3, [sp, #32]
 800ac18:	4607      	mov	r7, r0
 800ac1a:	9b05      	ldr	r3, [sp, #20]
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	4628      	mov	r0, r5
 800ac22:	9302      	str	r3, [sp, #8]
 800ac24:	f7ff fad6 	bl	800a1d4 <quorem>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	3330      	adds	r3, #48	; 0x30
 800ac2c:	9006      	str	r0, [sp, #24]
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4628      	mov	r0, r5
 800ac32:	930a      	str	r3, [sp, #40]	; 0x28
 800ac34:	f000 ff46 	bl	800bac4 <__mcmp>
 800ac38:	463a      	mov	r2, r7
 800ac3a:	4682      	mov	sl, r0
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f000 ff5c 	bl	800bafc <__mdiff>
 800ac44:	68c2      	ldr	r2, [r0, #12]
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	4680      	mov	r8, r0
 800ac4a:	bb0a      	cbnz	r2, 800ac90 <_dtoa_r+0x9a0>
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 ff38 	bl	800bac4 <__mcmp>
 800ac54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac56:	4602      	mov	r2, r0
 800ac58:	4641      	mov	r1, r8
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	920e      	str	r2, [sp, #56]	; 0x38
 800ac5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac60:	f000 fca8 	bl	800b5b4 <_Bfree>
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ac6c:	ea43 0102 	orr.w	r1, r3, r2
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	430b      	orrs	r3, r1
 800ac74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac76:	d10d      	bne.n	800ac94 <_dtoa_r+0x9a4>
 800ac78:	2b39      	cmp	r3, #57	; 0x39
 800ac7a:	d029      	beq.n	800acd0 <_dtoa_r+0x9e0>
 800ac7c:	f1ba 0f00 	cmp.w	sl, #0
 800ac80:	dd01      	ble.n	800ac86 <_dtoa_r+0x996>
 800ac82:	9b06      	ldr	r3, [sp, #24]
 800ac84:	3331      	adds	r3, #49	; 0x31
 800ac86:	9a02      	ldr	r2, [sp, #8]
 800ac88:	7013      	strb	r3, [r2, #0]
 800ac8a:	e774      	b.n	800ab76 <_dtoa_r+0x886>
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	e7b8      	b.n	800ac02 <_dtoa_r+0x912>
 800ac90:	2201      	movs	r2, #1
 800ac92:	e7e1      	b.n	800ac58 <_dtoa_r+0x968>
 800ac94:	f1ba 0f00 	cmp.w	sl, #0
 800ac98:	db06      	blt.n	800aca8 <_dtoa_r+0x9b8>
 800ac9a:	9907      	ldr	r1, [sp, #28]
 800ac9c:	ea41 0a0a 	orr.w	sl, r1, sl
 800aca0:	9908      	ldr	r1, [sp, #32]
 800aca2:	ea5a 0101 	orrs.w	r1, sl, r1
 800aca6:	d120      	bne.n	800acea <_dtoa_r+0x9fa>
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	ddec      	ble.n	800ac86 <_dtoa_r+0x996>
 800acac:	4629      	mov	r1, r5
 800acae:	2201      	movs	r2, #1
 800acb0:	4630      	mov	r0, r6
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	f000 fe9a 	bl	800b9ec <__lshift>
 800acb8:	4621      	mov	r1, r4
 800acba:	4605      	mov	r5, r0
 800acbc:	f000 ff02 	bl	800bac4 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	dc02      	bgt.n	800accc <_dtoa_r+0x9dc>
 800acc6:	d1de      	bne.n	800ac86 <_dtoa_r+0x996>
 800acc8:	07da      	lsls	r2, r3, #31
 800acca:	d5dc      	bpl.n	800ac86 <_dtoa_r+0x996>
 800accc:	2b39      	cmp	r3, #57	; 0x39
 800acce:	d1d8      	bne.n	800ac82 <_dtoa_r+0x992>
 800acd0:	9a02      	ldr	r2, [sp, #8]
 800acd2:	2339      	movs	r3, #57	; 0x39
 800acd4:	7013      	strb	r3, [r2, #0]
 800acd6:	4643      	mov	r3, r8
 800acd8:	4698      	mov	r8, r3
 800acda:	3b01      	subs	r3, #1
 800acdc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ace0:	2a39      	cmp	r2, #57	; 0x39
 800ace2:	d051      	beq.n	800ad88 <_dtoa_r+0xa98>
 800ace4:	3201      	adds	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e745      	b.n	800ab76 <_dtoa_r+0x886>
 800acea:	2a00      	cmp	r2, #0
 800acec:	dd03      	ble.n	800acf6 <_dtoa_r+0xa06>
 800acee:	2b39      	cmp	r3, #57	; 0x39
 800acf0:	d0ee      	beq.n	800acd0 <_dtoa_r+0x9e0>
 800acf2:	3301      	adds	r3, #1
 800acf4:	e7c7      	b.n	800ac86 <_dtoa_r+0x996>
 800acf6:	9a05      	ldr	r2, [sp, #20]
 800acf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acfe:	428a      	cmp	r2, r1
 800ad00:	d02b      	beq.n	800ad5a <_dtoa_r+0xa6a>
 800ad02:	4629      	mov	r1, r5
 800ad04:	2300      	movs	r3, #0
 800ad06:	220a      	movs	r2, #10
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 fc75 	bl	800b5f8 <__multadd>
 800ad0e:	45b9      	cmp	r9, r7
 800ad10:	4605      	mov	r5, r0
 800ad12:	f04f 0300 	mov.w	r3, #0
 800ad16:	f04f 020a 	mov.w	r2, #10
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	d107      	bne.n	800ad30 <_dtoa_r+0xa40>
 800ad20:	f000 fc6a 	bl	800b5f8 <__multadd>
 800ad24:	4681      	mov	r9, r0
 800ad26:	4607      	mov	r7, r0
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	e774      	b.n	800ac1a <_dtoa_r+0x92a>
 800ad30:	f000 fc62 	bl	800b5f8 <__multadd>
 800ad34:	4639      	mov	r1, r7
 800ad36:	4681      	mov	r9, r0
 800ad38:	2300      	movs	r3, #0
 800ad3a:	220a      	movs	r2, #10
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f000 fc5b 	bl	800b5f8 <__multadd>
 800ad42:	4607      	mov	r7, r0
 800ad44:	e7f0      	b.n	800ad28 <_dtoa_r+0xa38>
 800ad46:	f1ba 0f00 	cmp.w	sl, #0
 800ad4a:	9a00      	ldr	r2, [sp, #0]
 800ad4c:	bfcc      	ite	gt
 800ad4e:	46d0      	movgt	r8, sl
 800ad50:	f04f 0801 	movle.w	r8, #1
 800ad54:	4490      	add	r8, r2
 800ad56:	f04f 0900 	mov.w	r9, #0
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	4630      	mov	r0, r6
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	f000 fe43 	bl	800b9ec <__lshift>
 800ad66:	4621      	mov	r1, r4
 800ad68:	4605      	mov	r5, r0
 800ad6a:	f000 feab 	bl	800bac4 <__mcmp>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	dcb1      	bgt.n	800acd6 <_dtoa_r+0x9e6>
 800ad72:	d102      	bne.n	800ad7a <_dtoa_r+0xa8a>
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	07db      	lsls	r3, r3, #31
 800ad78:	d4ad      	bmi.n	800acd6 <_dtoa_r+0x9e6>
 800ad7a:	4643      	mov	r3, r8
 800ad7c:	4698      	mov	r8, r3
 800ad7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad82:	2a30      	cmp	r2, #48	; 0x30
 800ad84:	d0fa      	beq.n	800ad7c <_dtoa_r+0xa8c>
 800ad86:	e6f6      	b.n	800ab76 <_dtoa_r+0x886>
 800ad88:	9a00      	ldr	r2, [sp, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d1a4      	bne.n	800acd8 <_dtoa_r+0x9e8>
 800ad8e:	f10b 0b01 	add.w	fp, fp, #1
 800ad92:	2331      	movs	r3, #49	; 0x31
 800ad94:	e778      	b.n	800ac88 <_dtoa_r+0x998>
 800ad96:	4b15      	ldr	r3, [pc, #84]	; (800adec <_dtoa_r+0xafc>)
 800ad98:	f7ff bb12 	b.w	800a3c0 <_dtoa_r+0xd0>
 800ad9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f47f aaee 	bne.w	800a380 <_dtoa_r+0x90>
 800ada4:	4b12      	ldr	r3, [pc, #72]	; (800adf0 <_dtoa_r+0xb00>)
 800ada6:	f7ff bb0b 	b.w	800a3c0 <_dtoa_r+0xd0>
 800adaa:	f1ba 0f00 	cmp.w	sl, #0
 800adae:	dc03      	bgt.n	800adb8 <_dtoa_r+0xac8>
 800adb0:	9b07      	ldr	r3, [sp, #28]
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	f73f aec7 	bgt.w	800ab46 <_dtoa_r+0x856>
 800adb8:	f8dd 8000 	ldr.w	r8, [sp]
 800adbc:	4621      	mov	r1, r4
 800adbe:	4628      	mov	r0, r5
 800adc0:	f7ff fa08 	bl	800a1d4 <quorem>
 800adc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800adc8:	f808 3b01 	strb.w	r3, [r8], #1
 800adcc:	9a00      	ldr	r2, [sp, #0]
 800adce:	eba8 0202 	sub.w	r2, r8, r2
 800add2:	4592      	cmp	sl, r2
 800add4:	ddb7      	ble.n	800ad46 <_dtoa_r+0xa56>
 800add6:	4629      	mov	r1, r5
 800add8:	2300      	movs	r3, #0
 800adda:	220a      	movs	r2, #10
 800addc:	4630      	mov	r0, r6
 800adde:	f000 fc0b 	bl	800b5f8 <__multadd>
 800ade2:	4605      	mov	r5, r0
 800ade4:	e7ea      	b.n	800adbc <_dtoa_r+0xacc>
 800ade6:	bf00      	nop
 800ade8:	0800d933 	.word	0x0800d933
 800adec:	0800db39 	.word	0x0800db39
 800adf0:	0800d8b0 	.word	0x0800d8b0

0800adf4 <rshift>:
 800adf4:	6903      	ldr	r3, [r0, #16]
 800adf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800adfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae02:	f100 0414 	add.w	r4, r0, #20
 800ae06:	dd45      	ble.n	800ae94 <rshift+0xa0>
 800ae08:	f011 011f 	ands.w	r1, r1, #31
 800ae0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae14:	d10c      	bne.n	800ae30 <rshift+0x3c>
 800ae16:	f100 0710 	add.w	r7, r0, #16
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	42b1      	cmp	r1, r6
 800ae1e:	d334      	bcc.n	800ae8a <rshift+0x96>
 800ae20:	1a9b      	subs	r3, r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	1eea      	subs	r2, r5, #3
 800ae26:	4296      	cmp	r6, r2
 800ae28:	bf38      	it	cc
 800ae2a:	2300      	movcc	r3, #0
 800ae2c:	4423      	add	r3, r4
 800ae2e:	e015      	b.n	800ae5c <rshift+0x68>
 800ae30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae34:	f1c1 0820 	rsb	r8, r1, #32
 800ae38:	40cf      	lsrs	r7, r1
 800ae3a:	f105 0e04 	add.w	lr, r5, #4
 800ae3e:	46a1      	mov	r9, r4
 800ae40:	4576      	cmp	r6, lr
 800ae42:	46f4      	mov	ip, lr
 800ae44:	d815      	bhi.n	800ae72 <rshift+0x7e>
 800ae46:	1a9b      	subs	r3, r3, r2
 800ae48:	009a      	lsls	r2, r3, #2
 800ae4a:	3a04      	subs	r2, #4
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	42ae      	cmp	r6, r5
 800ae50:	bf38      	it	cc
 800ae52:	2200      	movcc	r2, #0
 800ae54:	18a3      	adds	r3, r4, r2
 800ae56:	50a7      	str	r7, [r4, r2]
 800ae58:	b107      	cbz	r7, 800ae5c <rshift+0x68>
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	1b1a      	subs	r2, r3, r4
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae64:	bf08      	it	eq
 800ae66:	2300      	moveq	r3, #0
 800ae68:	6102      	str	r2, [r0, #16]
 800ae6a:	bf08      	it	eq
 800ae6c:	6143      	streq	r3, [r0, #20]
 800ae6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae72:	f8dc c000 	ldr.w	ip, [ip]
 800ae76:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae7a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae7e:	f849 7b04 	str.w	r7, [r9], #4
 800ae82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae86:	40cf      	lsrs	r7, r1
 800ae88:	e7da      	b.n	800ae40 <rshift+0x4c>
 800ae8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae92:	e7c3      	b.n	800ae1c <rshift+0x28>
 800ae94:	4623      	mov	r3, r4
 800ae96:	e7e1      	b.n	800ae5c <rshift+0x68>

0800ae98 <__hexdig_fun>:
 800ae98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	d802      	bhi.n	800aea6 <__hexdig_fun+0xe>
 800aea0:	3820      	subs	r0, #32
 800aea2:	b2c0      	uxtb	r0, r0
 800aea4:	4770      	bx	lr
 800aea6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	d801      	bhi.n	800aeb2 <__hexdig_fun+0x1a>
 800aeae:	3847      	subs	r0, #71	; 0x47
 800aeb0:	e7f7      	b.n	800aea2 <__hexdig_fun+0xa>
 800aeb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d801      	bhi.n	800aebe <__hexdig_fun+0x26>
 800aeba:	3827      	subs	r0, #39	; 0x27
 800aebc:	e7f1      	b.n	800aea2 <__hexdig_fun+0xa>
 800aebe:	2000      	movs	r0, #0
 800aec0:	4770      	bx	lr
	...

0800aec4 <__gethex>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	ed2d 8b02 	vpush	{d8}
 800aecc:	b089      	sub	sp, #36	; 0x24
 800aece:	ee08 0a10 	vmov	s16, r0
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	4bbc      	ldr	r3, [pc, #752]	; (800b1c8 <__gethex+0x304>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	468b      	mov	fp, r1
 800aede:	4690      	mov	r8, r2
 800aee0:	f7f5 f9ae 	bl	8000240 <strlen>
 800aee4:	9b01      	ldr	r3, [sp, #4]
 800aee6:	f8db 2000 	ldr.w	r2, [fp]
 800aeea:	4403      	add	r3, r0
 800aeec:	4682      	mov	sl, r0
 800aeee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aef2:	9305      	str	r3, [sp, #20]
 800aef4:	1c93      	adds	r3, r2, #2
 800aef6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aefa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aefe:	32fe      	adds	r2, #254	; 0xfe
 800af00:	18d1      	adds	r1, r2, r3
 800af02:	461f      	mov	r7, r3
 800af04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af08:	9100      	str	r1, [sp, #0]
 800af0a:	2830      	cmp	r0, #48	; 0x30
 800af0c:	d0f8      	beq.n	800af00 <__gethex+0x3c>
 800af0e:	f7ff ffc3 	bl	800ae98 <__hexdig_fun>
 800af12:	4604      	mov	r4, r0
 800af14:	2800      	cmp	r0, #0
 800af16:	d13a      	bne.n	800af8e <__gethex+0xca>
 800af18:	9901      	ldr	r1, [sp, #4]
 800af1a:	4652      	mov	r2, sl
 800af1c:	4638      	mov	r0, r7
 800af1e:	f001 fd5d 	bl	800c9dc <strncmp>
 800af22:	4605      	mov	r5, r0
 800af24:	2800      	cmp	r0, #0
 800af26:	d168      	bne.n	800affa <__gethex+0x136>
 800af28:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af2c:	eb07 060a 	add.w	r6, r7, sl
 800af30:	f7ff ffb2 	bl	800ae98 <__hexdig_fun>
 800af34:	2800      	cmp	r0, #0
 800af36:	d062      	beq.n	800affe <__gethex+0x13a>
 800af38:	4633      	mov	r3, r6
 800af3a:	7818      	ldrb	r0, [r3, #0]
 800af3c:	2830      	cmp	r0, #48	; 0x30
 800af3e:	461f      	mov	r7, r3
 800af40:	f103 0301 	add.w	r3, r3, #1
 800af44:	d0f9      	beq.n	800af3a <__gethex+0x76>
 800af46:	f7ff ffa7 	bl	800ae98 <__hexdig_fun>
 800af4a:	2301      	movs	r3, #1
 800af4c:	fab0 f480 	clz	r4, r0
 800af50:	0964      	lsrs	r4, r4, #5
 800af52:	4635      	mov	r5, r6
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	463a      	mov	r2, r7
 800af58:	4616      	mov	r6, r2
 800af5a:	3201      	adds	r2, #1
 800af5c:	7830      	ldrb	r0, [r6, #0]
 800af5e:	f7ff ff9b 	bl	800ae98 <__hexdig_fun>
 800af62:	2800      	cmp	r0, #0
 800af64:	d1f8      	bne.n	800af58 <__gethex+0x94>
 800af66:	9901      	ldr	r1, [sp, #4]
 800af68:	4652      	mov	r2, sl
 800af6a:	4630      	mov	r0, r6
 800af6c:	f001 fd36 	bl	800c9dc <strncmp>
 800af70:	b980      	cbnz	r0, 800af94 <__gethex+0xd0>
 800af72:	b94d      	cbnz	r5, 800af88 <__gethex+0xc4>
 800af74:	eb06 050a 	add.w	r5, r6, sl
 800af78:	462a      	mov	r2, r5
 800af7a:	4616      	mov	r6, r2
 800af7c:	3201      	adds	r2, #1
 800af7e:	7830      	ldrb	r0, [r6, #0]
 800af80:	f7ff ff8a 	bl	800ae98 <__hexdig_fun>
 800af84:	2800      	cmp	r0, #0
 800af86:	d1f8      	bne.n	800af7a <__gethex+0xb6>
 800af88:	1bad      	subs	r5, r5, r6
 800af8a:	00ad      	lsls	r5, r5, #2
 800af8c:	e004      	b.n	800af98 <__gethex+0xd4>
 800af8e:	2400      	movs	r4, #0
 800af90:	4625      	mov	r5, r4
 800af92:	e7e0      	b.n	800af56 <__gethex+0x92>
 800af94:	2d00      	cmp	r5, #0
 800af96:	d1f7      	bne.n	800af88 <__gethex+0xc4>
 800af98:	7833      	ldrb	r3, [r6, #0]
 800af9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af9e:	2b50      	cmp	r3, #80	; 0x50
 800afa0:	d13b      	bne.n	800b01a <__gethex+0x156>
 800afa2:	7873      	ldrb	r3, [r6, #1]
 800afa4:	2b2b      	cmp	r3, #43	; 0x2b
 800afa6:	d02c      	beq.n	800b002 <__gethex+0x13e>
 800afa8:	2b2d      	cmp	r3, #45	; 0x2d
 800afaa:	d02e      	beq.n	800b00a <__gethex+0x146>
 800afac:	1c71      	adds	r1, r6, #1
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	7808      	ldrb	r0, [r1, #0]
 800afb4:	f7ff ff70 	bl	800ae98 <__hexdig_fun>
 800afb8:	1e43      	subs	r3, r0, #1
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b18      	cmp	r3, #24
 800afbe:	d82c      	bhi.n	800b01a <__gethex+0x156>
 800afc0:	f1a0 0210 	sub.w	r2, r0, #16
 800afc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afc8:	f7ff ff66 	bl	800ae98 <__hexdig_fun>
 800afcc:	1e43      	subs	r3, r0, #1
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b18      	cmp	r3, #24
 800afd2:	d91d      	bls.n	800b010 <__gethex+0x14c>
 800afd4:	f1b9 0f00 	cmp.w	r9, #0
 800afd8:	d000      	beq.n	800afdc <__gethex+0x118>
 800afda:	4252      	negs	r2, r2
 800afdc:	4415      	add	r5, r2
 800afde:	f8cb 1000 	str.w	r1, [fp]
 800afe2:	b1e4      	cbz	r4, 800b01e <__gethex+0x15a>
 800afe4:	9b00      	ldr	r3, [sp, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	bf14      	ite	ne
 800afea:	2700      	movne	r7, #0
 800afec:	2706      	moveq	r7, #6
 800afee:	4638      	mov	r0, r7
 800aff0:	b009      	add	sp, #36	; 0x24
 800aff2:	ecbd 8b02 	vpop	{d8}
 800aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affa:	463e      	mov	r6, r7
 800affc:	4625      	mov	r5, r4
 800affe:	2401      	movs	r4, #1
 800b000:	e7ca      	b.n	800af98 <__gethex+0xd4>
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	1cb1      	adds	r1, r6, #2
 800b008:	e7d3      	b.n	800afb2 <__gethex+0xee>
 800b00a:	f04f 0901 	mov.w	r9, #1
 800b00e:	e7fa      	b.n	800b006 <__gethex+0x142>
 800b010:	230a      	movs	r3, #10
 800b012:	fb03 0202 	mla	r2, r3, r2, r0
 800b016:	3a10      	subs	r2, #16
 800b018:	e7d4      	b.n	800afc4 <__gethex+0x100>
 800b01a:	4631      	mov	r1, r6
 800b01c:	e7df      	b.n	800afde <__gethex+0x11a>
 800b01e:	1bf3      	subs	r3, r6, r7
 800b020:	3b01      	subs	r3, #1
 800b022:	4621      	mov	r1, r4
 800b024:	2b07      	cmp	r3, #7
 800b026:	dc0b      	bgt.n	800b040 <__gethex+0x17c>
 800b028:	ee18 0a10 	vmov	r0, s16
 800b02c:	f000 fa82 	bl	800b534 <_Balloc>
 800b030:	4604      	mov	r4, r0
 800b032:	b940      	cbnz	r0, 800b046 <__gethex+0x182>
 800b034:	4b65      	ldr	r3, [pc, #404]	; (800b1cc <__gethex+0x308>)
 800b036:	4602      	mov	r2, r0
 800b038:	21de      	movs	r1, #222	; 0xde
 800b03a:	4865      	ldr	r0, [pc, #404]	; (800b1d0 <__gethex+0x30c>)
 800b03c:	f001 fda6 	bl	800cb8c <__assert_func>
 800b040:	3101      	adds	r1, #1
 800b042:	105b      	asrs	r3, r3, #1
 800b044:	e7ee      	b.n	800b024 <__gethex+0x160>
 800b046:	f100 0914 	add.w	r9, r0, #20
 800b04a:	f04f 0b00 	mov.w	fp, #0
 800b04e:	f1ca 0301 	rsb	r3, sl, #1
 800b052:	f8cd 9008 	str.w	r9, [sp, #8]
 800b056:	f8cd b000 	str.w	fp, [sp]
 800b05a:	9306      	str	r3, [sp, #24]
 800b05c:	42b7      	cmp	r7, r6
 800b05e:	d340      	bcc.n	800b0e2 <__gethex+0x21e>
 800b060:	9802      	ldr	r0, [sp, #8]
 800b062:	9b00      	ldr	r3, [sp, #0]
 800b064:	f840 3b04 	str.w	r3, [r0], #4
 800b068:	eba0 0009 	sub.w	r0, r0, r9
 800b06c:	1080      	asrs	r0, r0, #2
 800b06e:	0146      	lsls	r6, r0, #5
 800b070:	6120      	str	r0, [r4, #16]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fb54 	bl	800b720 <__hi0bits>
 800b078:	1a30      	subs	r0, r6, r0
 800b07a:	f8d8 6000 	ldr.w	r6, [r8]
 800b07e:	42b0      	cmp	r0, r6
 800b080:	dd63      	ble.n	800b14a <__gethex+0x286>
 800b082:	1b87      	subs	r7, r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	4620      	mov	r0, r4
 800b088:	f000 feef 	bl	800be6a <__any_on>
 800b08c:	4682      	mov	sl, r0
 800b08e:	b1a8      	cbz	r0, 800b0bc <__gethex+0x1f8>
 800b090:	1e7b      	subs	r3, r7, #1
 800b092:	1159      	asrs	r1, r3, #5
 800b094:	f003 021f 	and.w	r2, r3, #31
 800b098:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b09c:	f04f 0a01 	mov.w	sl, #1
 800b0a0:	fa0a f202 	lsl.w	r2, sl, r2
 800b0a4:	420a      	tst	r2, r1
 800b0a6:	d009      	beq.n	800b0bc <__gethex+0x1f8>
 800b0a8:	4553      	cmp	r3, sl
 800b0aa:	dd05      	ble.n	800b0b8 <__gethex+0x1f4>
 800b0ac:	1eb9      	subs	r1, r7, #2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fedb 	bl	800be6a <__any_on>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d145      	bne.n	800b144 <__gethex+0x280>
 800b0b8:	f04f 0a02 	mov.w	sl, #2
 800b0bc:	4639      	mov	r1, r7
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff fe98 	bl	800adf4 <rshift>
 800b0c4:	443d      	add	r5, r7
 800b0c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0ca:	42ab      	cmp	r3, r5
 800b0cc:	da4c      	bge.n	800b168 <__gethex+0x2a4>
 800b0ce:	ee18 0a10 	vmov	r0, s16
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f000 fa6e 	bl	800b5b4 <_Bfree>
 800b0d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	27a3      	movs	r7, #163	; 0xa3
 800b0e0:	e785      	b.n	800afee <__gethex+0x12a>
 800b0e2:	1e73      	subs	r3, r6, #1
 800b0e4:	9a05      	ldr	r2, [sp, #20]
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d019      	beq.n	800b124 <__gethex+0x260>
 800b0f0:	f1bb 0f20 	cmp.w	fp, #32
 800b0f4:	d107      	bne.n	800b106 <__gethex+0x242>
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	9a00      	ldr	r2, [sp, #0]
 800b0fa:	f843 2b04 	str.w	r2, [r3], #4
 800b0fe:	9302      	str	r3, [sp, #8]
 800b100:	2300      	movs	r3, #0
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	469b      	mov	fp, r3
 800b106:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b10a:	f7ff fec5 	bl	800ae98 <__hexdig_fun>
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	f000 000f 	and.w	r0, r0, #15
 800b114:	fa00 f00b 	lsl.w	r0, r0, fp
 800b118:	4303      	orrs	r3, r0
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	f10b 0b04 	add.w	fp, fp, #4
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	e00d      	b.n	800b140 <__gethex+0x27c>
 800b124:	9b03      	ldr	r3, [sp, #12]
 800b126:	9a06      	ldr	r2, [sp, #24]
 800b128:	4413      	add	r3, r2
 800b12a:	42bb      	cmp	r3, r7
 800b12c:	d3e0      	bcc.n	800b0f0 <__gethex+0x22c>
 800b12e:	4618      	mov	r0, r3
 800b130:	9901      	ldr	r1, [sp, #4]
 800b132:	9307      	str	r3, [sp, #28]
 800b134:	4652      	mov	r2, sl
 800b136:	f001 fc51 	bl	800c9dc <strncmp>
 800b13a:	9b07      	ldr	r3, [sp, #28]
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d1d7      	bne.n	800b0f0 <__gethex+0x22c>
 800b140:	461e      	mov	r6, r3
 800b142:	e78b      	b.n	800b05c <__gethex+0x198>
 800b144:	f04f 0a03 	mov.w	sl, #3
 800b148:	e7b8      	b.n	800b0bc <__gethex+0x1f8>
 800b14a:	da0a      	bge.n	800b162 <__gethex+0x29e>
 800b14c:	1a37      	subs	r7, r6, r0
 800b14e:	4621      	mov	r1, r4
 800b150:	ee18 0a10 	vmov	r0, s16
 800b154:	463a      	mov	r2, r7
 800b156:	f000 fc49 	bl	800b9ec <__lshift>
 800b15a:	1bed      	subs	r5, r5, r7
 800b15c:	4604      	mov	r4, r0
 800b15e:	f100 0914 	add.w	r9, r0, #20
 800b162:	f04f 0a00 	mov.w	sl, #0
 800b166:	e7ae      	b.n	800b0c6 <__gethex+0x202>
 800b168:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b16c:	42a8      	cmp	r0, r5
 800b16e:	dd72      	ble.n	800b256 <__gethex+0x392>
 800b170:	1b45      	subs	r5, r0, r5
 800b172:	42ae      	cmp	r6, r5
 800b174:	dc36      	bgt.n	800b1e4 <__gethex+0x320>
 800b176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d02a      	beq.n	800b1d4 <__gethex+0x310>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d02c      	beq.n	800b1dc <__gethex+0x318>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d115      	bne.n	800b1b2 <__gethex+0x2ee>
 800b186:	42ae      	cmp	r6, r5
 800b188:	d113      	bne.n	800b1b2 <__gethex+0x2ee>
 800b18a:	2e01      	cmp	r6, #1
 800b18c:	d10b      	bne.n	800b1a6 <__gethex+0x2e2>
 800b18e:	9a04      	ldr	r2, [sp, #16]
 800b190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	2301      	movs	r3, #1
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	f8c9 3000 	str.w	r3, [r9]
 800b19e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1a0:	2762      	movs	r7, #98	; 0x62
 800b1a2:	601c      	str	r4, [r3, #0]
 800b1a4:	e723      	b.n	800afee <__gethex+0x12a>
 800b1a6:	1e71      	subs	r1, r6, #1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fe5e 	bl	800be6a <__any_on>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d1ed      	bne.n	800b18e <__gethex+0x2ca>
 800b1b2:	ee18 0a10 	vmov	r0, s16
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	f000 f9fc 	bl	800b5b4 <_Bfree>
 800b1bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	2750      	movs	r7, #80	; 0x50
 800b1c4:	e713      	b.n	800afee <__gethex+0x12a>
 800b1c6:	bf00      	nop
 800b1c8:	0800d9b0 	.word	0x0800d9b0
 800b1cc:	0800d933 	.word	0x0800d933
 800b1d0:	0800d944 	.word	0x0800d944
 800b1d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1eb      	bne.n	800b1b2 <__gethex+0x2ee>
 800b1da:	e7d8      	b.n	800b18e <__gethex+0x2ca>
 800b1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1d5      	bne.n	800b18e <__gethex+0x2ca>
 800b1e2:	e7e6      	b.n	800b1b2 <__gethex+0x2ee>
 800b1e4:	1e6f      	subs	r7, r5, #1
 800b1e6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ea:	d131      	bne.n	800b250 <__gethex+0x38c>
 800b1ec:	b127      	cbz	r7, 800b1f8 <__gethex+0x334>
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fe3a 	bl	800be6a <__any_on>
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	117b      	asrs	r3, r7, #5
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b200:	f007 071f 	and.w	r7, r7, #31
 800b204:	fa01 f707 	lsl.w	r7, r1, r7
 800b208:	421f      	tst	r7, r3
 800b20a:	4629      	mov	r1, r5
 800b20c:	4620      	mov	r0, r4
 800b20e:	bf18      	it	ne
 800b210:	f04a 0a02 	orrne.w	sl, sl, #2
 800b214:	1b76      	subs	r6, r6, r5
 800b216:	f7ff fded 	bl	800adf4 <rshift>
 800b21a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b21e:	2702      	movs	r7, #2
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d048      	beq.n	800b2b8 <__gethex+0x3f4>
 800b226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d015      	beq.n	800b25a <__gethex+0x396>
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d017      	beq.n	800b262 <__gethex+0x39e>
 800b232:	2b01      	cmp	r3, #1
 800b234:	d109      	bne.n	800b24a <__gethex+0x386>
 800b236:	f01a 0f02 	tst.w	sl, #2
 800b23a:	d006      	beq.n	800b24a <__gethex+0x386>
 800b23c:	f8d9 0000 	ldr.w	r0, [r9]
 800b240:	ea4a 0a00 	orr.w	sl, sl, r0
 800b244:	f01a 0f01 	tst.w	sl, #1
 800b248:	d10e      	bne.n	800b268 <__gethex+0x3a4>
 800b24a:	f047 0710 	orr.w	r7, r7, #16
 800b24e:	e033      	b.n	800b2b8 <__gethex+0x3f4>
 800b250:	f04f 0a01 	mov.w	sl, #1
 800b254:	e7d0      	b.n	800b1f8 <__gethex+0x334>
 800b256:	2701      	movs	r7, #1
 800b258:	e7e2      	b.n	800b220 <__gethex+0x35c>
 800b25a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25c:	f1c3 0301 	rsb	r3, r3, #1
 800b260:	9315      	str	r3, [sp, #84]	; 0x54
 800b262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0f0      	beq.n	800b24a <__gethex+0x386>
 800b268:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b26c:	f104 0314 	add.w	r3, r4, #20
 800b270:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b274:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b278:	f04f 0c00 	mov.w	ip, #0
 800b27c:	4618      	mov	r0, r3
 800b27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b282:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b286:	d01c      	beq.n	800b2c2 <__gethex+0x3fe>
 800b288:	3201      	adds	r2, #1
 800b28a:	6002      	str	r2, [r0, #0]
 800b28c:	2f02      	cmp	r7, #2
 800b28e:	f104 0314 	add.w	r3, r4, #20
 800b292:	d13f      	bne.n	800b314 <__gethex+0x450>
 800b294:	f8d8 2000 	ldr.w	r2, [r8]
 800b298:	3a01      	subs	r2, #1
 800b29a:	42b2      	cmp	r2, r6
 800b29c:	d10a      	bne.n	800b2b4 <__gethex+0x3f0>
 800b29e:	1171      	asrs	r1, r6, #5
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2a6:	f006 061f 	and.w	r6, r6, #31
 800b2aa:	fa02 f606 	lsl.w	r6, r2, r6
 800b2ae:	421e      	tst	r6, r3
 800b2b0:	bf18      	it	ne
 800b2b2:	4617      	movne	r7, r2
 800b2b4:	f047 0720 	orr.w	r7, r7, #32
 800b2b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2ba:	601c      	str	r4, [r3, #0]
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	601d      	str	r5, [r3, #0]
 800b2c0:	e695      	b.n	800afee <__gethex+0x12a>
 800b2c2:	4299      	cmp	r1, r3
 800b2c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2c8:	d8d8      	bhi.n	800b27c <__gethex+0x3b8>
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	459b      	cmp	fp, r3
 800b2ce:	db19      	blt.n	800b304 <__gethex+0x440>
 800b2d0:	6861      	ldr	r1, [r4, #4]
 800b2d2:	ee18 0a10 	vmov	r0, s16
 800b2d6:	3101      	adds	r1, #1
 800b2d8:	f000 f92c 	bl	800b534 <_Balloc>
 800b2dc:	4681      	mov	r9, r0
 800b2de:	b918      	cbnz	r0, 800b2e8 <__gethex+0x424>
 800b2e0:	4b1a      	ldr	r3, [pc, #104]	; (800b34c <__gethex+0x488>)
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	2184      	movs	r1, #132	; 0x84
 800b2e6:	e6a8      	b.n	800b03a <__gethex+0x176>
 800b2e8:	6922      	ldr	r2, [r4, #16]
 800b2ea:	3202      	adds	r2, #2
 800b2ec:	f104 010c 	add.w	r1, r4, #12
 800b2f0:	0092      	lsls	r2, r2, #2
 800b2f2:	300c      	adds	r0, #12
 800b2f4:	f7fd f9a2 	bl	800863c <memcpy>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	ee18 0a10 	vmov	r0, s16
 800b2fe:	f000 f959 	bl	800b5b4 <_Bfree>
 800b302:	464c      	mov	r4, r9
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b30c:	6122      	str	r2, [r4, #16]
 800b30e:	2201      	movs	r2, #1
 800b310:	615a      	str	r2, [r3, #20]
 800b312:	e7bb      	b.n	800b28c <__gethex+0x3c8>
 800b314:	6922      	ldr	r2, [r4, #16]
 800b316:	455a      	cmp	r2, fp
 800b318:	dd0b      	ble.n	800b332 <__gethex+0x46e>
 800b31a:	2101      	movs	r1, #1
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7ff fd69 	bl	800adf4 <rshift>
 800b322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b326:	3501      	adds	r5, #1
 800b328:	42ab      	cmp	r3, r5
 800b32a:	f6ff aed0 	blt.w	800b0ce <__gethex+0x20a>
 800b32e:	2701      	movs	r7, #1
 800b330:	e7c0      	b.n	800b2b4 <__gethex+0x3f0>
 800b332:	f016 061f 	ands.w	r6, r6, #31
 800b336:	d0fa      	beq.n	800b32e <__gethex+0x46a>
 800b338:	449a      	add	sl, r3
 800b33a:	f1c6 0620 	rsb	r6, r6, #32
 800b33e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b342:	f000 f9ed 	bl	800b720 <__hi0bits>
 800b346:	42b0      	cmp	r0, r6
 800b348:	dbe7      	blt.n	800b31a <__gethex+0x456>
 800b34a:	e7f0      	b.n	800b32e <__gethex+0x46a>
 800b34c:	0800d933 	.word	0x0800d933

0800b350 <L_shift>:
 800b350:	f1c2 0208 	rsb	r2, r2, #8
 800b354:	0092      	lsls	r2, r2, #2
 800b356:	b570      	push	{r4, r5, r6, lr}
 800b358:	f1c2 0620 	rsb	r6, r2, #32
 800b35c:	6843      	ldr	r3, [r0, #4]
 800b35e:	6804      	ldr	r4, [r0, #0]
 800b360:	fa03 f506 	lsl.w	r5, r3, r6
 800b364:	432c      	orrs	r4, r5
 800b366:	40d3      	lsrs	r3, r2
 800b368:	6004      	str	r4, [r0, #0]
 800b36a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b36e:	4288      	cmp	r0, r1
 800b370:	d3f4      	bcc.n	800b35c <L_shift+0xc>
 800b372:	bd70      	pop	{r4, r5, r6, pc}

0800b374 <__match>:
 800b374:	b530      	push	{r4, r5, lr}
 800b376:	6803      	ldr	r3, [r0, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b37e:	b914      	cbnz	r4, 800b386 <__match+0x12>
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	2001      	movs	r0, #1
 800b384:	bd30      	pop	{r4, r5, pc}
 800b386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b38a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b38e:	2d19      	cmp	r5, #25
 800b390:	bf98      	it	ls
 800b392:	3220      	addls	r2, #32
 800b394:	42a2      	cmp	r2, r4
 800b396:	d0f0      	beq.n	800b37a <__match+0x6>
 800b398:	2000      	movs	r0, #0
 800b39a:	e7f3      	b.n	800b384 <__match+0x10>

0800b39c <__hexnan>:
 800b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	680b      	ldr	r3, [r1, #0]
 800b3a2:	6801      	ldr	r1, [r0, #0]
 800b3a4:	115e      	asrs	r6, r3, #5
 800b3a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3aa:	f013 031f 	ands.w	r3, r3, #31
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	bf18      	it	ne
 800b3b2:	3604      	addne	r6, #4
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	1f37      	subs	r7, r6, #4
 800b3b8:	4682      	mov	sl, r0
 800b3ba:	4690      	mov	r8, r2
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3c2:	46b9      	mov	r9, r7
 800b3c4:	463c      	mov	r4, r7
 800b3c6:	9502      	str	r5, [sp, #8]
 800b3c8:	46ab      	mov	fp, r5
 800b3ca:	784a      	ldrb	r2, [r1, #1]
 800b3cc:	1c4b      	adds	r3, r1, #1
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	b342      	cbz	r2, 800b424 <__hexnan+0x88>
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	9105      	str	r1, [sp, #20]
 800b3d6:	9204      	str	r2, [sp, #16]
 800b3d8:	f7ff fd5e 	bl	800ae98 <__hexdig_fun>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d14f      	bne.n	800b480 <__hexnan+0xe4>
 800b3e0:	9a04      	ldr	r2, [sp, #16]
 800b3e2:	9905      	ldr	r1, [sp, #20]
 800b3e4:	2a20      	cmp	r2, #32
 800b3e6:	d818      	bhi.n	800b41a <__hexnan+0x7e>
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	459b      	cmp	fp, r3
 800b3ec:	dd13      	ble.n	800b416 <__hexnan+0x7a>
 800b3ee:	454c      	cmp	r4, r9
 800b3f0:	d206      	bcs.n	800b400 <__hexnan+0x64>
 800b3f2:	2d07      	cmp	r5, #7
 800b3f4:	dc04      	bgt.n	800b400 <__hexnan+0x64>
 800b3f6:	462a      	mov	r2, r5
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff ffa8 	bl	800b350 <L_shift>
 800b400:	4544      	cmp	r4, r8
 800b402:	d950      	bls.n	800b4a6 <__hexnan+0x10a>
 800b404:	2300      	movs	r3, #0
 800b406:	f1a4 0904 	sub.w	r9, r4, #4
 800b40a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b40e:	f8cd b008 	str.w	fp, [sp, #8]
 800b412:	464c      	mov	r4, r9
 800b414:	461d      	mov	r5, r3
 800b416:	9903      	ldr	r1, [sp, #12]
 800b418:	e7d7      	b.n	800b3ca <__hexnan+0x2e>
 800b41a:	2a29      	cmp	r2, #41	; 0x29
 800b41c:	d156      	bne.n	800b4cc <__hexnan+0x130>
 800b41e:	3102      	adds	r1, #2
 800b420:	f8ca 1000 	str.w	r1, [sl]
 800b424:	f1bb 0f00 	cmp.w	fp, #0
 800b428:	d050      	beq.n	800b4cc <__hexnan+0x130>
 800b42a:	454c      	cmp	r4, r9
 800b42c:	d206      	bcs.n	800b43c <__hexnan+0xa0>
 800b42e:	2d07      	cmp	r5, #7
 800b430:	dc04      	bgt.n	800b43c <__hexnan+0xa0>
 800b432:	462a      	mov	r2, r5
 800b434:	4649      	mov	r1, r9
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff ff8a 	bl	800b350 <L_shift>
 800b43c:	4544      	cmp	r4, r8
 800b43e:	d934      	bls.n	800b4aa <__hexnan+0x10e>
 800b440:	f1a8 0204 	sub.w	r2, r8, #4
 800b444:	4623      	mov	r3, r4
 800b446:	f853 1b04 	ldr.w	r1, [r3], #4
 800b44a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b44e:	429f      	cmp	r7, r3
 800b450:	d2f9      	bcs.n	800b446 <__hexnan+0xaa>
 800b452:	1b3b      	subs	r3, r7, r4
 800b454:	f023 0303 	bic.w	r3, r3, #3
 800b458:	3304      	adds	r3, #4
 800b45a:	3401      	adds	r4, #1
 800b45c:	3e03      	subs	r6, #3
 800b45e:	42b4      	cmp	r4, r6
 800b460:	bf88      	it	hi
 800b462:	2304      	movhi	r3, #4
 800b464:	4443      	add	r3, r8
 800b466:	2200      	movs	r2, #0
 800b468:	f843 2b04 	str.w	r2, [r3], #4
 800b46c:	429f      	cmp	r7, r3
 800b46e:	d2fb      	bcs.n	800b468 <__hexnan+0xcc>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	b91b      	cbnz	r3, 800b47c <__hexnan+0xe0>
 800b474:	4547      	cmp	r7, r8
 800b476:	d127      	bne.n	800b4c8 <__hexnan+0x12c>
 800b478:	2301      	movs	r3, #1
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	2005      	movs	r0, #5
 800b47e:	e026      	b.n	800b4ce <__hexnan+0x132>
 800b480:	3501      	adds	r5, #1
 800b482:	2d08      	cmp	r5, #8
 800b484:	f10b 0b01 	add.w	fp, fp, #1
 800b488:	dd06      	ble.n	800b498 <__hexnan+0xfc>
 800b48a:	4544      	cmp	r4, r8
 800b48c:	d9c3      	bls.n	800b416 <__hexnan+0x7a>
 800b48e:	2300      	movs	r3, #0
 800b490:	f844 3c04 	str.w	r3, [r4, #-4]
 800b494:	2501      	movs	r5, #1
 800b496:	3c04      	subs	r4, #4
 800b498:	6822      	ldr	r2, [r4, #0]
 800b49a:	f000 000f 	and.w	r0, r0, #15
 800b49e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4a2:	6022      	str	r2, [r4, #0]
 800b4a4:	e7b7      	b.n	800b416 <__hexnan+0x7a>
 800b4a6:	2508      	movs	r5, #8
 800b4a8:	e7b5      	b.n	800b416 <__hexnan+0x7a>
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0df      	beq.n	800b470 <__hexnan+0xd4>
 800b4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b4:	f1c3 0320 	rsb	r3, r3, #32
 800b4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4c0:	401a      	ands	r2, r3
 800b4c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4c6:	e7d3      	b.n	800b470 <__hexnan+0xd4>
 800b4c8:	3f04      	subs	r7, #4
 800b4ca:	e7d1      	b.n	800b470 <__hexnan+0xd4>
 800b4cc:	2004      	movs	r0, #4
 800b4ce:	b007      	add	sp, #28
 800b4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4d4 <_localeconv_r>:
 800b4d4:	4800      	ldr	r0, [pc, #0]	; (800b4d8 <_localeconv_r+0x4>)
 800b4d6:	4770      	bx	lr
 800b4d8:	200001b0 	.word	0x200001b0

0800b4dc <_lseek_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d07      	ldr	r5, [pc, #28]	; (800b4fc <_lseek_r+0x20>)
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	4608      	mov	r0, r1
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	602a      	str	r2, [r5, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f7f7 facc 	bl	8002a88 <_lseek>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_lseek_r+0x1e>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_lseek_r+0x1e>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20000874 	.word	0x20000874

0800b500 <malloc>:
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <malloc+0xc>)
 800b502:	4601      	mov	r1, r0
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	f000 bd31 	b.w	800bf6c <_malloc_r>
 800b50a:	bf00      	nop
 800b50c:	20000058 	.word	0x20000058

0800b510 <__ascii_mbtowc>:
 800b510:	b082      	sub	sp, #8
 800b512:	b901      	cbnz	r1, 800b516 <__ascii_mbtowc+0x6>
 800b514:	a901      	add	r1, sp, #4
 800b516:	b142      	cbz	r2, 800b52a <__ascii_mbtowc+0x1a>
 800b518:	b14b      	cbz	r3, 800b52e <__ascii_mbtowc+0x1e>
 800b51a:	7813      	ldrb	r3, [r2, #0]
 800b51c:	600b      	str	r3, [r1, #0]
 800b51e:	7812      	ldrb	r2, [r2, #0]
 800b520:	1e10      	subs	r0, r2, #0
 800b522:	bf18      	it	ne
 800b524:	2001      	movne	r0, #1
 800b526:	b002      	add	sp, #8
 800b528:	4770      	bx	lr
 800b52a:	4610      	mov	r0, r2
 800b52c:	e7fb      	b.n	800b526 <__ascii_mbtowc+0x16>
 800b52e:	f06f 0001 	mvn.w	r0, #1
 800b532:	e7f8      	b.n	800b526 <__ascii_mbtowc+0x16>

0800b534 <_Balloc>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	b976      	cbnz	r6, 800b55c <_Balloc+0x28>
 800b53e:	2010      	movs	r0, #16
 800b540:	f7ff ffde 	bl	800b500 <malloc>
 800b544:	4602      	mov	r2, r0
 800b546:	6260      	str	r0, [r4, #36]	; 0x24
 800b548:	b920      	cbnz	r0, 800b554 <_Balloc+0x20>
 800b54a:	4b18      	ldr	r3, [pc, #96]	; (800b5ac <_Balloc+0x78>)
 800b54c:	4818      	ldr	r0, [pc, #96]	; (800b5b0 <_Balloc+0x7c>)
 800b54e:	2166      	movs	r1, #102	; 0x66
 800b550:	f001 fb1c 	bl	800cb8c <__assert_func>
 800b554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b558:	6006      	str	r6, [r0, #0]
 800b55a:	60c6      	str	r6, [r0, #12]
 800b55c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b55e:	68f3      	ldr	r3, [r6, #12]
 800b560:	b183      	cbz	r3, 800b584 <_Balloc+0x50>
 800b562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b56a:	b9b8      	cbnz	r0, 800b59c <_Balloc+0x68>
 800b56c:	2101      	movs	r1, #1
 800b56e:	fa01 f605 	lsl.w	r6, r1, r5
 800b572:	1d72      	adds	r2, r6, #5
 800b574:	0092      	lsls	r2, r2, #2
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fc98 	bl	800beac <_calloc_r>
 800b57c:	b160      	cbz	r0, 800b598 <_Balloc+0x64>
 800b57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b582:	e00e      	b.n	800b5a2 <_Balloc+0x6e>
 800b584:	2221      	movs	r2, #33	; 0x21
 800b586:	2104      	movs	r1, #4
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 fc8f 	bl	800beac <_calloc_r>
 800b58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b590:	60f0      	str	r0, [r6, #12]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e4      	bne.n	800b562 <_Balloc+0x2e>
 800b598:	2000      	movs	r0, #0
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	6802      	ldr	r2, [r0, #0]
 800b59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5a8:	e7f7      	b.n	800b59a <_Balloc+0x66>
 800b5aa:	bf00      	nop
 800b5ac:	0800d8bd 	.word	0x0800d8bd
 800b5b0:	0800d9c4 	.word	0x0800d9c4

0800b5b4 <_Bfree>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	b976      	cbnz	r6, 800b5dc <_Bfree+0x28>
 800b5be:	2010      	movs	r0, #16
 800b5c0:	f7ff ff9e 	bl	800b500 <malloc>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c8:	b920      	cbnz	r0, 800b5d4 <_Bfree+0x20>
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <_Bfree+0x3c>)
 800b5cc:	4809      	ldr	r0, [pc, #36]	; (800b5f4 <_Bfree+0x40>)
 800b5ce:	218a      	movs	r1, #138	; 0x8a
 800b5d0:	f001 fadc 	bl	800cb8c <__assert_func>
 800b5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5d8:	6006      	str	r6, [r0, #0]
 800b5da:	60c6      	str	r6, [r0, #12]
 800b5dc:	b13c      	cbz	r4, 800b5ee <_Bfree+0x3a>
 800b5de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5e0:	6862      	ldr	r2, [r4, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e8:	6021      	str	r1, [r4, #0]
 800b5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0800d8bd 	.word	0x0800d8bd
 800b5f4:	0800d9c4 	.word	0x0800d9c4

0800b5f8 <__multadd>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	690e      	ldr	r6, [r1, #16]
 800b5fe:	4607      	mov	r7, r0
 800b600:	4698      	mov	r8, r3
 800b602:	460c      	mov	r4, r1
 800b604:	f101 0014 	add.w	r0, r1, #20
 800b608:	2300      	movs	r3, #0
 800b60a:	6805      	ldr	r5, [r0, #0]
 800b60c:	b2a9      	uxth	r1, r5
 800b60e:	fb02 8101 	mla	r1, r2, r1, r8
 800b612:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b616:	0c2d      	lsrs	r5, r5, #16
 800b618:	fb02 c505 	mla	r5, r2, r5, ip
 800b61c:	b289      	uxth	r1, r1
 800b61e:	3301      	adds	r3, #1
 800b620:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b624:	429e      	cmp	r6, r3
 800b626:	f840 1b04 	str.w	r1, [r0], #4
 800b62a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b62e:	dcec      	bgt.n	800b60a <__multadd+0x12>
 800b630:	f1b8 0f00 	cmp.w	r8, #0
 800b634:	d022      	beq.n	800b67c <__multadd+0x84>
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	42b3      	cmp	r3, r6
 800b63a:	dc19      	bgt.n	800b670 <__multadd+0x78>
 800b63c:	6861      	ldr	r1, [r4, #4]
 800b63e:	4638      	mov	r0, r7
 800b640:	3101      	adds	r1, #1
 800b642:	f7ff ff77 	bl	800b534 <_Balloc>
 800b646:	4605      	mov	r5, r0
 800b648:	b928      	cbnz	r0, 800b656 <__multadd+0x5e>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <__multadd+0x8c>)
 800b64e:	480e      	ldr	r0, [pc, #56]	; (800b688 <__multadd+0x90>)
 800b650:	21b5      	movs	r1, #181	; 0xb5
 800b652:	f001 fa9b 	bl	800cb8c <__assert_func>
 800b656:	6922      	ldr	r2, [r4, #16]
 800b658:	3202      	adds	r2, #2
 800b65a:	f104 010c 	add.w	r1, r4, #12
 800b65e:	0092      	lsls	r2, r2, #2
 800b660:	300c      	adds	r0, #12
 800b662:	f7fc ffeb 	bl	800863c <memcpy>
 800b666:	4621      	mov	r1, r4
 800b668:	4638      	mov	r0, r7
 800b66a:	f7ff ffa3 	bl	800b5b4 <_Bfree>
 800b66e:	462c      	mov	r4, r5
 800b670:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b674:	3601      	adds	r6, #1
 800b676:	f8c3 8014 	str.w	r8, [r3, #20]
 800b67a:	6126      	str	r6, [r4, #16]
 800b67c:	4620      	mov	r0, r4
 800b67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b682:	bf00      	nop
 800b684:	0800d933 	.word	0x0800d933
 800b688:	0800d9c4 	.word	0x0800d9c4

0800b68c <__s2b>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	4615      	mov	r5, r2
 800b694:	461f      	mov	r7, r3
 800b696:	2209      	movs	r2, #9
 800b698:	3308      	adds	r3, #8
 800b69a:	4606      	mov	r6, r0
 800b69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	db09      	blt.n	800b6bc <__s2b+0x30>
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff ff43 	bl	800b534 <_Balloc>
 800b6ae:	b940      	cbnz	r0, 800b6c2 <__s2b+0x36>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	4b19      	ldr	r3, [pc, #100]	; (800b718 <__s2b+0x8c>)
 800b6b4:	4819      	ldr	r0, [pc, #100]	; (800b71c <__s2b+0x90>)
 800b6b6:	21ce      	movs	r1, #206	; 0xce
 800b6b8:	f001 fa68 	bl	800cb8c <__assert_func>
 800b6bc:	0052      	lsls	r2, r2, #1
 800b6be:	3101      	adds	r1, #1
 800b6c0:	e7f0      	b.n	800b6a4 <__s2b+0x18>
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	6143      	str	r3, [r0, #20]
 800b6c6:	2d09      	cmp	r5, #9
 800b6c8:	f04f 0301 	mov.w	r3, #1
 800b6cc:	6103      	str	r3, [r0, #16]
 800b6ce:	dd16      	ble.n	800b6fe <__s2b+0x72>
 800b6d0:	f104 0909 	add.w	r9, r4, #9
 800b6d4:	46c8      	mov	r8, r9
 800b6d6:	442c      	add	r4, r5
 800b6d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6dc:	4601      	mov	r1, r0
 800b6de:	3b30      	subs	r3, #48	; 0x30
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7ff ff88 	bl	800b5f8 <__multadd>
 800b6e8:	45a0      	cmp	r8, r4
 800b6ea:	d1f5      	bne.n	800b6d8 <__s2b+0x4c>
 800b6ec:	f1a5 0408 	sub.w	r4, r5, #8
 800b6f0:	444c      	add	r4, r9
 800b6f2:	1b2d      	subs	r5, r5, r4
 800b6f4:	1963      	adds	r3, r4, r5
 800b6f6:	42bb      	cmp	r3, r7
 800b6f8:	db04      	blt.n	800b704 <__s2b+0x78>
 800b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	340a      	adds	r4, #10
 800b700:	2509      	movs	r5, #9
 800b702:	e7f6      	b.n	800b6f2 <__s2b+0x66>
 800b704:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b708:	4601      	mov	r1, r0
 800b70a:	3b30      	subs	r3, #48	; 0x30
 800b70c:	220a      	movs	r2, #10
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ff72 	bl	800b5f8 <__multadd>
 800b714:	e7ee      	b.n	800b6f4 <__s2b+0x68>
 800b716:	bf00      	nop
 800b718:	0800d933 	.word	0x0800d933
 800b71c:	0800d9c4 	.word	0x0800d9c4

0800b720 <__hi0bits>:
 800b720:	0c03      	lsrs	r3, r0, #16
 800b722:	041b      	lsls	r3, r3, #16
 800b724:	b9d3      	cbnz	r3, 800b75c <__hi0bits+0x3c>
 800b726:	0400      	lsls	r0, r0, #16
 800b728:	2310      	movs	r3, #16
 800b72a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b72e:	bf04      	itt	eq
 800b730:	0200      	lsleq	r0, r0, #8
 800b732:	3308      	addeq	r3, #8
 800b734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b738:	bf04      	itt	eq
 800b73a:	0100      	lsleq	r0, r0, #4
 800b73c:	3304      	addeq	r3, #4
 800b73e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b742:	bf04      	itt	eq
 800b744:	0080      	lsleq	r0, r0, #2
 800b746:	3302      	addeq	r3, #2
 800b748:	2800      	cmp	r0, #0
 800b74a:	db05      	blt.n	800b758 <__hi0bits+0x38>
 800b74c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b750:	f103 0301 	add.w	r3, r3, #1
 800b754:	bf08      	it	eq
 800b756:	2320      	moveq	r3, #32
 800b758:	4618      	mov	r0, r3
 800b75a:	4770      	bx	lr
 800b75c:	2300      	movs	r3, #0
 800b75e:	e7e4      	b.n	800b72a <__hi0bits+0xa>

0800b760 <__lo0bits>:
 800b760:	6803      	ldr	r3, [r0, #0]
 800b762:	f013 0207 	ands.w	r2, r3, #7
 800b766:	4601      	mov	r1, r0
 800b768:	d00b      	beq.n	800b782 <__lo0bits+0x22>
 800b76a:	07da      	lsls	r2, r3, #31
 800b76c:	d424      	bmi.n	800b7b8 <__lo0bits+0x58>
 800b76e:	0798      	lsls	r0, r3, #30
 800b770:	bf49      	itett	mi
 800b772:	085b      	lsrmi	r3, r3, #1
 800b774:	089b      	lsrpl	r3, r3, #2
 800b776:	2001      	movmi	r0, #1
 800b778:	600b      	strmi	r3, [r1, #0]
 800b77a:	bf5c      	itt	pl
 800b77c:	600b      	strpl	r3, [r1, #0]
 800b77e:	2002      	movpl	r0, #2
 800b780:	4770      	bx	lr
 800b782:	b298      	uxth	r0, r3
 800b784:	b9b0      	cbnz	r0, 800b7b4 <__lo0bits+0x54>
 800b786:	0c1b      	lsrs	r3, r3, #16
 800b788:	2010      	movs	r0, #16
 800b78a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b78e:	bf04      	itt	eq
 800b790:	0a1b      	lsreq	r3, r3, #8
 800b792:	3008      	addeq	r0, #8
 800b794:	071a      	lsls	r2, r3, #28
 800b796:	bf04      	itt	eq
 800b798:	091b      	lsreq	r3, r3, #4
 800b79a:	3004      	addeq	r0, #4
 800b79c:	079a      	lsls	r2, r3, #30
 800b79e:	bf04      	itt	eq
 800b7a0:	089b      	lsreq	r3, r3, #2
 800b7a2:	3002      	addeq	r0, #2
 800b7a4:	07da      	lsls	r2, r3, #31
 800b7a6:	d403      	bmi.n	800b7b0 <__lo0bits+0x50>
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	f100 0001 	add.w	r0, r0, #1
 800b7ae:	d005      	beq.n	800b7bc <__lo0bits+0x5c>
 800b7b0:	600b      	str	r3, [r1, #0]
 800b7b2:	4770      	bx	lr
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	e7e8      	b.n	800b78a <__lo0bits+0x2a>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	4770      	bx	lr
 800b7bc:	2020      	movs	r0, #32
 800b7be:	4770      	bx	lr

0800b7c0 <__i2b>:
 800b7c0:	b510      	push	{r4, lr}
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	f7ff feb5 	bl	800b534 <_Balloc>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	b928      	cbnz	r0, 800b7da <__i2b+0x1a>
 800b7ce:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <__i2b+0x24>)
 800b7d0:	4805      	ldr	r0, [pc, #20]	; (800b7e8 <__i2b+0x28>)
 800b7d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7d6:	f001 f9d9 	bl	800cb8c <__assert_func>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	6144      	str	r4, [r0, #20]
 800b7de:	6103      	str	r3, [r0, #16]
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	bf00      	nop
 800b7e4:	0800d933 	.word	0x0800d933
 800b7e8:	0800d9c4 	.word	0x0800d9c4

0800b7ec <__multiply>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	690a      	ldr	r2, [r1, #16]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	bfb8      	it	lt
 800b7fa:	460b      	movlt	r3, r1
 800b7fc:	460d      	mov	r5, r1
 800b7fe:	bfbc      	itt	lt
 800b800:	4625      	movlt	r5, r4
 800b802:	461c      	movlt	r4, r3
 800b804:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b808:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b80c:	68ab      	ldr	r3, [r5, #8]
 800b80e:	6869      	ldr	r1, [r5, #4]
 800b810:	eb0a 0709 	add.w	r7, sl, r9
 800b814:	42bb      	cmp	r3, r7
 800b816:	b085      	sub	sp, #20
 800b818:	bfb8      	it	lt
 800b81a:	3101      	addlt	r1, #1
 800b81c:	f7ff fe8a 	bl	800b534 <_Balloc>
 800b820:	b930      	cbnz	r0, 800b830 <__multiply+0x44>
 800b822:	4602      	mov	r2, r0
 800b824:	4b42      	ldr	r3, [pc, #264]	; (800b930 <__multiply+0x144>)
 800b826:	4843      	ldr	r0, [pc, #268]	; (800b934 <__multiply+0x148>)
 800b828:	f240 115d 	movw	r1, #349	; 0x15d
 800b82c:	f001 f9ae 	bl	800cb8c <__assert_func>
 800b830:	f100 0614 	add.w	r6, r0, #20
 800b834:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b838:	4633      	mov	r3, r6
 800b83a:	2200      	movs	r2, #0
 800b83c:	4543      	cmp	r3, r8
 800b83e:	d31e      	bcc.n	800b87e <__multiply+0x92>
 800b840:	f105 0c14 	add.w	ip, r5, #20
 800b844:	f104 0314 	add.w	r3, r4, #20
 800b848:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b84c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	ebac 0205 	sub.w	r2, ip, r5
 800b856:	3a15      	subs	r2, #21
 800b858:	f022 0203 	bic.w	r2, r2, #3
 800b85c:	3204      	adds	r2, #4
 800b85e:	f105 0115 	add.w	r1, r5, #21
 800b862:	458c      	cmp	ip, r1
 800b864:	bf38      	it	cc
 800b866:	2204      	movcc	r2, #4
 800b868:	9201      	str	r2, [sp, #4]
 800b86a:	9a02      	ldr	r2, [sp, #8]
 800b86c:	9303      	str	r3, [sp, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d808      	bhi.n	800b884 <__multiply+0x98>
 800b872:	2f00      	cmp	r7, #0
 800b874:	dc55      	bgt.n	800b922 <__multiply+0x136>
 800b876:	6107      	str	r7, [r0, #16]
 800b878:	b005      	add	sp, #20
 800b87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87e:	f843 2b04 	str.w	r2, [r3], #4
 800b882:	e7db      	b.n	800b83c <__multiply+0x50>
 800b884:	f8b3 a000 	ldrh.w	sl, [r3]
 800b888:	f1ba 0f00 	cmp.w	sl, #0
 800b88c:	d020      	beq.n	800b8d0 <__multiply+0xe4>
 800b88e:	f105 0e14 	add.w	lr, r5, #20
 800b892:	46b1      	mov	r9, r6
 800b894:	2200      	movs	r2, #0
 800b896:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b89a:	f8d9 b000 	ldr.w	fp, [r9]
 800b89e:	b2a1      	uxth	r1, r4
 800b8a0:	fa1f fb8b 	uxth.w	fp, fp
 800b8a4:	fb0a b101 	mla	r1, sl, r1, fp
 800b8a8:	4411      	add	r1, r2
 800b8aa:	f8d9 2000 	ldr.w	r2, [r9]
 800b8ae:	0c24      	lsrs	r4, r4, #16
 800b8b0:	0c12      	lsrs	r2, r2, #16
 800b8b2:	fb0a 2404 	mla	r4, sl, r4, r2
 800b8b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b8ba:	b289      	uxth	r1, r1
 800b8bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b8c0:	45f4      	cmp	ip, lr
 800b8c2:	f849 1b04 	str.w	r1, [r9], #4
 800b8c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b8ca:	d8e4      	bhi.n	800b896 <__multiply+0xaa>
 800b8cc:	9901      	ldr	r1, [sp, #4]
 800b8ce:	5072      	str	r2, [r6, r1]
 800b8d0:	9a03      	ldr	r2, [sp, #12]
 800b8d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	f1b9 0f00 	cmp.w	r9, #0
 800b8dc:	d01f      	beq.n	800b91e <__multiply+0x132>
 800b8de:	6834      	ldr	r4, [r6, #0]
 800b8e0:	f105 0114 	add.w	r1, r5, #20
 800b8e4:	46b6      	mov	lr, r6
 800b8e6:	f04f 0a00 	mov.w	sl, #0
 800b8ea:	880a      	ldrh	r2, [r1, #0]
 800b8ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b8f0:	fb09 b202 	mla	r2, r9, r2, fp
 800b8f4:	4492      	add	sl, r2
 800b8f6:	b2a4      	uxth	r4, r4
 800b8f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b8fc:	f84e 4b04 	str.w	r4, [lr], #4
 800b900:	f851 4b04 	ldr.w	r4, [r1], #4
 800b904:	f8be 2000 	ldrh.w	r2, [lr]
 800b908:	0c24      	lsrs	r4, r4, #16
 800b90a:	fb09 2404 	mla	r4, r9, r4, r2
 800b90e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b912:	458c      	cmp	ip, r1
 800b914:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b918:	d8e7      	bhi.n	800b8ea <__multiply+0xfe>
 800b91a:	9a01      	ldr	r2, [sp, #4]
 800b91c:	50b4      	str	r4, [r6, r2]
 800b91e:	3604      	adds	r6, #4
 800b920:	e7a3      	b.n	800b86a <__multiply+0x7e>
 800b922:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1a5      	bne.n	800b876 <__multiply+0x8a>
 800b92a:	3f01      	subs	r7, #1
 800b92c:	e7a1      	b.n	800b872 <__multiply+0x86>
 800b92e:	bf00      	nop
 800b930:	0800d933 	.word	0x0800d933
 800b934:	0800d9c4 	.word	0x0800d9c4

0800b938 <__pow5mult>:
 800b938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b93c:	4615      	mov	r5, r2
 800b93e:	f012 0203 	ands.w	r2, r2, #3
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	d007      	beq.n	800b958 <__pow5mult+0x20>
 800b948:	4c25      	ldr	r4, [pc, #148]	; (800b9e0 <__pow5mult+0xa8>)
 800b94a:	3a01      	subs	r2, #1
 800b94c:	2300      	movs	r3, #0
 800b94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b952:	f7ff fe51 	bl	800b5f8 <__multadd>
 800b956:	4607      	mov	r7, r0
 800b958:	10ad      	asrs	r5, r5, #2
 800b95a:	d03d      	beq.n	800b9d8 <__pow5mult+0xa0>
 800b95c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b95e:	b97c      	cbnz	r4, 800b980 <__pow5mult+0x48>
 800b960:	2010      	movs	r0, #16
 800b962:	f7ff fdcd 	bl	800b500 <malloc>
 800b966:	4602      	mov	r2, r0
 800b968:	6270      	str	r0, [r6, #36]	; 0x24
 800b96a:	b928      	cbnz	r0, 800b978 <__pow5mult+0x40>
 800b96c:	4b1d      	ldr	r3, [pc, #116]	; (800b9e4 <__pow5mult+0xac>)
 800b96e:	481e      	ldr	r0, [pc, #120]	; (800b9e8 <__pow5mult+0xb0>)
 800b970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b974:	f001 f90a 	bl	800cb8c <__assert_func>
 800b978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b97c:	6004      	str	r4, [r0, #0]
 800b97e:	60c4      	str	r4, [r0, #12]
 800b980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b988:	b94c      	cbnz	r4, 800b99e <__pow5mult+0x66>
 800b98a:	f240 2171 	movw	r1, #625	; 0x271
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff ff16 	bl	800b7c0 <__i2b>
 800b994:	2300      	movs	r3, #0
 800b996:	f8c8 0008 	str.w	r0, [r8, #8]
 800b99a:	4604      	mov	r4, r0
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	f04f 0900 	mov.w	r9, #0
 800b9a2:	07eb      	lsls	r3, r5, #31
 800b9a4:	d50a      	bpl.n	800b9bc <__pow5mult+0x84>
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff1e 	bl	800b7ec <__multiply>
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff fdfd 	bl	800b5b4 <_Bfree>
 800b9ba:	4647      	mov	r7, r8
 800b9bc:	106d      	asrs	r5, r5, #1
 800b9be:	d00b      	beq.n	800b9d8 <__pow5mult+0xa0>
 800b9c0:	6820      	ldr	r0, [r4, #0]
 800b9c2:	b938      	cbnz	r0, 800b9d4 <__pow5mult+0x9c>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7ff ff0f 	bl	800b7ec <__multiply>
 800b9ce:	6020      	str	r0, [r4, #0]
 800b9d0:	f8c0 9000 	str.w	r9, [r0]
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	e7e4      	b.n	800b9a2 <__pow5mult+0x6a>
 800b9d8:	4638      	mov	r0, r7
 800b9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800db18 	.word	0x0800db18
 800b9e4:	0800d8bd 	.word	0x0800d8bd
 800b9e8:	0800d9c4 	.word	0x0800d9c4

0800b9ec <__lshift>:
 800b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	6849      	ldr	r1, [r1, #4]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	4691      	mov	r9, r2
 800ba00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba04:	f108 0601 	add.w	r6, r8, #1
 800ba08:	42b3      	cmp	r3, r6
 800ba0a:	db0b      	blt.n	800ba24 <__lshift+0x38>
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff fd91 	bl	800b534 <_Balloc>
 800ba12:	4605      	mov	r5, r0
 800ba14:	b948      	cbnz	r0, 800ba2a <__lshift+0x3e>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b28      	ldr	r3, [pc, #160]	; (800babc <__lshift+0xd0>)
 800ba1a:	4829      	ldr	r0, [pc, #164]	; (800bac0 <__lshift+0xd4>)
 800ba1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba20:	f001 f8b4 	bl	800cb8c <__assert_func>
 800ba24:	3101      	adds	r1, #1
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	e7ee      	b.n	800ba08 <__lshift+0x1c>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f100 0114 	add.w	r1, r0, #20
 800ba30:	f100 0210 	add.w	r2, r0, #16
 800ba34:	4618      	mov	r0, r3
 800ba36:	4553      	cmp	r3, sl
 800ba38:	db33      	blt.n	800baa2 <__lshift+0xb6>
 800ba3a:	6920      	ldr	r0, [r4, #16]
 800ba3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba40:	f104 0314 	add.w	r3, r4, #20
 800ba44:	f019 091f 	ands.w	r9, r9, #31
 800ba48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba50:	d02b      	beq.n	800baaa <__lshift+0xbe>
 800ba52:	f1c9 0e20 	rsb	lr, r9, #32
 800ba56:	468a      	mov	sl, r1
 800ba58:	2200      	movs	r2, #0
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ba60:	4302      	orrs	r2, r0
 800ba62:	f84a 2b04 	str.w	r2, [sl], #4
 800ba66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6a:	459c      	cmp	ip, r3
 800ba6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba70:	d8f3      	bhi.n	800ba5a <__lshift+0x6e>
 800ba72:	ebac 0304 	sub.w	r3, ip, r4
 800ba76:	3b15      	subs	r3, #21
 800ba78:	f023 0303 	bic.w	r3, r3, #3
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	f104 0015 	add.w	r0, r4, #21
 800ba82:	4584      	cmp	ip, r0
 800ba84:	bf38      	it	cc
 800ba86:	2304      	movcc	r3, #4
 800ba88:	50ca      	str	r2, [r1, r3]
 800ba8a:	b10a      	cbz	r2, 800ba90 <__lshift+0xa4>
 800ba8c:	f108 0602 	add.w	r6, r8, #2
 800ba90:	3e01      	subs	r6, #1
 800ba92:	4638      	mov	r0, r7
 800ba94:	612e      	str	r6, [r5, #16]
 800ba96:	4621      	mov	r1, r4
 800ba98:	f7ff fd8c 	bl	800b5b4 <_Bfree>
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800baa6:	3301      	adds	r3, #1
 800baa8:	e7c5      	b.n	800ba36 <__lshift+0x4a>
 800baaa:	3904      	subs	r1, #4
 800baac:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bab4:	459c      	cmp	ip, r3
 800bab6:	d8f9      	bhi.n	800baac <__lshift+0xc0>
 800bab8:	e7ea      	b.n	800ba90 <__lshift+0xa4>
 800baba:	bf00      	nop
 800babc:	0800d933 	.word	0x0800d933
 800bac0:	0800d9c4 	.word	0x0800d9c4

0800bac4 <__mcmp>:
 800bac4:	b530      	push	{r4, r5, lr}
 800bac6:	6902      	ldr	r2, [r0, #16]
 800bac8:	690c      	ldr	r4, [r1, #16]
 800baca:	1b12      	subs	r2, r2, r4
 800bacc:	d10e      	bne.n	800baec <__mcmp+0x28>
 800bace:	f100 0314 	add.w	r3, r0, #20
 800bad2:	3114      	adds	r1, #20
 800bad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800badc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bae4:	42a5      	cmp	r5, r4
 800bae6:	d003      	beq.n	800baf0 <__mcmp+0x2c>
 800bae8:	d305      	bcc.n	800baf6 <__mcmp+0x32>
 800baea:	2201      	movs	r2, #1
 800baec:	4610      	mov	r0, r2
 800baee:	bd30      	pop	{r4, r5, pc}
 800baf0:	4283      	cmp	r3, r0
 800baf2:	d3f3      	bcc.n	800badc <__mcmp+0x18>
 800baf4:	e7fa      	b.n	800baec <__mcmp+0x28>
 800baf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bafa:	e7f7      	b.n	800baec <__mcmp+0x28>

0800bafc <__mdiff>:
 800bafc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	460c      	mov	r4, r1
 800bb02:	4606      	mov	r6, r0
 800bb04:	4611      	mov	r1, r2
 800bb06:	4620      	mov	r0, r4
 800bb08:	4617      	mov	r7, r2
 800bb0a:	f7ff ffdb 	bl	800bac4 <__mcmp>
 800bb0e:	1e05      	subs	r5, r0, #0
 800bb10:	d110      	bne.n	800bb34 <__mdiff+0x38>
 800bb12:	4629      	mov	r1, r5
 800bb14:	4630      	mov	r0, r6
 800bb16:	f7ff fd0d 	bl	800b534 <_Balloc>
 800bb1a:	b930      	cbnz	r0, 800bb2a <__mdiff+0x2e>
 800bb1c:	4b39      	ldr	r3, [pc, #228]	; (800bc04 <__mdiff+0x108>)
 800bb1e:	4602      	mov	r2, r0
 800bb20:	f240 2132 	movw	r1, #562	; 0x232
 800bb24:	4838      	ldr	r0, [pc, #224]	; (800bc08 <__mdiff+0x10c>)
 800bb26:	f001 f831 	bl	800cb8c <__assert_func>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb34:	bfa4      	itt	ge
 800bb36:	463b      	movge	r3, r7
 800bb38:	4627      	movge	r7, r4
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	bfa6      	itte	ge
 800bb40:	461c      	movge	r4, r3
 800bb42:	2500      	movge	r5, #0
 800bb44:	2501      	movlt	r5, #1
 800bb46:	f7ff fcf5 	bl	800b534 <_Balloc>
 800bb4a:	b920      	cbnz	r0, 800bb56 <__mdiff+0x5a>
 800bb4c:	4b2d      	ldr	r3, [pc, #180]	; (800bc04 <__mdiff+0x108>)
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb54:	e7e6      	b.n	800bb24 <__mdiff+0x28>
 800bb56:	693e      	ldr	r6, [r7, #16]
 800bb58:	60c5      	str	r5, [r0, #12]
 800bb5a:	6925      	ldr	r5, [r4, #16]
 800bb5c:	f107 0114 	add.w	r1, r7, #20
 800bb60:	f104 0914 	add.w	r9, r4, #20
 800bb64:	f100 0e14 	add.w	lr, r0, #20
 800bb68:	f107 0210 	add.w	r2, r7, #16
 800bb6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bb70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bb74:	46f2      	mov	sl, lr
 800bb76:	2700      	movs	r7, #0
 800bb78:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb80:	fa1f f883 	uxth.w	r8, r3
 800bb84:	fa17 f78b 	uxtah	r7, r7, fp
 800bb88:	0c1b      	lsrs	r3, r3, #16
 800bb8a:	eba7 0808 	sub.w	r8, r7, r8
 800bb8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb96:	fa1f f888 	uxth.w	r8, r8
 800bb9a:	141f      	asrs	r7, r3, #16
 800bb9c:	454d      	cmp	r5, r9
 800bb9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bba2:	f84a 3b04 	str.w	r3, [sl], #4
 800bba6:	d8e7      	bhi.n	800bb78 <__mdiff+0x7c>
 800bba8:	1b2b      	subs	r3, r5, r4
 800bbaa:	3b15      	subs	r3, #21
 800bbac:	f023 0303 	bic.w	r3, r3, #3
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	3415      	adds	r4, #21
 800bbb4:	42a5      	cmp	r5, r4
 800bbb6:	bf38      	it	cc
 800bbb8:	2304      	movcc	r3, #4
 800bbba:	4419      	add	r1, r3
 800bbbc:	4473      	add	r3, lr
 800bbbe:	469e      	mov	lr, r3
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	4565      	cmp	r5, ip
 800bbc4:	d30e      	bcc.n	800bbe4 <__mdiff+0xe8>
 800bbc6:	f10c 0203 	add.w	r2, ip, #3
 800bbca:	1a52      	subs	r2, r2, r1
 800bbcc:	f022 0203 	bic.w	r2, r2, #3
 800bbd0:	3903      	subs	r1, #3
 800bbd2:	458c      	cmp	ip, r1
 800bbd4:	bf38      	it	cc
 800bbd6:	2200      	movcc	r2, #0
 800bbd8:	441a      	add	r2, r3
 800bbda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbde:	b17b      	cbz	r3, 800bc00 <__mdiff+0x104>
 800bbe0:	6106      	str	r6, [r0, #16]
 800bbe2:	e7a5      	b.n	800bb30 <__mdiff+0x34>
 800bbe4:	f855 8b04 	ldr.w	r8, [r5], #4
 800bbe8:	fa17 f488 	uxtah	r4, r7, r8
 800bbec:	1422      	asrs	r2, r4, #16
 800bbee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bbf2:	b2a4      	uxth	r4, r4
 800bbf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bbf8:	f84e 4b04 	str.w	r4, [lr], #4
 800bbfc:	1417      	asrs	r7, r2, #16
 800bbfe:	e7e0      	b.n	800bbc2 <__mdiff+0xc6>
 800bc00:	3e01      	subs	r6, #1
 800bc02:	e7ea      	b.n	800bbda <__mdiff+0xde>
 800bc04:	0800d933 	.word	0x0800d933
 800bc08:	0800d9c4 	.word	0x0800d9c4

0800bc0c <__ulp>:
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	ed8d 0b00 	vstr	d0, [sp]
 800bc12:	9b01      	ldr	r3, [sp, #4]
 800bc14:	4912      	ldr	r1, [pc, #72]	; (800bc60 <__ulp+0x54>)
 800bc16:	4019      	ands	r1, r3
 800bc18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	dd05      	ble.n	800bc2c <__ulp+0x20>
 800bc20:	2200      	movs	r2, #0
 800bc22:	460b      	mov	r3, r1
 800bc24:	ec43 2b10 	vmov	d0, r2, r3
 800bc28:	b002      	add	sp, #8
 800bc2a:	4770      	bx	lr
 800bc2c:	4249      	negs	r1, r1
 800bc2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc32:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc36:	f04f 0200 	mov.w	r2, #0
 800bc3a:	f04f 0300 	mov.w	r3, #0
 800bc3e:	da04      	bge.n	800bc4a <__ulp+0x3e>
 800bc40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc44:	fa41 f300 	asr.w	r3, r1, r0
 800bc48:	e7ec      	b.n	800bc24 <__ulp+0x18>
 800bc4a:	f1a0 0114 	sub.w	r1, r0, #20
 800bc4e:	291e      	cmp	r1, #30
 800bc50:	bfda      	itte	le
 800bc52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc56:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc5a:	2101      	movgt	r1, #1
 800bc5c:	460a      	mov	r2, r1
 800bc5e:	e7e1      	b.n	800bc24 <__ulp+0x18>
 800bc60:	7ff00000 	.word	0x7ff00000

0800bc64 <__b2d>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	6905      	ldr	r5, [r0, #16]
 800bc68:	f100 0714 	add.w	r7, r0, #20
 800bc6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc70:	1f2e      	subs	r6, r5, #4
 800bc72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7ff fd52 	bl	800b720 <__hi0bits>
 800bc7c:	f1c0 0320 	rsb	r3, r0, #32
 800bc80:	280a      	cmp	r0, #10
 800bc82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd00 <__b2d+0x9c>
 800bc86:	600b      	str	r3, [r1, #0]
 800bc88:	dc14      	bgt.n	800bcb4 <__b2d+0x50>
 800bc8a:	f1c0 0e0b 	rsb	lr, r0, #11
 800bc8e:	fa24 f10e 	lsr.w	r1, r4, lr
 800bc92:	42b7      	cmp	r7, r6
 800bc94:	ea41 030c 	orr.w	r3, r1, ip
 800bc98:	bf34      	ite	cc
 800bc9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bc9e:	2100      	movcs	r1, #0
 800bca0:	3015      	adds	r0, #21
 800bca2:	fa04 f000 	lsl.w	r0, r4, r0
 800bca6:	fa21 f10e 	lsr.w	r1, r1, lr
 800bcaa:	ea40 0201 	orr.w	r2, r0, r1
 800bcae:	ec43 2b10 	vmov	d0, r2, r3
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	42b7      	cmp	r7, r6
 800bcb6:	bf3a      	itte	cc
 800bcb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcbc:	f1a5 0608 	subcc.w	r6, r5, #8
 800bcc0:	2100      	movcs	r1, #0
 800bcc2:	380b      	subs	r0, #11
 800bcc4:	d017      	beq.n	800bcf6 <__b2d+0x92>
 800bcc6:	f1c0 0c20 	rsb	ip, r0, #32
 800bcca:	fa04 f500 	lsl.w	r5, r4, r0
 800bcce:	42be      	cmp	r6, r7
 800bcd0:	fa21 f40c 	lsr.w	r4, r1, ip
 800bcd4:	ea45 0504 	orr.w	r5, r5, r4
 800bcd8:	bf8c      	ite	hi
 800bcda:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bcde:	2400      	movls	r4, #0
 800bce0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bce4:	fa01 f000 	lsl.w	r0, r1, r0
 800bce8:	fa24 f40c 	lsr.w	r4, r4, ip
 800bcec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcf0:	ea40 0204 	orr.w	r2, r0, r4
 800bcf4:	e7db      	b.n	800bcae <__b2d+0x4a>
 800bcf6:	ea44 030c 	orr.w	r3, r4, ip
 800bcfa:	460a      	mov	r2, r1
 800bcfc:	e7d7      	b.n	800bcae <__b2d+0x4a>
 800bcfe:	bf00      	nop
 800bd00:	3ff00000 	.word	0x3ff00000

0800bd04 <__d2b>:
 800bd04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd08:	4689      	mov	r9, r1
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	ec57 6b10 	vmov	r6, r7, d0
 800bd10:	4690      	mov	r8, r2
 800bd12:	f7ff fc0f 	bl	800b534 <_Balloc>
 800bd16:	4604      	mov	r4, r0
 800bd18:	b930      	cbnz	r0, 800bd28 <__d2b+0x24>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	4b25      	ldr	r3, [pc, #148]	; (800bdb4 <__d2b+0xb0>)
 800bd1e:	4826      	ldr	r0, [pc, #152]	; (800bdb8 <__d2b+0xb4>)
 800bd20:	f240 310a 	movw	r1, #778	; 0x30a
 800bd24:	f000 ff32 	bl	800cb8c <__assert_func>
 800bd28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd30:	bb35      	cbnz	r5, 800bd80 <__d2b+0x7c>
 800bd32:	2e00      	cmp	r6, #0
 800bd34:	9301      	str	r3, [sp, #4]
 800bd36:	d028      	beq.n	800bd8a <__d2b+0x86>
 800bd38:	4668      	mov	r0, sp
 800bd3a:	9600      	str	r6, [sp, #0]
 800bd3c:	f7ff fd10 	bl	800b760 <__lo0bits>
 800bd40:	9900      	ldr	r1, [sp, #0]
 800bd42:	b300      	cbz	r0, 800bd86 <__d2b+0x82>
 800bd44:	9a01      	ldr	r2, [sp, #4]
 800bd46:	f1c0 0320 	rsb	r3, r0, #32
 800bd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4e:	430b      	orrs	r3, r1
 800bd50:	40c2      	lsrs	r2, r0
 800bd52:	6163      	str	r3, [r4, #20]
 800bd54:	9201      	str	r2, [sp, #4]
 800bd56:	9b01      	ldr	r3, [sp, #4]
 800bd58:	61a3      	str	r3, [r4, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bf14      	ite	ne
 800bd5e:	2202      	movne	r2, #2
 800bd60:	2201      	moveq	r2, #1
 800bd62:	6122      	str	r2, [r4, #16]
 800bd64:	b1d5      	cbz	r5, 800bd9c <__d2b+0x98>
 800bd66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd6a:	4405      	add	r5, r0
 800bd6c:	f8c9 5000 	str.w	r5, [r9]
 800bd70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd74:	f8c8 0000 	str.w	r0, [r8]
 800bd78:	4620      	mov	r0, r4
 800bd7a:	b003      	add	sp, #12
 800bd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd84:	e7d5      	b.n	800bd32 <__d2b+0x2e>
 800bd86:	6161      	str	r1, [r4, #20]
 800bd88:	e7e5      	b.n	800bd56 <__d2b+0x52>
 800bd8a:	a801      	add	r0, sp, #4
 800bd8c:	f7ff fce8 	bl	800b760 <__lo0bits>
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	6163      	str	r3, [r4, #20]
 800bd94:	2201      	movs	r2, #1
 800bd96:	6122      	str	r2, [r4, #16]
 800bd98:	3020      	adds	r0, #32
 800bd9a:	e7e3      	b.n	800bd64 <__d2b+0x60>
 800bd9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bda0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bda4:	f8c9 0000 	str.w	r0, [r9]
 800bda8:	6918      	ldr	r0, [r3, #16]
 800bdaa:	f7ff fcb9 	bl	800b720 <__hi0bits>
 800bdae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdb2:	e7df      	b.n	800bd74 <__d2b+0x70>
 800bdb4:	0800d933 	.word	0x0800d933
 800bdb8:	0800d9c4 	.word	0x0800d9c4

0800bdbc <__ratio>:
 800bdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	468a      	mov	sl, r1
 800bdc2:	4669      	mov	r1, sp
 800bdc4:	4683      	mov	fp, r0
 800bdc6:	f7ff ff4d 	bl	800bc64 <__b2d>
 800bdca:	a901      	add	r1, sp, #4
 800bdcc:	4650      	mov	r0, sl
 800bdce:	ec59 8b10 	vmov	r8, r9, d0
 800bdd2:	ee10 6a10 	vmov	r6, s0
 800bdd6:	f7ff ff45 	bl	800bc64 <__b2d>
 800bdda:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bdde:	f8da 2010 	ldr.w	r2, [sl, #16]
 800bde2:	eba3 0c02 	sub.w	ip, r3, r2
 800bde6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bdf0:	ec55 4b10 	vmov	r4, r5, d0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	ee10 0a10 	vmov	r0, s0
 800bdfa:	bfce      	itee	gt
 800bdfc:	464a      	movgt	r2, r9
 800bdfe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be02:	462a      	movle	r2, r5
 800be04:	464f      	mov	r7, r9
 800be06:	4629      	mov	r1, r5
 800be08:	bfcc      	ite	gt
 800be0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be0e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800be12:	ec47 6b17 	vmov	d7, r6, r7
 800be16:	ec41 0b16 	vmov	d6, r0, r1
 800be1a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800be1e:	b003      	add	sp, #12
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be24 <__copybits>:
 800be24:	3901      	subs	r1, #1
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	1149      	asrs	r1, r1, #5
 800be2a:	6914      	ldr	r4, [r2, #16]
 800be2c:	3101      	adds	r1, #1
 800be2e:	f102 0314 	add.w	r3, r2, #20
 800be32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be3a:	1f05      	subs	r5, r0, #4
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	d30c      	bcc.n	800be5a <__copybits+0x36>
 800be40:	1aa3      	subs	r3, r4, r2
 800be42:	3b11      	subs	r3, #17
 800be44:	f023 0303 	bic.w	r3, r3, #3
 800be48:	3211      	adds	r2, #17
 800be4a:	42a2      	cmp	r2, r4
 800be4c:	bf88      	it	hi
 800be4e:	2300      	movhi	r3, #0
 800be50:	4418      	add	r0, r3
 800be52:	2300      	movs	r3, #0
 800be54:	4288      	cmp	r0, r1
 800be56:	d305      	bcc.n	800be64 <__copybits+0x40>
 800be58:	bd70      	pop	{r4, r5, r6, pc}
 800be5a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be5e:	f845 6f04 	str.w	r6, [r5, #4]!
 800be62:	e7eb      	b.n	800be3c <__copybits+0x18>
 800be64:	f840 3b04 	str.w	r3, [r0], #4
 800be68:	e7f4      	b.n	800be54 <__copybits+0x30>

0800be6a <__any_on>:
 800be6a:	f100 0214 	add.w	r2, r0, #20
 800be6e:	6900      	ldr	r0, [r0, #16]
 800be70:	114b      	asrs	r3, r1, #5
 800be72:	4298      	cmp	r0, r3
 800be74:	b510      	push	{r4, lr}
 800be76:	db11      	blt.n	800be9c <__any_on+0x32>
 800be78:	dd0a      	ble.n	800be90 <__any_on+0x26>
 800be7a:	f011 011f 	ands.w	r1, r1, #31
 800be7e:	d007      	beq.n	800be90 <__any_on+0x26>
 800be80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be84:	fa24 f001 	lsr.w	r0, r4, r1
 800be88:	fa00 f101 	lsl.w	r1, r0, r1
 800be8c:	428c      	cmp	r4, r1
 800be8e:	d10b      	bne.n	800bea8 <__any_on+0x3e>
 800be90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be94:	4293      	cmp	r3, r2
 800be96:	d803      	bhi.n	800bea0 <__any_on+0x36>
 800be98:	2000      	movs	r0, #0
 800be9a:	bd10      	pop	{r4, pc}
 800be9c:	4603      	mov	r3, r0
 800be9e:	e7f7      	b.n	800be90 <__any_on+0x26>
 800bea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bea4:	2900      	cmp	r1, #0
 800bea6:	d0f5      	beq.n	800be94 <__any_on+0x2a>
 800bea8:	2001      	movs	r0, #1
 800beaa:	e7f6      	b.n	800be9a <__any_on+0x30>

0800beac <_calloc_r>:
 800beac:	b513      	push	{r0, r1, r4, lr}
 800beae:	434a      	muls	r2, r1
 800beb0:	4611      	mov	r1, r2
 800beb2:	9201      	str	r2, [sp, #4]
 800beb4:	f000 f85a 	bl	800bf6c <_malloc_r>
 800beb8:	4604      	mov	r4, r0
 800beba:	b118      	cbz	r0, 800bec4 <_calloc_r+0x18>
 800bebc:	9a01      	ldr	r2, [sp, #4]
 800bebe:	2100      	movs	r1, #0
 800bec0:	f7fc fbca 	bl	8008658 <memset>
 800bec4:	4620      	mov	r0, r4
 800bec6:	b002      	add	sp, #8
 800bec8:	bd10      	pop	{r4, pc}
	...

0800becc <_free_r>:
 800becc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bece:	2900      	cmp	r1, #0
 800bed0:	d048      	beq.n	800bf64 <_free_r+0x98>
 800bed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed6:	9001      	str	r0, [sp, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f1a1 0404 	sub.w	r4, r1, #4
 800bede:	bfb8      	it	lt
 800bee0:	18e4      	addlt	r4, r4, r3
 800bee2:	f001 f857 	bl	800cf94 <__malloc_lock>
 800bee6:	4a20      	ldr	r2, [pc, #128]	; (800bf68 <_free_r+0x9c>)
 800bee8:	9801      	ldr	r0, [sp, #4]
 800beea:	6813      	ldr	r3, [r2, #0]
 800beec:	4615      	mov	r5, r2
 800beee:	b933      	cbnz	r3, 800befe <_free_r+0x32>
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	6014      	str	r4, [r2, #0]
 800bef4:	b003      	add	sp, #12
 800bef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800befa:	f001 b851 	b.w	800cfa0 <__malloc_unlock>
 800befe:	42a3      	cmp	r3, r4
 800bf00:	d90b      	bls.n	800bf1a <_free_r+0x4e>
 800bf02:	6821      	ldr	r1, [r4, #0]
 800bf04:	1862      	adds	r2, r4, r1
 800bf06:	4293      	cmp	r3, r2
 800bf08:	bf04      	itt	eq
 800bf0a:	681a      	ldreq	r2, [r3, #0]
 800bf0c:	685b      	ldreq	r3, [r3, #4]
 800bf0e:	6063      	str	r3, [r4, #4]
 800bf10:	bf04      	itt	eq
 800bf12:	1852      	addeq	r2, r2, r1
 800bf14:	6022      	streq	r2, [r4, #0]
 800bf16:	602c      	str	r4, [r5, #0]
 800bf18:	e7ec      	b.n	800bef4 <_free_r+0x28>
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b10b      	cbz	r3, 800bf24 <_free_r+0x58>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d9fa      	bls.n	800bf1a <_free_r+0x4e>
 800bf24:	6811      	ldr	r1, [r2, #0]
 800bf26:	1855      	adds	r5, r2, r1
 800bf28:	42a5      	cmp	r5, r4
 800bf2a:	d10b      	bne.n	800bf44 <_free_r+0x78>
 800bf2c:	6824      	ldr	r4, [r4, #0]
 800bf2e:	4421      	add	r1, r4
 800bf30:	1854      	adds	r4, r2, r1
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	d1dd      	bne.n	800bef4 <_free_r+0x28>
 800bf38:	681c      	ldr	r4, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	6053      	str	r3, [r2, #4]
 800bf3e:	4421      	add	r1, r4
 800bf40:	6011      	str	r1, [r2, #0]
 800bf42:	e7d7      	b.n	800bef4 <_free_r+0x28>
 800bf44:	d902      	bls.n	800bf4c <_free_r+0x80>
 800bf46:	230c      	movs	r3, #12
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	e7d3      	b.n	800bef4 <_free_r+0x28>
 800bf4c:	6825      	ldr	r5, [r4, #0]
 800bf4e:	1961      	adds	r1, r4, r5
 800bf50:	428b      	cmp	r3, r1
 800bf52:	bf04      	itt	eq
 800bf54:	6819      	ldreq	r1, [r3, #0]
 800bf56:	685b      	ldreq	r3, [r3, #4]
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	bf04      	itt	eq
 800bf5c:	1949      	addeq	r1, r1, r5
 800bf5e:	6021      	streq	r1, [r4, #0]
 800bf60:	6054      	str	r4, [r2, #4]
 800bf62:	e7c7      	b.n	800bef4 <_free_r+0x28>
 800bf64:	b003      	add	sp, #12
 800bf66:	bd30      	pop	{r4, r5, pc}
 800bf68:	2000024c 	.word	0x2000024c

0800bf6c <_malloc_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	1ccd      	adds	r5, r1, #3
 800bf70:	f025 0503 	bic.w	r5, r5, #3
 800bf74:	3508      	adds	r5, #8
 800bf76:	2d0c      	cmp	r5, #12
 800bf78:	bf38      	it	cc
 800bf7a:	250c      	movcc	r5, #12
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	4606      	mov	r6, r0
 800bf80:	db01      	blt.n	800bf86 <_malloc_r+0x1a>
 800bf82:	42a9      	cmp	r1, r5
 800bf84:	d903      	bls.n	800bf8e <_malloc_r+0x22>
 800bf86:	230c      	movs	r3, #12
 800bf88:	6033      	str	r3, [r6, #0]
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf8e:	f001 f801 	bl	800cf94 <__malloc_lock>
 800bf92:	4921      	ldr	r1, [pc, #132]	; (800c018 <_malloc_r+0xac>)
 800bf94:	680a      	ldr	r2, [r1, #0]
 800bf96:	4614      	mov	r4, r2
 800bf98:	b99c      	cbnz	r4, 800bfc2 <_malloc_r+0x56>
 800bf9a:	4f20      	ldr	r7, [pc, #128]	; (800c01c <_malloc_r+0xb0>)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	b923      	cbnz	r3, 800bfaa <_malloc_r+0x3e>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f000 fcd0 	bl	800c948 <_sbrk_r>
 800bfa8:	6038      	str	r0, [r7, #0]
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4630      	mov	r0, r6
 800bfae:	f000 fccb 	bl	800c948 <_sbrk_r>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d123      	bne.n	800bffe <_malloc_r+0x92>
 800bfb6:	230c      	movs	r3, #12
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f000 fff0 	bl	800cfa0 <__malloc_unlock>
 800bfc0:	e7e3      	b.n	800bf8a <_malloc_r+0x1e>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	1b5b      	subs	r3, r3, r5
 800bfc6:	d417      	bmi.n	800bff8 <_malloc_r+0x8c>
 800bfc8:	2b0b      	cmp	r3, #11
 800bfca:	d903      	bls.n	800bfd4 <_malloc_r+0x68>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	441c      	add	r4, r3
 800bfd0:	6025      	str	r5, [r4, #0]
 800bfd2:	e004      	b.n	800bfde <_malloc_r+0x72>
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	42a2      	cmp	r2, r4
 800bfd8:	bf0c      	ite	eq
 800bfda:	600b      	streq	r3, [r1, #0]
 800bfdc:	6053      	strne	r3, [r2, #4]
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f000 ffde 	bl	800cfa0 <__malloc_unlock>
 800bfe4:	f104 000b 	add.w	r0, r4, #11
 800bfe8:	1d23      	adds	r3, r4, #4
 800bfea:	f020 0007 	bic.w	r0, r0, #7
 800bfee:	1ac2      	subs	r2, r0, r3
 800bff0:	d0cc      	beq.n	800bf8c <_malloc_r+0x20>
 800bff2:	1a1b      	subs	r3, r3, r0
 800bff4:	50a3      	str	r3, [r4, r2]
 800bff6:	e7c9      	b.n	800bf8c <_malloc_r+0x20>
 800bff8:	4622      	mov	r2, r4
 800bffa:	6864      	ldr	r4, [r4, #4]
 800bffc:	e7cc      	b.n	800bf98 <_malloc_r+0x2c>
 800bffe:	1cc4      	adds	r4, r0, #3
 800c000:	f024 0403 	bic.w	r4, r4, #3
 800c004:	42a0      	cmp	r0, r4
 800c006:	d0e3      	beq.n	800bfd0 <_malloc_r+0x64>
 800c008:	1a21      	subs	r1, r4, r0
 800c00a:	4630      	mov	r0, r6
 800c00c:	f000 fc9c 	bl	800c948 <_sbrk_r>
 800c010:	3001      	adds	r0, #1
 800c012:	d1dd      	bne.n	800bfd0 <_malloc_r+0x64>
 800c014:	e7cf      	b.n	800bfb6 <_malloc_r+0x4a>
 800c016:	bf00      	nop
 800c018:	2000024c 	.word	0x2000024c
 800c01c:	20000250 	.word	0x20000250

0800c020 <__ssputs_r>:
 800c020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c024:	688e      	ldr	r6, [r1, #8]
 800c026:	429e      	cmp	r6, r3
 800c028:	4682      	mov	sl, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	4690      	mov	r8, r2
 800c02e:	461f      	mov	r7, r3
 800c030:	d838      	bhi.n	800c0a4 <__ssputs_r+0x84>
 800c032:	898a      	ldrh	r2, [r1, #12]
 800c034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c038:	d032      	beq.n	800c0a0 <__ssputs_r+0x80>
 800c03a:	6825      	ldr	r5, [r4, #0]
 800c03c:	6909      	ldr	r1, [r1, #16]
 800c03e:	eba5 0901 	sub.w	r9, r5, r1
 800c042:	6965      	ldr	r5, [r4, #20]
 800c044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c04c:	3301      	adds	r3, #1
 800c04e:	444b      	add	r3, r9
 800c050:	106d      	asrs	r5, r5, #1
 800c052:	429d      	cmp	r5, r3
 800c054:	bf38      	it	cc
 800c056:	461d      	movcc	r5, r3
 800c058:	0553      	lsls	r3, r2, #21
 800c05a:	d531      	bpl.n	800c0c0 <__ssputs_r+0xa0>
 800c05c:	4629      	mov	r1, r5
 800c05e:	f7ff ff85 	bl	800bf6c <_malloc_r>
 800c062:	4606      	mov	r6, r0
 800c064:	b950      	cbnz	r0, 800c07c <__ssputs_r+0x5c>
 800c066:	230c      	movs	r3, #12
 800c068:	f8ca 3000 	str.w	r3, [sl]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07c:	6921      	ldr	r1, [r4, #16]
 800c07e:	464a      	mov	r2, r9
 800c080:	f7fc fadc 	bl	800863c <memcpy>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	6126      	str	r6, [r4, #16]
 800c092:	6165      	str	r5, [r4, #20]
 800c094:	444e      	add	r6, r9
 800c096:	eba5 0509 	sub.w	r5, r5, r9
 800c09a:	6026      	str	r6, [r4, #0]
 800c09c:	60a5      	str	r5, [r4, #8]
 800c09e:	463e      	mov	r6, r7
 800c0a0:	42be      	cmp	r6, r7
 800c0a2:	d900      	bls.n	800c0a6 <__ssputs_r+0x86>
 800c0a4:	463e      	mov	r6, r7
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	6820      	ldr	r0, [r4, #0]
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	f000 ff58 	bl	800cf60 <memmove>
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	1b9b      	subs	r3, r3, r6
 800c0b6:	4432      	add	r2, r6
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6022      	str	r2, [r4, #0]
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7db      	b.n	800c078 <__ssputs_r+0x58>
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	f000 ff73 	bl	800cfac <_realloc_r>
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d1e1      	bne.n	800c090 <__ssputs_r+0x70>
 800c0cc:	6921      	ldr	r1, [r4, #16]
 800c0ce:	4650      	mov	r0, sl
 800c0d0:	f7ff fefc 	bl	800becc <_free_r>
 800c0d4:	e7c7      	b.n	800c066 <__ssputs_r+0x46>
	...

0800c0d8 <_svfiprintf_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	4698      	mov	r8, r3
 800c0de:	898b      	ldrh	r3, [r1, #12]
 800c0e0:	061b      	lsls	r3, r3, #24
 800c0e2:	b09d      	sub	sp, #116	; 0x74
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	4614      	mov	r4, r2
 800c0ea:	d50e      	bpl.n	800c10a <_svfiprintf_r+0x32>
 800c0ec:	690b      	ldr	r3, [r1, #16]
 800c0ee:	b963      	cbnz	r3, 800c10a <_svfiprintf_r+0x32>
 800c0f0:	2140      	movs	r1, #64	; 0x40
 800c0f2:	f7ff ff3b 	bl	800bf6c <_malloc_r>
 800c0f6:	6028      	str	r0, [r5, #0]
 800c0f8:	6128      	str	r0, [r5, #16]
 800c0fa:	b920      	cbnz	r0, 800c106 <_svfiprintf_r+0x2e>
 800c0fc:	230c      	movs	r3, #12
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e0d1      	b.n	800c2aa <_svfiprintf_r+0x1d2>
 800c106:	2340      	movs	r3, #64	; 0x40
 800c108:	616b      	str	r3, [r5, #20]
 800c10a:	2300      	movs	r3, #0
 800c10c:	9309      	str	r3, [sp, #36]	; 0x24
 800c10e:	2320      	movs	r3, #32
 800c110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c114:	f8cd 800c 	str.w	r8, [sp, #12]
 800c118:	2330      	movs	r3, #48	; 0x30
 800c11a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2c4 <_svfiprintf_r+0x1ec>
 800c11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c122:	f04f 0901 	mov.w	r9, #1
 800c126:	4623      	mov	r3, r4
 800c128:	469a      	mov	sl, r3
 800c12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12e:	b10a      	cbz	r2, 800c134 <_svfiprintf_r+0x5c>
 800c130:	2a25      	cmp	r2, #37	; 0x25
 800c132:	d1f9      	bne.n	800c128 <_svfiprintf_r+0x50>
 800c134:	ebba 0b04 	subs.w	fp, sl, r4
 800c138:	d00b      	beq.n	800c152 <_svfiprintf_r+0x7a>
 800c13a:	465b      	mov	r3, fp
 800c13c:	4622      	mov	r2, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	4638      	mov	r0, r7
 800c142:	f7ff ff6d 	bl	800c020 <__ssputs_r>
 800c146:	3001      	adds	r0, #1
 800c148:	f000 80aa 	beq.w	800c2a0 <_svfiprintf_r+0x1c8>
 800c14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14e:	445a      	add	r2, fp
 800c150:	9209      	str	r2, [sp, #36]	; 0x24
 800c152:	f89a 3000 	ldrb.w	r3, [sl]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 80a2 	beq.w	800c2a0 <_svfiprintf_r+0x1c8>
 800c15c:	2300      	movs	r3, #0
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c166:	f10a 0a01 	add.w	sl, sl, #1
 800c16a:	9304      	str	r3, [sp, #16]
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c172:	931a      	str	r3, [sp, #104]	; 0x68
 800c174:	4654      	mov	r4, sl
 800c176:	2205      	movs	r2, #5
 800c178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17c:	4851      	ldr	r0, [pc, #324]	; (800c2c4 <_svfiprintf_r+0x1ec>)
 800c17e:	f7f4 f867 	bl	8000250 <memchr>
 800c182:	9a04      	ldr	r2, [sp, #16]
 800c184:	b9d8      	cbnz	r0, 800c1be <_svfiprintf_r+0xe6>
 800c186:	06d0      	lsls	r0, r2, #27
 800c188:	bf44      	itt	mi
 800c18a:	2320      	movmi	r3, #32
 800c18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c190:	0711      	lsls	r1, r2, #28
 800c192:	bf44      	itt	mi
 800c194:	232b      	movmi	r3, #43	; 0x2b
 800c196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c19a:	f89a 3000 	ldrb.w	r3, [sl]
 800c19e:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a0:	d015      	beq.n	800c1ce <_svfiprintf_r+0xf6>
 800c1a2:	9a07      	ldr	r2, [sp, #28]
 800c1a4:	4654      	mov	r4, sl
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f04f 0c0a 	mov.w	ip, #10
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b2:	3b30      	subs	r3, #48	; 0x30
 800c1b4:	2b09      	cmp	r3, #9
 800c1b6:	d94e      	bls.n	800c256 <_svfiprintf_r+0x17e>
 800c1b8:	b1b0      	cbz	r0, 800c1e8 <_svfiprintf_r+0x110>
 800c1ba:	9207      	str	r2, [sp, #28]
 800c1bc:	e014      	b.n	800c1e8 <_svfiprintf_r+0x110>
 800c1be:	eba0 0308 	sub.w	r3, r0, r8
 800c1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	46a2      	mov	sl, r4
 800c1cc:	e7d2      	b.n	800c174 <_svfiprintf_r+0x9c>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	1d19      	adds	r1, r3, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	9103      	str	r1, [sp, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bfbb      	ittet	lt
 800c1da:	425b      	neglt	r3, r3
 800c1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c1e0:	9307      	strge	r3, [sp, #28]
 800c1e2:	9307      	strlt	r3, [sp, #28]
 800c1e4:	bfb8      	it	lt
 800c1e6:	9204      	strlt	r2, [sp, #16]
 800c1e8:	7823      	ldrb	r3, [r4, #0]
 800c1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ec:	d10c      	bne.n	800c208 <_svfiprintf_r+0x130>
 800c1ee:	7863      	ldrb	r3, [r4, #1]
 800c1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f2:	d135      	bne.n	800c260 <_svfiprintf_r+0x188>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	1d1a      	adds	r2, r3, #4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	9203      	str	r2, [sp, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bfb8      	it	lt
 800c200:	f04f 33ff 	movlt.w	r3, #4294967295
 800c204:	3402      	adds	r4, #2
 800c206:	9305      	str	r3, [sp, #20]
 800c208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2d4 <_svfiprintf_r+0x1fc>
 800c20c:	7821      	ldrb	r1, [r4, #0]
 800c20e:	2203      	movs	r2, #3
 800c210:	4650      	mov	r0, sl
 800c212:	f7f4 f81d 	bl	8000250 <memchr>
 800c216:	b140      	cbz	r0, 800c22a <_svfiprintf_r+0x152>
 800c218:	2340      	movs	r3, #64	; 0x40
 800c21a:	eba0 000a 	sub.w	r0, r0, sl
 800c21e:	fa03 f000 	lsl.w	r0, r3, r0
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	4303      	orrs	r3, r0
 800c226:	3401      	adds	r4, #1
 800c228:	9304      	str	r3, [sp, #16]
 800c22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22e:	4826      	ldr	r0, [pc, #152]	; (800c2c8 <_svfiprintf_r+0x1f0>)
 800c230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c234:	2206      	movs	r2, #6
 800c236:	f7f4 f80b 	bl	8000250 <memchr>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d038      	beq.n	800c2b0 <_svfiprintf_r+0x1d8>
 800c23e:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <_svfiprintf_r+0x1f4>)
 800c240:	bb1b      	cbnz	r3, 800c28a <_svfiprintf_r+0x1b2>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	3307      	adds	r3, #7
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	3308      	adds	r3, #8
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c250:	4433      	add	r3, r6
 800c252:	9309      	str	r3, [sp, #36]	; 0x24
 800c254:	e767      	b.n	800c126 <_svfiprintf_r+0x4e>
 800c256:	fb0c 3202 	mla	r2, ip, r2, r3
 800c25a:	460c      	mov	r4, r1
 800c25c:	2001      	movs	r0, #1
 800c25e:	e7a5      	b.n	800c1ac <_svfiprintf_r+0xd4>
 800c260:	2300      	movs	r3, #0
 800c262:	3401      	adds	r4, #1
 800c264:	9305      	str	r3, [sp, #20]
 800c266:	4619      	mov	r1, r3
 800c268:	f04f 0c0a 	mov.w	ip, #10
 800c26c:	4620      	mov	r0, r4
 800c26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c272:	3a30      	subs	r2, #48	; 0x30
 800c274:	2a09      	cmp	r2, #9
 800c276:	d903      	bls.n	800c280 <_svfiprintf_r+0x1a8>
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0c5      	beq.n	800c208 <_svfiprintf_r+0x130>
 800c27c:	9105      	str	r1, [sp, #20]
 800c27e:	e7c3      	b.n	800c208 <_svfiprintf_r+0x130>
 800c280:	fb0c 2101 	mla	r1, ip, r1, r2
 800c284:	4604      	mov	r4, r0
 800c286:	2301      	movs	r3, #1
 800c288:	e7f0      	b.n	800c26c <_svfiprintf_r+0x194>
 800c28a:	ab03      	add	r3, sp, #12
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	462a      	mov	r2, r5
 800c290:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <_svfiprintf_r+0x1f8>)
 800c292:	a904      	add	r1, sp, #16
 800c294:	4638      	mov	r0, r7
 800c296:	f7fc fa77 	bl	8008788 <_printf_float>
 800c29a:	1c42      	adds	r2, r0, #1
 800c29c:	4606      	mov	r6, r0
 800c29e:	d1d6      	bne.n	800c24e <_svfiprintf_r+0x176>
 800c2a0:	89ab      	ldrh	r3, [r5, #12]
 800c2a2:	065b      	lsls	r3, r3, #25
 800c2a4:	f53f af2c 	bmi.w	800c100 <_svfiprintf_r+0x28>
 800c2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2aa:	b01d      	add	sp, #116	; 0x74
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	ab03      	add	r3, sp, #12
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <_svfiprintf_r+0x1f8>)
 800c2b8:	a904      	add	r1, sp, #16
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7fc fcf0 	bl	8008ca0 <_printf_i>
 800c2c0:	e7eb      	b.n	800c29a <_svfiprintf_r+0x1c2>
 800c2c2:	bf00      	nop
 800c2c4:	0800db24 	.word	0x0800db24
 800c2c8:	0800db2e 	.word	0x0800db2e
 800c2cc:	08008789 	.word	0x08008789
 800c2d0:	0800c021 	.word	0x0800c021
 800c2d4:	0800db2a 	.word	0x0800db2a

0800c2d8 <_sungetc_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	1c4b      	adds	r3, r1, #1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	d103      	bne.n	800c2e8 <_sungetc_r+0x10>
 800c2e0:	f04f 35ff 	mov.w	r5, #4294967295
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	8993      	ldrh	r3, [r2, #12]
 800c2ea:	f023 0320 	bic.w	r3, r3, #32
 800c2ee:	8193      	strh	r3, [r2, #12]
 800c2f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2f2:	6852      	ldr	r2, [r2, #4]
 800c2f4:	b2cd      	uxtb	r5, r1
 800c2f6:	b18b      	cbz	r3, 800c31c <_sungetc_r+0x44>
 800c2f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	dd08      	ble.n	800c310 <_sungetc_r+0x38>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	1e5a      	subs	r2, r3, #1
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	3301      	adds	r3, #1
 800c30c:	6063      	str	r3, [r4, #4]
 800c30e:	e7e9      	b.n	800c2e4 <_sungetc_r+0xc>
 800c310:	4621      	mov	r1, r4
 800c312:	f000 fbf3 	bl	800cafc <__submore>
 800c316:	2800      	cmp	r0, #0
 800c318:	d0f1      	beq.n	800c2fe <_sungetc_r+0x26>
 800c31a:	e7e1      	b.n	800c2e0 <_sungetc_r+0x8>
 800c31c:	6921      	ldr	r1, [r4, #16]
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	b151      	cbz	r1, 800c338 <_sungetc_r+0x60>
 800c322:	4299      	cmp	r1, r3
 800c324:	d208      	bcs.n	800c338 <_sungetc_r+0x60>
 800c326:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c32a:	42a9      	cmp	r1, r5
 800c32c:	d104      	bne.n	800c338 <_sungetc_r+0x60>
 800c32e:	3b01      	subs	r3, #1
 800c330:	3201      	adds	r2, #1
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	6062      	str	r2, [r4, #4]
 800c336:	e7d5      	b.n	800c2e4 <_sungetc_r+0xc>
 800c338:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c340:	6363      	str	r3, [r4, #52]	; 0x34
 800c342:	2303      	movs	r3, #3
 800c344:	63a3      	str	r3, [r4, #56]	; 0x38
 800c346:	4623      	mov	r3, r4
 800c348:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	2301      	movs	r3, #1
 800c350:	e7dc      	b.n	800c30c <_sungetc_r+0x34>

0800c352 <__ssrefill_r>:
 800c352:	b510      	push	{r4, lr}
 800c354:	460c      	mov	r4, r1
 800c356:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c358:	b169      	cbz	r1, 800c376 <__ssrefill_r+0x24>
 800c35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c35e:	4299      	cmp	r1, r3
 800c360:	d001      	beq.n	800c366 <__ssrefill_r+0x14>
 800c362:	f7ff fdb3 	bl	800becc <_free_r>
 800c366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	2000      	movs	r0, #0
 800c36c:	6360      	str	r0, [r4, #52]	; 0x34
 800c36e:	b113      	cbz	r3, 800c376 <__ssrefill_r+0x24>
 800c370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	bd10      	pop	{r4, pc}
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	2300      	movs	r3, #0
 800c37c:	6063      	str	r3, [r4, #4]
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f043 0320 	orr.w	r3, r3, #32
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	f04f 30ff 	mov.w	r0, #4294967295
 800c38a:	e7f3      	b.n	800c374 <__ssrefill_r+0x22>

0800c38c <__ssvfiscanf_r>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	460c      	mov	r4, r1
 800c392:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c396:	2100      	movs	r1, #0
 800c398:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c39c:	49b2      	ldr	r1, [pc, #712]	; (800c668 <__ssvfiscanf_r+0x2dc>)
 800c39e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c3a0:	f10d 0804 	add.w	r8, sp, #4
 800c3a4:	49b1      	ldr	r1, [pc, #708]	; (800c66c <__ssvfiscanf_r+0x2e0>)
 800c3a6:	4fb2      	ldr	r7, [pc, #712]	; (800c670 <__ssvfiscanf_r+0x2e4>)
 800c3a8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c674 <__ssvfiscanf_r+0x2e8>
 800c3ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	f892 a000 	ldrb.w	sl, [r2]
 800c3ba:	f1ba 0f00 	cmp.w	sl, #0
 800c3be:	f000 8151 	beq.w	800c664 <__ssvfiscanf_r+0x2d8>
 800c3c2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c3c6:	f013 0308 	ands.w	r3, r3, #8
 800c3ca:	f102 0501 	add.w	r5, r2, #1
 800c3ce:	d019      	beq.n	800c404 <__ssvfiscanf_r+0x78>
 800c3d0:	6863      	ldr	r3, [r4, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	dd0f      	ble.n	800c3f6 <__ssvfiscanf_r+0x6a>
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	781a      	ldrb	r2, [r3, #0]
 800c3da:	5cba      	ldrb	r2, [r7, r2]
 800c3dc:	0712      	lsls	r2, r2, #28
 800c3de:	d401      	bmi.n	800c3e4 <__ssvfiscanf_r+0x58>
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	e7e8      	b.n	800c3b6 <__ssvfiscanf_r+0x2a>
 800c3e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	9245      	str	r2, [sp, #276]	; 0x114
 800c3ea:	6862      	ldr	r2, [r4, #4]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	3a01      	subs	r2, #1
 800c3f0:	6062      	str	r2, [r4, #4]
 800c3f2:	6023      	str	r3, [r4, #0]
 800c3f4:	e7ec      	b.n	800c3d0 <__ssvfiscanf_r+0x44>
 800c3f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4798      	blx	r3
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d0e9      	beq.n	800c3d6 <__ssvfiscanf_r+0x4a>
 800c402:	e7ed      	b.n	800c3e0 <__ssvfiscanf_r+0x54>
 800c404:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c408:	f040 8083 	bne.w	800c512 <__ssvfiscanf_r+0x186>
 800c40c:	9341      	str	r3, [sp, #260]	; 0x104
 800c40e:	9343      	str	r3, [sp, #268]	; 0x10c
 800c410:	7853      	ldrb	r3, [r2, #1]
 800c412:	2b2a      	cmp	r3, #42	; 0x2a
 800c414:	bf02      	ittt	eq
 800c416:	2310      	moveq	r3, #16
 800c418:	1c95      	addeq	r5, r2, #2
 800c41a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c41c:	220a      	movs	r2, #10
 800c41e:	46ab      	mov	fp, r5
 800c420:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c424:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c428:	2b09      	cmp	r3, #9
 800c42a:	d91d      	bls.n	800c468 <__ssvfiscanf_r+0xdc>
 800c42c:	4891      	ldr	r0, [pc, #580]	; (800c674 <__ssvfiscanf_r+0x2e8>)
 800c42e:	2203      	movs	r2, #3
 800c430:	f7f3 ff0e 	bl	8000250 <memchr>
 800c434:	b140      	cbz	r0, 800c448 <__ssvfiscanf_r+0xbc>
 800c436:	2301      	movs	r3, #1
 800c438:	eba0 0009 	sub.w	r0, r0, r9
 800c43c:	fa03 f000 	lsl.w	r0, r3, r0
 800c440:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c442:	4318      	orrs	r0, r3
 800c444:	9041      	str	r0, [sp, #260]	; 0x104
 800c446:	465d      	mov	r5, fp
 800c448:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c44c:	2b78      	cmp	r3, #120	; 0x78
 800c44e:	d806      	bhi.n	800c45e <__ssvfiscanf_r+0xd2>
 800c450:	2b57      	cmp	r3, #87	; 0x57
 800c452:	d810      	bhi.n	800c476 <__ssvfiscanf_r+0xea>
 800c454:	2b25      	cmp	r3, #37	; 0x25
 800c456:	d05c      	beq.n	800c512 <__ssvfiscanf_r+0x186>
 800c458:	d856      	bhi.n	800c508 <__ssvfiscanf_r+0x17c>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d074      	beq.n	800c548 <__ssvfiscanf_r+0x1bc>
 800c45e:	2303      	movs	r3, #3
 800c460:	9347      	str	r3, [sp, #284]	; 0x11c
 800c462:	230a      	movs	r3, #10
 800c464:	9342      	str	r3, [sp, #264]	; 0x108
 800c466:	e081      	b.n	800c56c <__ssvfiscanf_r+0x1e0>
 800c468:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c46a:	fb02 1303 	mla	r3, r2, r3, r1
 800c46e:	3b30      	subs	r3, #48	; 0x30
 800c470:	9343      	str	r3, [sp, #268]	; 0x10c
 800c472:	465d      	mov	r5, fp
 800c474:	e7d3      	b.n	800c41e <__ssvfiscanf_r+0x92>
 800c476:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c47a:	2a20      	cmp	r2, #32
 800c47c:	d8ef      	bhi.n	800c45e <__ssvfiscanf_r+0xd2>
 800c47e:	a101      	add	r1, pc, #4	; (adr r1, 800c484 <__ssvfiscanf_r+0xf8>)
 800c480:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c484:	0800c557 	.word	0x0800c557
 800c488:	0800c45f 	.word	0x0800c45f
 800c48c:	0800c45f 	.word	0x0800c45f
 800c490:	0800c5b5 	.word	0x0800c5b5
 800c494:	0800c45f 	.word	0x0800c45f
 800c498:	0800c45f 	.word	0x0800c45f
 800c49c:	0800c45f 	.word	0x0800c45f
 800c4a0:	0800c45f 	.word	0x0800c45f
 800c4a4:	0800c45f 	.word	0x0800c45f
 800c4a8:	0800c45f 	.word	0x0800c45f
 800c4ac:	0800c45f 	.word	0x0800c45f
 800c4b0:	0800c5cb 	.word	0x0800c5cb
 800c4b4:	0800c5a1 	.word	0x0800c5a1
 800c4b8:	0800c50f 	.word	0x0800c50f
 800c4bc:	0800c50f 	.word	0x0800c50f
 800c4c0:	0800c50f 	.word	0x0800c50f
 800c4c4:	0800c45f 	.word	0x0800c45f
 800c4c8:	0800c5a5 	.word	0x0800c5a5
 800c4cc:	0800c45f 	.word	0x0800c45f
 800c4d0:	0800c45f 	.word	0x0800c45f
 800c4d4:	0800c45f 	.word	0x0800c45f
 800c4d8:	0800c45f 	.word	0x0800c45f
 800c4dc:	0800c5db 	.word	0x0800c5db
 800c4e0:	0800c5ad 	.word	0x0800c5ad
 800c4e4:	0800c54f 	.word	0x0800c54f
 800c4e8:	0800c45f 	.word	0x0800c45f
 800c4ec:	0800c45f 	.word	0x0800c45f
 800c4f0:	0800c5d7 	.word	0x0800c5d7
 800c4f4:	0800c45f 	.word	0x0800c45f
 800c4f8:	0800c5a1 	.word	0x0800c5a1
 800c4fc:	0800c45f 	.word	0x0800c45f
 800c500:	0800c45f 	.word	0x0800c45f
 800c504:	0800c557 	.word	0x0800c557
 800c508:	3b45      	subs	r3, #69	; 0x45
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d8a7      	bhi.n	800c45e <__ssvfiscanf_r+0xd2>
 800c50e:	2305      	movs	r3, #5
 800c510:	e02b      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c512:	6863      	ldr	r3, [r4, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd0d      	ble.n	800c534 <__ssvfiscanf_r+0x1a8>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	781a      	ldrb	r2, [r3, #0]
 800c51c:	4552      	cmp	r2, sl
 800c51e:	f040 80a1 	bne.w	800c664 <__ssvfiscanf_r+0x2d8>
 800c522:	3301      	adds	r3, #1
 800c524:	6862      	ldr	r2, [r4, #4]
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c52a:	3a01      	subs	r2, #1
 800c52c:	3301      	adds	r3, #1
 800c52e:	6062      	str	r2, [r4, #4]
 800c530:	9345      	str	r3, [sp, #276]	; 0x114
 800c532:	e755      	b.n	800c3e0 <__ssvfiscanf_r+0x54>
 800c534:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c536:	4621      	mov	r1, r4
 800c538:	4630      	mov	r0, r6
 800c53a:	4798      	blx	r3
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d0eb      	beq.n	800c518 <__ssvfiscanf_r+0x18c>
 800c540:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c542:	2800      	cmp	r0, #0
 800c544:	f040 8084 	bne.w	800c650 <__ssvfiscanf_r+0x2c4>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	e086      	b.n	800c65c <__ssvfiscanf_r+0x2d0>
 800c54e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c550:	f042 0220 	orr.w	r2, r2, #32
 800c554:	9241      	str	r2, [sp, #260]	; 0x104
 800c556:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c55c:	9241      	str	r2, [sp, #260]	; 0x104
 800c55e:	2210      	movs	r2, #16
 800c560:	2b6f      	cmp	r3, #111	; 0x6f
 800c562:	9242      	str	r2, [sp, #264]	; 0x108
 800c564:	bf34      	ite	cc
 800c566:	2303      	movcc	r3, #3
 800c568:	2304      	movcs	r3, #4
 800c56a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c56c:	6863      	ldr	r3, [r4, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dd41      	ble.n	800c5f6 <__ssvfiscanf_r+0x26a>
 800c572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c574:	0659      	lsls	r1, r3, #25
 800c576:	d404      	bmi.n	800c582 <__ssvfiscanf_r+0x1f6>
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	781a      	ldrb	r2, [r3, #0]
 800c57c:	5cba      	ldrb	r2, [r7, r2]
 800c57e:	0712      	lsls	r2, r2, #28
 800c580:	d440      	bmi.n	800c604 <__ssvfiscanf_r+0x278>
 800c582:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c584:	2b02      	cmp	r3, #2
 800c586:	dc4f      	bgt.n	800c628 <__ssvfiscanf_r+0x29c>
 800c588:	466b      	mov	r3, sp
 800c58a:	4622      	mov	r2, r4
 800c58c:	a941      	add	r1, sp, #260	; 0x104
 800c58e:	4630      	mov	r0, r6
 800c590:	f000 f874 	bl	800c67c <_scanf_chars>
 800c594:	2801      	cmp	r0, #1
 800c596:	d065      	beq.n	800c664 <__ssvfiscanf_r+0x2d8>
 800c598:	2802      	cmp	r0, #2
 800c59a:	f47f af21 	bne.w	800c3e0 <__ssvfiscanf_r+0x54>
 800c59e:	e7cf      	b.n	800c540 <__ssvfiscanf_r+0x1b4>
 800c5a0:	220a      	movs	r2, #10
 800c5a2:	e7dd      	b.n	800c560 <__ssvfiscanf_r+0x1d4>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9342      	str	r3, [sp, #264]	; 0x108
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e7de      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c5ac:	2308      	movs	r3, #8
 800c5ae:	9342      	str	r3, [sp, #264]	; 0x108
 800c5b0:	2304      	movs	r3, #4
 800c5b2:	e7da      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	f000 f9d6 	bl	800c968 <__sccl>
 800c5bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5c2:	9341      	str	r3, [sp, #260]	; 0x104
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7cf      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c5ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d0:	9341      	str	r3, [sp, #260]	; 0x104
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e7c9      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e7c7      	b.n	800c56a <__ssvfiscanf_r+0x1de>
 800c5da:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c5dc:	06c3      	lsls	r3, r0, #27
 800c5de:	f53f aeff 	bmi.w	800c3e0 <__ssvfiscanf_r+0x54>
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5e6:	1d19      	adds	r1, r3, #4
 800c5e8:	9100      	str	r1, [sp, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	07c0      	lsls	r0, r0, #31
 800c5ee:	bf4c      	ite	mi
 800c5f0:	801a      	strhmi	r2, [r3, #0]
 800c5f2:	601a      	strpl	r2, [r3, #0]
 800c5f4:	e6f4      	b.n	800c3e0 <__ssvfiscanf_r+0x54>
 800c5f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	4798      	blx	r3
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d0b7      	beq.n	800c572 <__ssvfiscanf_r+0x1e6>
 800c602:	e79d      	b.n	800c540 <__ssvfiscanf_r+0x1b4>
 800c604:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c606:	3201      	adds	r2, #1
 800c608:	9245      	str	r2, [sp, #276]	; 0x114
 800c60a:	6862      	ldr	r2, [r4, #4]
 800c60c:	3a01      	subs	r2, #1
 800c60e:	2a00      	cmp	r2, #0
 800c610:	6062      	str	r2, [r4, #4]
 800c612:	dd02      	ble.n	800c61a <__ssvfiscanf_r+0x28e>
 800c614:	3301      	adds	r3, #1
 800c616:	6023      	str	r3, [r4, #0]
 800c618:	e7ae      	b.n	800c578 <__ssvfiscanf_r+0x1ec>
 800c61a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c61c:	4621      	mov	r1, r4
 800c61e:	4630      	mov	r0, r6
 800c620:	4798      	blx	r3
 800c622:	2800      	cmp	r0, #0
 800c624:	d0a8      	beq.n	800c578 <__ssvfiscanf_r+0x1ec>
 800c626:	e78b      	b.n	800c540 <__ssvfiscanf_r+0x1b4>
 800c628:	2b04      	cmp	r3, #4
 800c62a:	dc06      	bgt.n	800c63a <__ssvfiscanf_r+0x2ae>
 800c62c:	466b      	mov	r3, sp
 800c62e:	4622      	mov	r2, r4
 800c630:	a941      	add	r1, sp, #260	; 0x104
 800c632:	4630      	mov	r0, r6
 800c634:	f000 f87a 	bl	800c72c <_scanf_i>
 800c638:	e7ac      	b.n	800c594 <__ssvfiscanf_r+0x208>
 800c63a:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <__ssvfiscanf_r+0x2ec>)
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f43f aecf 	beq.w	800c3e0 <__ssvfiscanf_r+0x54>
 800c642:	466b      	mov	r3, sp
 800c644:	4622      	mov	r2, r4
 800c646:	a941      	add	r1, sp, #260	; 0x104
 800c648:	4630      	mov	r0, r6
 800c64a:	f7fc fc4f 	bl	8008eec <_scanf_float>
 800c64e:	e7a1      	b.n	800c594 <__ssvfiscanf_r+0x208>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c656:	bf18      	it	ne
 800c658:	f04f 30ff 	movne.w	r0, #4294967295
 800c65c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c666:	e7f9      	b.n	800c65c <__ssvfiscanf_r+0x2d0>
 800c668:	0800c2d9 	.word	0x0800c2d9
 800c66c:	0800c353 	.word	0x0800c353
 800c670:	0800d721 	.word	0x0800d721
 800c674:	0800db2a 	.word	0x0800db2a
 800c678:	08008eed 	.word	0x08008eed

0800c67c <_scanf_chars>:
 800c67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c680:	4615      	mov	r5, r2
 800c682:	688a      	ldr	r2, [r1, #8]
 800c684:	4680      	mov	r8, r0
 800c686:	460c      	mov	r4, r1
 800c688:	b932      	cbnz	r2, 800c698 <_scanf_chars+0x1c>
 800c68a:	698a      	ldr	r2, [r1, #24]
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	bf0c      	ite	eq
 800c690:	2201      	moveq	r2, #1
 800c692:	f04f 32ff 	movne.w	r2, #4294967295
 800c696:	608a      	str	r2, [r1, #8]
 800c698:	6822      	ldr	r2, [r4, #0]
 800c69a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c728 <_scanf_chars+0xac>
 800c69e:	06d1      	lsls	r1, r2, #27
 800c6a0:	bf5f      	itttt	pl
 800c6a2:	681a      	ldrpl	r2, [r3, #0]
 800c6a4:	1d11      	addpl	r1, r2, #4
 800c6a6:	6019      	strpl	r1, [r3, #0]
 800c6a8:	6816      	ldrpl	r6, [r2, #0]
 800c6aa:	2700      	movs	r7, #0
 800c6ac:	69a0      	ldr	r0, [r4, #24]
 800c6ae:	b188      	cbz	r0, 800c6d4 <_scanf_chars+0x58>
 800c6b0:	2801      	cmp	r0, #1
 800c6b2:	d107      	bne.n	800c6c4 <_scanf_chars+0x48>
 800c6b4:	682b      	ldr	r3, [r5, #0]
 800c6b6:	781a      	ldrb	r2, [r3, #0]
 800c6b8:	6963      	ldr	r3, [r4, #20]
 800c6ba:	5c9b      	ldrb	r3, [r3, r2]
 800c6bc:	b953      	cbnz	r3, 800c6d4 <_scanf_chars+0x58>
 800c6be:	bb27      	cbnz	r7, 800c70a <_scanf_chars+0x8e>
 800c6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c4:	2802      	cmp	r0, #2
 800c6c6:	d120      	bne.n	800c70a <_scanf_chars+0x8e>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c6d0:	071b      	lsls	r3, r3, #28
 800c6d2:	d41a      	bmi.n	800c70a <_scanf_chars+0x8e>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	06da      	lsls	r2, r3, #27
 800c6d8:	bf5e      	ittt	pl
 800c6da:	682b      	ldrpl	r3, [r5, #0]
 800c6dc:	781b      	ldrbpl	r3, [r3, #0]
 800c6de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6e2:	682a      	ldr	r2, [r5, #0]
 800c6e4:	686b      	ldr	r3, [r5, #4]
 800c6e6:	3201      	adds	r2, #1
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	68a2      	ldr	r2, [r4, #8]
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	3a01      	subs	r2, #1
 800c6f0:	606b      	str	r3, [r5, #4]
 800c6f2:	3701      	adds	r7, #1
 800c6f4:	60a2      	str	r2, [r4, #8]
 800c6f6:	b142      	cbz	r2, 800c70a <_scanf_chars+0x8e>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dcd7      	bgt.n	800c6ac <_scanf_chars+0x30>
 800c6fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c700:	4629      	mov	r1, r5
 800c702:	4640      	mov	r0, r8
 800c704:	4798      	blx	r3
 800c706:	2800      	cmp	r0, #0
 800c708:	d0d0      	beq.n	800c6ac <_scanf_chars+0x30>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	f013 0310 	ands.w	r3, r3, #16
 800c710:	d105      	bne.n	800c71e <_scanf_chars+0xa2>
 800c712:	68e2      	ldr	r2, [r4, #12]
 800c714:	3201      	adds	r2, #1
 800c716:	60e2      	str	r2, [r4, #12]
 800c718:	69a2      	ldr	r2, [r4, #24]
 800c71a:	b102      	cbz	r2, 800c71e <_scanf_chars+0xa2>
 800c71c:	7033      	strb	r3, [r6, #0]
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	441f      	add	r7, r3
 800c722:	6127      	str	r7, [r4, #16]
 800c724:	2000      	movs	r0, #0
 800c726:	e7cb      	b.n	800c6c0 <_scanf_chars+0x44>
 800c728:	0800d721 	.word	0x0800d721

0800c72c <_scanf_i>:
 800c72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c730:	4698      	mov	r8, r3
 800c732:	4b74      	ldr	r3, [pc, #464]	; (800c904 <_scanf_i+0x1d8>)
 800c734:	460c      	mov	r4, r1
 800c736:	4682      	mov	sl, r0
 800c738:	4616      	mov	r6, r2
 800c73a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c73e:	b087      	sub	sp, #28
 800c740:	ab03      	add	r3, sp, #12
 800c742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c746:	4b70      	ldr	r3, [pc, #448]	; (800c908 <_scanf_i+0x1dc>)
 800c748:	69a1      	ldr	r1, [r4, #24]
 800c74a:	4a70      	ldr	r2, [pc, #448]	; (800c90c <_scanf_i+0x1e0>)
 800c74c:	2903      	cmp	r1, #3
 800c74e:	bf18      	it	ne
 800c750:	461a      	movne	r2, r3
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	9201      	str	r2, [sp, #4]
 800c756:	1e5a      	subs	r2, r3, #1
 800c758:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c75c:	bf88      	it	hi
 800c75e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c762:	4627      	mov	r7, r4
 800c764:	bf82      	ittt	hi
 800c766:	eb03 0905 	addhi.w	r9, r3, r5
 800c76a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c76e:	60a3      	strhi	r3, [r4, #8]
 800c770:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c774:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c778:	bf98      	it	ls
 800c77a:	f04f 0900 	movls.w	r9, #0
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	463d      	mov	r5, r7
 800c782:	f04f 0b00 	mov.w	fp, #0
 800c786:	6831      	ldr	r1, [r6, #0]
 800c788:	ab03      	add	r3, sp, #12
 800c78a:	7809      	ldrb	r1, [r1, #0]
 800c78c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c790:	2202      	movs	r2, #2
 800c792:	f7f3 fd5d 	bl	8000250 <memchr>
 800c796:	b328      	cbz	r0, 800c7e4 <_scanf_i+0xb8>
 800c798:	f1bb 0f01 	cmp.w	fp, #1
 800c79c:	d159      	bne.n	800c852 <_scanf_i+0x126>
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	b92a      	cbnz	r2, 800c7ae <_scanf_i+0x82>
 800c7a2:	6822      	ldr	r2, [r4, #0]
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7aa:	6063      	str	r3, [r4, #4]
 800c7ac:	6022      	str	r2, [r4, #0]
 800c7ae:	6822      	ldr	r2, [r4, #0]
 800c7b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c7b4:	6022      	str	r2, [r4, #0]
 800c7b6:	68a2      	ldr	r2, [r4, #8]
 800c7b8:	1e51      	subs	r1, r2, #1
 800c7ba:	60a1      	str	r1, [r4, #8]
 800c7bc:	b192      	cbz	r2, 800c7e4 <_scanf_i+0xb8>
 800c7be:	6832      	ldr	r2, [r6, #0]
 800c7c0:	1c51      	adds	r1, r2, #1
 800c7c2:	6031      	str	r1, [r6, #0]
 800c7c4:	7812      	ldrb	r2, [r2, #0]
 800c7c6:	f805 2b01 	strb.w	r2, [r5], #1
 800c7ca:	6872      	ldr	r2, [r6, #4]
 800c7cc:	3a01      	subs	r2, #1
 800c7ce:	2a00      	cmp	r2, #0
 800c7d0:	6072      	str	r2, [r6, #4]
 800c7d2:	dc07      	bgt.n	800c7e4 <_scanf_i+0xb8>
 800c7d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c7d8:	4631      	mov	r1, r6
 800c7da:	4650      	mov	r0, sl
 800c7dc:	4790      	blx	r2
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f040 8085 	bne.w	800c8ee <_scanf_i+0x1c2>
 800c7e4:	f10b 0b01 	add.w	fp, fp, #1
 800c7e8:	f1bb 0f03 	cmp.w	fp, #3
 800c7ec:	d1cb      	bne.n	800c786 <_scanf_i+0x5a>
 800c7ee:	6863      	ldr	r3, [r4, #4]
 800c7f0:	b90b      	cbnz	r3, 800c7f6 <_scanf_i+0xca>
 800c7f2:	230a      	movs	r3, #10
 800c7f4:	6063      	str	r3, [r4, #4]
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	4945      	ldr	r1, [pc, #276]	; (800c910 <_scanf_i+0x1e4>)
 800c7fa:	6960      	ldr	r0, [r4, #20]
 800c7fc:	1ac9      	subs	r1, r1, r3
 800c7fe:	f000 f8b3 	bl	800c968 <__sccl>
 800c802:	f04f 0b00 	mov.w	fp, #0
 800c806:	68a3      	ldr	r3, [r4, #8]
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d03d      	beq.n	800c88a <_scanf_i+0x15e>
 800c80e:	6831      	ldr	r1, [r6, #0]
 800c810:	6960      	ldr	r0, [r4, #20]
 800c812:	f891 c000 	ldrb.w	ip, [r1]
 800c816:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d035      	beq.n	800c88a <_scanf_i+0x15e>
 800c81e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c822:	d124      	bne.n	800c86e <_scanf_i+0x142>
 800c824:	0510      	lsls	r0, r2, #20
 800c826:	d522      	bpl.n	800c86e <_scanf_i+0x142>
 800c828:	f10b 0b01 	add.w	fp, fp, #1
 800c82c:	f1b9 0f00 	cmp.w	r9, #0
 800c830:	d003      	beq.n	800c83a <_scanf_i+0x10e>
 800c832:	3301      	adds	r3, #1
 800c834:	f109 39ff 	add.w	r9, r9, #4294967295
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6873      	ldr	r3, [r6, #4]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	6073      	str	r3, [r6, #4]
 800c842:	dd1b      	ble.n	800c87c <_scanf_i+0x150>
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	6033      	str	r3, [r6, #0]
 800c84a:	68a3      	ldr	r3, [r4, #8]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	60a3      	str	r3, [r4, #8]
 800c850:	e7d9      	b.n	800c806 <_scanf_i+0xda>
 800c852:	f1bb 0f02 	cmp.w	fp, #2
 800c856:	d1ae      	bne.n	800c7b6 <_scanf_i+0x8a>
 800c858:	6822      	ldr	r2, [r4, #0]
 800c85a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c85e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c862:	d1bf      	bne.n	800c7e4 <_scanf_i+0xb8>
 800c864:	2310      	movs	r3, #16
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c86c:	e7a2      	b.n	800c7b4 <_scanf_i+0x88>
 800c86e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c872:	6022      	str	r2, [r4, #0]
 800c874:	780b      	ldrb	r3, [r1, #0]
 800c876:	f805 3b01 	strb.w	r3, [r5], #1
 800c87a:	e7de      	b.n	800c83a <_scanf_i+0x10e>
 800c87c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c880:	4631      	mov	r1, r6
 800c882:	4650      	mov	r0, sl
 800c884:	4798      	blx	r3
 800c886:	2800      	cmp	r0, #0
 800c888:	d0df      	beq.n	800c84a <_scanf_i+0x11e>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	05d9      	lsls	r1, r3, #23
 800c88e:	d50d      	bpl.n	800c8ac <_scanf_i+0x180>
 800c890:	42bd      	cmp	r5, r7
 800c892:	d909      	bls.n	800c8a8 <_scanf_i+0x17c>
 800c894:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c89c:	4632      	mov	r2, r6
 800c89e:	4650      	mov	r0, sl
 800c8a0:	4798      	blx	r3
 800c8a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c8a6:	464d      	mov	r5, r9
 800c8a8:	42bd      	cmp	r5, r7
 800c8aa:	d028      	beq.n	800c8fe <_scanf_i+0x1d2>
 800c8ac:	6822      	ldr	r2, [r4, #0]
 800c8ae:	f012 0210 	ands.w	r2, r2, #16
 800c8b2:	d113      	bne.n	800c8dc <_scanf_i+0x1b0>
 800c8b4:	702a      	strb	r2, [r5, #0]
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	9e01      	ldr	r6, [sp, #4]
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	4650      	mov	r0, sl
 800c8be:	47b0      	blx	r6
 800c8c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	1d1a      	adds	r2, r3, #4
 800c8c8:	f8c8 2000 	str.w	r2, [r8]
 800c8cc:	f011 0f20 	tst.w	r1, #32
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	d00f      	beq.n	800c8f4 <_scanf_i+0x1c8>
 800c8d4:	6018      	str	r0, [r3, #0]
 800c8d6:	68e3      	ldr	r3, [r4, #12]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	60e3      	str	r3, [r4, #12]
 800c8dc:	1bed      	subs	r5, r5, r7
 800c8de:	44ab      	add	fp, r5
 800c8e0:	6925      	ldr	r5, [r4, #16]
 800c8e2:	445d      	add	r5, fp
 800c8e4:	6125      	str	r5, [r4, #16]
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	b007      	add	sp, #28
 800c8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ee:	f04f 0b00 	mov.w	fp, #0
 800c8f2:	e7ca      	b.n	800c88a <_scanf_i+0x15e>
 800c8f4:	07ca      	lsls	r2, r1, #31
 800c8f6:	bf4c      	ite	mi
 800c8f8:	8018      	strhmi	r0, [r3, #0]
 800c8fa:	6018      	strpl	r0, [r3, #0]
 800c8fc:	e7eb      	b.n	800c8d6 <_scanf_i+0x1aa>
 800c8fe:	2001      	movs	r0, #1
 800c900:	e7f2      	b.n	800c8e8 <_scanf_i+0x1bc>
 800c902:	bf00      	nop
 800c904:	0800d6fc 	.word	0x0800d6fc
 800c908:	0800caf9 	.word	0x0800caf9
 800c90c:	0800a119 	.word	0x0800a119
 800c910:	0800db4e 	.word	0x0800db4e

0800c914 <_read_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d07      	ldr	r5, [pc, #28]	; (800c934 <_read_r+0x20>)
 800c918:	4604      	mov	r4, r0
 800c91a:	4608      	mov	r0, r1
 800c91c:	4611      	mov	r1, r2
 800c91e:	2200      	movs	r2, #0
 800c920:	602a      	str	r2, [r5, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	f7f6 f850 	bl	80029c8 <_read>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_read_r+0x1e>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_read_r+0x1e>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20000874 	.word	0x20000874

0800c938 <nan>:
 800c938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c940 <nan+0x8>
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	00000000 	.word	0x00000000
 800c944:	7ff80000 	.word	0x7ff80000

0800c948 <_sbrk_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	4d06      	ldr	r5, [pc, #24]	; (800c964 <_sbrk_r+0x1c>)
 800c94c:	2300      	movs	r3, #0
 800c94e:	4604      	mov	r4, r0
 800c950:	4608      	mov	r0, r1
 800c952:	602b      	str	r3, [r5, #0]
 800c954:	f7f6 f8a6 	bl	8002aa4 <_sbrk>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d102      	bne.n	800c962 <_sbrk_r+0x1a>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	b103      	cbz	r3, 800c962 <_sbrk_r+0x1a>
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	20000874 	.word	0x20000874

0800c968 <__sccl>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	780b      	ldrb	r3, [r1, #0]
 800c96c:	4604      	mov	r4, r0
 800c96e:	2b5e      	cmp	r3, #94	; 0x5e
 800c970:	bf0b      	itete	eq
 800c972:	784b      	ldrbeq	r3, [r1, #1]
 800c974:	1c48      	addne	r0, r1, #1
 800c976:	1c88      	addeq	r0, r1, #2
 800c978:	2200      	movne	r2, #0
 800c97a:	bf08      	it	eq
 800c97c:	2201      	moveq	r2, #1
 800c97e:	1e61      	subs	r1, r4, #1
 800c980:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c984:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c988:	42a9      	cmp	r1, r5
 800c98a:	d1fb      	bne.n	800c984 <__sccl+0x1c>
 800c98c:	b90b      	cbnz	r3, 800c992 <__sccl+0x2a>
 800c98e:	3801      	subs	r0, #1
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	f082 0101 	eor.w	r1, r2, #1
 800c996:	54e1      	strb	r1, [r4, r3]
 800c998:	1c42      	adds	r2, r0, #1
 800c99a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c99e:	2d2d      	cmp	r5, #45	; 0x2d
 800c9a0:	f102 36ff 	add.w	r6, r2, #4294967295
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	d006      	beq.n	800c9b6 <__sccl+0x4e>
 800c9a8:	2d5d      	cmp	r5, #93	; 0x5d
 800c9aa:	d0f1      	beq.n	800c990 <__sccl+0x28>
 800c9ac:	b90d      	cbnz	r5, 800c9b2 <__sccl+0x4a>
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	e7ee      	b.n	800c990 <__sccl+0x28>
 800c9b2:	462b      	mov	r3, r5
 800c9b4:	e7ef      	b.n	800c996 <__sccl+0x2e>
 800c9b6:	7816      	ldrb	r6, [r2, #0]
 800c9b8:	2e5d      	cmp	r6, #93	; 0x5d
 800c9ba:	d0fa      	beq.n	800c9b2 <__sccl+0x4a>
 800c9bc:	42b3      	cmp	r3, r6
 800c9be:	dcf8      	bgt.n	800c9b2 <__sccl+0x4a>
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	4286      	cmp	r6, r0
 800c9c6:	5421      	strb	r1, [r4, r0]
 800c9c8:	dcfb      	bgt.n	800c9c2 <__sccl+0x5a>
 800c9ca:	43d8      	mvns	r0, r3
 800c9cc:	4430      	add	r0, r6
 800c9ce:	1c5d      	adds	r5, r3, #1
 800c9d0:	42b3      	cmp	r3, r6
 800c9d2:	bfa8      	it	ge
 800c9d4:	2000      	movge	r0, #0
 800c9d6:	182b      	adds	r3, r5, r0
 800c9d8:	3202      	adds	r2, #2
 800c9da:	e7de      	b.n	800c99a <__sccl+0x32>

0800c9dc <strncmp>:
 800c9dc:	b510      	push	{r4, lr}
 800c9de:	b16a      	cbz	r2, 800c9fc <strncmp+0x20>
 800c9e0:	3901      	subs	r1, #1
 800c9e2:	1884      	adds	r4, r0, r2
 800c9e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d103      	bne.n	800c9f8 <strncmp+0x1c>
 800c9f0:	42a0      	cmp	r0, r4
 800c9f2:	d001      	beq.n	800c9f8 <strncmp+0x1c>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1f5      	bne.n	800c9e4 <strncmp+0x8>
 800c9f8:	1a98      	subs	r0, r3, r2
 800c9fa:	bd10      	pop	{r4, pc}
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	e7fc      	b.n	800c9fa <strncmp+0x1e>

0800ca00 <_strtoul_l.isra.0>:
 800ca00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca04:	4e3b      	ldr	r6, [pc, #236]	; (800caf4 <_strtoul_l.isra.0+0xf4>)
 800ca06:	4686      	mov	lr, r0
 800ca08:	468c      	mov	ip, r1
 800ca0a:	4660      	mov	r0, ip
 800ca0c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ca10:	5da5      	ldrb	r5, [r4, r6]
 800ca12:	f015 0508 	ands.w	r5, r5, #8
 800ca16:	d1f8      	bne.n	800ca0a <_strtoul_l.isra.0+0xa>
 800ca18:	2c2d      	cmp	r4, #45	; 0x2d
 800ca1a:	d134      	bne.n	800ca86 <_strtoul_l.isra.0+0x86>
 800ca1c:	f89c 4000 	ldrb.w	r4, [ip]
 800ca20:	f04f 0801 	mov.w	r8, #1
 800ca24:	f100 0c02 	add.w	ip, r0, #2
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d05e      	beq.n	800caea <_strtoul_l.isra.0+0xea>
 800ca2c:	2b10      	cmp	r3, #16
 800ca2e:	d10c      	bne.n	800ca4a <_strtoul_l.isra.0+0x4a>
 800ca30:	2c30      	cmp	r4, #48	; 0x30
 800ca32:	d10a      	bne.n	800ca4a <_strtoul_l.isra.0+0x4a>
 800ca34:	f89c 0000 	ldrb.w	r0, [ip]
 800ca38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca3c:	2858      	cmp	r0, #88	; 0x58
 800ca3e:	d14f      	bne.n	800cae0 <_strtoul_l.isra.0+0xe0>
 800ca40:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ca44:	2310      	movs	r3, #16
 800ca46:	f10c 0c02 	add.w	ip, ip, #2
 800ca4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca4e:	2500      	movs	r5, #0
 800ca50:	fbb7 f7f3 	udiv	r7, r7, r3
 800ca54:	fb03 f907 	mul.w	r9, r3, r7
 800ca58:	ea6f 0909 	mvn.w	r9, r9
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ca62:	2e09      	cmp	r6, #9
 800ca64:	d818      	bhi.n	800ca98 <_strtoul_l.isra.0+0x98>
 800ca66:	4634      	mov	r4, r6
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	dd24      	ble.n	800cab6 <_strtoul_l.isra.0+0xb6>
 800ca6c:	2d00      	cmp	r5, #0
 800ca6e:	db1f      	blt.n	800cab0 <_strtoul_l.isra.0+0xb0>
 800ca70:	4287      	cmp	r7, r0
 800ca72:	d31d      	bcc.n	800cab0 <_strtoul_l.isra.0+0xb0>
 800ca74:	d101      	bne.n	800ca7a <_strtoul_l.isra.0+0x7a>
 800ca76:	45a1      	cmp	r9, r4
 800ca78:	db1a      	blt.n	800cab0 <_strtoul_l.isra.0+0xb0>
 800ca7a:	fb00 4003 	mla	r0, r0, r3, r4
 800ca7e:	2501      	movs	r5, #1
 800ca80:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ca84:	e7eb      	b.n	800ca5e <_strtoul_l.isra.0+0x5e>
 800ca86:	2c2b      	cmp	r4, #43	; 0x2b
 800ca88:	bf08      	it	eq
 800ca8a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ca8e:	46a8      	mov	r8, r5
 800ca90:	bf08      	it	eq
 800ca92:	f100 0c02 	addeq.w	ip, r0, #2
 800ca96:	e7c7      	b.n	800ca28 <_strtoul_l.isra.0+0x28>
 800ca98:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ca9c:	2e19      	cmp	r6, #25
 800ca9e:	d801      	bhi.n	800caa4 <_strtoul_l.isra.0+0xa4>
 800caa0:	3c37      	subs	r4, #55	; 0x37
 800caa2:	e7e1      	b.n	800ca68 <_strtoul_l.isra.0+0x68>
 800caa4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800caa8:	2e19      	cmp	r6, #25
 800caaa:	d804      	bhi.n	800cab6 <_strtoul_l.isra.0+0xb6>
 800caac:	3c57      	subs	r4, #87	; 0x57
 800caae:	e7db      	b.n	800ca68 <_strtoul_l.isra.0+0x68>
 800cab0:	f04f 35ff 	mov.w	r5, #4294967295
 800cab4:	e7e4      	b.n	800ca80 <_strtoul_l.isra.0+0x80>
 800cab6:	2d00      	cmp	r5, #0
 800cab8:	da07      	bge.n	800caca <_strtoul_l.isra.0+0xca>
 800caba:	2322      	movs	r3, #34	; 0x22
 800cabc:	f8ce 3000 	str.w	r3, [lr]
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	b942      	cbnz	r2, 800cad8 <_strtoul_l.isra.0+0xd8>
 800cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caca:	f1b8 0f00 	cmp.w	r8, #0
 800cace:	d000      	beq.n	800cad2 <_strtoul_l.isra.0+0xd2>
 800cad0:	4240      	negs	r0, r0
 800cad2:	2a00      	cmp	r2, #0
 800cad4:	d0f7      	beq.n	800cac6 <_strtoul_l.isra.0+0xc6>
 800cad6:	b10d      	cbz	r5, 800cadc <_strtoul_l.isra.0+0xdc>
 800cad8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cadc:	6011      	str	r1, [r2, #0]
 800cade:	e7f2      	b.n	800cac6 <_strtoul_l.isra.0+0xc6>
 800cae0:	2430      	movs	r4, #48	; 0x30
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1b1      	bne.n	800ca4a <_strtoul_l.isra.0+0x4a>
 800cae6:	2308      	movs	r3, #8
 800cae8:	e7af      	b.n	800ca4a <_strtoul_l.isra.0+0x4a>
 800caea:	2c30      	cmp	r4, #48	; 0x30
 800caec:	d0a2      	beq.n	800ca34 <_strtoul_l.isra.0+0x34>
 800caee:	230a      	movs	r3, #10
 800caf0:	e7ab      	b.n	800ca4a <_strtoul_l.isra.0+0x4a>
 800caf2:	bf00      	nop
 800caf4:	0800d721 	.word	0x0800d721

0800caf8 <_strtoul_r>:
 800caf8:	f7ff bf82 	b.w	800ca00 <_strtoul_l.isra.0>

0800cafc <__submore>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	460c      	mov	r4, r1
 800cb02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb08:	4299      	cmp	r1, r3
 800cb0a:	d11d      	bne.n	800cb48 <__submore+0x4c>
 800cb0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb10:	f7ff fa2c 	bl	800bf6c <_malloc_r>
 800cb14:	b918      	cbnz	r0, 800cb1e <__submore+0x22>
 800cb16:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb22:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cb28:	6360      	str	r0, [r4, #52]	; 0x34
 800cb2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cb2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cb32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cb36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cb3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cb3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cb42:	6020      	str	r0, [r4, #0]
 800cb44:	2000      	movs	r0, #0
 800cb46:	e7e8      	b.n	800cb1a <__submore+0x1e>
 800cb48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cb4a:	0077      	lsls	r7, r6, #1
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	f000 fa2d 	bl	800cfac <_realloc_r>
 800cb52:	4605      	mov	r5, r0
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d0de      	beq.n	800cb16 <__submore+0x1a>
 800cb58:	eb00 0806 	add.w	r8, r0, r6
 800cb5c:	4601      	mov	r1, r0
 800cb5e:	4632      	mov	r2, r6
 800cb60:	4640      	mov	r0, r8
 800cb62:	f7fb fd6b 	bl	800863c <memcpy>
 800cb66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cb6a:	f8c4 8000 	str.w	r8, [r4]
 800cb6e:	e7e9      	b.n	800cb44 <__submore+0x48>

0800cb70 <__ascii_wctomb>:
 800cb70:	b149      	cbz	r1, 800cb86 <__ascii_wctomb+0x16>
 800cb72:	2aff      	cmp	r2, #255	; 0xff
 800cb74:	bf85      	ittet	hi
 800cb76:	238a      	movhi	r3, #138	; 0x8a
 800cb78:	6003      	strhi	r3, [r0, #0]
 800cb7a:	700a      	strbls	r2, [r1, #0]
 800cb7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb80:	bf98      	it	ls
 800cb82:	2001      	movls	r0, #1
 800cb84:	4770      	bx	lr
 800cb86:	4608      	mov	r0, r1
 800cb88:	4770      	bx	lr
	...

0800cb8c <__assert_func>:
 800cb8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb8e:	4614      	mov	r4, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <__assert_func+0x2c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4605      	mov	r5, r0
 800cb98:	68d8      	ldr	r0, [r3, #12]
 800cb9a:	b14c      	cbz	r4, 800cbb0 <__assert_func+0x24>
 800cb9c:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <__assert_func+0x30>)
 800cb9e:	9100      	str	r1, [sp, #0]
 800cba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cba4:	4906      	ldr	r1, [pc, #24]	; (800cbc0 <__assert_func+0x34>)
 800cba6:	462b      	mov	r3, r5
 800cba8:	f000 f9a6 	bl	800cef8 <fiprintf>
 800cbac:	f000 fc3e 	bl	800d42c <abort>
 800cbb0:	4b04      	ldr	r3, [pc, #16]	; (800cbc4 <__assert_func+0x38>)
 800cbb2:	461c      	mov	r4, r3
 800cbb4:	e7f3      	b.n	800cb9e <__assert_func+0x12>
 800cbb6:	bf00      	nop
 800cbb8:	20000058 	.word	0x20000058
 800cbbc:	0800db50 	.word	0x0800db50
 800cbc0:	0800db5d 	.word	0x0800db5d
 800cbc4:	0800db8b 	.word	0x0800db8b

0800cbc8 <__sflush_r>:
 800cbc8:	898a      	ldrh	r2, [r1, #12]
 800cbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbce:	4605      	mov	r5, r0
 800cbd0:	0710      	lsls	r0, r2, #28
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	d458      	bmi.n	800cc88 <__sflush_r+0xc0>
 800cbd6:	684b      	ldr	r3, [r1, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dc05      	bgt.n	800cbe8 <__sflush_r+0x20>
 800cbdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	dc02      	bgt.n	800cbe8 <__sflush_r+0x20>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbea:	2e00      	cmp	r6, #0
 800cbec:	d0f9      	beq.n	800cbe2 <__sflush_r+0x1a>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbf4:	682f      	ldr	r7, [r5, #0]
 800cbf6:	602b      	str	r3, [r5, #0]
 800cbf8:	d032      	beq.n	800cc60 <__sflush_r+0x98>
 800cbfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	075a      	lsls	r2, r3, #29
 800cc00:	d505      	bpl.n	800cc0e <__sflush_r+0x46>
 800cc02:	6863      	ldr	r3, [r4, #4]
 800cc04:	1ac0      	subs	r0, r0, r3
 800cc06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc08:	b10b      	cbz	r3, 800cc0e <__sflush_r+0x46>
 800cc0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc0c:	1ac0      	subs	r0, r0, r3
 800cc0e:	2300      	movs	r3, #0
 800cc10:	4602      	mov	r2, r0
 800cc12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc14:	6a21      	ldr	r1, [r4, #32]
 800cc16:	4628      	mov	r0, r5
 800cc18:	47b0      	blx	r6
 800cc1a:	1c43      	adds	r3, r0, #1
 800cc1c:	89a3      	ldrh	r3, [r4, #12]
 800cc1e:	d106      	bne.n	800cc2e <__sflush_r+0x66>
 800cc20:	6829      	ldr	r1, [r5, #0]
 800cc22:	291d      	cmp	r1, #29
 800cc24:	d82c      	bhi.n	800cc80 <__sflush_r+0xb8>
 800cc26:	4a2a      	ldr	r2, [pc, #168]	; (800ccd0 <__sflush_r+0x108>)
 800cc28:	40ca      	lsrs	r2, r1
 800cc2a:	07d6      	lsls	r6, r2, #31
 800cc2c:	d528      	bpl.n	800cc80 <__sflush_r+0xb8>
 800cc2e:	2200      	movs	r2, #0
 800cc30:	6062      	str	r2, [r4, #4]
 800cc32:	04d9      	lsls	r1, r3, #19
 800cc34:	6922      	ldr	r2, [r4, #16]
 800cc36:	6022      	str	r2, [r4, #0]
 800cc38:	d504      	bpl.n	800cc44 <__sflush_r+0x7c>
 800cc3a:	1c42      	adds	r2, r0, #1
 800cc3c:	d101      	bne.n	800cc42 <__sflush_r+0x7a>
 800cc3e:	682b      	ldr	r3, [r5, #0]
 800cc40:	b903      	cbnz	r3, 800cc44 <__sflush_r+0x7c>
 800cc42:	6560      	str	r0, [r4, #84]	; 0x54
 800cc44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc46:	602f      	str	r7, [r5, #0]
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	d0ca      	beq.n	800cbe2 <__sflush_r+0x1a>
 800cc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc50:	4299      	cmp	r1, r3
 800cc52:	d002      	beq.n	800cc5a <__sflush_r+0x92>
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff f939 	bl	800becc <_free_r>
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	6360      	str	r0, [r4, #52]	; 0x34
 800cc5e:	e7c1      	b.n	800cbe4 <__sflush_r+0x1c>
 800cc60:	6a21      	ldr	r1, [r4, #32]
 800cc62:	2301      	movs	r3, #1
 800cc64:	4628      	mov	r0, r5
 800cc66:	47b0      	blx	r6
 800cc68:	1c41      	adds	r1, r0, #1
 800cc6a:	d1c7      	bne.n	800cbfc <__sflush_r+0x34>
 800cc6c:	682b      	ldr	r3, [r5, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0c4      	beq.n	800cbfc <__sflush_r+0x34>
 800cc72:	2b1d      	cmp	r3, #29
 800cc74:	d001      	beq.n	800cc7a <__sflush_r+0xb2>
 800cc76:	2b16      	cmp	r3, #22
 800cc78:	d101      	bne.n	800cc7e <__sflush_r+0xb6>
 800cc7a:	602f      	str	r7, [r5, #0]
 800cc7c:	e7b1      	b.n	800cbe2 <__sflush_r+0x1a>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc84:	81a3      	strh	r3, [r4, #12]
 800cc86:	e7ad      	b.n	800cbe4 <__sflush_r+0x1c>
 800cc88:	690f      	ldr	r7, [r1, #16]
 800cc8a:	2f00      	cmp	r7, #0
 800cc8c:	d0a9      	beq.n	800cbe2 <__sflush_r+0x1a>
 800cc8e:	0793      	lsls	r3, r2, #30
 800cc90:	680e      	ldr	r6, [r1, #0]
 800cc92:	bf08      	it	eq
 800cc94:	694b      	ldreq	r3, [r1, #20]
 800cc96:	600f      	str	r7, [r1, #0]
 800cc98:	bf18      	it	ne
 800cc9a:	2300      	movne	r3, #0
 800cc9c:	eba6 0807 	sub.w	r8, r6, r7
 800cca0:	608b      	str	r3, [r1, #8]
 800cca2:	f1b8 0f00 	cmp.w	r8, #0
 800cca6:	dd9c      	ble.n	800cbe2 <__sflush_r+0x1a>
 800cca8:	6a21      	ldr	r1, [r4, #32]
 800ccaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccac:	4643      	mov	r3, r8
 800ccae:	463a      	mov	r2, r7
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	47b0      	blx	r6
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	dc06      	bgt.n	800ccc6 <__sflush_r+0xfe>
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	e78e      	b.n	800cbe4 <__sflush_r+0x1c>
 800ccc6:	4407      	add	r7, r0
 800ccc8:	eba8 0800 	sub.w	r8, r8, r0
 800cccc:	e7e9      	b.n	800cca2 <__sflush_r+0xda>
 800ccce:	bf00      	nop
 800ccd0:	20400001 	.word	0x20400001

0800ccd4 <_fflush_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	690b      	ldr	r3, [r1, #16]
 800ccd8:	4605      	mov	r5, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	b913      	cbnz	r3, 800cce4 <_fflush_r+0x10>
 800ccde:	2500      	movs	r5, #0
 800cce0:	4628      	mov	r0, r5
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	b118      	cbz	r0, 800ccee <_fflush_r+0x1a>
 800cce6:	6983      	ldr	r3, [r0, #24]
 800cce8:	b90b      	cbnz	r3, 800ccee <_fflush_r+0x1a>
 800ccea:	f000 f887 	bl	800cdfc <__sinit>
 800ccee:	4b14      	ldr	r3, [pc, #80]	; (800cd40 <_fflush_r+0x6c>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	d11b      	bne.n	800cd2c <_fflush_r+0x58>
 800ccf4:	686c      	ldr	r4, [r5, #4]
 800ccf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0ef      	beq.n	800ccde <_fflush_r+0xa>
 800ccfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd00:	07d0      	lsls	r0, r2, #31
 800cd02:	d404      	bmi.n	800cd0e <_fflush_r+0x3a>
 800cd04:	0599      	lsls	r1, r3, #22
 800cd06:	d402      	bmi.n	800cd0e <_fflush_r+0x3a>
 800cd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd0a:	f000 f927 	bl	800cf5c <__retarget_lock_acquire_recursive>
 800cd0e:	4628      	mov	r0, r5
 800cd10:	4621      	mov	r1, r4
 800cd12:	f7ff ff59 	bl	800cbc8 <__sflush_r>
 800cd16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd18:	07da      	lsls	r2, r3, #31
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	d4e0      	bmi.n	800cce0 <_fflush_r+0xc>
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	059b      	lsls	r3, r3, #22
 800cd22:	d4dd      	bmi.n	800cce0 <_fflush_r+0xc>
 800cd24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd26:	f000 f91a 	bl	800cf5e <__retarget_lock_release_recursive>
 800cd2a:	e7d9      	b.n	800cce0 <_fflush_r+0xc>
 800cd2c:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <_fflush_r+0x70>)
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d101      	bne.n	800cd36 <_fflush_r+0x62>
 800cd32:	68ac      	ldr	r4, [r5, #8]
 800cd34:	e7df      	b.n	800ccf6 <_fflush_r+0x22>
 800cd36:	4b04      	ldr	r3, [pc, #16]	; (800cd48 <_fflush_r+0x74>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	68ec      	ldreq	r4, [r5, #12]
 800cd3e:	e7da      	b.n	800ccf6 <_fflush_r+0x22>
 800cd40:	0800dbac 	.word	0x0800dbac
 800cd44:	0800dbcc 	.word	0x0800dbcc
 800cd48:	0800db8c 	.word	0x0800db8c

0800cd4c <std>:
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	4604      	mov	r4, r0
 800cd52:	e9c0 3300 	strd	r3, r3, [r0]
 800cd56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd5a:	6083      	str	r3, [r0, #8]
 800cd5c:	8181      	strh	r1, [r0, #12]
 800cd5e:	6643      	str	r3, [r0, #100]	; 0x64
 800cd60:	81c2      	strh	r2, [r0, #14]
 800cd62:	6183      	str	r3, [r0, #24]
 800cd64:	4619      	mov	r1, r3
 800cd66:	2208      	movs	r2, #8
 800cd68:	305c      	adds	r0, #92	; 0x5c
 800cd6a:	f7fb fc75 	bl	8008658 <memset>
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <std+0x38>)
 800cd70:	6263      	str	r3, [r4, #36]	; 0x24
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <std+0x3c>)
 800cd74:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <std+0x40>)
 800cd78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd7a:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <std+0x44>)
 800cd7c:	6224      	str	r4, [r4, #32]
 800cd7e:	6323      	str	r3, [r4, #48]	; 0x30
 800cd80:	bd10      	pop	{r4, pc}
 800cd82:	bf00      	nop
 800cd84:	08009399 	.word	0x08009399
 800cd88:	080093bf 	.word	0x080093bf
 800cd8c:	080093f7 	.word	0x080093f7
 800cd90:	0800941b 	.word	0x0800941b

0800cd94 <_cleanup_r>:
 800cd94:	4901      	ldr	r1, [pc, #4]	; (800cd9c <_cleanup_r+0x8>)
 800cd96:	f000 b8c1 	b.w	800cf1c <_fwalk_reent>
 800cd9a:	bf00      	nop
 800cd9c:	0800ccd5 	.word	0x0800ccd5

0800cda0 <__sfmoreglue>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	1e4a      	subs	r2, r1, #1
 800cda4:	2568      	movs	r5, #104	; 0x68
 800cda6:	4355      	muls	r5, r2
 800cda8:	460e      	mov	r6, r1
 800cdaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdae:	f7ff f8dd 	bl	800bf6c <_malloc_r>
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	b140      	cbz	r0, 800cdc8 <__sfmoreglue+0x28>
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	e9c0 1600 	strd	r1, r6, [r0]
 800cdbc:	300c      	adds	r0, #12
 800cdbe:	60a0      	str	r0, [r4, #8]
 800cdc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdc4:	f7fb fc48 	bl	8008658 <memset>
 800cdc8:	4620      	mov	r0, r4
 800cdca:	bd70      	pop	{r4, r5, r6, pc}

0800cdcc <__sfp_lock_acquire>:
 800cdcc:	4801      	ldr	r0, [pc, #4]	; (800cdd4 <__sfp_lock_acquire+0x8>)
 800cdce:	f000 b8c5 	b.w	800cf5c <__retarget_lock_acquire_recursive>
 800cdd2:	bf00      	nop
 800cdd4:	20000880 	.word	0x20000880

0800cdd8 <__sfp_lock_release>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	; (800cde0 <__sfp_lock_release+0x8>)
 800cdda:	f000 b8c0 	b.w	800cf5e <__retarget_lock_release_recursive>
 800cdde:	bf00      	nop
 800cde0:	20000880 	.word	0x20000880

0800cde4 <__sinit_lock_acquire>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sinit_lock_acquire+0x8>)
 800cde6:	f000 b8b9 	b.w	800cf5c <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	2000087b 	.word	0x2000087b

0800cdf0 <__sinit_lock_release>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__sinit_lock_release+0x8>)
 800cdf2:	f000 b8b4 	b.w	800cf5e <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	2000087b 	.word	0x2000087b

0800cdfc <__sinit>:
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	4604      	mov	r4, r0
 800ce00:	f7ff fff0 	bl	800cde4 <__sinit_lock_acquire>
 800ce04:	69a3      	ldr	r3, [r4, #24]
 800ce06:	b11b      	cbz	r3, 800ce10 <__sinit+0x14>
 800ce08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce0c:	f7ff bff0 	b.w	800cdf0 <__sinit_lock_release>
 800ce10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce14:	6523      	str	r3, [r4, #80]	; 0x50
 800ce16:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <__sinit+0x68>)
 800ce18:	4a13      	ldr	r2, [pc, #76]	; (800ce68 <__sinit+0x6c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	bf04      	itt	eq
 800ce22:	2301      	moveq	r3, #1
 800ce24:	61a3      	streq	r3, [r4, #24]
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f820 	bl	800ce6c <__sfp>
 800ce2c:	6060      	str	r0, [r4, #4]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 f81c 	bl	800ce6c <__sfp>
 800ce34:	60a0      	str	r0, [r4, #8]
 800ce36:	4620      	mov	r0, r4
 800ce38:	f000 f818 	bl	800ce6c <__sfp>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	60e0      	str	r0, [r4, #12]
 800ce40:	2104      	movs	r1, #4
 800ce42:	6860      	ldr	r0, [r4, #4]
 800ce44:	f7ff ff82 	bl	800cd4c <std>
 800ce48:	68a0      	ldr	r0, [r4, #8]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	2109      	movs	r1, #9
 800ce4e:	f7ff ff7d 	bl	800cd4c <std>
 800ce52:	68e0      	ldr	r0, [r4, #12]
 800ce54:	2202      	movs	r2, #2
 800ce56:	2112      	movs	r1, #18
 800ce58:	f7ff ff78 	bl	800cd4c <std>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	61a3      	str	r3, [r4, #24]
 800ce60:	e7d2      	b.n	800ce08 <__sinit+0xc>
 800ce62:	bf00      	nop
 800ce64:	0800d824 	.word	0x0800d824
 800ce68:	0800cd95 	.word	0x0800cd95

0800ce6c <__sfp>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	4607      	mov	r7, r0
 800ce70:	f7ff ffac 	bl	800cdcc <__sfp_lock_acquire>
 800ce74:	4b1e      	ldr	r3, [pc, #120]	; (800cef0 <__sfp+0x84>)
 800ce76:	681e      	ldr	r6, [r3, #0]
 800ce78:	69b3      	ldr	r3, [r6, #24]
 800ce7a:	b913      	cbnz	r3, 800ce82 <__sfp+0x16>
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff ffbd 	bl	800cdfc <__sinit>
 800ce82:	3648      	adds	r6, #72	; 0x48
 800ce84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	d503      	bpl.n	800ce94 <__sfp+0x28>
 800ce8c:	6833      	ldr	r3, [r6, #0]
 800ce8e:	b30b      	cbz	r3, 800ced4 <__sfp+0x68>
 800ce90:	6836      	ldr	r6, [r6, #0]
 800ce92:	e7f7      	b.n	800ce84 <__sfp+0x18>
 800ce94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce98:	b9d5      	cbnz	r5, 800ced0 <__sfp+0x64>
 800ce9a:	4b16      	ldr	r3, [pc, #88]	; (800cef4 <__sfp+0x88>)
 800ce9c:	60e3      	str	r3, [r4, #12]
 800ce9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cea2:	6665      	str	r5, [r4, #100]	; 0x64
 800cea4:	f000 f859 	bl	800cf5a <__retarget_lock_init_recursive>
 800cea8:	f7ff ff96 	bl	800cdd8 <__sfp_lock_release>
 800ceac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ceb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ceb4:	6025      	str	r5, [r4, #0]
 800ceb6:	61a5      	str	r5, [r4, #24]
 800ceb8:	2208      	movs	r2, #8
 800ceba:	4629      	mov	r1, r5
 800cebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cec0:	f7fb fbca 	bl	8008658 <memset>
 800cec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cecc:	4620      	mov	r0, r4
 800cece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced0:	3468      	adds	r4, #104	; 0x68
 800ced2:	e7d9      	b.n	800ce88 <__sfp+0x1c>
 800ced4:	2104      	movs	r1, #4
 800ced6:	4638      	mov	r0, r7
 800ced8:	f7ff ff62 	bl	800cda0 <__sfmoreglue>
 800cedc:	4604      	mov	r4, r0
 800cede:	6030      	str	r0, [r6, #0]
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d1d5      	bne.n	800ce90 <__sfp+0x24>
 800cee4:	f7ff ff78 	bl	800cdd8 <__sfp_lock_release>
 800cee8:	230c      	movs	r3, #12
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	e7ee      	b.n	800cecc <__sfp+0x60>
 800ceee:	bf00      	nop
 800cef0:	0800d824 	.word	0x0800d824
 800cef4:	ffff0001 	.word	0xffff0001

0800cef8 <fiprintf>:
 800cef8:	b40e      	push	{r1, r2, r3}
 800cefa:	b503      	push	{r0, r1, lr}
 800cefc:	4601      	mov	r1, r0
 800cefe:	ab03      	add	r3, sp, #12
 800cf00:	4805      	ldr	r0, [pc, #20]	; (800cf18 <fiprintf+0x20>)
 800cf02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf06:	6800      	ldr	r0, [r0, #0]
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	f000 f89f 	bl	800d04c <_vfiprintf_r>
 800cf0e:	b002      	add	sp, #8
 800cf10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf14:	b003      	add	sp, #12
 800cf16:	4770      	bx	lr
 800cf18:	20000058 	.word	0x20000058

0800cf1c <_fwalk_reent>:
 800cf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf20:	4606      	mov	r6, r0
 800cf22:	4688      	mov	r8, r1
 800cf24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf28:	2700      	movs	r7, #0
 800cf2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf2e:	f1b9 0901 	subs.w	r9, r9, #1
 800cf32:	d505      	bpl.n	800cf40 <_fwalk_reent+0x24>
 800cf34:	6824      	ldr	r4, [r4, #0]
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	d1f7      	bne.n	800cf2a <_fwalk_reent+0xe>
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf40:	89ab      	ldrh	r3, [r5, #12]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d907      	bls.n	800cf56 <_fwalk_reent+0x3a>
 800cf46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	d003      	beq.n	800cf56 <_fwalk_reent+0x3a>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4630      	mov	r0, r6
 800cf52:	47c0      	blx	r8
 800cf54:	4307      	orrs	r7, r0
 800cf56:	3568      	adds	r5, #104	; 0x68
 800cf58:	e7e9      	b.n	800cf2e <_fwalk_reent+0x12>

0800cf5a <__retarget_lock_init_recursive>:
 800cf5a:	4770      	bx	lr

0800cf5c <__retarget_lock_acquire_recursive>:
 800cf5c:	4770      	bx	lr

0800cf5e <__retarget_lock_release_recursive>:
 800cf5e:	4770      	bx	lr

0800cf60 <memmove>:
 800cf60:	4288      	cmp	r0, r1
 800cf62:	b510      	push	{r4, lr}
 800cf64:	eb01 0402 	add.w	r4, r1, r2
 800cf68:	d902      	bls.n	800cf70 <memmove+0x10>
 800cf6a:	4284      	cmp	r4, r0
 800cf6c:	4623      	mov	r3, r4
 800cf6e:	d807      	bhi.n	800cf80 <memmove+0x20>
 800cf70:	1e43      	subs	r3, r0, #1
 800cf72:	42a1      	cmp	r1, r4
 800cf74:	d008      	beq.n	800cf88 <memmove+0x28>
 800cf76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf7e:	e7f8      	b.n	800cf72 <memmove+0x12>
 800cf80:	4402      	add	r2, r0
 800cf82:	4601      	mov	r1, r0
 800cf84:	428a      	cmp	r2, r1
 800cf86:	d100      	bne.n	800cf8a <memmove+0x2a>
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf92:	e7f7      	b.n	800cf84 <memmove+0x24>

0800cf94 <__malloc_lock>:
 800cf94:	4801      	ldr	r0, [pc, #4]	; (800cf9c <__malloc_lock+0x8>)
 800cf96:	f7ff bfe1 	b.w	800cf5c <__retarget_lock_acquire_recursive>
 800cf9a:	bf00      	nop
 800cf9c:	2000087c 	.word	0x2000087c

0800cfa0 <__malloc_unlock>:
 800cfa0:	4801      	ldr	r0, [pc, #4]	; (800cfa8 <__malloc_unlock+0x8>)
 800cfa2:	f7ff bfdc 	b.w	800cf5e <__retarget_lock_release_recursive>
 800cfa6:	bf00      	nop
 800cfa8:	2000087c 	.word	0x2000087c

0800cfac <_realloc_r>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	4607      	mov	r7, r0
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	460e      	mov	r6, r1
 800cfb4:	b921      	cbnz	r1, 800cfc0 <_realloc_r+0x14>
 800cfb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfba:	4611      	mov	r1, r2
 800cfbc:	f7fe bfd6 	b.w	800bf6c <_malloc_r>
 800cfc0:	b922      	cbnz	r2, 800cfcc <_realloc_r+0x20>
 800cfc2:	f7fe ff83 	bl	800becc <_free_r>
 800cfc6:	4625      	mov	r5, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfcc:	f000 fa9a 	bl	800d504 <_malloc_usable_size_r>
 800cfd0:	42a0      	cmp	r0, r4
 800cfd2:	d20f      	bcs.n	800cff4 <_realloc_r+0x48>
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	f7fe ffc8 	bl	800bf6c <_malloc_r>
 800cfdc:	4605      	mov	r5, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d0f2      	beq.n	800cfc8 <_realloc_r+0x1c>
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	f7fb fb29 	bl	800863c <memcpy>
 800cfea:	4631      	mov	r1, r6
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7fe ff6d 	bl	800becc <_free_r>
 800cff2:	e7e9      	b.n	800cfc8 <_realloc_r+0x1c>
 800cff4:	4635      	mov	r5, r6
 800cff6:	e7e7      	b.n	800cfc8 <_realloc_r+0x1c>

0800cff8 <__sfputc_r>:
 800cff8:	6893      	ldr	r3, [r2, #8]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	b410      	push	{r4}
 800d000:	6093      	str	r3, [r2, #8]
 800d002:	da08      	bge.n	800d016 <__sfputc_r+0x1e>
 800d004:	6994      	ldr	r4, [r2, #24]
 800d006:	42a3      	cmp	r3, r4
 800d008:	db01      	blt.n	800d00e <__sfputc_r+0x16>
 800d00a:	290a      	cmp	r1, #10
 800d00c:	d103      	bne.n	800d016 <__sfputc_r+0x1e>
 800d00e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d012:	f000 b94b 	b.w	800d2ac <__swbuf_r>
 800d016:	6813      	ldr	r3, [r2, #0]
 800d018:	1c58      	adds	r0, r3, #1
 800d01a:	6010      	str	r0, [r2, #0]
 800d01c:	7019      	strb	r1, [r3, #0]
 800d01e:	4608      	mov	r0, r1
 800d020:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <__sfputs_r>:
 800d026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d028:	4606      	mov	r6, r0
 800d02a:	460f      	mov	r7, r1
 800d02c:	4614      	mov	r4, r2
 800d02e:	18d5      	adds	r5, r2, r3
 800d030:	42ac      	cmp	r4, r5
 800d032:	d101      	bne.n	800d038 <__sfputs_r+0x12>
 800d034:	2000      	movs	r0, #0
 800d036:	e007      	b.n	800d048 <__sfputs_r+0x22>
 800d038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03c:	463a      	mov	r2, r7
 800d03e:	4630      	mov	r0, r6
 800d040:	f7ff ffda 	bl	800cff8 <__sfputc_r>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d1f3      	bne.n	800d030 <__sfputs_r+0xa>
 800d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d04c <_vfiprintf_r>:
 800d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d050:	460d      	mov	r5, r1
 800d052:	b09d      	sub	sp, #116	; 0x74
 800d054:	4614      	mov	r4, r2
 800d056:	4698      	mov	r8, r3
 800d058:	4606      	mov	r6, r0
 800d05a:	b118      	cbz	r0, 800d064 <_vfiprintf_r+0x18>
 800d05c:	6983      	ldr	r3, [r0, #24]
 800d05e:	b90b      	cbnz	r3, 800d064 <_vfiprintf_r+0x18>
 800d060:	f7ff fecc 	bl	800cdfc <__sinit>
 800d064:	4b89      	ldr	r3, [pc, #548]	; (800d28c <_vfiprintf_r+0x240>)
 800d066:	429d      	cmp	r5, r3
 800d068:	d11b      	bne.n	800d0a2 <_vfiprintf_r+0x56>
 800d06a:	6875      	ldr	r5, [r6, #4]
 800d06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d06e:	07d9      	lsls	r1, r3, #31
 800d070:	d405      	bmi.n	800d07e <_vfiprintf_r+0x32>
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	059a      	lsls	r2, r3, #22
 800d076:	d402      	bmi.n	800d07e <_vfiprintf_r+0x32>
 800d078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d07a:	f7ff ff6f 	bl	800cf5c <__retarget_lock_acquire_recursive>
 800d07e:	89ab      	ldrh	r3, [r5, #12]
 800d080:	071b      	lsls	r3, r3, #28
 800d082:	d501      	bpl.n	800d088 <_vfiprintf_r+0x3c>
 800d084:	692b      	ldr	r3, [r5, #16]
 800d086:	b9eb      	cbnz	r3, 800d0c4 <_vfiprintf_r+0x78>
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f000 f960 	bl	800d350 <__swsetup_r>
 800d090:	b1c0      	cbz	r0, 800d0c4 <_vfiprintf_r+0x78>
 800d092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d094:	07dc      	lsls	r4, r3, #31
 800d096:	d50e      	bpl.n	800d0b6 <_vfiprintf_r+0x6a>
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	b01d      	add	sp, #116	; 0x74
 800d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a2:	4b7b      	ldr	r3, [pc, #492]	; (800d290 <_vfiprintf_r+0x244>)
 800d0a4:	429d      	cmp	r5, r3
 800d0a6:	d101      	bne.n	800d0ac <_vfiprintf_r+0x60>
 800d0a8:	68b5      	ldr	r5, [r6, #8]
 800d0aa:	e7df      	b.n	800d06c <_vfiprintf_r+0x20>
 800d0ac:	4b79      	ldr	r3, [pc, #484]	; (800d294 <_vfiprintf_r+0x248>)
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	bf08      	it	eq
 800d0b2:	68f5      	ldreq	r5, [r6, #12]
 800d0b4:	e7da      	b.n	800d06c <_vfiprintf_r+0x20>
 800d0b6:	89ab      	ldrh	r3, [r5, #12]
 800d0b8:	0598      	lsls	r0, r3, #22
 800d0ba:	d4ed      	bmi.n	800d098 <_vfiprintf_r+0x4c>
 800d0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0be:	f7ff ff4e 	bl	800cf5e <__retarget_lock_release_recursive>
 800d0c2:	e7e9      	b.n	800d098 <_vfiprintf_r+0x4c>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c8:	2320      	movs	r3, #32
 800d0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d2:	2330      	movs	r3, #48	; 0x30
 800d0d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d298 <_vfiprintf_r+0x24c>
 800d0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0dc:	f04f 0901 	mov.w	r9, #1
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	469a      	mov	sl, r3
 800d0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e8:	b10a      	cbz	r2, 800d0ee <_vfiprintf_r+0xa2>
 800d0ea:	2a25      	cmp	r2, #37	; 0x25
 800d0ec:	d1f9      	bne.n	800d0e2 <_vfiprintf_r+0x96>
 800d0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f2:	d00b      	beq.n	800d10c <_vfiprintf_r+0xc0>
 800d0f4:	465b      	mov	r3, fp
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ff93 	bl	800d026 <__sfputs_r>
 800d100:	3001      	adds	r0, #1
 800d102:	f000 80aa 	beq.w	800d25a <_vfiprintf_r+0x20e>
 800d106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d108:	445a      	add	r2, fp
 800d10a:	9209      	str	r2, [sp, #36]	; 0x24
 800d10c:	f89a 3000 	ldrb.w	r3, [sl]
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 80a2 	beq.w	800d25a <_vfiprintf_r+0x20e>
 800d116:	2300      	movs	r3, #0
 800d118:	f04f 32ff 	mov.w	r2, #4294967295
 800d11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d120:	f10a 0a01 	add.w	sl, sl, #1
 800d124:	9304      	str	r3, [sp, #16]
 800d126:	9307      	str	r3, [sp, #28]
 800d128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d12c:	931a      	str	r3, [sp, #104]	; 0x68
 800d12e:	4654      	mov	r4, sl
 800d130:	2205      	movs	r2, #5
 800d132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d136:	4858      	ldr	r0, [pc, #352]	; (800d298 <_vfiprintf_r+0x24c>)
 800d138:	f7f3 f88a 	bl	8000250 <memchr>
 800d13c:	9a04      	ldr	r2, [sp, #16]
 800d13e:	b9d8      	cbnz	r0, 800d178 <_vfiprintf_r+0x12c>
 800d140:	06d1      	lsls	r1, r2, #27
 800d142:	bf44      	itt	mi
 800d144:	2320      	movmi	r3, #32
 800d146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14a:	0713      	lsls	r3, r2, #28
 800d14c:	bf44      	itt	mi
 800d14e:	232b      	movmi	r3, #43	; 0x2b
 800d150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d154:	f89a 3000 	ldrb.w	r3, [sl]
 800d158:	2b2a      	cmp	r3, #42	; 0x2a
 800d15a:	d015      	beq.n	800d188 <_vfiprintf_r+0x13c>
 800d15c:	9a07      	ldr	r2, [sp, #28]
 800d15e:	4654      	mov	r4, sl
 800d160:	2000      	movs	r0, #0
 800d162:	f04f 0c0a 	mov.w	ip, #10
 800d166:	4621      	mov	r1, r4
 800d168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d16c:	3b30      	subs	r3, #48	; 0x30
 800d16e:	2b09      	cmp	r3, #9
 800d170:	d94e      	bls.n	800d210 <_vfiprintf_r+0x1c4>
 800d172:	b1b0      	cbz	r0, 800d1a2 <_vfiprintf_r+0x156>
 800d174:	9207      	str	r2, [sp, #28]
 800d176:	e014      	b.n	800d1a2 <_vfiprintf_r+0x156>
 800d178:	eba0 0308 	sub.w	r3, r0, r8
 800d17c:	fa09 f303 	lsl.w	r3, r9, r3
 800d180:	4313      	orrs	r3, r2
 800d182:	9304      	str	r3, [sp, #16]
 800d184:	46a2      	mov	sl, r4
 800d186:	e7d2      	b.n	800d12e <_vfiprintf_r+0xe2>
 800d188:	9b03      	ldr	r3, [sp, #12]
 800d18a:	1d19      	adds	r1, r3, #4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	9103      	str	r1, [sp, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfbb      	ittet	lt
 800d194:	425b      	neglt	r3, r3
 800d196:	f042 0202 	orrlt.w	r2, r2, #2
 800d19a:	9307      	strge	r3, [sp, #28]
 800d19c:	9307      	strlt	r3, [sp, #28]
 800d19e:	bfb8      	it	lt
 800d1a0:	9204      	strlt	r2, [sp, #16]
 800d1a2:	7823      	ldrb	r3, [r4, #0]
 800d1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d1a6:	d10c      	bne.n	800d1c2 <_vfiprintf_r+0x176>
 800d1a8:	7863      	ldrb	r3, [r4, #1]
 800d1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ac:	d135      	bne.n	800d21a <_vfiprintf_r+0x1ce>
 800d1ae:	9b03      	ldr	r3, [sp, #12]
 800d1b0:	1d1a      	adds	r2, r3, #4
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	9203      	str	r2, [sp, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	bfb8      	it	lt
 800d1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1be:	3402      	adds	r4, #2
 800d1c0:	9305      	str	r3, [sp, #20]
 800d1c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d2a8 <_vfiprintf_r+0x25c>
 800d1c6:	7821      	ldrb	r1, [r4, #0]
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	4650      	mov	r0, sl
 800d1cc:	f7f3 f840 	bl	8000250 <memchr>
 800d1d0:	b140      	cbz	r0, 800d1e4 <_vfiprintf_r+0x198>
 800d1d2:	2340      	movs	r3, #64	; 0x40
 800d1d4:	eba0 000a 	sub.w	r0, r0, sl
 800d1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d1dc:	9b04      	ldr	r3, [sp, #16]
 800d1de:	4303      	orrs	r3, r0
 800d1e0:	3401      	adds	r4, #1
 800d1e2:	9304      	str	r3, [sp, #16]
 800d1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e8:	482c      	ldr	r0, [pc, #176]	; (800d29c <_vfiprintf_r+0x250>)
 800d1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ee:	2206      	movs	r2, #6
 800d1f0:	f7f3 f82e 	bl	8000250 <memchr>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d03f      	beq.n	800d278 <_vfiprintf_r+0x22c>
 800d1f8:	4b29      	ldr	r3, [pc, #164]	; (800d2a0 <_vfiprintf_r+0x254>)
 800d1fa:	bb1b      	cbnz	r3, 800d244 <_vfiprintf_r+0x1f8>
 800d1fc:	9b03      	ldr	r3, [sp, #12]
 800d1fe:	3307      	adds	r3, #7
 800d200:	f023 0307 	bic.w	r3, r3, #7
 800d204:	3308      	adds	r3, #8
 800d206:	9303      	str	r3, [sp, #12]
 800d208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20a:	443b      	add	r3, r7
 800d20c:	9309      	str	r3, [sp, #36]	; 0x24
 800d20e:	e767      	b.n	800d0e0 <_vfiprintf_r+0x94>
 800d210:	fb0c 3202 	mla	r2, ip, r2, r3
 800d214:	460c      	mov	r4, r1
 800d216:	2001      	movs	r0, #1
 800d218:	e7a5      	b.n	800d166 <_vfiprintf_r+0x11a>
 800d21a:	2300      	movs	r3, #0
 800d21c:	3401      	adds	r4, #1
 800d21e:	9305      	str	r3, [sp, #20]
 800d220:	4619      	mov	r1, r3
 800d222:	f04f 0c0a 	mov.w	ip, #10
 800d226:	4620      	mov	r0, r4
 800d228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d22c:	3a30      	subs	r2, #48	; 0x30
 800d22e:	2a09      	cmp	r2, #9
 800d230:	d903      	bls.n	800d23a <_vfiprintf_r+0x1ee>
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c5      	beq.n	800d1c2 <_vfiprintf_r+0x176>
 800d236:	9105      	str	r1, [sp, #20]
 800d238:	e7c3      	b.n	800d1c2 <_vfiprintf_r+0x176>
 800d23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d23e:	4604      	mov	r4, r0
 800d240:	2301      	movs	r3, #1
 800d242:	e7f0      	b.n	800d226 <_vfiprintf_r+0x1da>
 800d244:	ab03      	add	r3, sp, #12
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	462a      	mov	r2, r5
 800d24a:	4b16      	ldr	r3, [pc, #88]	; (800d2a4 <_vfiprintf_r+0x258>)
 800d24c:	a904      	add	r1, sp, #16
 800d24e:	4630      	mov	r0, r6
 800d250:	f7fb fa9a 	bl	8008788 <_printf_float>
 800d254:	4607      	mov	r7, r0
 800d256:	1c78      	adds	r0, r7, #1
 800d258:	d1d6      	bne.n	800d208 <_vfiprintf_r+0x1bc>
 800d25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d25c:	07d9      	lsls	r1, r3, #31
 800d25e:	d405      	bmi.n	800d26c <_vfiprintf_r+0x220>
 800d260:	89ab      	ldrh	r3, [r5, #12]
 800d262:	059a      	lsls	r2, r3, #22
 800d264:	d402      	bmi.n	800d26c <_vfiprintf_r+0x220>
 800d266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d268:	f7ff fe79 	bl	800cf5e <__retarget_lock_release_recursive>
 800d26c:	89ab      	ldrh	r3, [r5, #12]
 800d26e:	065b      	lsls	r3, r3, #25
 800d270:	f53f af12 	bmi.w	800d098 <_vfiprintf_r+0x4c>
 800d274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d276:	e711      	b.n	800d09c <_vfiprintf_r+0x50>
 800d278:	ab03      	add	r3, sp, #12
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	462a      	mov	r2, r5
 800d27e:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <_vfiprintf_r+0x258>)
 800d280:	a904      	add	r1, sp, #16
 800d282:	4630      	mov	r0, r6
 800d284:	f7fb fd0c 	bl	8008ca0 <_printf_i>
 800d288:	e7e4      	b.n	800d254 <_vfiprintf_r+0x208>
 800d28a:	bf00      	nop
 800d28c:	0800dbac 	.word	0x0800dbac
 800d290:	0800dbcc 	.word	0x0800dbcc
 800d294:	0800db8c 	.word	0x0800db8c
 800d298:	0800db24 	.word	0x0800db24
 800d29c:	0800db2e 	.word	0x0800db2e
 800d2a0:	08008789 	.word	0x08008789
 800d2a4:	0800d027 	.word	0x0800d027
 800d2a8:	0800db2a 	.word	0x0800db2a

0800d2ac <__swbuf_r>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	460e      	mov	r6, r1
 800d2b0:	4614      	mov	r4, r2
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	b118      	cbz	r0, 800d2be <__swbuf_r+0x12>
 800d2b6:	6983      	ldr	r3, [r0, #24]
 800d2b8:	b90b      	cbnz	r3, 800d2be <__swbuf_r+0x12>
 800d2ba:	f7ff fd9f 	bl	800cdfc <__sinit>
 800d2be:	4b21      	ldr	r3, [pc, #132]	; (800d344 <__swbuf_r+0x98>)
 800d2c0:	429c      	cmp	r4, r3
 800d2c2:	d12b      	bne.n	800d31c <__swbuf_r+0x70>
 800d2c4:	686c      	ldr	r4, [r5, #4]
 800d2c6:	69a3      	ldr	r3, [r4, #24]
 800d2c8:	60a3      	str	r3, [r4, #8]
 800d2ca:	89a3      	ldrh	r3, [r4, #12]
 800d2cc:	071a      	lsls	r2, r3, #28
 800d2ce:	d52f      	bpl.n	800d330 <__swbuf_r+0x84>
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	b36b      	cbz	r3, 800d330 <__swbuf_r+0x84>
 800d2d4:	6923      	ldr	r3, [r4, #16]
 800d2d6:	6820      	ldr	r0, [r4, #0]
 800d2d8:	1ac0      	subs	r0, r0, r3
 800d2da:	6963      	ldr	r3, [r4, #20]
 800d2dc:	b2f6      	uxtb	r6, r6
 800d2de:	4283      	cmp	r3, r0
 800d2e0:	4637      	mov	r7, r6
 800d2e2:	dc04      	bgt.n	800d2ee <__swbuf_r+0x42>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f7ff fcf4 	bl	800ccd4 <_fflush_r>
 800d2ec:	bb30      	cbnz	r0, 800d33c <__swbuf_r+0x90>
 800d2ee:	68a3      	ldr	r3, [r4, #8]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	60a3      	str	r3, [r4, #8]
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	6022      	str	r2, [r4, #0]
 800d2fa:	701e      	strb	r6, [r3, #0]
 800d2fc:	6963      	ldr	r3, [r4, #20]
 800d2fe:	3001      	adds	r0, #1
 800d300:	4283      	cmp	r3, r0
 800d302:	d004      	beq.n	800d30e <__swbuf_r+0x62>
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	07db      	lsls	r3, r3, #31
 800d308:	d506      	bpl.n	800d318 <__swbuf_r+0x6c>
 800d30a:	2e0a      	cmp	r6, #10
 800d30c:	d104      	bne.n	800d318 <__swbuf_r+0x6c>
 800d30e:	4621      	mov	r1, r4
 800d310:	4628      	mov	r0, r5
 800d312:	f7ff fcdf 	bl	800ccd4 <_fflush_r>
 800d316:	b988      	cbnz	r0, 800d33c <__swbuf_r+0x90>
 800d318:	4638      	mov	r0, r7
 800d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <__swbuf_r+0x9c>)
 800d31e:	429c      	cmp	r4, r3
 800d320:	d101      	bne.n	800d326 <__swbuf_r+0x7a>
 800d322:	68ac      	ldr	r4, [r5, #8]
 800d324:	e7cf      	b.n	800d2c6 <__swbuf_r+0x1a>
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <__swbuf_r+0xa0>)
 800d328:	429c      	cmp	r4, r3
 800d32a:	bf08      	it	eq
 800d32c:	68ec      	ldreq	r4, [r5, #12]
 800d32e:	e7ca      	b.n	800d2c6 <__swbuf_r+0x1a>
 800d330:	4621      	mov	r1, r4
 800d332:	4628      	mov	r0, r5
 800d334:	f000 f80c 	bl	800d350 <__swsetup_r>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d0cb      	beq.n	800d2d4 <__swbuf_r+0x28>
 800d33c:	f04f 37ff 	mov.w	r7, #4294967295
 800d340:	e7ea      	b.n	800d318 <__swbuf_r+0x6c>
 800d342:	bf00      	nop
 800d344:	0800dbac 	.word	0x0800dbac
 800d348:	0800dbcc 	.word	0x0800dbcc
 800d34c:	0800db8c 	.word	0x0800db8c

0800d350 <__swsetup_r>:
 800d350:	4b32      	ldr	r3, [pc, #200]	; (800d41c <__swsetup_r+0xcc>)
 800d352:	b570      	push	{r4, r5, r6, lr}
 800d354:	681d      	ldr	r5, [r3, #0]
 800d356:	4606      	mov	r6, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	b125      	cbz	r5, 800d366 <__swsetup_r+0x16>
 800d35c:	69ab      	ldr	r3, [r5, #24]
 800d35e:	b913      	cbnz	r3, 800d366 <__swsetup_r+0x16>
 800d360:	4628      	mov	r0, r5
 800d362:	f7ff fd4b 	bl	800cdfc <__sinit>
 800d366:	4b2e      	ldr	r3, [pc, #184]	; (800d420 <__swsetup_r+0xd0>)
 800d368:	429c      	cmp	r4, r3
 800d36a:	d10f      	bne.n	800d38c <__swsetup_r+0x3c>
 800d36c:	686c      	ldr	r4, [r5, #4]
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d374:	0719      	lsls	r1, r3, #28
 800d376:	d42c      	bmi.n	800d3d2 <__swsetup_r+0x82>
 800d378:	06dd      	lsls	r5, r3, #27
 800d37a:	d411      	bmi.n	800d3a0 <__swsetup_r+0x50>
 800d37c:	2309      	movs	r3, #9
 800d37e:	6033      	str	r3, [r6, #0]
 800d380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	f04f 30ff 	mov.w	r0, #4294967295
 800d38a:	e03e      	b.n	800d40a <__swsetup_r+0xba>
 800d38c:	4b25      	ldr	r3, [pc, #148]	; (800d424 <__swsetup_r+0xd4>)
 800d38e:	429c      	cmp	r4, r3
 800d390:	d101      	bne.n	800d396 <__swsetup_r+0x46>
 800d392:	68ac      	ldr	r4, [r5, #8]
 800d394:	e7eb      	b.n	800d36e <__swsetup_r+0x1e>
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <__swsetup_r+0xd8>)
 800d398:	429c      	cmp	r4, r3
 800d39a:	bf08      	it	eq
 800d39c:	68ec      	ldreq	r4, [r5, #12]
 800d39e:	e7e6      	b.n	800d36e <__swsetup_r+0x1e>
 800d3a0:	0758      	lsls	r0, r3, #29
 800d3a2:	d512      	bpl.n	800d3ca <__swsetup_r+0x7a>
 800d3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3a6:	b141      	cbz	r1, 800d3ba <__swsetup_r+0x6a>
 800d3a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3ac:	4299      	cmp	r1, r3
 800d3ae:	d002      	beq.n	800d3b6 <__swsetup_r+0x66>
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7fe fd8b 	bl	800becc <_free_r>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3c0:	81a3      	strh	r3, [r4, #12]
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	6063      	str	r3, [r4, #4]
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	6023      	str	r3, [r4, #0]
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	f043 0308 	orr.w	r3, r3, #8
 800d3d0:	81a3      	strh	r3, [r4, #12]
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	b94b      	cbnz	r3, 800d3ea <__swsetup_r+0x9a>
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3e0:	d003      	beq.n	800d3ea <__swsetup_r+0x9a>
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f000 f84d 	bl	800d484 <__smakebuf_r>
 800d3ea:	89a0      	ldrh	r0, [r4, #12]
 800d3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f0:	f010 0301 	ands.w	r3, r0, #1
 800d3f4:	d00a      	beq.n	800d40c <__swsetup_r+0xbc>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	6963      	ldr	r3, [r4, #20]
 800d3fc:	425b      	negs	r3, r3
 800d3fe:	61a3      	str	r3, [r4, #24]
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	b943      	cbnz	r3, 800d416 <__swsetup_r+0xc6>
 800d404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d408:	d1ba      	bne.n	800d380 <__swsetup_r+0x30>
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	0781      	lsls	r1, r0, #30
 800d40e:	bf58      	it	pl
 800d410:	6963      	ldrpl	r3, [r4, #20]
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	e7f4      	b.n	800d400 <__swsetup_r+0xb0>
 800d416:	2000      	movs	r0, #0
 800d418:	e7f7      	b.n	800d40a <__swsetup_r+0xba>
 800d41a:	bf00      	nop
 800d41c:	20000058 	.word	0x20000058
 800d420:	0800dbac 	.word	0x0800dbac
 800d424:	0800dbcc 	.word	0x0800dbcc
 800d428:	0800db8c 	.word	0x0800db8c

0800d42c <abort>:
 800d42c:	b508      	push	{r3, lr}
 800d42e:	2006      	movs	r0, #6
 800d430:	f000 f898 	bl	800d564 <raise>
 800d434:	2001      	movs	r0, #1
 800d436:	f7f5 fabd 	bl	80029b4 <_exit>

0800d43a <__swhatbuf_r>:
 800d43a:	b570      	push	{r4, r5, r6, lr}
 800d43c:	460e      	mov	r6, r1
 800d43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d442:	2900      	cmp	r1, #0
 800d444:	b096      	sub	sp, #88	; 0x58
 800d446:	4614      	mov	r4, r2
 800d448:	461d      	mov	r5, r3
 800d44a:	da07      	bge.n	800d45c <__swhatbuf_r+0x22>
 800d44c:	2300      	movs	r3, #0
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	89b3      	ldrh	r3, [r6, #12]
 800d452:	061a      	lsls	r2, r3, #24
 800d454:	d410      	bmi.n	800d478 <__swhatbuf_r+0x3e>
 800d456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d45a:	e00e      	b.n	800d47a <__swhatbuf_r+0x40>
 800d45c:	466a      	mov	r2, sp
 800d45e:	f000 f89d 	bl	800d59c <_fstat_r>
 800d462:	2800      	cmp	r0, #0
 800d464:	dbf2      	blt.n	800d44c <__swhatbuf_r+0x12>
 800d466:	9a01      	ldr	r2, [sp, #4]
 800d468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d46c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d470:	425a      	negs	r2, r3
 800d472:	415a      	adcs	r2, r3
 800d474:	602a      	str	r2, [r5, #0]
 800d476:	e7ee      	b.n	800d456 <__swhatbuf_r+0x1c>
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	2000      	movs	r0, #0
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	b016      	add	sp, #88	; 0x58
 800d480:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d484 <__smakebuf_r>:
 800d484:	898b      	ldrh	r3, [r1, #12]
 800d486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d488:	079d      	lsls	r5, r3, #30
 800d48a:	4606      	mov	r6, r0
 800d48c:	460c      	mov	r4, r1
 800d48e:	d507      	bpl.n	800d4a0 <__smakebuf_r+0x1c>
 800d490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	2301      	movs	r3, #1
 800d49a:	6163      	str	r3, [r4, #20]
 800d49c:	b002      	add	sp, #8
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	ab01      	add	r3, sp, #4
 800d4a2:	466a      	mov	r2, sp
 800d4a4:	f7ff ffc9 	bl	800d43a <__swhatbuf_r>
 800d4a8:	9900      	ldr	r1, [sp, #0]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7fe fd5d 	bl	800bf6c <_malloc_r>
 800d4b2:	b948      	cbnz	r0, 800d4c8 <__smakebuf_r+0x44>
 800d4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b8:	059a      	lsls	r2, r3, #22
 800d4ba:	d4ef      	bmi.n	800d49c <__smakebuf_r+0x18>
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	f043 0302 	orr.w	r3, r3, #2
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	e7e3      	b.n	800d490 <__smakebuf_r+0xc>
 800d4c8:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <__smakebuf_r+0x7c>)
 800d4ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4cc:	89a3      	ldrh	r3, [r4, #12]
 800d4ce:	6020      	str	r0, [r4, #0]
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	9b00      	ldr	r3, [sp, #0]
 800d4d8:	6163      	str	r3, [r4, #20]
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	6120      	str	r0, [r4, #16]
 800d4de:	b15b      	cbz	r3, 800d4f8 <__smakebuf_r+0x74>
 800d4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f000 f86b 	bl	800d5c0 <_isatty_r>
 800d4ea:	b128      	cbz	r0, 800d4f8 <__smakebuf_r+0x74>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f023 0303 	bic.w	r3, r3, #3
 800d4f2:	f043 0301 	orr.w	r3, r3, #1
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	89a0      	ldrh	r0, [r4, #12]
 800d4fa:	4305      	orrs	r5, r0
 800d4fc:	81a5      	strh	r5, [r4, #12]
 800d4fe:	e7cd      	b.n	800d49c <__smakebuf_r+0x18>
 800d500:	0800cd95 	.word	0x0800cd95

0800d504 <_malloc_usable_size_r>:
 800d504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d508:	1f18      	subs	r0, r3, #4
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbc      	itt	lt
 800d50e:	580b      	ldrlt	r3, [r1, r0]
 800d510:	18c0      	addlt	r0, r0, r3
 800d512:	4770      	bx	lr

0800d514 <_raise_r>:
 800d514:	291f      	cmp	r1, #31
 800d516:	b538      	push	{r3, r4, r5, lr}
 800d518:	4604      	mov	r4, r0
 800d51a:	460d      	mov	r5, r1
 800d51c:	d904      	bls.n	800d528 <_raise_r+0x14>
 800d51e:	2316      	movs	r3, #22
 800d520:	6003      	str	r3, [r0, #0]
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d52a:	b112      	cbz	r2, 800d532 <_raise_r+0x1e>
 800d52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d530:	b94b      	cbnz	r3, 800d546 <_raise_r+0x32>
 800d532:	4620      	mov	r0, r4
 800d534:	f000 f830 	bl	800d598 <_getpid_r>
 800d538:	462a      	mov	r2, r5
 800d53a:	4601      	mov	r1, r0
 800d53c:	4620      	mov	r0, r4
 800d53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d542:	f000 b817 	b.w	800d574 <_kill_r>
 800d546:	2b01      	cmp	r3, #1
 800d548:	d00a      	beq.n	800d560 <_raise_r+0x4c>
 800d54a:	1c59      	adds	r1, r3, #1
 800d54c:	d103      	bne.n	800d556 <_raise_r+0x42>
 800d54e:	2316      	movs	r3, #22
 800d550:	6003      	str	r3, [r0, #0]
 800d552:	2001      	movs	r0, #1
 800d554:	e7e7      	b.n	800d526 <_raise_r+0x12>
 800d556:	2400      	movs	r4, #0
 800d558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d55c:	4628      	mov	r0, r5
 800d55e:	4798      	blx	r3
 800d560:	2000      	movs	r0, #0
 800d562:	e7e0      	b.n	800d526 <_raise_r+0x12>

0800d564 <raise>:
 800d564:	4b02      	ldr	r3, [pc, #8]	; (800d570 <raise+0xc>)
 800d566:	4601      	mov	r1, r0
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	f7ff bfd3 	b.w	800d514 <_raise_r>
 800d56e:	bf00      	nop
 800d570:	20000058 	.word	0x20000058

0800d574 <_kill_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d07      	ldr	r5, [pc, #28]	; (800d594 <_kill_r+0x20>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	f7f5 fa07 	bl	8002994 <_kill>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d102      	bne.n	800d590 <_kill_r+0x1c>
 800d58a:	682b      	ldr	r3, [r5, #0]
 800d58c:	b103      	cbz	r3, 800d590 <_kill_r+0x1c>
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	bd38      	pop	{r3, r4, r5, pc}
 800d592:	bf00      	nop
 800d594:	20000874 	.word	0x20000874

0800d598 <_getpid_r>:
 800d598:	f7f5 b9f4 	b.w	8002984 <_getpid>

0800d59c <_fstat_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d07      	ldr	r5, [pc, #28]	; (800d5bc <_fstat_r+0x20>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	f7f5 fa52 	bl	8002a52 <_fstat>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d102      	bne.n	800d5b8 <_fstat_r+0x1c>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	b103      	cbz	r3, 800d5b8 <_fstat_r+0x1c>
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000874 	.word	0x20000874

0800d5c0 <_isatty_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d06      	ldr	r5, [pc, #24]	; (800d5dc <_isatty_r+0x1c>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	f7f5 fa51 	bl	8002a72 <_isatty>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_isatty_r+0x1a>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_isatty_r+0x1a>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20000874 	.word	0x20000874

0800d5e0 <_init>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	bf00      	nop
 800d5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e6:	bc08      	pop	{r3}
 800d5e8:	469e      	mov	lr, r3
 800d5ea:	4770      	bx	lr

0800d5ec <_fini>:
 800d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ee:	bf00      	nop
 800d5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f2:	bc08      	pop	{r3}
 800d5f4:	469e      	mov	lr, r3
 800d5f6:	4770      	bx	lr
