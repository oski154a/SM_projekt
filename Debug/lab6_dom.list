
lab6_dom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800d7c8  0800d7c8  0001d7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddfc  0800ddfc  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddfc  0800ddfc  0001ddfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de04  0800de04  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800de0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  2000022c  0800e038  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800e038  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d938  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff7  00000000  00000000  0003db92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  000431d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c539  00000000  00000000  00044688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aedc  00000000  00000000  00070bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065db  00000000  00000000  0008ba9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00192078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007280  00000000  00000000  00192144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d7b0 	.word	0x0800d7b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800d7b0 	.word	0x0800d7b0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <software_delay>:
/**
* Software busy delay
* @param[in] tick Number of ticks to wait
*/
static void software_delay(uint32_t tick)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 80009d8:	e00c      	b.n	80009f4 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 80009da:	2305      	movs	r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e006      	b.n	80009ee <software_delay+0x1e>
			asm("nop");
 80009e0:	bf00      	nop
			asm("nop");
 80009e2:	bf00      	nop
			asm("nop");
 80009e4:	bf00      	nop
			asm("nop");
 80009e6:	bf00      	nop
		for(delay=5; delay>0; delay--){
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f5      	bne.n	80009e0 <software_delay+0x10>
	while(tick-->0)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1ed      	bne.n	80009da <software_delay+0xa>
		}
	}
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LCD_init>:
/**
* Initialization of LCD display in 4 bits mode
* @details Before use initialize GPIOs
*/
void LCD_init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8000a12:	484d      	ldr	r0, [pc, #308]	; (8000b48 <LCD_init+0x13c>)
 8000a14:	f7ff ffdc 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f8a9 	bl	8000b74 <LCD_send_4bits>
 8000a22:	4849      	ldr	r0, [pc, #292]	; (8000b48 <LCD_init+0x13c>)
 8000a24:	f7ff ffd4 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f8a1 	bl	8000b74 <LCD_send_4bits>
 8000a32:	4845      	ldr	r0, [pc, #276]	; (8000b48 <LCD_init+0x13c>)
 8000a34:	f7ff ffcc 	bl	80009d0 <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f899 	bl	8000b74 <LCD_send_4bits>
 8000a42:	4842      	ldr	r0, [pc, #264]	; (8000b4c <LCD_init+0x140>)
 8000a44:	f7ff ffc4 	bl	80009d0 <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f000 f891 	bl	8000b74 <LCD_send_4bits>
 8000a52:	483e      	ldr	r0, [pc, #248]	; (8000b4c <LCD_init+0x140>)
 8000a54:	f7ff ffbc 	bl	80009d0 <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f000 f922 	bl	8000ca2 <LCD_write_command>
 8000a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a62:	f7ff ffb5 	bl	80009d0 <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 8000a66:	200c      	movs	r0, #12
 8000a68:	f000 f91b 	bl	8000ca2 <LCD_write_command>
 8000a6c:	4838      	ldr	r0, [pc, #224]	; (8000b50 <LCD_init+0x144>)
 8000a6e:	f7ff ffaf 	bl	80009d0 <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f915 	bl	8000ca2 <LCD_write_command>
 8000a78:	4835      	ldr	r0, [pc, #212]	; (8000b50 <LCD_init+0x144>)
 8000a7a:	f7ff ffa9 	bl	80009d0 <software_delay>
	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 f90f 	bl	8000ca2 <LCD_write_command>
 8000a84:	4832      	ldr	r0, [pc, #200]	; (8000b50 <LCD_init+0x144>)
 8000a86:	f7ff ffa3 	bl	80009d0 <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 f909 	bl	8000ca2 <LCD_write_command>
 8000a90:	482f      	ldr	r0, [pc, #188]	; (8000b50 <LCD_init+0x144>)
 8000a92:	f7ff ff9d 	bl	80009d0 <software_delay>
	
	LCD_write_text("Dominik Luczak");
 8000a96:	482f      	ldr	r0, [pc, #188]	; (8000b54 <LCD_init+0x148>)
 8000a98:	f000 f93e 	bl	8000d18 <LCD_write_text>
	LCD_goto_line(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f977 	bl	8000d90 <LCD_goto_line>
	LCD_write_text("Text in line 2");
 8000aa2:	482d      	ldr	r0, [pc, #180]	; (8000b58 <LCD_init+0x14c>)
 8000aa4:	f000 f938 	bl	8000d18 <LCD_write_text>

	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 8000aa8:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <LCD_init+0x150>)
 8000aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab2:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8000ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f992 	bl	8000de6 <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8000ac2:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <LCD_init+0x154>)
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000acc:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f985 	bl	8000de6 <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <LCD_init+0x158>)
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae6:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2102      	movs	r1, #2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f978 	bl	8000de6 <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <LCD_init+0x15c>)
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b00:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2103      	movs	r1, #3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f96b 	bl	8000de6 <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 8000b10:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <LCD_init+0x160>)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b1a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2104      	movs	r1, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f95e 	bl	8000de6 <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <LCD_init+0x164>)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b32:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8000b36:	463b      	mov	r3, r7
 8000b38:	2105      	movs	r1, #5
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f953 	bl	8000de6 <LCD_create_custom_character>


}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	000f4240 	.word	0x000f4240
 8000b4c:	00061a80 	.word	0x00061a80
 8000b50:	000186a0 	.word	0x000186a0
 8000b54:	0800d7c8 	.word	0x0800d7c8
 8000b58:	0800d7d8 	.word	0x0800d7d8
 8000b5c:	0800d7e8 	.word	0x0800d7e8
 8000b60:	0800d7f0 	.word	0x0800d7f0
 8000b64:	0800d7f8 	.word	0x0800d7f8
 8000b68:	0800d800 	.word	0x0800d800
 8000b6c:	0800d808 	.word	0x0800d808
 8000b70:	0800d810 	.word	0x0800d810

08000b74 <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	71bb      	strb	r3, [r7, #6]
 8000b82:	4613      	mov	r3, r2
 8000b84:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <LCD_send_4bits+0x24>
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4834      	ldr	r0, [pc, #208]	; (8000c64 <LCD_send_4bits+0xf0>)
 8000b92:	f002 ff4f 	bl	8003a34 <HAL_GPIO_WritePin>
 8000b96:	e004      	b.n	8000ba2 <LCD_send_4bits+0x2e>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4831      	ldr	r0, [pc, #196]	; (8000c64 <LCD_send_4bits+0xf0>)
 8000b9e:	f002 ff49 	bl	8003a34 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <LCD_send_4bits+0x44>
 8000bac:	2201      	movs	r2, #1
 8000bae:	2110      	movs	r1, #16
 8000bb0:	482d      	ldr	r0, [pc, #180]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bb2:	f002 ff3f 	bl	8003a34 <HAL_GPIO_WritePin>
 8000bb6:	e004      	b.n	8000bc2 <LCD_send_4bits+0x4e>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	482a      	ldr	r0, [pc, #168]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bbe:	f002 ff39 	bl	8003a34 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <LCD_send_4bits+0x64>
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4825      	ldr	r0, [pc, #148]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bd2:	f002 ff2f 	bl	8003a34 <HAL_GPIO_WritePin>
 8000bd6:	e004      	b.n	8000be2 <LCD_send_4bits+0x6e>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bde:	f002 ff29 	bl	8003a34 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d005      	beq.n	8000bf8 <LCD_send_4bits+0x84>
 8000bec:	2201      	movs	r2, #1
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	481d      	ldr	r0, [pc, #116]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bf2:	f002 ff1f 	bl	8003a34 <HAL_GPIO_WritePin>
 8000bf6:	e004      	b.n	8000c02 <LCD_send_4bits+0x8e>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000bfe:	f002 ff19 	bl	8003a34 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <LCD_send_4bits+0xa4>
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4815      	ldr	r0, [pc, #84]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000c12:	f002 ff0f 	bl	8003a34 <HAL_GPIO_WritePin>
 8000c16:	e004      	b.n	8000c22 <LCD_send_4bits+0xae>
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000c1e:	f002 ff09 	bl	8003a34 <HAL_GPIO_WritePin>
	software_delay(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f7ff fed4 	bl	80009d0 <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000c2e:	f002 ff01 	bl	8003a34 <HAL_GPIO_WritePin>
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f7ff fecc 	bl	80009d0 <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000c3e:	f002 fef9 	bl	8003a34 <HAL_GPIO_WritePin>
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f7ff fec4 	bl	80009d0 <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <LCD_send_4bits+0xf4>)
 8000c4e:	f002 fef1 	bl	8003a34 <HAL_GPIO_WritePin>
 8000c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c56:	f7ff febb 	bl	80009d0 <software_delay>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	460b      	mov	r3, r1
 8000c78:	71bb      	strb	r3, [r7, #6]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	797a      	ldrb	r2, [r7, #5]
 8000c86:	79b9      	ldrb	r1, [r7, #6]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff73 	bl	8000b74 <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 8000c8e:	797a      	ldrb	r2, [r7, #5]
 8000c90:	79b9      	ldrb	r1, [r7, #6]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff6d 	bl	8000b74 <LCD_send_4bits>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ffda 	bl	8000c6c <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 8000cb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cbc:	f7ff fe88 	bl	80009d0 <software_delay>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffc7 	bl	8000c6c <LCD_send_8bits_twice_4bits>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <LCD_write_char>:

void LCD_write_char(char character)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <LCD_write_char+0x2c>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <LCD_write_char+0x24>
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffde 	bl	8000cc8 <LCD_write_data>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800d930 	.word	0x0800d930

08000d18 <LCD_write_text>:



void LCD_write_text(char* pText){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8000d20:	e007      	b.n	8000d32 <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffde 	bl	8000ce8 <LCD_write_char>
		pText++;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f3      	bne.n	8000d22 <LCD_write_text+0xa>
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <LCD_goto_xy+0x1c>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d003      	beq.n	8000d66 <LCD_goto_xy+0x22>
 8000d5e:	e005      	b.n	8000d6c <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e004      	b.n	8000d70 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	e001      	b.n	8000d70 <LCD_goto_xy+0x2c>
		default: line=0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	4413      	add	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff8d 	bl	8000ca2 <LCD_write_command>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffd0 	bl	8000d44 <LCD_goto_xy>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 8000dac:	b40f      	push	{r0, r1, r2, r3}
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8000dbe:	1d38      	adds	r0, r7, #4
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	2111      	movs	r1, #17
 8000dc6:	f009 fabd 	bl	800a344 <vsniprintf>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffa1 	bl	8000d18 <LCD_write_text>
	va_end (args);
	return length;
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de2:	b004      	add	sp, #16
 8000de4:	4770      	bx	lr

08000de6 <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff4d 	bl	8000ca2 <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e009      	b.n	8000e22 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff56 	bl	8000cc8 <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	d9f2      	bls.n	8000e0e <LCD_create_custom_character+0x28>
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fa4c 	bl	80012d8 <null_ptr_check>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d117      	bne.n	8000e7c <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	20d0      	movs	r0, #208	; 0xd0
 8000e54:	f000 f818 	bl	8000e88 <bmp2_get_regs>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10b      	bne.n	8000e7c <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b58      	cmp	r3, #88	; 0x58
 8000e6a:	d105      	bne.n	8000e78 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fa7e 	bl	800136e <get_calib_param>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e001      	b.n	8000e7c <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000e78:	23fc      	movs	r3, #252	; 0xfc
 8000e7a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f000 fa1d 	bl	80012d8 <null_ptr_check>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11e      	bne.n	8000ee8 <bmp2_get_regs+0x60>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d01b      	beq.n	8000ee8 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d103      	bne.n	8000ec0 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ebe:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68dc      	ldr	r4, [r3, #12]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	7bf8      	ldrb	r0, [r7, #15]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	47a0      	blx	r4
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ee2:	23fe      	movs	r3, #254	; 0xfe
 8000ee4:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ee6:	e001      	b.n	8000eec <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000ee8:	23ff      	movs	r3, #255	; 0xff
 8000eea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	371c      	adds	r7, #28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}

08000ef8 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b08b      	sub	sp, #44	; 0x2c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d901      	bls.n	8000f10 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f000 f9e1 	bl	80012d8 <null_ptr_check>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d150      	bne.n	8000fc6 <bmp2_set_regs+0xce>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d04d      	beq.n	8000fc6 <bmp2_set_regs+0xce>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d04a      	beq.n	8000fc6 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d043      	beq.n	8000fbe <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d114      	bne.n	8000f6e <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	77fb      	strb	r3, [r7, #31]
 8000f48:	e00d      	b.n	8000f66 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	68f9      	ldr	r1, [r7, #12]
 8000f56:	440b      	add	r3, r1
 8000f58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
 8000f62:	3301      	adds	r3, #1
 8000f64:	77fb      	strb	r3, [r7, #31]
 8000f66:	7ffb      	ldrb	r3, [r7, #31]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d8ed      	bhi.n	8000f4a <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d90b      	bls.n	8000f8c <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000f74:	f107 0114 	add.w	r1, r7, #20
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f9cb 	bl	8001318 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	3b01      	subs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
 8000f8a:	e001      	b.n	8000f90 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691c      	ldr	r4, [r3, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	7818      	ldrb	r0, [r3, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f107 0114 	add.w	r1, r7, #20
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	47a0      	blx	r4
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000fb6:	23fe      	movs	r3, #254	; 0xfe
 8000fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fbc:	e007      	b.n	8000fce <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000fbe:	23fd      	movs	r3, #253	; 0xfd
 8000fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fc4:	e003      	b.n	8000fce <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000fc6:	23ff      	movs	r3, #255	; 0xff
 8000fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fcc:	e000      	b.n	8000fd0 <bmp2_set_regs+0xd8>
        if (len > 0)
 8000fce:	bf00      	nop
    }

    return rslt;
 8000fd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	372c      	adds	r7, #44	; 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}

08000fdc <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000fe4:	23e0      	movs	r3, #224	; 0xe0
 8000fe6:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000fe8:	23b6      	movs	r3, #182	; 0xb6
 8000fea:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000fec:	f107 010d 	add.w	r1, r7, #13
 8000ff0:	f107 000e 	add.w	r0, r7, #14
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f7ff ff7e 	bl	8000ef8 <bmp2_set_regs>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001016:	2300      	movs	r3, #0
 8001018:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02d      	beq.n	800107c <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001020:	f107 010c 	add.w	r1, r7, #12
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	20f4      	movs	r0, #244	; 0xf4
 800102a:	f7ff ff2d 	bl	8000e88 <bmp2_get_regs>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d122      	bne.n	8001080 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800103a:	7b3b      	ldrb	r3, [r7, #12]
 800103c:	095b      	lsrs	r3, r3, #5
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	109b      	asrs	r3, r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	b2da      	uxtb	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	b2da      	uxtb	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	109b      	asrs	r3, r3, #2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	715a      	strb	r2, [r3, #5]
 800107a:	e001      	b.n	8001080 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fa02 	bl	80014a4 <conf_sensor>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01b      	beq.n	80010f2 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80010ba:	f107 010e 	add.w	r1, r7, #14
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	20f3      	movs	r0, #243	; 0xf3
 80010c4:	f7ff fee0 	bl	8000e88 <bmp2_get_regs>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d110      	bne.n	80010f6 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	10db      	asrs	r3, r3, #3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	705a      	strb	r2, [r3, #1]
 80010f0:	e001      	b.n	80010f6 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010f2:	23ff      	movs	r3, #255	; 0xff
 80010f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9c4 	bl	80014a4 <conf_sensor>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	2300      	movs	r3, #0
 800113c:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d024      	beq.n	8001198 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2206      	movs	r2, #6
 8001156:	20f7      	movs	r0, #247	; 0xf7
 8001158:	f7ff fe96 	bl	8000e88 <bmp2_get_regs>
 800115c:	4603      	mov	r3, r0
 800115e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d119      	bne.n	800119c <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fabe 	bl	80016f4 <parse_sensor_data>
 8001178:	4603      	mov	r3, r0
 800117a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800117c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10b      	bne.n	800119c <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f80b 	bl	80011a8 <bmp2_compensate_data>
 8001192:	4603      	mov	r3, r0
 8001194:	75fb      	strb	r3, [r7, #23]
 8001196:	e001      	b.n	800119c <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001198:	23ff      	movs	r3, #255	; 0xff
 800119a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800119c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f88f 	bl	80012d8 <null_ptr_check>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80011be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d129      	bne.n	800121a <bmp2_compensate_data+0x72>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d026      	beq.n	800121a <bmp2_compensate_data+0x72>
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d023      	beq.n	800121a <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3308      	adds	r3, #8
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fac2 	bl	8001780 <compensate_temperature>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fb82 	bl	8001918 <compensate_pressure>
 8001214:	4603      	mov	r3, r0
 8001216:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001218:	e001      	b.n	800121e <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800121a:	23ff      	movs	r3, #255	; 0xff
 800121c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800121e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b092      	sub	sp, #72	; 0x48
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <bmp2_compute_meas_time+0xa4>)
 800123a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <bmp2_compute_meas_time+0xa8>)
 800124a:	f107 0410 	add.w	r4, r7, #16
 800124e:	461d      	mov	r5, r3
 8001250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f83b 	bl	80012d8 <null_ptr_check>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001268:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800126c:	2b00      	cmp	r3, #0
 800126e:	d125      	bne.n	80012bc <bmp2_compute_meas_time+0x90>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d022      	beq.n	80012bc <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e1b      	ldrb	r3, [r3, #24]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d113      	bne.n	80012a6 <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	78db      	ldrb	r3, [r3, #3]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001288:	4413      	add	r3, r2
 800128a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001298:	440b      	add	r3, r1
 800129a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800129e:	441a      	add	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012a4:	e00d      	b.n	80012c2 <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012b0:	4413      	add	r3, r2
 80012b2:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012ba:	e002      	b.n	80012c2 <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80012c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3748      	adds	r7, #72	; 0x48
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdb0      	pop	{r4, r5, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800d81c 	.word	0x0800d81c
 80012d4:	0800d830 	.word	0x0800d830

080012d8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <null_ptr_check+0x26>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <null_ptr_check+0x26>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <null_ptr_check+0x26>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80012fe:	23ff      	movs	r3, #255	; 0xff
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e001      	b.n	8001308 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e015      	b.n	8001358 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	3b01      	subs	r3, #1
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	440b      	add	r3, r1
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	441a      	add	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	440b      	add	r3, r1
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3e5      	bcc.n	800132c <interleave_data+0x14>
    }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b08a      	sub	sp, #40	; 0x28
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800138c:	f107 010c 	add.w	r1, r7, #12
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2219      	movs	r2, #25
 8001394:	2088      	movs	r0, #136	; 0x88
 8001396:	f7ff fd77 	bl	8000e88 <bmp2_get_regs>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80013a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d177      	bne.n	8001498 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80013a8:	7b7b      	ldrb	r3, [r7, #13]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7b3b      	ldrb	r3, [r7, #12]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80013ce:	7c7b      	ldrb	r3, [r7, #17]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80013e0:	7cfb      	ldrb	r3, [r7, #19]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7cbb      	ldrb	r3, [r7, #18]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80013f4:	7d7b      	ldrb	r3, [r7, #21]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7dbb      	ldrb	r3, [r7, #22]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001418:	7e7b      	ldrb	r3, [r7, #25]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	7e3b      	ldrb	r3, [r7, #24]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b21a      	sxth	r2, r3
 8001430:	7ebb      	ldrb	r3, [r7, #26]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800143c:	7f7b      	ldrb	r3, [r7, #29]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	7f3b      	ldrb	r3, [r7, #28]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21a      	sxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001460:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800148c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001490:	b25a      	sxtb	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800149c:	4618      	mov	r0, r3
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80014b2:	2300      	movs	r3, #0
 80014b4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80014b6:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80014ba:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d074      	beq.n	80015ac <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80014c2:	f107 0114 	add.w	r1, r7, #20
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2202      	movs	r2, #2
 80014ca:	20f4      	movs	r0, #244	; 0xf4
 80014cc:	f7ff fcdc 	bl	8000e88 <bmp2_get_regs>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80014d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d169      	bne.n	80015b0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fd7d 	bl	8000fdc <bmp2_soft_reset>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80014e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d160      	bne.n	80015b0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f861 	bl	80015bc <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80014fa:	7d7b      	ldrb	r3, [r7, #21]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	b25a      	sxtb	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001514:	7d7b      	ldrb	r3, [r7, #21]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	f023 031c 	bic.w	r3, r3, #28
 800151c:	b25a      	sxtb	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 031c 	and.w	r3, r3, #28
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	b25a      	sxtb	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	795b      	ldrb	r3, [r3, #5]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b25b      	sxtb	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001552:	f107 0114 	add.w	r1, r7, #20
 8001556:	f107 0010 	add.w	r0, r7, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f7ff fccb 	bl	8000ef8 <bmp2_set_regs>
 8001562:	4603      	mov	r3, r0
 8001564:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001566:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d120      	bne.n	80015b0 <conf_sensor+0x10c>
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01d      	beq.n	80015b0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	b25a      	sxtb	r2, r3
 8001584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001596:	f107 0114 	add.w	r1, r7, #20
 800159a:	f107 0010 	add.w	r0, r7, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f7ff fca9 	bl	8000ef8 <bmp2_set_regs>
 80015a6:	4603      	mov	r3, r0
 80015a8:	75fb      	strb	r3, [r7, #23]
 80015aa:	e001      	b.n	80015b0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	f200 808b 	bhi.w	80016e6 <set_os_mode+0x12a>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <set_os_mode+0x1c>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015ed 	.word	0x080015ed
 80015dc:	0800161f 	.word	0x0800161f
 80015e0:	08001651 	.word	0x08001651
 80015e4:	08001683 	.word	0x08001683
 80015e8:	080016b5 	.word	0x080016b5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	f023 031c 	bic.w	r3, r3, #28
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	b25b      	sxtb	r3, r3
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	701a      	strb	r2, [r3, #0]
            break;
 800161c:	e064      	b.n	80016e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25b      	sxtb	r3, r3
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	b25b      	sxtb	r3, r3
 800162a:	f043 0320 	orr.w	r3, r3, #32
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	f023 031c 	bic.w	r3, r3, #28
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	b25b      	sxtb	r3, r3
 8001648:	b2da      	uxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	701a      	strb	r2, [r3, #0]
            break;
 800164e:	e04b      	b.n	80016e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f023 031c 	bic.w	r3, r3, #28
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f043 030c 	orr.w	r3, r3, #12
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	701a      	strb	r2, [r3, #0]
            break;
 8001680:	e032      	b.n	80016e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f023 031c 	bic.w	r3, r3, #28
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
            break;
 80016b2:	e019      	b.n	80016e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f023 031c 	bic.w	r3, r3, #28
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f043 0314 	orr.w	r3, r3, #20
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	701a      	strb	r2, [r3, #0]
            break;
 80016e4:	e000      	b.n	80016e8 <set_os_mode+0x12c>
        default:
            break;
 80016e6:	bf00      	nop
    }
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	031b      	lsls	r3, r3, #12
 8001704:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3302      	adds	r3, #2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b2db      	uxtb	r3, r3
 800171a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3303      	adds	r3, #3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	031b      	lsls	r3, r3, #12
 8001732:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3305      	adds	r3, #5
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	b2db      	uxtb	r3, r3
 8001748:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	461a      	mov	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f000 fa33 	bl	8001bd0 <st_check_boundaries>
 800176a:	4603      	mov	r3, r0
 800176c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800176e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	0000      	movs	r0, r0
 800177c:	0000      	movs	r0, r0
	...

08001780 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001780:	b480      	push	{r7}
 8001782:	b08d      	sub	sp, #52	; 0x34
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800179e:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80018d8 <compensate_temperature+0x158>
 80017a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	8b9b      	ldrh	r3, [r3, #28]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017b2:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80018e0 <compensate_temperature+0x160>
 80017b6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017ba:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80017cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d0:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017e0:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80018e8 <compensate_temperature+0x168>
 80017e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8b9b      	ldrh	r3, [r3, #28]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017f4:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80018f0 <compensate_temperature+0x170>
 80017f8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017fc:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800180c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80018e8 <compensate_temperature+0x168>
 8001810:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8b9b      	ldrh	r3, [r3, #28]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001820:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80018f0 <compensate_temperature+0x170>
 8001824:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001828:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800182c:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 800183e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001842:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001846:	ed97 6b06 	vldr	d6, [r7, #24]
 800184a:	ed97 7b04 	vldr	d7, [r7, #16]
 800184e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001852:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001856:	ee17 2a90 	vmov	r2, s15
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 800185e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001862:	ed97 7b04 	vldr	d7, [r7, #16]
 8001866:	ee36 6b07 	vadd.f64	d6, d6, d7
 800186a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80018f8 <compensate_temperature+0x178>
 800186e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001872:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001876:	ed97 7b08 	vldr	d7, [r7, #32]
 800187a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001900 <compensate_temperature+0x180>
 800187e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d507      	bpl.n	8001898 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <compensate_temperature+0x190>)
 800188e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001898:	ed97 7b08 	vldr	d7, [r7, #32]
 800189c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001908 <compensate_temperature+0x188>
 80018a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd07      	ble.n	80018ba <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <compensate_temperature+0x194>)
 80018b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80018ba:	68f9      	ldr	r1, [r7, #12]
 80018bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018c0:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80018c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3734      	adds	r7, #52	; 0x34
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	f3af 8000 	nop.w
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40d00000 	.word	0x40d00000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40900000 	.word	0x40900000
 80018e8:	00000000 	.word	0x00000000
 80018ec:	41000000 	.word	0x41000000
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40c00000 	.word	0x40c00000
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40b40000 	.word	0x40b40000
 8001900:	00000000 	.word	0x00000000
 8001904:	c0440000 	.word	0xc0440000
 8001908:	00000000 	.word	0x00000000
 800190c:	40554000 	.word	0x40554000
 8001910:	c0440000 	.word	0xc0440000
 8001914:	40554000 	.word	0x40554000

08001918 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001918:	b480      	push	{r7}
 800191a:	b08d      	sub	sp, #52	; 0x34
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001942:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001946:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800194a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001b80 <compensate_pressure+0x268>
 800194e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001952:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001956:	ed97 7b06 	vldr	d7, [r7, #24]
 800195a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800196c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001970:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001b88 <compensate_pressure+0x270>
 8001974:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001978:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800198a:	ed97 7b06 	vldr	d7, [r7, #24]
 800198e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001992:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001996:	ed97 6b04 	vldr	d6, [r7, #16]
 800199a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800199e:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 80019a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80019a6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80019aa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019bc:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001b90 <compensate_pressure+0x278>
 80019c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019c8:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019da:	ed97 7b06 	vldr	d7, [r7, #24]
 80019de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80019e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019ea:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001b98 <compensate_pressure+0x280>
 80019ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001a00:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a0c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001b98 <compensate_pressure+0x280>
 8001a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a14:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001a18:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a1c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001b88 <compensate_pressure+0x270>
 8001a20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a28:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a3c:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001a40:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d407      	bmi.n	8001a5e <compensate_pressure+0x146>
 8001a4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	f340 8086 	ble.w	8001b6a <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a6a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001ba0 <compensate_pressure+0x288>
 8001a6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a72:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001a76:	ed97 6b04 	vldr	d6, [r7, #16]
 8001a7a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001ba8 <compensate_pressure+0x290>
 8001a7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a82:	ed97 6b08 	vldr	d6, [r7, #32]
 8001a86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a8a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001bb0 <compensate_pressure+0x298>
 8001a8e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001a92:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a96:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a9a:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aac:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ab0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ab4:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ab8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001abc:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001bb8 <compensate_pressure+0x2a0>
 8001ac0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac4:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ad6:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ada:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ade:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001b88 <compensate_pressure+0x270>
 8001ae2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ae6:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001aea:	ed97 6b06 	vldr	d6, [r7, #24]
 8001aee:	ed97 7b04 	vldr	d7, [r7, #16]
 8001af2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b08:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001b0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b10:	ed97 6b08 	vldr	d6, [r7, #32]
 8001b14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b18:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001b1c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b20:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001bc0 <compensate_pressure+0x2a8>
 8001b24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	d507      	bpl.n	8001b3e <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001b2e:	a324      	add	r3, pc, #144	; (adr r3, 8001bc0 <compensate_pressure+0x2a8>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001b3e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b42:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001bc8 <compensate_pressure+0x2b0>
 8001b46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd07      	ble.n	8001b60 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001b50:	a31d      	add	r3, pc, #116	; (adr r3, 8001bc8 <compensate_pressure+0x2b0>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001b6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3734      	adds	r7, #52	; 0x34
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w
 8001b80:	00000000 	.word	0x00000000
 8001b84:	40ef4000 	.word	0x40ef4000
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40e00000 	.word	0x40e00000
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40f00000 	.word	0x40f00000
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	41200000 	.word	0x41200000
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	41300000 	.word	0x41300000
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40b00000 	.word	0x40b00000
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40b86a00 	.word	0x40b86a00
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	41e00000 	.word	0x41e00000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40dd4c00 	.word	0x40dd4c00
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40fadb00 	.word	0x40fadb00

08001bd0 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db03      	blt.n	8001bec <st_check_boundaries+0x1c>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <st_check_boundaries+0x88>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	dd09      	ble.n	8001c00 <st_check_boundaries+0x30>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db06      	blt.n	8001c00 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <st_check_boundaries+0x88>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	dc02      	bgt.n	8001c00 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001bfa:	23fa      	movs	r3, #250	; 0xfa
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e023      	b.n	8001c48 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db03      	blt.n	8001c0e <st_check_boundaries+0x3e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <st_check_boundaries+0x88>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	dd09      	ble.n	8001c22 <st_check_boundaries+0x52>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db06      	blt.n	8001c22 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <st_check_boundaries+0x88>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	dc02      	bgt.n	8001c22 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001c1c:	23fb      	movs	r3, #251	; 0xfb
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e012      	b.n	8001c48 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db03      	blt.n	8001c30 <st_check_boundaries+0x60>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <st_check_boundaries+0x88>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	dd09      	ble.n	8001c44 <st_check_boundaries+0x74>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db03      	blt.n	8001c3e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <st_check_boundaries+0x88>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	dd02      	ble.n	8001c44 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001c3e:	23f9      	movs	r3, #249	; 0xf9
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e001      	b.n	8001c48 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	000ffff0 	.word	0x000ffff0

08001c5c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff f8e4 	bl	8000e32 <bmp2_init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f9c9 	bl	800100c <bmp2_get_config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001c82:	2300      	movs	r3, #0
 8001c84:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001c86:	2303      	movs	r3, #3
 8001c88:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9fb 	bl	800108c <bmp2_set_config>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff fa2d 	bl	8001102 <bmp2_set_power_mode>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001cac:	f107 0108 	add.w	r1, r7, #8
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fab8 	bl	800122c <bmp2_compute_meas_time>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b096      	sub	sp, #88	; 0x58
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
 8001cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	f107 0318 	add.w	r3, r7, #24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001d1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001d22:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <bmp2_spi_read+0xf4>)
 8001d28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d30:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <bmp2_spi_read+0xf8>)
 8001d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d36:	2200      	movs	r2, #0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f001 fe7b 	bl	8003a34 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f107 0214 	add.w	r2, r7, #20
 8001d4a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d4e:	2005      	movs	r0, #5
 8001d50:	9000      	str	r0, [sp, #0]
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <bmp2_spi_read+0xfc>)
 8001d54:	f003 fb45 	bl	80053e2 <HAL_SPI_TransmitReceive>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d64:	e012      	b.n	8001d8c <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001d66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <bmp2_spi_read+0xf4>)
 8001d6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d70:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <bmp2_spi_read+0xf8>)
 8001d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f001 fe59 	bl	8003a34 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d86:	3301      	adds	r3, #1
 8001d88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d8c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d9e8      	bls.n	8001d66 <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001d94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001d9c:	23ff      	movs	r3, #255	; 0xff
 8001d9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4619      	mov	r1, r3
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f006 fd2b 	bl	8008808 <memcpy>

  return iError;
 8001db2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3750      	adds	r7, #80	; 0x50
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	200002a8 	.word	0x200002a8

08001dcc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001e06:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001e08:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	3301      	adds	r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f006 fcf7 	bl	8008808 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <bmp2_spi_write+0xd4>)
 8001e20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <bmp2_spi_write+0xd8>)
 8001e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	f001 fdff 	bl	8003a34 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	f107 0110 	add.w	r1, r7, #16
 8001e42:	2305      	movs	r3, #5
 8001e44:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <bmp2_spi_write+0xdc>)
 8001e46:	f003 f95e 	bl	8005106 <HAL_SPI_Transmit>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e56:	e012      	b.n	8001e7e <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001e58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e5c:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <bmp2_spi_write+0xd4>)
 8001e5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <bmp2_spi_write+0xd8>)
 8001e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f001 fde0 	bl	8003a34 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d9e8      	bls.n	8001e58 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001e86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001e8e:	23ff      	movs	r3, #255	; 0xff
 8001e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001e94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3730      	adds	r7, #48	; 0x30
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	200002a8 	.word	0x200002a8

08001eac <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <bmp2_delay_us+0x24>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fa43 	bl	800334c <HAL_Delay>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001edc:	23ff      	movs	r3, #255	; 0xff
 8001ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <BMP2_ReadTemperature_degC+0x78>)
 8001ee8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001eec:	230a      	movs	r3, #10
 8001eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f8d6 	bl	80010aa <bmp2_get_status>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f90e 	bl	800112c <bmp2_get_sensor_data>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001f16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001f2c:	7f3b      	ldrb	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <BMP2_ReadTemperature_degC+0x66>
 8001f32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dcdb      	bgt.n	8001ef2 <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f42:	eeb0 0b47 	vmov.f64	d0, d7
 8001f46:	3730      	adds	r7, #48	; 0x30
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	bff00000 	.word	0xbff00000

08001f50 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a84      	ldr	r2, [pc, #528]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a7e      	ldr	r2, [pc, #504]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a78      	ldr	r2, [pc, #480]	; (800217c <MX_GPIO_Init+0x22c>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a6c      	ldr	r2, [pc, #432]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <MX_GPIO_Init+0x22c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff6:	4b61      	ldr	r3, [pc, #388]	; (800217c <MX_GPIO_Init+0x22c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a60      	ldr	r2, [pc, #384]	; (800217c <MX_GPIO_Init+0x22c>)
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b5e      	ldr	r3, [pc, #376]	; (800217c <MX_GPIO_Init+0x22c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f640 0118 	movw	r1, #2072	; 0x818
 8002014:	485a      	ldr	r0, [pc, #360]	; (8002180 <MX_GPIO_Init+0x230>)
 8002016:	f001 fd0d 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002020:	4858      	ldr	r0, [pc, #352]	; (8002184 <MX_GPIO_Init+0x234>)
 8002022:	f001 fd07 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2140      	movs	r1, #64	; 0x40
 800202a:	4857      	ldr	r0, [pc, #348]	; (8002188 <MX_GPIO_Init+0x238>)
 800202c:	f001 fd02 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 8002030:	2200      	movs	r2, #0
 8002032:	21f8      	movs	r1, #248	; 0xf8
 8002034:	4855      	ldr	r0, [pc, #340]	; (800218c <MX_GPIO_Init+0x23c>)
 8002036:	f001 fcfd 	bl	8003a34 <HAL_GPIO_WritePin>
                          |LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin;
 800203a:	f640 0318 	movw	r3, #2072	; 0x818
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	484b      	ldr	r0, [pc, #300]	; (8002180 <MX_GPIO_Init+0x230>)
 8002054:	f001 fb42 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205e:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <MX_GPIO_Init+0x240>)
 8002060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4849      	ldr	r0, [pc, #292]	; (8002194 <MX_GPIO_Init+0x244>)
 800206e:	f001 fb35 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002072:	2332      	movs	r3, #50	; 0x32
 8002074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002082:	230b      	movs	r3, #11
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	4619      	mov	r1, r3
 800208c:	4841      	ldr	r0, [pc, #260]	; (8002194 <MX_GPIO_Init+0x244>)
 800208e:	f001 fb25 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002092:	2386      	movs	r3, #134	; 0x86
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a2:	230b      	movs	r3, #11
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	483a      	ldr	r0, [pc, #232]	; (8002198 <MX_GPIO_Init+0x248>)
 80020ae:	f001 fb15 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020b2:	f244 0381 	movw	r3, #16513	; 0x4081
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	482e      	ldr	r0, [pc, #184]	; (8002184 <MX_GPIO_Init+0x234>)
 80020cc:	f001 fb06 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e2:	230b      	movs	r3, #11
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	4825      	ldr	r0, [pc, #148]	; (8002184 <MX_GPIO_Init+0x234>)
 80020ee:	f001 faf5 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020f2:	2340      	movs	r3, #64	; 0x40
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	481f      	ldr	r0, [pc, #124]	; (8002188 <MX_GPIO_Init+0x238>)
 800210a:	f001 fae7 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4819      	ldr	r0, [pc, #100]	; (8002188 <MX_GPIO_Init+0x238>)
 8002122:	f001 fadb 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 8002126:	23f8      	movs	r3, #248	; 0xf8
 8002128:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4813      	ldr	r0, [pc, #76]	; (800218c <MX_GPIO_Init+0x23c>)
 800213e:	f001 facd 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002142:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002154:	230b      	movs	r3, #11
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <MX_GPIO_Init+0x238>)
 8002160:	f001 fabc 	bl	80036dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2028      	movs	r0, #40	; 0x28
 800216a:	f001 f9ee 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800216e:	2028      	movs	r0, #40	; 0x28
 8002170:	f001 fa07 	bl	8003582 <HAL_NVIC_EnableIRQ>

}
 8002174:	bf00      	nop
 8002176:	3730      	adds	r7, #48	; 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	40021000 	.word	0x40021000
 8002184:	40020400 	.word	0x40020400
 8002188:	40021800 	.word	0x40021800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	10110000 	.word	0x10110000
 8002194:	40020800 	.word	0x40020800
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b090      	sub	sp, #64	; 0x40
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a72      	ldr	r2, [pc, #456]	; (8002374 <HAL_UART_RxCpltCallback+0x1d8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	f040 80de 	bne.w	800236c <HAL_UART_RxCpltCallback+0x1d0>
	{
		uint8_t tx_buffer[32];

		if(Data[0]=='C')
 80021b0:	4b71      	ldr	r3, [pc, #452]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b43      	cmp	r3, #67	; 0x43
 80021b6:	d159      	bne.n	800226c <HAL_UART_RxCpltCallback+0xd0>
		{
			sscanf((char*)&Data[1], "%f", &PWM_Control_Fan);
 80021b8:	4a70      	ldr	r2, [pc, #448]	; (800237c <HAL_UART_RxCpltCallback+0x1e0>)
 80021ba:	4971      	ldr	r1, [pc, #452]	; (8002380 <HAL_UART_RxCpltCallback+0x1e4>)
 80021bc:	4871      	ldr	r0, [pc, #452]	; (8002384 <HAL_UART_RxCpltCallback+0x1e8>)
 80021be:	f007 f9a7 	bl	8009510 <siscanf>
			if(PWM_Control_Fan>= 0 && PWM_Control_Fan<= 1000)
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <HAL_UART_RxCpltCallback+0x1e0>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	db35      	blt.n	800223e <HAL_UART_RxCpltCallback+0xa2>
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_UART_RxCpltCallback+0x1e0>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002388 <HAL_UART_RxCpltCallback+0x1ec>
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	d82b      	bhi.n	800223e <HAL_UART_RxCpltCallback+0xa2>
			{
				int resp_len = sprintf((char*)tx_buffer, "Fan DUTY: %i%%\r\n", (int)(PWM_Control_Fan/10));
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_UART_RxCpltCallback+0x1e0>)
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	ee17 2a90 	vmov	r2, s15
 8002200:	4962      	ldr	r1, [pc, #392]	; (800238c <HAL_UART_RxCpltCallback+0x1f0>)
 8002202:	4618      	mov	r0, r3
 8002204:	f007 f964 	bl	80094d0 <siprintf>
 8002208:	6338      	str	r0, [r7, #48]	; 0x30
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	b29a      	uxth	r2, r3
 800220e:	f107 010c 	add.w	r1, r7, #12
 8002212:	230a      	movs	r3, #10
 8002214:	485e      	ldr	r0, [pc, #376]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002216:	f004 ff79 	bl	800710c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 800221a:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <HAL_UART_RxCpltCallback+0x1f8>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	4955      	ldr	r1, [pc, #340]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 8002222:	485b      	ldr	r0, [pc, #364]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002224:	f005 f805 	bl	8007232 <HAL_UART_Receive_IT>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 8002228:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_UART_RxCpltCallback+0x1e0>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_UART_RxCpltCallback+0x1fc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002236:	ee17 2a90 	vmov	r2, s15
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
			{
 800223c:	e096      	b.n	800236c <HAL_UART_RxCpltCallback+0x1d0>
			}
			else
			{
				int resp_len = sprintf((char*)tx_buffer, "Wrong DUTY\r\n");
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4956      	ldr	r1, [pc, #344]	; (800239c <HAL_UART_RxCpltCallback+0x200>)
 8002244:	4618      	mov	r0, r3
 8002246:	f007 f943 	bl	80094d0 <siprintf>
 800224a:	62f8      	str	r0, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	b29a      	uxth	r2, r3
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	230a      	movs	r3, #10
 8002256:	484e      	ldr	r0, [pc, #312]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002258:	f004 ff58 	bl	800710c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 800225c:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_UART_RxCpltCallback+0x1f8>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4945      	ldr	r1, [pc, #276]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 8002264:	484a      	ldr	r0, [pc, #296]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002266:	f004 ffe4 	bl	8007232 <HAL_UART_Receive_IT>
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
		}
	}
}
 800226a:	e07f      	b.n	800236c <HAL_UART_RxCpltCallback+0x1d0>
		else if(Data[0]=='H')
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b48      	cmp	r3, #72	; 0x48
 8002272:	d159      	bne.n	8002328 <HAL_UART_RxCpltCallback+0x18c>
			sscanf((char*)&Data[1], "%f", &PWM_Control_Heater);
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_UART_RxCpltCallback+0x204>)
 8002276:	4942      	ldr	r1, [pc, #264]	; (8002380 <HAL_UART_RxCpltCallback+0x1e4>)
 8002278:	4842      	ldr	r0, [pc, #264]	; (8002384 <HAL_UART_RxCpltCallback+0x1e8>)
 800227a:	f007 f949 	bl	8009510 <siscanf>
			if(PWM_Control_Heater>= 0 && PWM_Control_Heater<= 1000)
 800227e:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <HAL_UART_RxCpltCallback+0x204>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	db35      	blt.n	80022fa <HAL_UART_RxCpltCallback+0x15e>
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_UART_RxCpltCallback+0x204>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002388 <HAL_UART_RxCpltCallback+0x1ec>
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d82b      	bhi.n	80022fa <HAL_UART_RxCpltCallback+0x15e>
				int resp_len = sprintf((char*)tx_buffer, "Heater DUTY: %i%%\r\n", (int)(PWM_Control_Heater/10));
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_UART_RxCpltCallback+0x204>)
 80022a4:	ed93 7a00 	vldr	s14, [r3]
 80022a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	ee17 2a90 	vmov	r2, s15
 80022bc:	4939      	ldr	r1, [pc, #228]	; (80023a4 <HAL_UART_RxCpltCallback+0x208>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f007 f906 	bl	80094d0 <siprintf>
 80022c4:	63b8      	str	r0, [r7, #56]	; 0x38
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f107 010c 	add.w	r1, r7, #12
 80022ce:	230a      	movs	r3, #10
 80022d0:	482f      	ldr	r0, [pc, #188]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 80022d2:	f004 ff1b 	bl	800710c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len2);
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_UART_RxCpltCallback+0x20c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	4926      	ldr	r1, [pc, #152]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 80022de:	482c      	ldr	r0, [pc, #176]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 80022e0:	f004 ffa7 	bl	8007232 <HAL_UART_Receive_IT>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_UART_RxCpltCallback+0x204>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_UART_RxCpltCallback+0x1fc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f2:	ee17 2a90 	vmov	r2, s15
 80022f6:	635a      	str	r2, [r3, #52]	; 0x34
			{
 80022f8:	e038      	b.n	800236c <HAL_UART_RxCpltCallback+0x1d0>
				int resp_len = sprintf((char*)tx_buffer, "Wrong DUTY\r\n");
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4927      	ldr	r1, [pc, #156]	; (800239c <HAL_UART_RxCpltCallback+0x200>)
 8002300:	4618      	mov	r0, r3
 8002302:	f007 f8e5 	bl	80094d0 <siprintf>
 8002306:	6378      	str	r0, [r7, #52]	; 0x34
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	b29a      	uxth	r2, r3
 800230c:	f107 010c 	add.w	r1, r7, #12
 8002310:	230a      	movs	r3, #10
 8002312:	481f      	ldr	r0, [pc, #124]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002314:	f004 fefa 	bl	800710c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_UART_RxCpltCallback+0x1f8>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4916      	ldr	r1, [pc, #88]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 8002320:	481b      	ldr	r0, [pc, #108]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002322:	f004 ff86 	bl	8007232 <HAL_UART_Receive_IT>
}
 8002326:	e021      	b.n	800236c <HAL_UART_RxCpltCallback+0x1d0>
			sscanf((char*)&Data[0], "%f", &temperature_reference);
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_UART_RxCpltCallback+0x210>)
 800232a:	4915      	ldr	r1, [pc, #84]	; (8002380 <HAL_UART_RxCpltCallback+0x1e4>)
 800232c:	4812      	ldr	r0, [pc, #72]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 800232e:	f007 f8ef 	bl	8009510 <siscanf>
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_UART_RxCpltCallback+0x210>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800233c:	f107 000c 	add.w	r0, r7, #12
 8002340:	ec53 2b17 	vmov	r2, r3, d7
 8002344:	491a      	ldr	r1, [pc, #104]	; (80023b0 <HAL_UART_RxCpltCallback+0x214>)
 8002346:	f007 f8c3 	bl	80094d0 <siprintf>
 800234a:	63f8      	str	r0, [r7, #60]	; 0x3c
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	b29a      	uxth	r2, r3
 8002350:	f107 010c 	add.w	r1, r7, #12
 8002354:	230a      	movs	r3, #10
 8002356:	480e      	ldr	r0, [pc, #56]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002358:	f004 fed8 	bl	800710c <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_UART_RxCpltCallback+0x1f8>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4905      	ldr	r1, [pc, #20]	; (8002378 <HAL_UART_RxCpltCallback+0x1dc>)
 8002364:	480a      	ldr	r0, [pc, #40]	; (8002390 <HAL_UART_RxCpltCallback+0x1f4>)
 8002366:	f004 ff64 	bl	8007232 <HAL_UART_Receive_IT>
}
 800236a:	e7ff      	b.n	800236c <HAL_UART_RxCpltCallback+0x1d0>
 800236c:	bf00      	nop
 800236e:	3740      	adds	r7, #64	; 0x40
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40004800 	.word	0x40004800
 8002378:	20000290 	.word	0x20000290
 800237c:	200002a0 	.word	0x200002a0
 8002380:	0800d850 	.word	0x0800d850
 8002384:	20000291 	.word	0x20000291
 8002388:	447a0000 	.word	0x447a0000
 800238c:	0800d854 	.word	0x0800d854
 8002390:	2000043c 	.word	0x2000043c
 8002394:	20000288 	.word	0x20000288
 8002398:	20000358 	.word	0x20000358
 800239c:	0800d868 	.word	0x0800d868
 80023a0:	200002a4 	.word	0x200002a4
 80023a4:	0800d878 	.word	0x0800d878
 80023a8:	20000286 	.word	0x20000286
 80023ac:	20000298 	.word	0x20000298
 80023b0:	0800d88c 	.word	0x0800d88c

080023b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0a0      	sub	sp, #128	; 0x80
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d12e      	bne.n	8002424 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		char str_buffer[100];
		int n;

#ifdef BMP2_VER_2021
		float temp = BMP2_ReadTemperature_degC(&hbmp2_1);
 80023c6:	4819      	ldr	r0, [pc, #100]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023c8:	f7ff fd84 	bl	8001ed4 <BMP2_ReadTemperature_degC>
 80023cc:	eeb0 7b40 	vmov.f64	d7, d0
 80023d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		float temp_ref = temperature_reference;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	673b      	str	r3, [r7, #112]	; 0x70
		n = sprintf(str_buffer, "{\"Current Temperature\": %2.02f *C} {\"Reference Temperature\": %2.02f *C}\r\n", temp, temp_ref);
 80023de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80023e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023e6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023ee:	f107 0008 	add.w	r0, r7, #8
 80023f2:	ed8d 7b00 	vstr	d7, [sp]
 80023f6:	ec53 2b16 	vmov	r2, r3, d6
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023fc:	f007 f868 	bl	80094d0 <siprintf>
 8002400:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

		str_buffer[n] = '\n';
 8002402:	f107 0208 	add.w	r2, r7, #8
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	4413      	add	r3, r2
 800240a:	220a      	movs	r2, #10
 800240c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+1, 1000);
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002410:	b29b      	uxth	r3, r3
 8002412:	3301      	adds	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	f107 0108 	add.w	r1, r7, #8
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002420:	f004 fe74 	bl	800710c <HAL_UART_Transmit>
	}
}
 8002424:	bf00      	nop
 8002426:	3778      	adds	r7, #120	; 0x78
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000010 	.word	0x20000010
 8002430:	20000298 	.word	0x20000298
 8002434:	0800d89c 	.word	0x0800d89c
 8002438:	2000043c 	.word	0x2000043c
 800243c:	00000000 	.word	0x00000000

08002440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002446:	f000 ff24 	bl	8003292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244a:	f000 f94f 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244e:	f7ff fd7f 	bl	8001f50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002452:	f000 fdef 	bl	8003034 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002456:	f000 fe69 	bl	800312c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 800245a:	f000 f9e7 	bl	800282c <MX_SPI4_Init>
  MX_TIM2_Init();
 800245e:	f000 fbd9 	bl	8002c14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002462:	f000 fc25 	bl	8002cb0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002466:	f000 fcb1 	bl	8002dcc <MX_TIM5_Init>
  MX_TIM7_Init();
 800246a:	f000 fcfd 	bl	8002e68 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800246e:	2100      	movs	r1, #0
 8002470:	4887      	ldr	r0, [pc, #540]	; (8002690 <main+0x250>)
 8002472:	f003 fd7b 	bl	8005f6c <HAL_TIM_PWM_Start>
	PWM_Control_Heater = 0;
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <main+0x254>)
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <main+0x254>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	4b82      	ldr	r3, [pc, #520]	; (8002690 <main+0x250>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248c:	ee17 2a90 	vmov	r2, s15
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002492:	2104      	movs	r1, #4
 8002494:	487e      	ldr	r0, [pc, #504]	; (8002690 <main+0x250>)
 8002496:	f003 fd69 	bl	8005f6c <HAL_TIM_PWM_Start>
	PWM_Control_Fan = 0;
 800249a:	4b7f      	ldr	r3, [pc, #508]	; (8002698 <main+0x258>)
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <main+0x258>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	4b79      	ldr	r3, [pc, #484]	; (8002690 <main+0x250>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 2a90 	vmov	r2, s15
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38

	PID.Kp = 1.3;
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <main+0x25c>)
 80024b8:	4a79      	ldr	r2, [pc, #484]	; (80026a0 <main+0x260>)
 80024ba:	619a      	str	r2, [r3, #24]
	PID.Ki = 0.001*Tp;
 80024bc:	eddf 7a79 	vldr	s15, [pc, #484]	; 80026a4 <main+0x264>
 80024c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024c4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8002680 <main+0x240>
 80024c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <main+0x25c>)
 80024d2:	edc3 7a07 	vstr	s15, [r3, #28]
	PID.Kd = 3.3/Tp;
 80024d6:	eddf 7a73 	vldr	s15, [pc, #460]	; 80026a4 <main+0x264>
 80024da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024de:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8002688 <main+0x248>
 80024e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ea:	4b6c      	ldr	r3, [pc, #432]	; (800269c <main+0x25c>)
 80024ec:	edc3 7a08 	vstr	s15, [r3, #32]
	arm_pid_init_f32(&PID, 1);
 80024f0:	2101      	movs	r1, #1
 80024f2:	486a      	ldr	r0, [pc, #424]	; (800269c <main+0x25c>)
 80024f4:	f006 f940 	bl	8008778 <arm_pid_init_f32>

	temperature_reference = 30.00;
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <main+0x268>)
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <main+0x26c>)
 80024fc:	601a      	str	r2, [r3, #0]

	LCD_init();
 80024fe:	f7fe fa85 	bl	8000a0c <LCD_init>
	LCD_write_command(LCD_CLEAR_INSTRUCTION);
 8002502:	2001      	movs	r0, #1
 8002504:	f7fe fbcd 	bl	8000ca2 <LCD_write_command>
//	LCD_printf("%f",temperature_reference);
//	LCD_goto_line(1);
//	LCD_write_text("Temp cur: ");
//	LCD_printf("%f",temperature_current);
//	LCD_printf("temp: ", "%f",temperature_reference);
	msg_len = strlen("C000\r");
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <main+0x270>)
 800250a:	2205      	movs	r2, #5
 800250c:	801a      	strh	r2, [r3, #0]
	msg_len2 = strlen("H000\r");
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <main+0x274>)
 8002510:	2205      	movs	r2, #5
 8002512:	801a      	strh	r2, [r3, #0]

#ifdef BMP2_VER_2021
	BMP2_Init(&hbmp2_1);
 8002514:	4868      	ldr	r0, [pc, #416]	; (80026b8 <main+0x278>)
 8002516:	f7ff fba1 	bl	8001c5c <BMP2_Init>
#endif

	HAL_TIM_Base_Start_IT(&htim2);
 800251a:	4868      	ldr	r0, [pc, #416]	; (80026bc <main+0x27c>)
 800251c:	f003 fc4c 	bl	8005db8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002520:	4867      	ldr	r0, [pc, #412]	; (80026c0 <main+0x280>)
 8002522:	f003 fc49 	bl	8005db8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8002526:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <main+0x270>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4965      	ldr	r1, [pc, #404]	; (80026c4 <main+0x284>)
 800252e:	4866      	ldr	r0, [pc, #408]	; (80026c8 <main+0x288>)
 8002530:	f004 fe7f 	bl	8007232 <HAL_UART_Receive_IT>
		//			LCD_Locate(0,0);
		//			LCD_String(" STM32");
		//			LCD_Locate(0,1);
		//			LCD_String("www.msalamon.pl ");

		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1);
 8002534:	4860      	ldr	r0, [pc, #384]	; (80026b8 <main+0x278>)
 8002536:	f7ff fccd 	bl	8001ed4 <BMP2_ReadTemperature_degC>
 800253a:	eeb0 7b40 	vmov.f64	d7, d0
 800253e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002542:	4b62      	ldr	r3, [pc, #392]	; (80026cc <main+0x28c>)
 8002544:	edc3 7a00 	vstr	s15, [r3]
		temperature_error = temperature_reference - temperature_current;
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <main+0x268>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <main+0x28c>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <main+0x290>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
		PWM_Control_Heater = 999.0*arm_pid_f32(&PID, temperature_error);
 800255e:	4b5c      	ldr	r3, [pc, #368]	; (80026d0 <main+0x290>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <main+0x25c>)
 8002564:	60fa      	str	r2, [r7, #12]
 8002566:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002572:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 6a01 	vldr	s13, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	edd3 7a04 	vldr	s15, [r3, #16]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80025c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80026d4 <main+0x294>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <main+0x254>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]

		//Saturation limit
		if(PWM_Control_Heater < 0)
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <main+0x254>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e0:	d503      	bpl.n	80025ea <main+0x1aa>
		{
			Heater_PWM_Duty = 0;
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <main+0x298>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e018      	b.n	800261c <main+0x1dc>
		}
		else if(PWM_Control_Heater > 999.0)
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <main+0x254>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80026d4 <main+0x294>
 80025f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd04      	ble.n	8002608 <main+0x1c8>
		{
			Heater_PWM_Duty = 999;
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <main+0x298>)
 8002600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	e009      	b.n	800261c <main+0x1dc>
		}
		else
		{
			Heater_PWM_Duty = (uint16_t)PWM_Control_Heater;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <main+0x254>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002612:	ee17 3a90 	vmov	r3, s15
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <main+0x298>)
 800261a:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Heater_PWM_Duty);
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <main+0x298>)
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <main+0x250>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
		//				{
		//					PWM_Control_Fan = 0;
		//					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
		//				}

			LCD_write_text("Temp ref:");
 8002626:	482d      	ldr	r0, [pc, #180]	; (80026dc <main+0x29c>)
 8002628:	f7fe fb76 	bl	8000d18 <LCD_write_text>
			LCD_printf("%2.02f",temperature_reference);
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <main+0x268>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002636:	ec53 2b17 	vmov	r2, r3, d7
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <main+0x2a0>)
 800263c:	f7fe fbb6 	bl	8000dac <LCD_printf>
			LCD_printf(" C");
 8002640:	4828      	ldr	r0, [pc, #160]	; (80026e4 <main+0x2a4>)
 8002642:	f7fe fbb3 	bl	8000dac <LCD_printf>
			LCD_goto_line(1);
 8002646:	2001      	movs	r0, #1
 8002648:	f7fe fba2 	bl	8000d90 <LCD_goto_line>
			LCD_write_text("Temp cur:");
 800264c:	4826      	ldr	r0, [pc, #152]	; (80026e8 <main+0x2a8>)
 800264e:	f7fe fb63 	bl	8000d18 <LCD_write_text>
			LCD_printf("%2.02f",temperature_current);
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <main+0x28c>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265c:	ec53 2b17 	vmov	r2, r3, d7
 8002660:	481f      	ldr	r0, [pc, #124]	; (80026e0 <main+0x2a0>)
 8002662:	f7fe fba3 	bl	8000dac <LCD_printf>
			LCD_write_text(" C");
 8002666:	481f      	ldr	r0, [pc, #124]	; (80026e4 <main+0x2a4>)
 8002668:	f7fe fb56 	bl	8000d18 <LCD_write_text>
			LCD_goto_line(2);
 800266c:	2002      	movs	r0, #2
 800266e:	f7fe fb8f 	bl	8000d90 <LCD_goto_line>

		HAL_Delay(10);
 8002672:	200a      	movs	r0, #10
 8002674:	f000 fe6a 	bl	800334c <HAL_Delay>
		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1);
 8002678:	e75c      	b.n	8002534 <main+0xf4>
 800267a:	bf00      	nop
 800267c:	f3af 8000 	nop.w
 8002680:	d2f1a9fc 	.word	0xd2f1a9fc
 8002684:	3f50624d 	.word	0x3f50624d
 8002688:	66666666 	.word	0x66666666
 800268c:	400a6666 	.word	0x400a6666
 8002690:	20000358 	.word	0x20000358
 8002694:	200002a4 	.word	0x200002a4
 8002698:	200002a0 	.word	0x200002a0
 800269c:	20000260 	.word	0x20000260
 80026a0:	3fa66666 	.word	0x3fa66666
 80026a4:	3c1374bc 	.word	0x3c1374bc
 80026a8:	20000298 	.word	0x20000298
 80026ac:	41f00000 	.word	0x41f00000
 80026b0:	20000288 	.word	0x20000288
 80026b4:	20000286 	.word	0x20000286
 80026b8:	20000010 	.word	0x20000010
 80026bc:	200003a4 	.word	0x200003a4
 80026c0:	200003f0 	.word	0x200003f0
 80026c4:	20000290 	.word	0x20000290
 80026c8:	2000043c 	.word	0x2000043c
 80026cc:	2000025c 	.word	0x2000025c
 80026d0:	2000028c 	.word	0x2000028c
 80026d4:	4479c000 	.word	0x4479c000
 80026d8:	20000284 	.word	0x20000284
 80026dc:	0800d8e8 	.word	0x0800d8e8
 80026e0:	0800d8f4 	.word	0x0800d8f4
 80026e4:	0800d8fc 	.word	0x0800d8fc
 80026e8:	0800d900 	.word	0x0800d900

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0b8      	sub	sp, #224	; 0xe0
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026f6:	2234      	movs	r2, #52	; 0x34
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f006 f892 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	2290      	movs	r2, #144	; 0x90
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f006 f883 	bl	8008824 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800271e:	f001 fb0f 	bl	8003d40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <SystemClock_Config+0x128>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <SystemClock_Config+0x128>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <SystemClock_Config+0x128>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <SystemClock_Config+0x12c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002742:	4a35      	ldr	r2, [pc, #212]	; (8002818 <SystemClock_Config+0x12c>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b33      	ldr	r3, [pc, #204]	; (8002818 <SystemClock_Config+0x12c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002756:	2301      	movs	r3, #1
 8002758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800275c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800276e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002772:	2304      	movs	r3, #4
 8002774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002778:	2360      	movs	r3, #96	; 0x60
 800277a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002784:	2304      	movs	r3, #4
 8002786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002790:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002794:	4618      	mov	r0, r3
 8002796:	f001 fb33 	bl	8003e00 <HAL_RCC_OscConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80027a0:	f000 f83e 	bl	8002820 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027a4:	f001 fadc 	bl	8003d60 <HAL_PWREx_EnableOverDrive>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027ae:	f000 f837 	bl	8002820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b2:	230f      	movs	r3, #15
 80027b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027d6:	2103      	movs	r1, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fdbf 	bl	800435c <HAL_RCC_ClockConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80027e4:	f000 f81c 	bl	8002820 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <SystemClock_Config+0x130>)
 80027ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 ffb0 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8002806:	f000 f80b 	bl	8002820 <Error_Handler>
  }
}
 800280a:	bf00      	nop
 800280c:	37e0      	adds	r7, #224	; 0xe0
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
 800281c:	00200100 	.word	0x00200100

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002828:	e7fe      	b.n	8002828 <Error_Handler+0x8>
	...

0800282c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <MX_SPI4_Init+0x78>)
 8002834:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800283c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002846:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800284a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_SPI4_Init+0x74>)
 800284e:	2202      	movs	r2, #2
 8002850:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002854:	2201      	movs	r2, #1
 8002856:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_SPI4_Init+0x74>)
 800285a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002862:	2210      	movs	r2, #16
 8002864:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_SPI4_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_SPI4_Init+0x74>)
 800287a:	2207      	movs	r2, #7
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_SPI4_Init+0x74>)
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_SPI4_Init+0x74>)
 800288c:	f002 fb90 	bl	8004fb0 <HAL_SPI_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002896:	f7ff ffc3 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200002a8 	.word	0x200002a8
 80028a4:	40013400 	.word	0x40013400

080028a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12f      	bne.n	800292a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028e8:	f043 0310 	orr.w	r3, r3, #16
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_SPI_MspInit+0x90>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80028fa:	2364      	movs	r3, #100	; 0x64
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800290a:	2305      	movs	r3, #5
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4809      	ldr	r0, [pc, #36]	; (800293c <HAL_SPI_MspInit+0x94>)
 8002916:	f000 fee1 	bl	80036dc <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	2054      	movs	r0, #84	; 0x54
 8002920:	f000 fe13 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002924:	2054      	movs	r0, #84	; 0x54
 8002926:	f000 fe2c 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800292a:	bf00      	nop
 800292c:	3728      	adds	r7, #40	; 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40013400 	.word	0x40013400
 8002938:	40023800 	.word	0x40023800
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_MspInit+0x44>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_MspInit+0x44>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_MspInit+0x44>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_MspInit+0x44>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <HAL_MspInit+0x44>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_MspInit+0x44>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800298c:	e7fe      	b.n	800298c <NMI_Handler+0x4>

0800298e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <HardFault_Handler+0x4>

08002994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <MemManage_Handler+0x4>

0800299a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299e:	e7fe      	b.n	800299e <BusFault_Handler+0x4>

080029a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <UsageFault_Handler+0x4>

080029a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d4:	f000 fc9a 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}

080029dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM2_IRQHandler+0x10>)
 80029e2:	f003 fbbd 	bl	8006160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200003a4 	.word	0x200003a4

080029f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <TIM3_IRQHandler+0x10>)
 80029f6:	f003 fbb3 	bl	8006160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000358 	.word	0x20000358

08002a04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <USART3_IRQHandler+0x10>)
 8002a0a:	f004 fc4f 	bl	80072ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000043c 	.word	0x2000043c

08002a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a20:	f001 f822 	bl	8003a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <TIM5_IRQHandler+0x10>)
 8002a2e:	f003 fb97 	bl	8006160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000030c 	.word	0x2000030c

08002a3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <TIM7_IRQHandler+0x10>)
 8002a42:	f003 fb8d 	bl	8006160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200003f0 	.word	0x200003f0

08002a50 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <SPI4_IRQHandler+0x10>)
 8002a56:	f002 fed7 	bl	8005808 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200002a8 	.word	0x200002a8

08002a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
	return 1;
 8002a68:	2301      	movs	r3, #1
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_kill>:

int _kill(int pid, int sig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a7e:	f005 fe99 	bl	80087b4 <__errno>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2216      	movs	r2, #22
 8002a86:	601a      	str	r2, [r3, #0]
	return -1;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_exit>:

void _exit (int status)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ffe7 	bl	8002a74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aa6:	e7fe      	b.n	8002aa6 <_exit+0x12>

08002aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	e00a      	b.n	8002ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aba:	f3af 8000 	nop.w
 8002abe:	4601      	mov	r1, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	b2ca      	uxtb	r2, r1
 8002ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	dbf0      	blt.n	8002aba <_read+0x12>
	}

return len;
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e009      	b.n	8002b08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dbf1      	blt.n	8002af4 <_write+0x12>
	}
	return len;
 8002b10:	687b      	ldr	r3, [r7, #4]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_close>:

int _close(int file)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	return -1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b42:	605a      	str	r2, [r3, #4]
	return 0;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <_isatty>:

int _isatty(int file)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
	return 1;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b8c:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <_sbrk+0x5c>)
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <_sbrk+0x60>)
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <_sbrk+0x64>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <_sbrk+0x68>)
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d207      	bcs.n	8002bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb4:	f005 fdfe 	bl	80087b4 <__errno>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	220c      	movs	r2, #12
 8002bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e009      	b.n	8002bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <_sbrk+0x64>)
 8002bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20080000 	.word	0x20080000
 8002be4:	00000400 	.word	0x00000400
 8002be8:	20000248 	.word	0x20000248
 8002bec:	200008d8 	.word	0x200008d8

08002bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <SystemInit+0x20>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <SystemInit+0x20>)
 8002bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c3c:	225f      	movs	r2, #95	; 0x5f
 8002c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c48:	4a18      	ldr	r2, [pc, #96]	; (8002cac <MX_TIM2_Init+0x98>)
 8002c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c58:	4813      	ldr	r0, [pc, #76]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c5a:	f003 f855 	bl	8005d08 <HAL_TIM_Base_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c64:	f7ff fddc 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	4619      	mov	r1, r3
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c76:	f003 fca3 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c80:	f7ff fdce 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_TIM2_Init+0x94>)
 8002c92:	f004 f941 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c9c:	f7ff fdc0 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200003a4 	.word	0x200003a4
 8002cac:	000f423f 	.word	0x000f423f

08002cb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <MX_TIM3_Init+0x118>)
 8002ce6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002cea:	225f      	movs	r2, #95	; 0x5f
 8002cec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d08:	482e      	ldr	r0, [pc, #184]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d0a:	f002 fffd 	bl	8005d08 <HAL_TIM_Base_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d14:	f7ff fd84 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d22:	4619      	mov	r1, r3
 8002d24:	4827      	ldr	r0, [pc, #156]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d26:	f003 fc4b 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d30:	f7ff fd76 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d34:	4823      	ldr	r0, [pc, #140]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d36:	f003 f8b7 	bl	8005ea8 <HAL_TIM_PWM_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d40:	f7ff fd6e 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	4619      	mov	r1, r3
 8002d52:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d54:	f004 f8e0 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d5e:	f7ff fd5f 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d62:	2360      	movs	r3, #96	; 0x60
 8002d64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4812      	ldr	r0, [pc, #72]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d7a:	f003 fb11 	bl	80063a0 <HAL_TIM_PWM_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d84:	f7ff fd4c 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002d90:	f003 fb06 	bl	80063a0 <HAL_TIM_PWM_ConfigChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d9a:	f7ff fd41 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	2208      	movs	r2, #8
 8002da2:	4619      	mov	r1, r3
 8002da4:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002da6:	f003 fafb 	bl	80063a0 <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002db0:	f7ff fd36 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002db4:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <MX_TIM3_Init+0x114>)
 8002db6:	f000 f905 	bl	8002fc4 <HAL_TIM_MspPostInit>

}
 8002dba:	bf00      	nop
 8002dbc:	3738      	adds	r7, #56	; 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000358 	.word	0x20000358
 8002dc8:	40000400 	.word	0x40000400

08002dcc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <MX_TIM5_Init+0x98>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002df2:	225f      	movs	r2, #95	; 0x5f
 8002df4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002dfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e12:	f002 ff79 	bl	8005d08 <HAL_TIM_Base_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002e1c:	f7ff fd00 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e2e:	f003 fbc7 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002e38:	f7ff fcf2 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <MX_TIM5_Init+0x94>)
 8002e4a:	f004 f865 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f7ff fce4 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000030c 	.word	0x2000030c
 8002e64:	40000c00 	.word	0x40000c00

08002e68 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <MX_TIM7_Init+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 95;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e80:	225f      	movs	r2, #95	; 0x5f
 8002e82:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8999;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e8c:	f242 3227 	movw	r2, #8999	; 0x2327
 8002e90:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e9a:	f002 ff35 	bl	8005d08 <HAL_TIM_Base_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ea4:	f7ff fcbc 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002eb6:	f004 f82f 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002ec0:	f7ff fcae 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200003f0 	.word	0x200003f0
 8002ed0:	40001400 	.word	0x40001400

08002ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d114      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a32      	ldr	r2, [pc, #200]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	201c      	movs	r0, #28
 8002f04:	f000 fb21 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f08:	201c      	movs	r0, #28
 8002f0a:	f000 fb3a 	bl	8003582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002f0e:	e04c      	b.n	8002faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_TIM_Base_MspInit+0xe4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d114      	bne.n	8002f44 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	201d      	movs	r0, #29
 8002f38:	f000 fb07 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f3c:	201d      	movs	r0, #29
 8002f3e:	f000 fb20 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 8002f42:	e032      	b.n	8002faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_TIM_Base_MspInit+0xe8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d114      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2032      	movs	r0, #50	; 0x32
 8002f6c:	f000 faed 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f70:	2032      	movs	r0, #50	; 0x32
 8002f72:	f000 fb06 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 8002f76:	e018      	b.n	8002faa <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_TIM_Base_MspInit+0xec>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d113      	bne.n	8002faa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f88:	f043 0320 	orr.w	r3, r3, #32
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_TIM_Base_MspInit+0xe0>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2037      	movs	r0, #55	; 0x37
 8002fa0:	f000 fad3 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fa4:	2037      	movs	r0, #55	; 0x37
 8002fa6:	f000 faec 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40001400 	.word	0x40001400

08002fc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_TIM_MspPostInit+0x64>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11c      	bne.n	8003020 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_TIM_MspPostInit+0x68>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_TIM_MspPostInit+0x68>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_TIM_MspPostInit+0x68>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002ffe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003010:	2302      	movs	r3, #2
 8003012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	4619      	mov	r1, r3
 800301a:	4805      	ldr	r0, [pc, #20]	; (8003030 <HAL_TIM_MspPostInit+0x6c>)
 800301c:	f000 fb5e 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003020:	bf00      	nop
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40000400 	.word	0x40000400
 800302c:	40023800 	.word	0x40023800
 8003030:	40020800 	.word	0x40020800

08003034 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <MX_USART3_UART_Init+0x58>)
 800303a:	4a15      	ldr	r2, [pc, #84]	; (8003090 <MX_USART3_UART_Init+0x5c>)
 800303c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_USART3_UART_Init+0x58>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_USART3_UART_Init+0x58>)
 800305a:	220c      	movs	r2, #12
 800305c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <MX_USART3_UART_Init+0x58>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_USART3_UART_Init+0x58>)
 8003078:	f003 fffa 	bl	8007070 <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003082:	f7ff fbcd 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000043c 	.word	0x2000043c
 8003090:	40004800 	.word	0x40004800

08003094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_UART_MspInit+0x8c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d130      	bne.n	8003118 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_UART_MspInit+0x90>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80030e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030f8:	2307      	movs	r3, #7
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <HAL_UART_MspInit+0x94>)
 8003104:	f000 faea 	bl	80036dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003108:	2200      	movs	r2, #0
 800310a:	2100      	movs	r1, #0
 800310c:	2027      	movs	r0, #39	; 0x27
 800310e:	f000 fa1c 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003112:	2027      	movs	r0, #39	; 0x27
 8003114:	f000 fa35 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003118:	bf00      	nop
 800311a:	3728      	adds	r7, #40	; 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40004800 	.word	0x40004800
 8003124:	40023800 	.word	0x40023800
 8003128:	40020c00 	.word	0x40020c00

0800312c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003132:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003136:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800313a:	2206      	movs	r2, #6
 800313c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003140:	2202      	movs	r2, #2
 8003142:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800314c:	2202      	movs	r2, #2
 800314e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003152:	2201      	movs	r2, #1
 8003154:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003158:	2200      	movs	r2, #0
 800315a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800315e:	2200      	movs	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003164:	2201      	movs	r2, #1
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003170:	f000 fc9d 	bl	8003aae <HAL_PCD_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800317a:	f7ff fb51 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200004c0 	.word	0x200004c0

08003188 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a8:	d141      	bne.n	800322e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80031c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80031c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031d4:	230a      	movs	r3, #10
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	4817      	ldr	r0, [pc, #92]	; (800323c <HAL_PCD_MspInit+0xb4>)
 80031e0:	f000 fa7c 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80031e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4810      	ldr	r0, [pc, #64]	; (800323c <HAL_PCD_MspInit+0xb4>)
 80031fa:	f000 fa6f 	bl	80036dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	6353      	str	r3, [r2, #52]	; 0x34
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_PCD_MspInit+0xb0>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800322e:	bf00      	nop
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40020000 	.word	0x40020000

08003240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003244:	480d      	ldr	r0, [pc, #52]	; (800327c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003246:	490e      	ldr	r1, [pc, #56]	; (8003280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800325c:	4c0b      	ldr	r4, [pc, #44]	; (800328c <LoopFillZerobss+0x26>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800326a:	f7ff fcc1 	bl	8002bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326e:	f005 faa7 	bl	80087c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003272:	f7ff f8e5 	bl	8002440 <main>
  bx  lr    
 8003276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003278:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003284:	0800de0c 	.word	0x0800de0c
  ldr r2, =_sbss
 8003288:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800328c:	200008d8 	.word	0x200008d8

08003290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC_IRQHandler>

08003292 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003296:	2003      	movs	r0, #3
 8003298:	f000 f94c 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329c:	2000      	movs	r0, #0
 800329e:	f000 f805 	bl	80032ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032a2:	f7ff fb4d 	bl	8002940 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f967 	bl	800359e <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 f92f 	bl	800354a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000004c 	.word	0x2000004c
 8003304:	20000054 	.word	0x20000054
 8003308:	20000050 	.word	0x20000050

0800330c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_IncTick+0x20>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x24>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_IncTick+0x24>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000054 	.word	0x20000054
 8003330:	200008c4 	.word	0x200008c4

08003334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return uwTick;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_GetTick+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	200008c4 	.word	0x200008c4

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff ffee 	bl	8003334 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffde 	bl	8003334 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000054 	.word	0x20000054

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00
 80033d8:	05fa0000 	.word	0x05fa0000

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff29 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff3e 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff8e 	bl	8003488 <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff31 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffa2 	bl	80034f0 <SysTick_Config>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff feb6 	bl	8003334 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e052      	b.n	800368e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0216 	bic.w	r2, r2, #22
 80035f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003606:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_DMA_Abort+0x62>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0208 	bic.w	r2, r2, #8
 8003626:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003638:	e013      	b.n	8003662 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363a:	f7ff fe7b 	bl	8003334 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b05      	cmp	r3, #5
 8003646:	d90c      	bls.n	8003662 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e015      	b.n	800368e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e4      	bne.n	800363a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	223f      	movs	r2, #63	; 0x3f
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e00c      	b.n	80036ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2205      	movs	r2, #5
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e175      	b.n	80039e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8164 	bne.w	80039e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d00b      	beq.n	800373a <HAL_GPIO_Init+0x5e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372e:	2b11      	cmp	r3, #17
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b12      	cmp	r3, #18
 8003738:	d130      	bne.n	800379c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 0201 	and.w	r2, r3, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x100>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80be 	beq.w	80039e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_GPIO_Init+0x324>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800387e:	4a61      	ldr	r2, [pc, #388]	; (8003a04 <HAL_GPIO_Init+0x328>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d037      	beq.n	800391a <HAL_GPIO_Init+0x23e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a57      	ldr	r2, [pc, #348]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_GPIO_Init+0x23a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <HAL_GPIO_Init+0x236>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x338>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x232>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_GPIO_Init+0x33c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x22e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_GPIO_Init+0x340>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x22a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_GPIO_Init+0x344>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_GPIO_Init+0x348>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_GPIO_Init+0x34c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_GPIO_Init+0x350>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038f2:	2309      	movs	r3, #9
 80038f4:	e012      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038f6:	230a      	movs	r3, #10
 80038f8:	e010      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fa:	2308      	movs	r3, #8
 80038fc:	e00e      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fe:	2307      	movs	r3, #7
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003902:	2306      	movs	r3, #6
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x240>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	; (8003a04 <HAL_GPIO_Init+0x328>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae86 	bls.w	80036fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40021c00 	.word	0x40021c00
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022400 	.word	0x40022400
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
 8003a40:	4613      	mov	r3, r2
 8003a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a44:	787b      	ldrb	r3, [r7, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a50:	e003      	b.n	8003a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f806 	bl	8003a98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40013c00 	.word	0x40013c00

08003a98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab0:	b08f      	sub	sp, #60	; 0x3c
 8003ab2:	af0a      	add	r7, sp, #40	; 0x28
 8003ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e116      	b.n	8003cee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fb54 	bl	8003188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fbda 	bl	80082b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	687e      	ldr	r6, [r7, #4]
 8003b0c:	466d      	mov	r5, sp
 8003b0e:	f106 0410 	add.w	r4, r6, #16
 8003b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b22:	1d33      	adds	r3, r6, #4
 8003b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f004 fb6e 	bl	8008208 <USB_CoreInit>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0d7      	b.n	8003cee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 fbc8 	bl	80082da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e04a      	b.n	8003be6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	333d      	adds	r3, #61	; 0x3d
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	333c      	adds	r3, #60	; 0x3c
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	b298      	uxth	r0, r3
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	3342      	adds	r3, #66	; 0x42
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333f      	adds	r3, #63	; 0x3f
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3344      	adds	r3, #68	; 0x44
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3348      	adds	r3, #72	; 0x48
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3350      	adds	r3, #80	; 0x50
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	3301      	adds	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3af      	bcc.n	8003b50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e044      	b.n	8003c80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c38:	7bfa      	ldrb	r2, [r7, #15]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3b5      	bcc.n	8003bf6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	687e      	ldr	r6, [r7, #4]
 8003c92:	466d      	mov	r5, sp
 8003c94:	f106 0410 	add.w	r4, r6, #16
 8003c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ca4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ca8:	1d33      	adds	r3, r6, #4
 8003caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cac:	6838      	ldr	r0, [r7, #0]
 8003cae:	f004 fb3f 	bl	8008330 <USB_DevInit>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e014      	b.n	8003cee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f80b 	bl	8003cf8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fcf1 	bl	80086ce <USB_DevDisconnect>

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	10000003 	.word	0x10000003

08003d40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40007000 	.word	0x40007000

08003d60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d8e:	f7ff fad1 	bl	8003334 <HAL_GetTick>
 8003d92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d94:	e009      	b.n	8003daa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d96:	f7ff facd 	bl	8003334 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da4:	d901      	bls.n	8003daa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e022      	b.n	8003df0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d1ee      	bne.n	8003d96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0f      	ldr	r2, [pc, #60]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc4:	f7ff fab6 	bl	8003334 <HAL_GetTick>
 8003dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dca:	e009      	b.n	8003de0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dcc:	f7ff fab2 	bl	8003334 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dda:	d901      	bls.n	8003de0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e007      	b.n	8003df0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dec:	d1ee      	bne.n	8003dcc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e29b      	b.n	800434e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8087 	beq.w	8003f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e24:	4b96      	ldr	r3, [pc, #600]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d00c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e30:	4b93      	ldr	r3, [pc, #588]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d112      	bne.n	8003e62 <HAL_RCC_OscConfig+0x62>
 8003e3c:	4b90      	ldr	r3, [pc, #576]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x130>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d168      	bne.n	8003f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e275      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x7a>
 8003e6c:	4b84      	ldr	r3, [pc, #528]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a83      	ldr	r2, [pc, #524]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e02e      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x9c>
 8003e82:	4b7f      	ldr	r3, [pc, #508]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7e      	ldr	r2, [pc, #504]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b7c      	ldr	r3, [pc, #496]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a7b      	ldr	r2, [pc, #492]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a75      	ldr	r2, [pc, #468]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a72      	ldr	r2, [pc, #456]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd8>
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6b      	ldr	r2, [pc, #428]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7ff fa28 	bl	8003334 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7ff fa24 	bl	8003334 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e229      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b61      	ldr	r3, [pc, #388]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7ff fa14 	bl	8003334 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7ff fa10 	bl	8003334 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e215      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	4b57      	ldr	r3, [pc, #348]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x110>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d069      	beq.n	8004012 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3e:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b4d      	ldr	r3, [pc, #308]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d11c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x190>
 8003f56:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x17a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1e9      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	493d      	ldr	r1, [pc, #244]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	e040      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d023      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a38      	ldr	r2, [pc, #224]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7ff f9c6 	bl	8003334 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fac:	f7ff f9c2 	bl	8003334 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1c7      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	4b30      	ldr	r3, [pc, #192]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fca:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4929      	ldr	r1, [pc, #164]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
 8003fde:	e018      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7ff f9a2 	bl	8003334 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7ff f99e 	bl	8003334 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1a3      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d038      	beq.n	8004090 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d019      	beq.n	800405a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8004028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7ff f97f 	bl	8003334 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7ff f97b 	bl	8003334 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e180      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x23a>
 8004058:	e01a      	b.n	8004090 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 800405c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7ff f965 	bl	8003334 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406e:	f7ff f961 	bl	8003334 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d903      	bls.n	8004084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e166      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
 8004080:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a4 	beq.w	80041e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409e:	4b8c      	ldr	r3, [pc, #560]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b89      	ldr	r3, [pc, #548]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a88      	ldr	r2, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b86      	ldr	r3, [pc, #536]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCC_OscConfig+0x4d4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040d2:	4b80      	ldr	r3, [pc, #512]	; (80042d4 <HAL_RCC_OscConfig+0x4d4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x4d4>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7ff f929 	bl	8003334 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7ff f925 	bl	8003334 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e12a      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x4d4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x31a>
 800410c:	4b70      	ldr	r3, [pc, #448]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a6f      	ldr	r2, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	e02d      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x33c>
 8004122:	4b6b      	ldr	r3, [pc, #428]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a6a      	ldr	r2, [pc, #424]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	e01c      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d10c      	bne.n	800415e <HAL_RCC_OscConfig+0x35e>
 8004144:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a61      	ldr	r2, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	4b5f      	ldr	r3, [pc, #380]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a5e      	ldr	r2, [pc, #376]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
 800415c:	e00b      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
 800415e:	4b5c      	ldr	r3, [pc, #368]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a58      	ldr	r2, [pc, #352]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d015      	beq.n	80041aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7ff f8d9 	bl	8003334 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7ff f8d5 	bl	8003334 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e0d8      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ee      	beq.n	8004186 <HAL_RCC_OscConfig+0x386>
 80041a8:	e014      	b.n	80041d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7ff f8c3 	bl	8003334 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7ff f8bf 	bl	8003334 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0c2      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ee      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80ae 	beq.w	800434c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d06d      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d14b      	bne.n	800429c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a31      	ldr	r2, [pc, #196]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800420a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7ff f890 	bl	8003334 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7ff f88c 	bl	8003334 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e091      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	3b01      	subs	r3, #1
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	061b      	lsls	r3, r3, #24
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	071b      	lsls	r3, r3, #28
 8004262:	491b      	ldr	r1, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7ff f85e 	bl	8003334 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7ff f85a 	bl	8003334 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e05f      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x47c>
 800429a:	e057      	b.n	800434c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7ff f844 	bl	8003334 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7ff f840 	bl	8003334 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e045      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4b0>
 80042ce:	e03d      	b.n	800434c <HAL_RCC_OscConfig+0x54c>
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCC_OscConfig+0x558>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d030      	beq.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d129      	bne.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d122      	bne.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004308:	4013      	ands	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800430e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004310:	4293      	cmp	r3, r2
 8004312:	d119      	bne.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	3b01      	subs	r3, #1
 8004322:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d10f      	bne.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800

0800435c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0d0      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d910      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 020f 	bic.w	r2, r3, #15
 800438a:	4965      	ldr	r1, [pc, #404]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b63      	ldr	r3, [pc, #396]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0b8      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043bc:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a58      	ldr	r2, [pc, #352]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a52      	ldr	r2, [pc, #328]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e0:	4b50      	ldr	r3, [pc, #320]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	494d      	ldr	r1, [pc, #308]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d040      	beq.n	8004480 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d115      	bne.n	800443e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e07f      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e073      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06b      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b39      	ldr	r3, [pc, #228]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4936      	ldr	r1, [pc, #216]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fe ff70 	bl	8003334 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fe ff6c 	bl	8003334 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e053      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d210      	bcs.n	80044b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 020f 	bic.w	r2, r3, #15
 8004496:	4922      	ldr	r1, [pc, #136]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e032      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4916      	ldr	r1, [pc, #88]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	490e      	ldr	r1, [pc, #56]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ee:	f000 f821 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044f2:	4602      	mov	r2, r0
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	490a      	ldr	r1, [pc, #40]	; (8004528 <HAL_RCC_ClockConfig+0x1cc>)
 8004500:	5ccb      	ldrb	r3, [r1, r3]
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x1d0>)
 8004508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCC_ClockConfig+0x1d4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fecc 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023c00 	.word	0x40023c00
 8004524:	40023800 	.word	0x40023800
 8004528:	0800d918 	.word	0x0800d918
 800452c:	2000004c 	.word	0x2000004c
 8004530:	20000050 	.word	0x20000050

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800454c:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b08      	cmp	r3, #8
 8004556:	d00d      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x40>
 8004558:	2b08      	cmp	r3, #8
 800455a:	f200 80bd 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x34>
 8004562:	2b04      	cmp	r3, #4
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x3a>
 8004566:	e0b7      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800456a:	60bb      	str	r3, [r7, #8]
      break;
 800456c:	e0b7      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800456e:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004570:	60bb      	str	r3, [r7, #8]
      break;
 8004572:	e0b4      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004574:	4b5d      	ldr	r3, [pc, #372]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800457e:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04d      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	f240 10ff 	movw	r0, #511	; 0x1ff
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	ea02 0800 	and.w	r8, r2, r0
 80045a2:	ea03 0901 	and.w	r9, r3, r1
 80045a6:	4640      	mov	r0, r8
 80045a8:	4649      	mov	r1, r9
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	014b      	lsls	r3, r1, #5
 80045b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045b8:	0142      	lsls	r2, r0, #5
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	ebb0 0008 	subs.w	r0, r0, r8
 80045c2:	eb61 0109 	sbc.w	r1, r1, r9
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	018b      	lsls	r3, r1, #6
 80045d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045d4:	0182      	lsls	r2, r0, #6
 80045d6:	1a12      	subs	r2, r2, r0
 80045d8:	eb63 0301 	sbc.w	r3, r3, r1
 80045dc:	f04f 0000 	mov.w	r0, #0
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	00d9      	lsls	r1, r3, #3
 80045e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ea:	00d0      	lsls	r0, r2, #3
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	eb12 0208 	adds.w	r2, r2, r8
 80045f4:	eb43 0309 	adc.w	r3, r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0259      	lsls	r1, r3, #9
 8004602:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004606:	0250      	lsls	r0, r2, #9
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	f7fc f826 	bl	8000668 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e04a      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	461a      	mov	r2, r3
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004636:	f04f 0100 	mov.w	r1, #0
 800463a:	ea02 0400 	and.w	r4, r2, r0
 800463e:	ea03 0501 	and.w	r5, r3, r1
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	014b      	lsls	r3, r1, #5
 8004650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004654:	0142      	lsls	r2, r0, #5
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	1b00      	subs	r0, r0, r4
 800465c:	eb61 0105 	sbc.w	r1, r1, r5
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	018b      	lsls	r3, r1, #6
 800466a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800466e:	0182      	lsls	r2, r0, #6
 8004670:	1a12      	subs	r2, r2, r0
 8004672:	eb63 0301 	sbc.w	r3, r3, r1
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	00d9      	lsls	r1, r3, #3
 8004680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004684:	00d0      	lsls	r0, r2, #3
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	1912      	adds	r2, r2, r4
 800468c:	eb45 0303 	adc.w	r3, r5, r3
 8004690:	f04f 0000 	mov.w	r0, #0
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	0299      	lsls	r1, r3, #10
 800469a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800469e:	0290      	lsls	r0, r2, #10
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	f7fb ffda 	bl	8000668 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046da:	60bb      	str	r3, [r7, #8]
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	68bb      	ldr	r3, [r7, #8]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	2000004c 	.word	0x2000004c

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800d928 	.word	0x0800d928

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffdc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0b5b      	lsrs	r3, r3, #13
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800d928 	.word	0x0800d928

08004760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004788:	4b69      	ldr	r3, [pc, #420]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a68      	ldr	r2, [pc, #416]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004792:	6093      	str	r3, [r2, #8]
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	4964      	ldr	r1, [pc, #400]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d017      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ba:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	4959      	ldr	r1, [pc, #356]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047f6:	4b4e      	ldr	r3, [pc, #312]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	494a      	ldr	r1, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 808b 	beq.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b3a      	ldr	r3, [pc, #232]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	4a39      	ldr	r2, [pc, #228]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484e:	6413      	str	r3, [r2, #64]	; 0x40
 8004850:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a34      	ldr	r2, [pc, #208]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fe fd64 	bl	8003334 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004870:	f7fe fd60 	bl	8003334 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e38f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d035      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d02e      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c2:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d114      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fe fd28 	bl	8003334 <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fe fd24 	bl	8003334 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e351      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ee      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004916:	d111      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004926:	400b      	ands	r3, r1
 8004928:	4901      	ldr	r1, [pc, #4]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
 800492e:	e00b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	0ffffcff 	.word	0x0ffffcff
 800493c:	4bb3      	ldr	r3, [pc, #716]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4ab2      	ldr	r2, [pc, #712]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004942:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004946:	6093      	str	r3, [r2, #8]
 8004948:	4bb0      	ldr	r3, [pc, #704]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	49ad      	ldr	r1, [pc, #692]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d010      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004966:	4ba9      	ldr	r3, [pc, #676]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496c:	4aa7      	ldr	r2, [pc, #668]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004972:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004976:	4ba5      	ldr	r3, [pc, #660]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	49a2      	ldr	r1, [pc, #648]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004994:	4b9d      	ldr	r3, [pc, #628]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a2:	499a      	ldr	r1, [pc, #616]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b6:	4b95      	ldr	r3, [pc, #596]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c4:	4991      	ldr	r1, [pc, #580]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d8:	4b8c      	ldr	r3, [pc, #560]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e6:	4989      	ldr	r1, [pc, #548]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049fa:	4b84      	ldr	r3, [pc, #528]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4980      	ldr	r1, [pc, #512]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a1c:	4b7b      	ldr	r3, [pc, #492]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a22:	f023 0203 	bic.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	4978      	ldr	r1, [pc, #480]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a3e:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f023 020c 	bic.w	r2, r3, #12
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4c:	496f      	ldr	r1, [pc, #444]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a60:	4b6a      	ldr	r3, [pc, #424]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	4967      	ldr	r1, [pc, #412]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a82:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	495e      	ldr	r1, [pc, #376]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	4956      	ldr	r1, [pc, #344]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ac6:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	494d      	ldr	r1, [pc, #308]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	4945      	ldr	r1, [pc, #276]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	493c      	ldr	r1, [pc, #240]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b2c:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3a:	4934      	ldr	r1, [pc, #208]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d011      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5c:	492b      	ldr	r1, [pc, #172]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	491b      	ldr	r1, [pc, #108]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc0:	4912      	ldr	r1, [pc, #72]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be4:	4909      	ldr	r1, [pc, #36]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	4986      	ldr	r1, [pc, #536]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c24:	4b81      	ldr	r3, [pc, #516]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c34:	497d      	ldr	r1, [pc, #500]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d006      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80d6 	beq.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c50:	4b76      	ldr	r3, [pc, #472]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a75      	ldr	r2, [pc, #468]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fe fb6a 	bl	8003334 <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c64:	f7fe fb66 	bl	8003334 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	; 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e195      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d021      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11d      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c96:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0e1b      	lsrs	r3, r3, #24
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	019a      	lsls	r2, r3, #6
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	4958      	ldr	r1, [pc, #352]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02e      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfc:	d129      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cfe:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d0c:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d12:	0f1b      	lsrs	r3, r3, #28
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	019a      	lsls	r2, r3, #6
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	041b      	lsls	r3, r3, #16
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	061b      	lsls	r3, r3, #24
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	071b      	lsls	r3, r3, #28
 8004d32:	493e      	ldr	r1, [pc, #248]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d3a:	4b3c      	ldr	r3, [pc, #240]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d40:	f023 021f 	bic.w	r2, r3, #31
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	4938      	ldr	r1, [pc, #224]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01d      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d5e:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d64:	0e1b      	lsrs	r3, r3, #24
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d72:	0f1b      	lsrs	r3, r3, #28
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	019a      	lsls	r2, r3, #6
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	431a      	orrs	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	071b      	lsls	r3, r3, #28
 8004d92:	4926      	ldr	r1, [pc, #152]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	019a      	lsls	r2, r3, #6
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	491a      	ldr	r1, [pc, #104]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fe faad 	bl	8003334 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dde:	f7fe faa9 	bl	8003334 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0d8      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	f040 80ce 	bne.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e10:	f7fe fa90 	bl	8003334 <HAL_GetTick>
 8004e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e16:	e00b      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e18:	f7fe fa8c 	bl	8003334 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d904      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0bb      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e30:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d0ec      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02e      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d12a      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e66:	4b51      	ldr	r3, [pc, #324]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e74:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	0f1b      	lsrs	r3, r3, #28
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	019a      	lsls	r2, r3, #6
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	4944      	ldr	r1, [pc, #272]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	493d      	ldr	r1, [pc, #244]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed0:	d11d      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ee0:	4b32      	ldr	r3, [pc, #200]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	019a      	lsls	r2, r3, #6
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	4929      	ldr	r1, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d028      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	0e1b      	lsrs	r3, r3, #24
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	0c1b      	lsrs	r3, r3, #16
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4917      	ldr	r1, [pc, #92]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4911      	ldr	r1, [pc, #68]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fe f9dc 	bl	8003334 <HAL_GetTick>
 8004f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f80:	f7fe f9d8 	bl	8003334 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e007      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d1ef      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800

08004fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e09d      	b.n	80050fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd2:	d009      	beq.n	8004fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61da      	str	r2, [r3, #28]
 8004fda:	e005      	b.n	8004fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd fc50 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d902      	bls.n	8005030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e002      	b.n	8005036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800503e:	d007      	beq.n	8005050 <HAL_SPI_Init+0xa0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005048:	d002      	beq.n	8005050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	ea42 0103 	orr.w	r1, r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 0204 	and.w	r2, r3, #4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b088      	sub	sp, #32
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_SPI_Transmit+0x22>
 8005124:	2302      	movs	r3, #2
 8005126:	e158      	b.n	80053da <HAL_SPI_Transmit+0x2d4>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005130:	f7fe f900 	bl	8003334 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800514a:	e13d      	b.n	80053c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Transmit+0x52>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800515c:	e134      	b.n	80053c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2203      	movs	r2, #3
 8005162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d10f      	bne.n	80051ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f0:	d94b      	bls.n	800528a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Transmit+0xfa>
 80051fa:	8afb      	ldrh	r3, [r7, #22]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d13e      	bne.n	800527e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005224:	e02b      	b.n	800527e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d112      	bne.n	800525a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	881a      	ldrh	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005258:	e011      	b.n	800527e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525a:	f7fe f86b 	bl	8003334 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d803      	bhi.n	8005272 <HAL_SPI_Transmit+0x16c>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Transmit+0x172>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800527c:	e0a4      	b.n	80053c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ce      	bne.n	8005226 <HAL_SPI_Transmit+0x120>
 8005288:	e07c      	b.n	8005384 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_SPI_Transmit+0x192>
 8005292:	8afb      	ldrh	r3, [r7, #22]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d170      	bne.n	800537a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d912      	bls.n	80052c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	881a      	ldrh	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c9a      	adds	r2, r3, #2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b02      	subs	r3, #2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052c6:	e058      	b.n	800537a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052ee:	e044      	b.n	800537a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d12b      	bne.n	8005356 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d912      	bls.n	800532e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	881a      	ldrh	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	1c9a      	adds	r2, r3, #2
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b02      	subs	r3, #2
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532c:	e025      	b.n	800537a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005354:	e011      	b.n	800537a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005356:	f7fd ffed 	bl	8003334 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d803      	bhi.n	800536e <HAL_SPI_Transmit+0x268>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d102      	bne.n	8005374 <HAL_SPI_Transmit+0x26e>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005378:	e026      	b.n	80053c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1b5      	bne.n	80052f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fc77 	bl	8005c7c <SPI_EndRxTxTransaction>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e000      	b.n	80053c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80053c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b08a      	sub	sp, #40	; 0x28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053f0:	2301      	movs	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x26>
 8005404:	2302      	movs	r3, #2
 8005406:	e1fb      	b.n	8005800 <HAL_SPI_TransmitReceive+0x41e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005410:	f7fd ff90 	bl	8003334 <HAL_GetTick>
 8005414:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800541c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800542c:	7efb      	ldrb	r3, [r7, #27]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d00e      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x6e>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005438:	d106      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x66>
 8005442:	7efb      	ldrb	r3, [r7, #27]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d003      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005448:	2302      	movs	r3, #2
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800544e:	e1cd      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x80>
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005468:	e1c0      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b04      	cmp	r3, #4
 8005474:	d003      	beq.n	800547e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2205      	movs	r2, #5
 800547a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	887a      	ldrh	r2, [r7, #2]
 800548e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	887a      	ldrh	r2, [r7, #2]
 8005496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c0:	d802      	bhi.n	80054c8 <HAL_SPI_TransmitReceive+0xe6>
 80054c2:	8a3b      	ldrh	r3, [r7, #16]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d908      	bls.n	80054da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e007      	b.n	80054ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d007      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005510:	d97c      	bls.n	800560c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x13e>
 800551a:	8a7b      	ldrh	r3, [r7, #18]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d169      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005544:	e056      	b.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11b      	bne.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b01      	cmp	r3, #1
 8005562:	d113      	bne.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d11c      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x1f2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	b292      	uxth	r2, r2
 80055b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055d4:	f7fd feae 	bl	8003334 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d807      	bhi.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d003      	beq.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055f2:	e0fb      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1a3      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x164>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d19d      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x164>
 800560a:	e0df      	b.n	80057cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_SPI_TransmitReceive+0x23a>
 8005614:	8a7b      	ldrh	r3, [r7, #18]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 80cb 	bne.w	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d912      	bls.n	800564c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b02      	subs	r3, #2
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564a:	e0b2      	b.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005672:	e09e      	b.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d134      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02f      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b01      	cmp	r3, #1
 8005690:	d12c      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d912      	bls.n	80056c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	1c9a      	adds	r2, r3, #2
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b02      	subs	r3, #2
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c0:	e012      	b.n	80056e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d148      	bne.n	800578c <HAL_SPI_TransmitReceive+0x3aa>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d042      	beq.n	800578c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d923      	bls.n	800575a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	b292      	uxth	r2, r2
 800571e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b02      	subs	r3, #2
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d81f      	bhi.n	8005788 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e016      	b.n	8005788 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f103 020c 	add.w	r2, r3, #12
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005788:	2301      	movs	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800578c:	f7fd fdd2 	bl	8003334 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	429a      	cmp	r2, r3
 800579a:	d803      	bhi.n	80057a4 <HAL_SPI_TransmitReceive+0x3c2>
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x3c8>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80057b0:	e01c      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f af5b 	bne.w	8005674 <HAL_SPI_TransmitReceive+0x292>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f47f af54 	bne.w	8005674 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fa53 	bl	8005c7c <SPI_EndRxTxTransaction>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
 80057e8:	e000      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80057ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	099b      	lsrs	r3, r3, #6
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
    return;
 800584a:	e0d7      	b.n	80059fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_SPI_IRQHandler+0x66>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
    return;
 800586c:	e0c6      	b.n	80059fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10c      	bne.n	8005894 <HAL_SPI_IRQHandler+0x8c>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80b4 	beq.w	80059fc <HAL_SPI_IRQHandler+0x1f4>
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80ad 	beq.w	80059fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	099b      	lsrs	r3, r3, #6
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d023      	beq.n	80058f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d011      	beq.n	80058de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058be:	f043 0204 	orr.w	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e00b      	b.n	80058f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	693b      	ldr	r3, [r7, #16]
        return;
 80058f4:	e082      	b.n	80059fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d014      	beq.n	800592c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593c:	f043 0208 	orr.w	r2, r3, #8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005944:	2300      	movs	r3, #0
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04f      	beq.n	80059fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005968:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <HAL_SPI_IRQHandler+0x17e>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d034      	beq.n	80059f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0203 	bic.w	r2, r2, #3
 8005994:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	2b00      	cmp	r3, #0
 800599c:	d011      	beq.n	80059c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_SPI_IRQHandler+0x1fc>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd fe73 	bl	8003696 <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	4a0d      	ldr	r2, [pc, #52]	; (8005a04 <HAL_SPI_IRQHandler+0x1fc>)
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fe5d 	bl	8003696 <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80059ee:	e003      	b.n	80059f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f809 	bl	8005a08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80059f6:	e000      	b.n	80059fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80059f8:	bf00      	nop
    return;
 80059fa:	bf00      	nop
  }
}
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	08005a1d 	.word	0x08005a1d

08005a08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff ffe5 	bl	8005a08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a58:	f7fd fc6c 	bl	8003334 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a68:	f7fd fc64 	bl	8003334 <HAL_GetTick>
 8005a6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	0d1b      	lsrs	r3, r3, #20
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a7e:	e054      	b.n	8005b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d050      	beq.n	8005b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a88:	f7fd fc54 	bl	8003334 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d902      	bls.n	8005a9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d13d      	bne.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab6:	d111      	bne.n	8005adc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac0:	d004      	beq.n	8005acc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aca:	d107      	bne.n	8005adc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ada:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae4:	d10f      	bne.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e017      	b.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d19b      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	2000004c 	.word	0x2000004c

08005b58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b66:	f7fd fbe5 	bl	8003334 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	4413      	add	r3, r2
 8005b74:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b76:	f7fd fbdd 	bl	8003334 <HAL_GetTick>
 8005b7a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	00da      	lsls	r2, r3, #3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	0d1b      	lsrs	r3, r3, #20
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b94:	e062      	b.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b9c:	d109      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005bb0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d050      	beq.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bba:	f7fd fbbb 	bl	8003334 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d902      	bls.n	8005bd0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d13d      	bne.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be8:	d111      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf2:	d004      	beq.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d107      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c16:	d10f      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e010      	b.n	8005c6e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d194      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000004c 	.word	0x2000004c

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ff5f 	bl	8005b58 <SPI_WaitFifoStateUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e027      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fec4 	bl	8005a48 <SPI_WaitFlagStateUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e014      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ff38 	bl	8005b58 <SPI_WaitFifoStateUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e049      	b.n	8005dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fd f8d0 	bl	8002ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f000 fd28 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e054      	b.n	8005e7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d01d      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_TIM_Base_Start_IT+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d115      	bne.n	8005e64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xec>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d015      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0xbe>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d011      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	e008      	b.n	8005e76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e000      	b.n	8005e78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40001800 	.word	0x40001800
 8005ea4:	00010007 	.word	0x00010007

08005ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e049      	b.n	8005f4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f841 	bl	8005f56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f000 fc58 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x24>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e03c      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d109      	bne.n	8005faa <HAL_TIM_PWM_Start+0x3e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e02f      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x58>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e022      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x72>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e015      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x8c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e008      	b.n	800600a <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e092      	b.n	8006138 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0xb6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006020:	e023      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Start+0xc6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006030:	e01b      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d104      	bne.n	8006042 <HAL_TIM_PWM_Start+0xd6>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006040:	e013      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_Start+0xe6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006050:	e00b      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b10      	cmp	r3, #16
 8006056:	d104      	bne.n	8006062 <HAL_TIM_PWM_Start+0xf6>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006060:	e003      	b.n	800606a <HAL_TIM_PWM_Start+0xfe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 ff2a 	bl	8006ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a30      	ldr	r2, [pc, #192]	; (8006140 <HAL_TIM_PWM_Start+0x1d4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_PWM_Start+0x120>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <HAL_TIM_PWM_Start+0x1d8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d101      	bne.n	8006090 <HAL_TIM_PWM_Start+0x124>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <HAL_TIM_PWM_Start+0x126>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a25      	ldr	r2, [pc, #148]	; (8006140 <HAL_TIM_PWM_Start+0x1d4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b8:	d01d      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_TIM_PWM_Start+0x1dc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a20      	ldr	r2, [pc, #128]	; (800614c <HAL_TIM_PWM_Start+0x1e0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <HAL_TIM_PWM_Start+0x1e4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a19      	ldr	r2, [pc, #100]	; (8006144 <HAL_TIM_PWM_Start+0x1d8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <HAL_TIM_PWM_Start+0x1e8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x18a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a19      	ldr	r2, [pc, #100]	; (8006158 <HAL_TIM_PWM_Start+0x1ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d115      	bne.n	8006122 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	4b17      	ldr	r3, [pc, #92]	; (800615c <HAL_TIM_PWM_Start+0x1f0>)
 80060fe:	4013      	ands	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b06      	cmp	r3, #6
 8006106:	d015      	beq.n	8006134 <HAL_TIM_PWM_Start+0x1c8>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610e:	d011      	beq.n	8006134 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	e008      	b.n	8006134 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e000      	b.n	8006136 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006134:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40010000 	.word	0x40010000
 8006144:	40010400 	.word	0x40010400
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40000c00 	.word	0x40000c00
 8006154:	40014000 	.word	0x40014000
 8006158:	40001800 	.word	0x40001800
 800615c:	00010007 	.word	0x00010007

08006160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0202 	mvn.w	r2, #2
 800618c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fadc 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 face 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fadf 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0204 	mvn.w	r2, #4
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fab2 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 faa4 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fab5 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b08      	cmp	r3, #8
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b08      	cmp	r3, #8
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0208 	mvn.w	r2, #8
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2204      	movs	r2, #4
 800623a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fa88 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa7a 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa8b 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b10      	cmp	r3, #16
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b10      	cmp	r3, #16
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0210 	mvn.w	r2, #16
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2208      	movs	r2, #8
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa5e 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa50 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa61 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0201 	mvn.w	r2, #1
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fc f868 	bl	80023b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b80      	cmp	r3, #128	; 0x80
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fe9c 	bl	8007048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d10e      	bne.n	800633e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b80      	cmp	r3, #128	; 0x80
 800632c:	d107      	bne.n	800633e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fe8f 	bl	800705c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d10e      	bne.n	800636a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d107      	bne.n	800636a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fa0f 	bl	8006788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b20      	cmp	r3, #32
 8006376:	d10e      	bne.n	8006396 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b20      	cmp	r3, #32
 8006384:	d107      	bne.n	8006396 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0220 	mvn.w	r2, #32
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fe4f 	bl	8007034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0fd      	b.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b14      	cmp	r3, #20
 80063c6:	f200 80f0 	bhi.w	80065aa <HAL_TIM_PWM_ConfigChannel+0x20a>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	08006425 	.word	0x08006425
 80063d4:	080065ab 	.word	0x080065ab
 80063d8:	080065ab 	.word	0x080065ab
 80063dc:	080065ab 	.word	0x080065ab
 80063e0:	08006465 	.word	0x08006465
 80063e4:	080065ab 	.word	0x080065ab
 80063e8:	080065ab 	.word	0x080065ab
 80063ec:	080065ab 	.word	0x080065ab
 80063f0:	080064a7 	.word	0x080064a7
 80063f4:	080065ab 	.word	0x080065ab
 80063f8:	080065ab 	.word	0x080065ab
 80063fc:	080065ab 	.word	0x080065ab
 8006400:	080064e7 	.word	0x080064e7
 8006404:	080065ab 	.word	0x080065ab
 8006408:	080065ab 	.word	0x080065ab
 800640c:	080065ab 	.word	0x080065ab
 8006410:	08006529 	.word	0x08006529
 8006414:	080065ab 	.word	0x080065ab
 8006418:	080065ab 	.word	0x080065ab
 800641c:	080065ab 	.word	0x080065ab
 8006420:	08006569 	.word	0x08006569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa56 	bl	80068dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6999      	ldr	r1, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	619a      	str	r2, [r3, #24]
      break;
 8006462:	e0a3      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 faa8 	bl	80069c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	619a      	str	r2, [r3, #24]
      break;
 80064a4:	e082      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 faff 	bl	8006ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0208 	orr.w	r2, r2, #8
 80064c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0204 	bic.w	r2, r2, #4
 80064d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	61da      	str	r2, [r3, #28]
      break;
 80064e4:	e062      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fb55 	bl	8006b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	021a      	lsls	r2, r3, #8
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	61da      	str	r2, [r3, #28]
      break;
 8006526:	e041      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fb8c 	bl	8006c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006566:	e021      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbbe 	bl	8006cf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065a8:	e000      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80065aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop

080065c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_ConfigClockSource+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e0b3      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x180>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b55      	ldr	r3, [pc, #340]	; (8006748 <HAL_TIM_ConfigClockSource+0x188>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d03e      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0xd0>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006616:	f200 8087 	bhi.w	8006728 <HAL_TIM_ConfigClockSource+0x168>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	f000 8085 	beq.w	800672c <HAL_TIM_ConfigClockSource+0x16c>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d87f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006628:	2b70      	cmp	r3, #112	; 0x70
 800662a:	d01a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0xa2>
 800662c:	2b70      	cmp	r3, #112	; 0x70
 800662e:	d87b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006630:	2b60      	cmp	r3, #96	; 0x60
 8006632:	d050      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x116>
 8006634:	2b60      	cmp	r3, #96	; 0x60
 8006636:	d877      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006638:	2b50      	cmp	r3, #80	; 0x50
 800663a:	d03c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0xf6>
 800663c:	2b50      	cmp	r3, #80	; 0x50
 800663e:	d873      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d058      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x136>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d86f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d064      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x156>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d86b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d060      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x156>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d867      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05c      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x156>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d05a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006660:	e062      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f000 fc0b 	bl	8006e8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006684:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	609a      	str	r2, [r3, #8]
      break;
 800668e:	e04e      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f000 fbf4 	bl	8006e8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b2:	609a      	str	r2, [r3, #8]
      break;
 80066b4:	e03b      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 fb68 	bl	8006d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2150      	movs	r1, #80	; 0x50
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fbc1 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 80066d4:	e02b      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fb87 	bl	8006df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2160      	movs	r1, #96	; 0x60
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fbb1 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e01b      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fb48 	bl	8006d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2140      	movs	r1, #64	; 0x40
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fba1 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 8006714:	e00b      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f000 fb98 	bl	8006e56 <TIM_ITRx_SetConfig>
        break;
 8006726:	e002      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006728:	bf00      	nop
 800672a:	e000      	b.n	800672e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800672c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	fffeff88 	.word	0xfffeff88

0800674c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a3d      	ldr	r2, [pc, #244]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3c      	ldr	r2, [pc, #240]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3b      	ldr	r2, [pc, #236]	; (80068bc <TIM_Base_SetConfig+0x120>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3a      	ldr	r2, [pc, #232]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2f      	ldr	r2, [pc, #188]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d02b      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d027      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2c      	ldr	r2, [pc, #176]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d023      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01f      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2a      	ldr	r2, [pc, #168]	; (80068bc <TIM_Base_SetConfig+0x120>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01b      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d017      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <TIM_Base_SetConfig+0x128>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00f      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <TIM_Base_SetConfig+0x130>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00b      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <TIM_Base_SetConfig+0x134>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <TIM_Base_SetConfig+0x138>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d003      	beq.n	800684e <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <TIM_Base_SetConfig+0x13c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d108      	bne.n	8006860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40010400 	.word	0x40010400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800
 80068d0:	40001800 	.word	0x40001800
 80068d4:	40001c00 	.word	0x40001c00
 80068d8:	40002000 	.word	0x40002000

080068dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <TIM_OC1_SetConfig+0xd8>)
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 0302 	bic.w	r3, r3, #2
 8006924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <TIM_OC1_SetConfig+0xdc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x64>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a20      	ldr	r2, [pc, #128]	; (80069bc <TIM_OC1_SetConfig+0xe0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <TIM_OC1_SetConfig+0xdc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_OC1_SetConfig+0x8e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <TIM_OC1_SetConfig+0xe0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	fffeff8f 	.word	0xfffeff8f
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40010400 	.word	0x40010400

080069c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f023 0210 	bic.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <TIM_OC2_SetConfig+0xe4>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0320 	bic.w	r3, r3, #32
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <TIM_OC2_SetConfig+0xe8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_OC2_SetConfig+0x68>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a22      	ldr	r2, [pc, #136]	; (8006aac <TIM_OC2_SetConfig+0xec>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10d      	bne.n	8006a44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC2_SetConfig+0xe8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC2_SetConfig+0x94>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC2_SetConfig+0xec>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d113      	bne.n	8006a7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	feff8fff 	.word	0xfeff8fff
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400

08006ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <TIM_OC3_SetConfig+0xe0>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <TIM_OC3_SetConfig+0xe4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0x66>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <TIM_OC3_SetConfig+0xe8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10d      	bne.n	8006b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <TIM_OC3_SetConfig+0xe4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_OC3_SetConfig+0x92>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <TIM_OC3_SetConfig+0xe8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d113      	bne.n	8006b6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	fffeff8f 	.word	0xfffeff8f
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40010400 	.word	0x40010400

08006b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <TIM_OC4_SetConfig+0xa4>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <TIM_OC4_SetConfig+0xa8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_OC4_SetConfig+0x68>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a12      	ldr	r2, [pc, #72]	; (8006c48 <TIM_OC4_SetConfig+0xac>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d109      	bne.n	8006c18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	feff8fff 	.word	0xfeff8fff
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40010400 	.word	0x40010400

08006c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <TIM_OC5_SetConfig+0x98>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a12      	ldr	r2, [pc, #72]	; (8006ce8 <TIM_OC5_SetConfig+0x9c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_OC5_SetConfig+0x5e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a11      	ldr	r2, [pc, #68]	; (8006cec <TIM_OC5_SetConfig+0xa0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d109      	bne.n	8006cbe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	621a      	str	r2, [r3, #32]
}
 8006cd8:	bf00      	nop
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	fffeff8f 	.word	0xfffeff8f
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40010400 	.word	0x40010400

08006cf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <TIM_OC6_SetConfig+0x9c>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	051b      	lsls	r3, r3, #20
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <TIM_OC6_SetConfig+0xa0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC6_SetConfig+0x60>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a12      	ldr	r2, [pc, #72]	; (8006d94 <TIM_OC6_SetConfig+0xa4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d109      	bne.n	8006d64 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	feff8fff 	.word	0xfeff8fff
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40010400 	.word	0x40010400

08006d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 030a 	bic.w	r3, r3, #10
 8006dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0210 	bic.w	r2, r3, #16
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	031b      	lsls	r3, r3, #12
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f043 0307 	orr.w	r3, r3, #7
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	021a      	lsls	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	609a      	str	r2, [r3, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2201      	movs	r2, #1
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	401a      	ands	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	fa01 f303 	lsl.w	r3, r1, r3
 8006f04:	431a      	orrs	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e06d      	b.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a30      	ldr	r2, [pc, #192]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d004      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2f      	ldr	r2, [pc, #188]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10c      	bne.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	40010000 	.word	0x40010000
 800701c:	40010400 	.word	0x40010400
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40014000 	.word	0x40014000
 8007030:	40001800 	.word	0x40001800

08007034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e040      	b.n	8007104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fb fffe 	bl	8003094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	; 0x24
 800709c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb26 	bl	8007700 <UART_SetConfig>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e022      	b.n	8007104 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd7c 	bl	8007bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fe03 	bl	8007d08 <UART_CheckIdleState>
 8007102:	4603      	mov	r3, r0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	; 0x28
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007120:	2b20      	cmp	r3, #32
 8007122:	f040 8081 	bne.w	8007228 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_UART_Transmit+0x26>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e079      	b.n	800722a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_UART_Transmit+0x38>
 8007140:	2302      	movs	r3, #2
 8007142:	e072      	b.n	800722a <HAL_UART_Transmit+0x11e>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2221      	movs	r2, #33	; 0x21
 8007158:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800715a:	f7fc f8eb 	bl	8003334 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007178:	d108      	bne.n	800718c <HAL_UART_Transmit+0x80>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e003      	b.n	8007194 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800719c:	e02c      	b.n	80071f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2200      	movs	r2, #0
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fdf6 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e038      	b.n	800722a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3302      	adds	r3, #2
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e007      	b.n	80071e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1cc      	bne.n	800719e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fdc3 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e005      	b.n	800722a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	4613      	mov	r3, r2
 800723e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007244:	2b20      	cmp	r3, #32
 8007246:	d12c      	bne.n	80072a2 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_UART_Receive_IT+0x22>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e025      	b.n	80072a4 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UART_Receive_IT+0x34>
 8007262:	2302      	movs	r3, #2
 8007264:	e01e      	b.n	80072a4 <HAL_UART_Receive_IT+0x72>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007290:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	461a      	mov	r2, r3
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fdfb 	bl	8007e94 <UART_Start_Receive_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	e000      	b.n	80072a4 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80072a2:	2302      	movs	r3, #2
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80072d2:	4013      	ands	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d113      	bne.n	8007304 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 81cc 	beq.w	8007692 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
      }
      return;
 8007302:	e1c6      	b.n	8007692 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80e3 	beq.w	80074d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4ba5      	ldr	r3, [pc, #660]	; (80075b0 <HAL_UART_IRQHandler+0x304>)
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80d8 	beq.w	80074d2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <HAL_UART_IRQHandler+0xa2>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d010      	beq.n	800737a <HAL_UART_IRQHandler+0xce>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2202      	movs	r2, #2
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007370:	f043 0204 	orr.w	r2, r3, #4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <HAL_UART_IRQHandler+0xfa>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2204      	movs	r2, #4
 8007394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800739c:	f043 0202 	orr.w	r2, r3, #2
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d015      	beq.n	80073dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2208      	movs	r2, #8
 80073ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d2:	f043 0208 	orr.w	r2, r3, #8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d011      	beq.n	800740a <HAL_UART_IRQHandler+0x15e>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00c      	beq.n	800740a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8140 	beq.w	8007696 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d004      	beq.n	800745a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007456:	2b00      	cmp	r3, #0
 8007458:	d031      	beq.n	80074be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fda2 	bl	8007fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d123      	bne.n	80074b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	2b00      	cmp	r3, #0
 8007484:	d013      	beq.n	80074ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748a:	4a4a      	ldr	r2, [pc, #296]	; (80075b4 <HAL_UART_IRQHandler+0x308>)
 800748c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	4618      	mov	r0, r3
 8007494:	f7fc f8ff 	bl	8003696 <HAL_DMA_Abort_IT>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d017      	beq.n	80074ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	e00f      	b.n	80074ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f906 	bl	80076c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b4:	e00b      	b.n	80074ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f902 	bl	80076c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074bc:	e007      	b.n	80074ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8fe 	bl	80076c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80074cc:	e0e3      	b.n	8007696 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ce:	bf00      	nop
    return;
 80074d0:	e0e1      	b.n	8007696 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	f040 80a7 	bne.w	800762a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80a1 	beq.w	800762a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 809b 	beq.w	800762a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2210      	movs	r2, #16
 80074fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d156      	bne.n	80075b8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007514:	893b      	ldrh	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80bf 	beq.w	800769a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007522:	893a      	ldrh	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	f080 80b8 	bcs.w	800769a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	893a      	ldrh	r2, [r7, #8]
 800752e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753c:	d02a      	beq.n	8007594 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800754c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800756c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0210 	bic.w	r2, r2, #16
 8007588:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4618      	mov	r0, r3
 8007590:	f7fc f811 	bl	80035b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f893 	bl	80076d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ae:	e074      	b.n	800769a <HAL_UART_IRQHandler+0x3ee>
 80075b0:	04000120 	.word	0x04000120
 80075b4:	08008003 	.word	0x08008003
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d063      	beq.n	800769e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80075d6:	897b      	ldrh	r3, [r7, #10]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d060      	beq.n	800769e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0210 	bic.w	r2, r2, #16
 800761c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800761e:	897b      	ldrh	r3, [r7, #10]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f856 	bl	80076d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007628:	e039      	b.n	800769e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <HAL_UART_IRQHandler+0x3a4>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007646:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f84f 	bl	80076ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800764e:	e029      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
    }
    return;
 8007674:	e015      	b.n	80076a2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d011      	beq.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00c      	beq.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fccf 	bl	800802e <UART_EndTransmit_IT>
    return;
 8007690:	e008      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8007692:	bf00      	nop
 8007694:	e006      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8007696:	bf00      	nop
 8007698:	e004      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
      return;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
      return;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80076a2:	bf00      	nop
  }

}
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop

080076ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4ba7      	ldr	r3, [pc, #668]	; (80079c8 <UART_SetConfig+0x2c8>)
 800772c:	4013      	ands	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	430b      	orrs	r3, r1
 8007736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a95      	ldr	r2, [pc, #596]	; (80079cc <UART_SetConfig+0x2cc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d120      	bne.n	80077be <UART_SetConfig+0xbe>
 800777c:	4b94      	ldr	r3, [pc, #592]	; (80079d0 <UART_SetConfig+0x2d0>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b03      	cmp	r3, #3
 8007788:	d816      	bhi.n	80077b8 <UART_SetConfig+0xb8>
 800778a:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <UART_SetConfig+0x90>)
 800778c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007790:	080077a1 	.word	0x080077a1
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077a7 	.word	0x080077a7
 800779c:	080077b3 	.word	0x080077b3
 80077a0:	2301      	movs	r3, #1
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e14f      	b.n	8007a46 <UART_SetConfig+0x346>
 80077a6:	2302      	movs	r3, #2
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e14c      	b.n	8007a46 <UART_SetConfig+0x346>
 80077ac:	2304      	movs	r3, #4
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e149      	b.n	8007a46 <UART_SetConfig+0x346>
 80077b2:	2308      	movs	r3, #8
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e146      	b.n	8007a46 <UART_SetConfig+0x346>
 80077b8:	2310      	movs	r3, #16
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e143      	b.n	8007a46 <UART_SetConfig+0x346>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a84      	ldr	r2, [pc, #528]	; (80079d4 <UART_SetConfig+0x2d4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d132      	bne.n	800782e <UART_SetConfig+0x12e>
 80077c8:	4b81      	ldr	r3, [pc, #516]	; (80079d0 <UART_SetConfig+0x2d0>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b0c      	cmp	r3, #12
 80077d4:	d828      	bhi.n	8007828 <UART_SetConfig+0x128>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <UART_SetConfig+0xdc>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007811 	.word	0x08007811
 80077e0:	08007829 	.word	0x08007829
 80077e4:	08007829 	.word	0x08007829
 80077e8:	08007829 	.word	0x08007829
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007829 	.word	0x08007829
 80077f8:	08007829 	.word	0x08007829
 80077fc:	08007817 	.word	0x08007817
 8007800:	08007829 	.word	0x08007829
 8007804:	08007829 	.word	0x08007829
 8007808:	08007829 	.word	0x08007829
 800780c:	08007823 	.word	0x08007823
 8007810:	2300      	movs	r3, #0
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e117      	b.n	8007a46 <UART_SetConfig+0x346>
 8007816:	2302      	movs	r3, #2
 8007818:	77fb      	strb	r3, [r7, #31]
 800781a:	e114      	b.n	8007a46 <UART_SetConfig+0x346>
 800781c:	2304      	movs	r3, #4
 800781e:	77fb      	strb	r3, [r7, #31]
 8007820:	e111      	b.n	8007a46 <UART_SetConfig+0x346>
 8007822:	2308      	movs	r3, #8
 8007824:	77fb      	strb	r3, [r7, #31]
 8007826:	e10e      	b.n	8007a46 <UART_SetConfig+0x346>
 8007828:	2310      	movs	r3, #16
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e10b      	b.n	8007a46 <UART_SetConfig+0x346>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a69      	ldr	r2, [pc, #420]	; (80079d8 <UART_SetConfig+0x2d8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d120      	bne.n	800787a <UART_SetConfig+0x17a>
 8007838:	4b65      	ldr	r3, [pc, #404]	; (80079d0 <UART_SetConfig+0x2d0>)
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007842:	2b30      	cmp	r3, #48	; 0x30
 8007844:	d013      	beq.n	800786e <UART_SetConfig+0x16e>
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d814      	bhi.n	8007874 <UART_SetConfig+0x174>
 800784a:	2b20      	cmp	r3, #32
 800784c:	d009      	beq.n	8007862 <UART_SetConfig+0x162>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d810      	bhi.n	8007874 <UART_SetConfig+0x174>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <UART_SetConfig+0x15c>
 8007856:	2b10      	cmp	r3, #16
 8007858:	d006      	beq.n	8007868 <UART_SetConfig+0x168>
 800785a:	e00b      	b.n	8007874 <UART_SetConfig+0x174>
 800785c:	2300      	movs	r3, #0
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e0f1      	b.n	8007a46 <UART_SetConfig+0x346>
 8007862:	2302      	movs	r3, #2
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e0ee      	b.n	8007a46 <UART_SetConfig+0x346>
 8007868:	2304      	movs	r3, #4
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e0eb      	b.n	8007a46 <UART_SetConfig+0x346>
 800786e:	2308      	movs	r3, #8
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e0e8      	b.n	8007a46 <UART_SetConfig+0x346>
 8007874:	2310      	movs	r3, #16
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e0e5      	b.n	8007a46 <UART_SetConfig+0x346>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a57      	ldr	r2, [pc, #348]	; (80079dc <UART_SetConfig+0x2dc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d120      	bne.n	80078c6 <UART_SetConfig+0x1c6>
 8007884:	4b52      	ldr	r3, [pc, #328]	; (80079d0 <UART_SetConfig+0x2d0>)
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800788e:	2bc0      	cmp	r3, #192	; 0xc0
 8007890:	d013      	beq.n	80078ba <UART_SetConfig+0x1ba>
 8007892:	2bc0      	cmp	r3, #192	; 0xc0
 8007894:	d814      	bhi.n	80078c0 <UART_SetConfig+0x1c0>
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d009      	beq.n	80078ae <UART_SetConfig+0x1ae>
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d810      	bhi.n	80078c0 <UART_SetConfig+0x1c0>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <UART_SetConfig+0x1a8>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d006      	beq.n	80078b4 <UART_SetConfig+0x1b4>
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x1c0>
 80078a8:	2300      	movs	r3, #0
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e0cb      	b.n	8007a46 <UART_SetConfig+0x346>
 80078ae:	2302      	movs	r3, #2
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e0c8      	b.n	8007a46 <UART_SetConfig+0x346>
 80078b4:	2304      	movs	r3, #4
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e0c5      	b.n	8007a46 <UART_SetConfig+0x346>
 80078ba:	2308      	movs	r3, #8
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e0c2      	b.n	8007a46 <UART_SetConfig+0x346>
 80078c0:	2310      	movs	r3, #16
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e0bf      	b.n	8007a46 <UART_SetConfig+0x346>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a45      	ldr	r2, [pc, #276]	; (80079e0 <UART_SetConfig+0x2e0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d125      	bne.n	800791c <UART_SetConfig+0x21c>
 80078d0:	4b3f      	ldr	r3, [pc, #252]	; (80079d0 <UART_SetConfig+0x2d0>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078de:	d017      	beq.n	8007910 <UART_SetConfig+0x210>
 80078e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e4:	d817      	bhi.n	8007916 <UART_SetConfig+0x216>
 80078e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ea:	d00b      	beq.n	8007904 <UART_SetConfig+0x204>
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d811      	bhi.n	8007916 <UART_SetConfig+0x216>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <UART_SetConfig+0x1fe>
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d006      	beq.n	800790a <UART_SetConfig+0x20a>
 80078fc:	e00b      	b.n	8007916 <UART_SetConfig+0x216>
 80078fe:	2300      	movs	r3, #0
 8007900:	77fb      	strb	r3, [r7, #31]
 8007902:	e0a0      	b.n	8007a46 <UART_SetConfig+0x346>
 8007904:	2302      	movs	r3, #2
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e09d      	b.n	8007a46 <UART_SetConfig+0x346>
 800790a:	2304      	movs	r3, #4
 800790c:	77fb      	strb	r3, [r7, #31]
 800790e:	e09a      	b.n	8007a46 <UART_SetConfig+0x346>
 8007910:	2308      	movs	r3, #8
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e097      	b.n	8007a46 <UART_SetConfig+0x346>
 8007916:	2310      	movs	r3, #16
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e094      	b.n	8007a46 <UART_SetConfig+0x346>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a30      	ldr	r2, [pc, #192]	; (80079e4 <UART_SetConfig+0x2e4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d125      	bne.n	8007972 <UART_SetConfig+0x272>
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <UART_SetConfig+0x2d0>)
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007934:	d017      	beq.n	8007966 <UART_SetConfig+0x266>
 8007936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800793a:	d817      	bhi.n	800796c <UART_SetConfig+0x26c>
 800793c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007940:	d00b      	beq.n	800795a <UART_SetConfig+0x25a>
 8007942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007946:	d811      	bhi.n	800796c <UART_SetConfig+0x26c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <UART_SetConfig+0x254>
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d006      	beq.n	8007960 <UART_SetConfig+0x260>
 8007952:	e00b      	b.n	800796c <UART_SetConfig+0x26c>
 8007954:	2301      	movs	r3, #1
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e075      	b.n	8007a46 <UART_SetConfig+0x346>
 800795a:	2302      	movs	r3, #2
 800795c:	77fb      	strb	r3, [r7, #31]
 800795e:	e072      	b.n	8007a46 <UART_SetConfig+0x346>
 8007960:	2304      	movs	r3, #4
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e06f      	b.n	8007a46 <UART_SetConfig+0x346>
 8007966:	2308      	movs	r3, #8
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e06c      	b.n	8007a46 <UART_SetConfig+0x346>
 800796c:	2310      	movs	r3, #16
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e069      	b.n	8007a46 <UART_SetConfig+0x346>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <UART_SetConfig+0x2e8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d137      	bne.n	80079ec <UART_SetConfig+0x2ec>
 800797c:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <UART_SetConfig+0x2d0>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800798a:	d017      	beq.n	80079bc <UART_SetConfig+0x2bc>
 800798c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007990:	d817      	bhi.n	80079c2 <UART_SetConfig+0x2c2>
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007996:	d00b      	beq.n	80079b0 <UART_SetConfig+0x2b0>
 8007998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799c:	d811      	bhi.n	80079c2 <UART_SetConfig+0x2c2>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <UART_SetConfig+0x2aa>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a6:	d006      	beq.n	80079b6 <UART_SetConfig+0x2b6>
 80079a8:	e00b      	b.n	80079c2 <UART_SetConfig+0x2c2>
 80079aa:	2300      	movs	r3, #0
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e04a      	b.n	8007a46 <UART_SetConfig+0x346>
 80079b0:	2302      	movs	r3, #2
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e047      	b.n	8007a46 <UART_SetConfig+0x346>
 80079b6:	2304      	movs	r3, #4
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e044      	b.n	8007a46 <UART_SetConfig+0x346>
 80079bc:	2308      	movs	r3, #8
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e041      	b.n	8007a46 <UART_SetConfig+0x346>
 80079c2:	2310      	movs	r3, #16
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e03e      	b.n	8007a46 <UART_SetConfig+0x346>
 80079c8:	efff69f3 	.word	0xefff69f3
 80079cc:	40011000 	.word	0x40011000
 80079d0:	40023800 	.word	0x40023800
 80079d4:	40004400 	.word	0x40004400
 80079d8:	40004800 	.word	0x40004800
 80079dc:	40004c00 	.word	0x40004c00
 80079e0:	40005000 	.word	0x40005000
 80079e4:	40011400 	.word	0x40011400
 80079e8:	40007800 	.word	0x40007800
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a71      	ldr	r2, [pc, #452]	; (8007bb8 <UART_SetConfig+0x4b8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d125      	bne.n	8007a42 <UART_SetConfig+0x342>
 80079f6:	4b71      	ldr	r3, [pc, #452]	; (8007bbc <UART_SetConfig+0x4bc>)
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a04:	d017      	beq.n	8007a36 <UART_SetConfig+0x336>
 8007a06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a0a:	d817      	bhi.n	8007a3c <UART_SetConfig+0x33c>
 8007a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a10:	d00b      	beq.n	8007a2a <UART_SetConfig+0x32a>
 8007a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a16:	d811      	bhi.n	8007a3c <UART_SetConfig+0x33c>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <UART_SetConfig+0x324>
 8007a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a20:	d006      	beq.n	8007a30 <UART_SetConfig+0x330>
 8007a22:	e00b      	b.n	8007a3c <UART_SetConfig+0x33c>
 8007a24:	2300      	movs	r3, #0
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e00d      	b.n	8007a46 <UART_SetConfig+0x346>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e00a      	b.n	8007a46 <UART_SetConfig+0x346>
 8007a30:	2304      	movs	r3, #4
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e007      	b.n	8007a46 <UART_SetConfig+0x346>
 8007a36:	2308      	movs	r3, #8
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	e004      	b.n	8007a46 <UART_SetConfig+0x346>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e001      	b.n	8007a46 <UART_SetConfig+0x346>
 8007a42:	2310      	movs	r3, #16
 8007a44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4e:	d15b      	bne.n	8007b08 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007a50:	7ffb      	ldrb	r3, [r7, #31]
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d827      	bhi.n	8007aa6 <UART_SetConfig+0x3a6>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x35c>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007aa7 	.word	0x08007aa7
 8007a6c:	08007a97 	.word	0x08007a97
 8007a70:	08007aa7 	.word	0x08007aa7
 8007a74:	08007aa7 	.word	0x08007aa7
 8007a78:	08007aa7 	.word	0x08007aa7
 8007a7c:	08007a9f 	.word	0x08007a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a80:	f7fc fe46 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8007a84:	61b8      	str	r0, [r7, #24]
        break;
 8007a86:	e013      	b.n	8007ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a88:	f7fc fe56 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8007a8c:	61b8      	str	r0, [r7, #24]
        break;
 8007a8e:	e00f      	b.n	8007ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a90:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <UART_SetConfig+0x4c0>)
 8007a92:	61bb      	str	r3, [r7, #24]
        break;
 8007a94:	e00c      	b.n	8007ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a96:	f7fc fd4d 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8007a9a:	61b8      	str	r0, [r7, #24]
        break;
 8007a9c:	e008      	b.n	8007ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa2:	61bb      	str	r3, [r7, #24]
        break;
 8007aa4:	e004      	b.n	8007ab0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	77bb      	strb	r3, [r7, #30]
        break;
 8007aae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d074      	beq.n	8007ba0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	005a      	lsls	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b0f      	cmp	r3, #15
 8007ad2:	d916      	bls.n	8007b02 <UART_SetConfig+0x402>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ada:	d212      	bcs.n	8007b02 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f023 030f 	bic.w	r3, r3, #15
 8007ae4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	89fb      	ldrh	r3, [r7, #14]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	89fa      	ldrh	r2, [r7, #14]
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	e04e      	b.n	8007ba0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	77bb      	strb	r3, [r7, #30]
 8007b06:	e04b      	b.n	8007ba0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d827      	bhi.n	8007b5e <UART_SetConfig+0x45e>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <UART_SetConfig+0x414>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b5f 	.word	0x08007b5f
 8007b24:	08007b4f 	.word	0x08007b4f
 8007b28:	08007b5f 	.word	0x08007b5f
 8007b2c:	08007b5f 	.word	0x08007b5f
 8007b30:	08007b5f 	.word	0x08007b5f
 8007b34:	08007b57 	.word	0x08007b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b38:	f7fc fdea 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8007b3c:	61b8      	str	r0, [r7, #24]
        break;
 8007b3e:	e013      	b.n	8007b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b40:	f7fc fdfa 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 8007b44:	61b8      	str	r0, [r7, #24]
        break;
 8007b46:	e00f      	b.n	8007b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <UART_SetConfig+0x4c0>)
 8007b4a:	61bb      	str	r3, [r7, #24]
        break;
 8007b4c:	e00c      	b.n	8007b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7fc fcf1 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8007b52:	61b8      	str	r0, [r7, #24]
        break;
 8007b54:	e008      	b.n	8007b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	61bb      	str	r3, [r7, #24]
        break;
 8007b5c:	e004      	b.n	8007b68 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	77bb      	strb	r3, [r7, #30]
        break;
 8007b66:	bf00      	nop
    }

    if (pclk != 0U)
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	085a      	lsrs	r2, r3, #1
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	441a      	add	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d908      	bls.n	8007b9c <UART_SetConfig+0x49c>
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b90:	d204      	bcs.n	8007b9c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e001      	b.n	8007ba0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007bac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40007c00 	.word	0x40007c00
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	00f42400 	.word	0x00f42400

08007bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc2:	d10a      	bne.n	8007cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d18:	f7fb fb0c 	bl	8003334 <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d10e      	bne.n	8007d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f82d 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e023      	b.n	8007d92 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10e      	bne.n	8007d76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f817 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e00d      	b.n	8007d92 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	4613      	mov	r3, r2
 8007da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	e05e      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db2:	d05a      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db4:	f7fb fabe 	bl	8003334 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11b      	bne.n	8007e02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e043      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02c      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1e:	d124      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0201 	bic.w	r2, r2, #1
 8007e48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e00f      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4013      	ands	r3, r2
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d091      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d10e      	bne.n	8007ee6 <UART_Start_Receive_IT+0x52>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <UART_Start_Receive_IT+0x48>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eda:	e02d      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	22ff      	movs	r2, #255	; 0xff
 8007ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ee4:	e028      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <UART_Start_Receive_IT+0x76>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <UART_Start_Receive_IT+0x6c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	22ff      	movs	r2, #255	; 0xff
 8007efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007efe:	e01b      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	227f      	movs	r2, #127	; 0x7f
 8007f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f08:	e016      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f12:	d10d      	bne.n	8007f30 <UART_Start_Receive_IT+0x9c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <UART_Start_Receive_IT+0x92>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	227f      	movs	r2, #127	; 0x7f
 8007f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f24:	e008      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	223f      	movs	r2, #63	; 0x3f
 8007f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f2e:	e003      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2222      	movs	r2, #34	; 0x22
 8007f44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5e:	d107      	bne.n	8007f70 <UART_Start_Receive_IT+0xdc>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d103      	bne.n	8007f70 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <UART_Start_Receive_IT+0x108>)
 8007f6c:	665a      	str	r2, [r3, #100]	; 0x64
 8007f6e:	e002      	b.n	8007f76 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <UART_Start_Receive_IT+0x10c>)
 8007f74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007f8c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	08008135 	.word	0x08008135
 8007fa0:	08008061 	.word	0x08008061

08007fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d107      	bne.n	8007fe4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0210 	bic.w	r2, r2, #16
 8007fe2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fb4d 	bl	80076c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff fb2a 	bl	80076ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800806e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008074:	2b22      	cmp	r3, #34	; 0x22
 8008076:	d151      	bne.n	800811c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008080:	89bb      	ldrh	r3, [r7, #12]
 8008082:	b2d9      	uxtb	r1, r3
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	400a      	ands	r2, r1
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d138      	bne.n	800812c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10f      	bne.n	800810e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0210 	bic.w	r2, r2, #16
 80080fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fae4 	bl	80076d4 <HAL_UARTEx_RxEventCallback>
 800810c:	e002      	b.n	8008114 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fa f844 	bl	800219c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800811a:	e007      	b.n	800812c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0208 	orr.w	r2, r2, #8
 800812a:	619a      	str	r2, [r3, #24]
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008142:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008148:	2b22      	cmp	r3, #34	; 0x22
 800814a:	d151      	bne.n	80081f0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800815a:	89ba      	ldrh	r2, [r7, #12]
 800815c:	89fb      	ldrh	r3, [r7, #14]
 800815e:	4013      	ands	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	1c9a      	adds	r2, r3, #2
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d138      	bne.n	8008200 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800819c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d10f      	bne.n	80081e2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0210 	bic.w	r2, r2, #16
 80081d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fa7a 	bl	80076d4 <HAL_UARTEx_RxEventCallback>
 80081e0:	e002      	b.n	80081e8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7f9 ffda 	bl	800219c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ee:	e007      	b.n	8008200 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0208 	orr.w	r2, r2, #8
 80081fe:	619a      	str	r2, [r3, #24]
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008208:	b084      	sub	sp, #16
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	f107 001c 	add.w	r0, r7, #28
 8008216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	2b01      	cmp	r3, #1
 800821e:	d120      	bne.n	8008262 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <USB_CoreInit+0xac>)
 8008232:	4013      	ands	r3, r2
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa5a 	bl	8008710 <USB_CoreReset>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
 8008260:	e010      	b.n	8008284 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa4e 	bl	8008710 <USB_CoreReset>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	2b01      	cmp	r3, #1
 8008288:	d10b      	bne.n	80082a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f043 0206 	orr.w	r2, r3, #6
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082ae:	b004      	add	sp, #16
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	ffbdffbf 	.word	0xffbdffbf

080082b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f023 0201 	bic.w	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d106      	bne.n	8008306 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]
 8008304:	e00b      	b.n	800831e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d106      	bne.n	800831a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60da      	str	r2, [r3, #12]
 8008318:	e001      	b.n	800831e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e003      	b.n	8008326 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800831e:	2032      	movs	r0, #50	; 0x32
 8008320:	f7fb f814 	bl	800334c <HAL_Delay>

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008330:	b084      	sub	sp, #16
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800833e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800834a:	2300      	movs	r3, #0
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	e009      	b.n	8008364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3340      	adds	r3, #64	; 0x40
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b0e      	cmp	r3, #14
 8008368:	d9f2      	bls.n	8008350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800836a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11c      	bne.n	80083aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e005      	b.n	80083b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083bc:	461a      	mov	r2, r3
 80083be:	2300      	movs	r3, #0
 80083c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c8:	4619      	mov	r1, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	461a      	mov	r2, r3
 80083d2:	680b      	ldr	r3, [r1, #0]
 80083d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10c      	bne.n	80083f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083e2:	2100      	movs	r1, #0
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f959 	bl	800869c <USB_SetDevSpeed>
 80083ea:	e018      	b.n	800841e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083ec:	2101      	movs	r1, #1
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f954 	bl	800869c <USB_SetDevSpeed>
 80083f4:	e013      	b.n	800841e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d10c      	bne.n	8008416 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f949 	bl	800869c <USB_SetDevSpeed>
 800840a:	e008      	b.n	800841e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800840c:	2101      	movs	r1, #1
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f944 	bl	800869c <USB_SetDevSpeed>
 8008414:	e003      	b.n	800841e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008416:	2103      	movs	r1, #3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f93f 	bl	800869c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800841e:	2110      	movs	r1, #16
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8f3 	bl	800860c <USB_FlushTxFifo>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f911 	bl	8008658 <USB_FlushRxFifo>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	461a      	mov	r2, r3
 8008460:	2300      	movs	r3, #0
 8008462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	e043      	b.n	80084f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008480:	d118      	bne.n	80084b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	461a      	mov	r2, r3
 8008496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	e013      	b.n	80084c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	461a      	mov	r2, r3
 80084ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e008      	b.n	80084c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	461a      	mov	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3301      	adds	r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3b7      	bcc.n	800846a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fa:	2300      	movs	r3, #0
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	e043      	b.n	8008588 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008516:	d118      	bne.n	800854a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	461a      	mov	r2, r3
 800852c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e013      	b.n	800855c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	461a      	mov	r2, r3
 8008542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	e008      	b.n	800855c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	461a      	mov	r2, r3
 8008558:	2300      	movs	r3, #0
 800855a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	461a      	mov	r2, r3
 800857c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3301      	adds	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d3b7      	bcc.n	8008500 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800859e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f043 0210 	orr.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <USB_DevInit+0x2d4>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f043 0208 	orr.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d105      	bne.n	80085f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <USB_DevInit+0x2d8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008600:	b004      	add	sp, #16
 8008602:	4770      	bx	lr
 8008604:	803c3800 	.word	0x803c3800
 8008608:	40000004 	.word	0x40000004

0800860c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	019b      	lsls	r3, r3, #6
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <USB_FlushTxFifo+0x48>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d901      	bls.n	8008638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e006      	b.n	8008646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b20      	cmp	r3, #32
 8008642:	d0f0      	beq.n	8008626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	00030d40 	.word	0x00030d40

08008658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2210      	movs	r2, #16
 8008668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <USB_FlushRxFifo+0x40>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d901      	bls.n	800867c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e006      	b.n	800868a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b10      	cmp	r3, #16
 8008686:	d0f0      	beq.n	800866a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	00030d40 	.word	0x00030d40

0800869c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086bc:	4313      	orrs	r3, r2
 80086be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086fc:	f043 0302 	orr.w	r3, r3, #2
 8008700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a13      	ldr	r2, [pc, #76]	; (8008774 <USB_CoreReset+0x64>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e01b      	b.n	8008766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	daf2      	bge.n	800871c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f043 0201 	orr.w	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <USB_CoreReset+0x64>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e006      	b.n	8008766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b01      	cmp	r3, #1
 8008762:	d0f0      	beq.n	8008746 <USB_CoreReset+0x36>

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	00030d40 	.word	0x00030d40

08008778 <arm_pid_init_f32>:
 8008778:	ed90 7a08 	vldr	s14, [r0, #32]
 800877c:	edd0 7a06 	vldr	s15, [r0, #24]
 8008780:	ed90 6a07 	vldr	s12, [r0, #28]
 8008784:	eef1 6a67 	vneg.f32	s13, s15
 8008788:	ed80 7a02 	vstr	s14, [r0, #8]
 800878c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008790:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008798:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800879c:	edc0 7a00 	vstr	s15, [r0]
 80087a0:	ed80 7a01 	vstr	s14, [r0, #4]
 80087a4:	b901      	cbnz	r1, 80087a8 <arm_pid_init_f32+0x30>
 80087a6:	4770      	bx	lr
 80087a8:	2300      	movs	r3, #0
 80087aa:	60c3      	str	r3, [r0, #12]
 80087ac:	6103      	str	r3, [r0, #16]
 80087ae:	6143      	str	r3, [r0, #20]
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop

080087b4 <__errno>:
 80087b4:	4b01      	ldr	r3, [pc, #4]	; (80087bc <__errno+0x8>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	20000058 	.word	0x20000058

080087c0 <__libc_init_array>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	4d0d      	ldr	r5, [pc, #52]	; (80087f8 <__libc_init_array+0x38>)
 80087c4:	4c0d      	ldr	r4, [pc, #52]	; (80087fc <__libc_init_array+0x3c>)
 80087c6:	1b64      	subs	r4, r4, r5
 80087c8:	10a4      	asrs	r4, r4, #2
 80087ca:	2600      	movs	r6, #0
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	d109      	bne.n	80087e4 <__libc_init_array+0x24>
 80087d0:	4d0b      	ldr	r5, [pc, #44]	; (8008800 <__libc_init_array+0x40>)
 80087d2:	4c0c      	ldr	r4, [pc, #48]	; (8008804 <__libc_init_array+0x44>)
 80087d4:	f004 ffec 	bl	800d7b0 <_init>
 80087d8:	1b64      	subs	r4, r4, r5
 80087da:	10a4      	asrs	r4, r4, #2
 80087dc:	2600      	movs	r6, #0
 80087de:	42a6      	cmp	r6, r4
 80087e0:	d105      	bne.n	80087ee <__libc_init_array+0x2e>
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e8:	4798      	blx	r3
 80087ea:	3601      	adds	r6, #1
 80087ec:	e7ee      	b.n	80087cc <__libc_init_array+0xc>
 80087ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f2:	4798      	blx	r3
 80087f4:	3601      	adds	r6, #1
 80087f6:	e7f2      	b.n	80087de <__libc_init_array+0x1e>
 80087f8:	0800de04 	.word	0x0800de04
 80087fc:	0800de04 	.word	0x0800de04
 8008800:	0800de04 	.word	0x0800de04
 8008804:	0800de08 	.word	0x0800de08

08008808 <memcpy>:
 8008808:	440a      	add	r2, r1
 800880a:	4291      	cmp	r1, r2
 800880c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008810:	d100      	bne.n	8008814 <memcpy+0xc>
 8008812:	4770      	bx	lr
 8008814:	b510      	push	{r4, lr}
 8008816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881e:	4291      	cmp	r1, r2
 8008820:	d1f9      	bne.n	8008816 <memcpy+0xe>
 8008822:	bd10      	pop	{r4, pc}

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <__cvt>:
 8008834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008836:	ed2d 8b02 	vpush	{d8}
 800883a:	eeb0 8b40 	vmov.f64	d8, d0
 800883e:	b085      	sub	sp, #20
 8008840:	4617      	mov	r7, r2
 8008842:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008844:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008846:	ee18 2a90 	vmov	r2, s17
 800884a:	f025 0520 	bic.w	r5, r5, #32
 800884e:	2a00      	cmp	r2, #0
 8008850:	bfb6      	itet	lt
 8008852:	222d      	movlt	r2, #45	; 0x2d
 8008854:	2200      	movge	r2, #0
 8008856:	eeb1 8b40 	vneglt.f64	d8, d0
 800885a:	2d46      	cmp	r5, #70	; 0x46
 800885c:	460c      	mov	r4, r1
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	d004      	beq.n	800886c <__cvt+0x38>
 8008862:	2d45      	cmp	r5, #69	; 0x45
 8008864:	d100      	bne.n	8008868 <__cvt+0x34>
 8008866:	3401      	adds	r4, #1
 8008868:	2102      	movs	r1, #2
 800886a:	e000      	b.n	800886e <__cvt+0x3a>
 800886c:	2103      	movs	r1, #3
 800886e:	ab03      	add	r3, sp, #12
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	ab02      	add	r3, sp, #8
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	4622      	mov	r2, r4
 8008878:	4633      	mov	r3, r6
 800887a:	eeb0 0b48 	vmov.f64	d0, d8
 800887e:	f001 fe1f 	bl	800a4c0 <_dtoa_r>
 8008882:	2d47      	cmp	r5, #71	; 0x47
 8008884:	d109      	bne.n	800889a <__cvt+0x66>
 8008886:	07fb      	lsls	r3, r7, #31
 8008888:	d407      	bmi.n	800889a <__cvt+0x66>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800888e:	1a1b      	subs	r3, r3, r0
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	b005      	add	sp, #20
 8008894:	ecbd 8b02 	vpop	{d8}
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889a:	2d46      	cmp	r5, #70	; 0x46
 800889c:	eb00 0204 	add.w	r2, r0, r4
 80088a0:	d10c      	bne.n	80088bc <__cvt+0x88>
 80088a2:	7803      	ldrb	r3, [r0, #0]
 80088a4:	2b30      	cmp	r3, #48	; 0x30
 80088a6:	d107      	bne.n	80088b8 <__cvt+0x84>
 80088a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b0:	bf1c      	itt	ne
 80088b2:	f1c4 0401 	rsbne	r4, r4, #1
 80088b6:	6034      	strne	r4, [r6, #0]
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	441a      	add	r2, r3
 80088bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c4:	bf08      	it	eq
 80088c6:	9203      	streq	r2, [sp, #12]
 80088c8:	2130      	movs	r1, #48	; 0x30
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d2dc      	bcs.n	800888a <__cvt+0x56>
 80088d0:	1c5c      	adds	r4, r3, #1
 80088d2:	9403      	str	r4, [sp, #12]
 80088d4:	7019      	strb	r1, [r3, #0]
 80088d6:	e7f8      	b.n	80088ca <__cvt+0x96>

080088d8 <__exponent>:
 80088d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088da:	4603      	mov	r3, r0
 80088dc:	2900      	cmp	r1, #0
 80088de:	bfb8      	it	lt
 80088e0:	4249      	neglt	r1, r1
 80088e2:	f803 2b02 	strb.w	r2, [r3], #2
 80088e6:	bfb4      	ite	lt
 80088e8:	222d      	movlt	r2, #45	; 0x2d
 80088ea:	222b      	movge	r2, #43	; 0x2b
 80088ec:	2909      	cmp	r1, #9
 80088ee:	7042      	strb	r2, [r0, #1]
 80088f0:	dd2a      	ble.n	8008948 <__exponent+0x70>
 80088f2:	f10d 0407 	add.w	r4, sp, #7
 80088f6:	46a4      	mov	ip, r4
 80088f8:	270a      	movs	r7, #10
 80088fa:	46a6      	mov	lr, r4
 80088fc:	460a      	mov	r2, r1
 80088fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8008902:	fb07 1516 	mls	r5, r7, r6, r1
 8008906:	3530      	adds	r5, #48	; 0x30
 8008908:	2a63      	cmp	r2, #99	; 0x63
 800890a:	f104 34ff 	add.w	r4, r4, #4294967295
 800890e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008912:	4631      	mov	r1, r6
 8008914:	dcf1      	bgt.n	80088fa <__exponent+0x22>
 8008916:	3130      	adds	r1, #48	; 0x30
 8008918:	f1ae 0502 	sub.w	r5, lr, #2
 800891c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008920:	1c44      	adds	r4, r0, #1
 8008922:	4629      	mov	r1, r5
 8008924:	4561      	cmp	r1, ip
 8008926:	d30a      	bcc.n	800893e <__exponent+0x66>
 8008928:	f10d 0209 	add.w	r2, sp, #9
 800892c:	eba2 020e 	sub.w	r2, r2, lr
 8008930:	4565      	cmp	r5, ip
 8008932:	bf88      	it	hi
 8008934:	2200      	movhi	r2, #0
 8008936:	4413      	add	r3, r2
 8008938:	1a18      	subs	r0, r3, r0
 800893a:	b003      	add	sp, #12
 800893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008942:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008946:	e7ed      	b.n	8008924 <__exponent+0x4c>
 8008948:	2330      	movs	r3, #48	; 0x30
 800894a:	3130      	adds	r1, #48	; 0x30
 800894c:	7083      	strb	r3, [r0, #2]
 800894e:	70c1      	strb	r1, [r0, #3]
 8008950:	1d03      	adds	r3, r0, #4
 8008952:	e7f1      	b.n	8008938 <__exponent+0x60>
 8008954:	0000      	movs	r0, r0
	...

08008958 <_printf_float>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	b08b      	sub	sp, #44	; 0x2c
 800895e:	460c      	mov	r4, r1
 8008960:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008964:	4616      	mov	r6, r2
 8008966:	461f      	mov	r7, r3
 8008968:	4605      	mov	r5, r0
 800896a:	f002 fe9b 	bl	800b6a4 <_localeconv_r>
 800896e:	f8d0 b000 	ldr.w	fp, [r0]
 8008972:	4658      	mov	r0, fp
 8008974:	f7f7 fc64 	bl	8000240 <strlen>
 8008978:	2300      	movs	r3, #0
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	f8d8 3000 	ldr.w	r3, [r8]
 8008980:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008984:	6822      	ldr	r2, [r4, #0]
 8008986:	3307      	adds	r3, #7
 8008988:	f023 0307 	bic.w	r3, r3, #7
 800898c:	f103 0108 	add.w	r1, r3, #8
 8008990:	f8c8 1000 	str.w	r1, [r8]
 8008994:	4682      	mov	sl, r0
 8008996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800899a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800899e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008c00 <_printf_float+0x2a8>
 80089a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80089a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80089aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80089ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b2:	dd24      	ble.n	80089fe <_printf_float+0xa6>
 80089b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d502      	bpl.n	80089c4 <_printf_float+0x6c>
 80089be:	232d      	movs	r3, #45	; 0x2d
 80089c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c4:	4b90      	ldr	r3, [pc, #576]	; (8008c08 <_printf_float+0x2b0>)
 80089c6:	4891      	ldr	r0, [pc, #580]	; (8008c0c <_printf_float+0x2b4>)
 80089c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80089cc:	bf94      	ite	ls
 80089ce:	4698      	movls	r8, r3
 80089d0:	4680      	movhi	r8, r0
 80089d2:	2303      	movs	r3, #3
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	f022 0204 	bic.w	r2, r2, #4
 80089da:	2300      	movs	r3, #0
 80089dc:	6022      	str	r2, [r4, #0]
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	9700      	str	r7, [sp, #0]
 80089e2:	4633      	mov	r3, r6
 80089e4:	aa09      	add	r2, sp, #36	; 0x24
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f000 f9d3 	bl	8008d94 <_printf_common>
 80089ee:	3001      	adds	r0, #1
 80089f0:	f040 808a 	bne.w	8008b08 <_printf_float+0x1b0>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	b00b      	add	sp, #44	; 0x2c
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d709      	bvc.n	8008a1c <_printf_float+0xc4>
 8008a08:	ee10 3a90 	vmov	r3, s1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bfbc      	itt	lt
 8008a10:	232d      	movlt	r3, #45	; 0x2d
 8008a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a16:	487e      	ldr	r0, [pc, #504]	; (8008c10 <_printf_float+0x2b8>)
 8008a18:	4b7e      	ldr	r3, [pc, #504]	; (8008c14 <_printf_float+0x2bc>)
 8008a1a:	e7d5      	b.n	80089c8 <_printf_float+0x70>
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a22:	9104      	str	r1, [sp, #16]
 8008a24:	1c59      	adds	r1, r3, #1
 8008a26:	d13c      	bne.n	8008aa2 <_printf_float+0x14a>
 8008a28:	2306      	movs	r3, #6
 8008a2a:	6063      	str	r3, [r4, #4]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	ab08      	add	r3, sp, #32
 8008a32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a3a:	ab07      	add	r3, sp, #28
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	f10d 031b 	add.w	r3, sp, #27
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7ff fef4 	bl	8008834 <__cvt>
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	9907      	ldr	r1, [sp, #28]
 8008a50:	2b47      	cmp	r3, #71	; 0x47
 8008a52:	4680      	mov	r8, r0
 8008a54:	d108      	bne.n	8008a68 <_printf_float+0x110>
 8008a56:	1cc8      	adds	r0, r1, #3
 8008a58:	db02      	blt.n	8008a60 <_printf_float+0x108>
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	dd41      	ble.n	8008ae4 <_printf_float+0x18c>
 8008a60:	f1a9 0902 	sub.w	r9, r9, #2
 8008a64:	fa5f f989 	uxtb.w	r9, r9
 8008a68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a6c:	d820      	bhi.n	8008ab0 <_printf_float+0x158>
 8008a6e:	3901      	subs	r1, #1
 8008a70:	464a      	mov	r2, r9
 8008a72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a76:	9107      	str	r1, [sp, #28]
 8008a78:	f7ff ff2e 	bl	80088d8 <__exponent>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	9004      	str	r0, [sp, #16]
 8008a80:	1813      	adds	r3, r2, r0
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	6123      	str	r3, [r4, #16]
 8008a86:	dc02      	bgt.n	8008a8e <_printf_float+0x136>
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	07d2      	lsls	r2, r2, #31
 8008a8c:	d501      	bpl.n	8008a92 <_printf_float+0x13a>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	6123      	str	r3, [r4, #16]
 8008a92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0a2      	beq.n	80089e0 <_printf_float+0x88>
 8008a9a:	232d      	movs	r3, #45	; 0x2d
 8008a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa0:	e79e      	b.n	80089e0 <_printf_float+0x88>
 8008aa2:	9904      	ldr	r1, [sp, #16]
 8008aa4:	2947      	cmp	r1, #71	; 0x47
 8008aa6:	d1c1      	bne.n	8008a2c <_printf_float+0xd4>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1bf      	bne.n	8008a2c <_printf_float+0xd4>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7bc      	b.n	8008a2a <_printf_float+0xd2>
 8008ab0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ab4:	d118      	bne.n	8008ae8 <_printf_float+0x190>
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	dd0b      	ble.n	8008ad4 <_printf_float+0x17c>
 8008abc:	6121      	str	r1, [r4, #16]
 8008abe:	b913      	cbnz	r3, 8008ac6 <_printf_float+0x16e>
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	07d0      	lsls	r0, r2, #31
 8008ac4:	d502      	bpl.n	8008acc <_printf_float+0x174>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	440b      	add	r3, r1
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	2300      	movs	r3, #0
 8008ace:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	e7de      	b.n	8008a92 <_printf_float+0x13a>
 8008ad4:	b913      	cbnz	r3, 8008adc <_printf_float+0x184>
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	07d2      	lsls	r2, r2, #31
 8008ada:	d501      	bpl.n	8008ae0 <_printf_float+0x188>
 8008adc:	3302      	adds	r3, #2
 8008ade:	e7f4      	b.n	8008aca <_printf_float+0x172>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7f2      	b.n	8008aca <_printf_float+0x172>
 8008ae4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008ae8:	9b08      	ldr	r3, [sp, #32]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	db05      	blt.n	8008afa <_printf_float+0x1a2>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	6121      	str	r1, [r4, #16]
 8008af2:	07d8      	lsls	r0, r3, #31
 8008af4:	d5ea      	bpl.n	8008acc <_printf_float+0x174>
 8008af6:	1c4b      	adds	r3, r1, #1
 8008af8:	e7e7      	b.n	8008aca <_printf_float+0x172>
 8008afa:	2900      	cmp	r1, #0
 8008afc:	bfd4      	ite	le
 8008afe:	f1c1 0202 	rsble	r2, r1, #2
 8008b02:	2201      	movgt	r2, #1
 8008b04:	4413      	add	r3, r2
 8008b06:	e7e0      	b.n	8008aca <_printf_float+0x172>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	055a      	lsls	r2, r3, #21
 8008b0c:	d407      	bmi.n	8008b1e <_printf_float+0x1c6>
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	4642      	mov	r2, r8
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d12a      	bne.n	8008b72 <_printf_float+0x21a>
 8008b1c:	e76a      	b.n	80089f4 <_printf_float+0x9c>
 8008b1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b22:	f240 80e2 	bls.w	8008cea <_printf_float+0x392>
 8008b26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b32:	d133      	bne.n	8008b9c <_printf_float+0x244>
 8008b34:	4a38      	ldr	r2, [pc, #224]	; (8008c18 <_printf_float+0x2c0>)
 8008b36:	2301      	movs	r3, #1
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f af58 	beq.w	80089f4 <_printf_float+0x9c>
 8008b44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	db02      	blt.n	8008b52 <_printf_float+0x1fa>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	07d8      	lsls	r0, r3, #31
 8008b50:	d50f      	bpl.n	8008b72 <_printf_float+0x21a>
 8008b52:	4653      	mov	r3, sl
 8008b54:	465a      	mov	r2, fp
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f af49 	beq.w	80089f4 <_printf_float+0x9c>
 8008b62:	f04f 0800 	mov.w	r8, #0
 8008b66:	f104 091a 	add.w	r9, r4, #26
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4543      	cmp	r3, r8
 8008b70:	dc09      	bgt.n	8008b86 <_printf_float+0x22e>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	079b      	lsls	r3, r3, #30
 8008b76:	f100 8108 	bmi.w	8008d8a <_printf_float+0x432>
 8008b7a:	68e0      	ldr	r0, [r4, #12]
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	4298      	cmp	r0, r3
 8008b80:	bfb8      	it	lt
 8008b82:	4618      	movlt	r0, r3
 8008b84:	e738      	b.n	80089f8 <_printf_float+0xa0>
 8008b86:	2301      	movs	r3, #1
 8008b88:	464a      	mov	r2, r9
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	f43f af2f 	beq.w	80089f4 <_printf_float+0x9c>
 8008b96:	f108 0801 	add.w	r8, r8, #1
 8008b9a:	e7e6      	b.n	8008b6a <_printf_float+0x212>
 8008b9c:	9b07      	ldr	r3, [sp, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dc3c      	bgt.n	8008c1c <_printf_float+0x2c4>
 8008ba2:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <_printf_float+0x2c0>)
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b8      	blx	r7
 8008bac:	3001      	adds	r0, #1
 8008bae:	f43f af21 	beq.w	80089f4 <_printf_float+0x9c>
 8008bb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	d102      	bne.n	8008bc0 <_printf_float+0x268>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	07d9      	lsls	r1, r3, #31
 8008bbe:	d5d8      	bpl.n	8008b72 <_printf_float+0x21a>
 8008bc0:	4653      	mov	r3, sl
 8008bc2:	465a      	mov	r2, fp
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b8      	blx	r7
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f43f af12 	beq.w	80089f4 <_printf_float+0x9c>
 8008bd0:	f04f 0900 	mov.w	r9, #0
 8008bd4:	f104 0a1a 	add.w	sl, r4, #26
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	425b      	negs	r3, r3
 8008bdc:	454b      	cmp	r3, r9
 8008bde:	dc01      	bgt.n	8008be4 <_printf_float+0x28c>
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	e795      	b.n	8008b10 <_printf_float+0x1b8>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4652      	mov	r2, sl
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f43f af00 	beq.w	80089f4 <_printf_float+0x9c>
 8008bf4:	f109 0901 	add.w	r9, r9, #1
 8008bf8:	e7ee      	b.n	8008bd8 <_printf_float+0x280>
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w
 8008c00:	ffffffff 	.word	0xffffffff
 8008c04:	7fefffff 	.word	0x7fefffff
 8008c08:	0800da38 	.word	0x0800da38
 8008c0c:	0800da3c 	.word	0x0800da3c
 8008c10:	0800da44 	.word	0x0800da44
 8008c14:	0800da40 	.word	0x0800da40
 8008c18:	0800dd49 	.word	0x0800dd49
 8008c1c:	9a08      	ldr	r2, [sp, #32]
 8008c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c20:	429a      	cmp	r2, r3
 8008c22:	bfa8      	it	ge
 8008c24:	461a      	movge	r2, r3
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	4691      	mov	r9, r2
 8008c2a:	dc38      	bgt.n	8008c9e <_printf_float+0x346>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c34:	f104 021a 	add.w	r2, r4, #26
 8008c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c3a:	9905      	ldr	r1, [sp, #20]
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	eba3 0309 	sub.w	r3, r3, r9
 8008c42:	428b      	cmp	r3, r1
 8008c44:	dc33      	bgt.n	8008cae <_printf_float+0x356>
 8008c46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	db3c      	blt.n	8008cc8 <_printf_float+0x370>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	07da      	lsls	r2, r3, #31
 8008c52:	d439      	bmi.n	8008cc8 <_printf_float+0x370>
 8008c54:	9a08      	ldr	r2, [sp, #32]
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	9907      	ldr	r1, [sp, #28]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	eba2 0901 	sub.w	r9, r2, r1
 8008c60:	4599      	cmp	r9, r3
 8008c62:	bfa8      	it	ge
 8008c64:	4699      	movge	r9, r3
 8008c66:	f1b9 0f00 	cmp.w	r9, #0
 8008c6a:	dc35      	bgt.n	8008cd8 <_printf_float+0x380>
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c74:	f104 0a1a 	add.w	sl, r4, #26
 8008c78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	eba3 0309 	sub.w	r3, r3, r9
 8008c82:	4543      	cmp	r3, r8
 8008c84:	f77f af75 	ble.w	8008b72 <_printf_float+0x21a>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f aeae 	beq.w	80089f4 <_printf_float+0x9c>
 8008c98:	f108 0801 	add.w	r8, r8, #1
 8008c9c:	e7ec      	b.n	8008c78 <_printf_float+0x320>
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d1bf      	bne.n	8008c2c <_printf_float+0x2d4>
 8008cac:	e6a2      	b.n	80089f4 <_printf_float+0x9c>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	9204      	str	r2, [sp, #16]
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f43f ae9b 	beq.w	80089f4 <_printf_float+0x9c>
 8008cbe:	9b05      	ldr	r3, [sp, #20]
 8008cc0:	9a04      	ldr	r2, [sp, #16]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	9305      	str	r3, [sp, #20]
 8008cc6:	e7b7      	b.n	8008c38 <_printf_float+0x2e0>
 8008cc8:	4653      	mov	r3, sl
 8008cca:	465a      	mov	r2, fp
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d1be      	bne.n	8008c54 <_printf_float+0x2fc>
 8008cd6:	e68d      	b.n	80089f4 <_printf_float+0x9c>
 8008cd8:	9a04      	ldr	r2, [sp, #16]
 8008cda:	464b      	mov	r3, r9
 8008cdc:	4442      	add	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d1c1      	bne.n	8008c6c <_printf_float+0x314>
 8008ce8:	e684      	b.n	80089f4 <_printf_float+0x9c>
 8008cea:	9a08      	ldr	r2, [sp, #32]
 8008cec:	2a01      	cmp	r2, #1
 8008cee:	dc01      	bgt.n	8008cf4 <_printf_float+0x39c>
 8008cf0:	07db      	lsls	r3, r3, #31
 8008cf2:	d537      	bpl.n	8008d64 <_printf_float+0x40c>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	4642      	mov	r2, r8
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f43f ae78 	beq.w	80089f4 <_printf_float+0x9c>
 8008d04:	4653      	mov	r3, sl
 8008d06:	465a      	mov	r2, fp
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f ae70 	beq.w	80089f4 <_printf_float+0x9c>
 8008d14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	d01b      	beq.n	8008d5a <_printf_float+0x402>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	f108 0201 	add.w	r2, r8, #1
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b8      	blx	r7
 8008d30:	3001      	adds	r0, #1
 8008d32:	d10e      	bne.n	8008d52 <_printf_float+0x3fa>
 8008d34:	e65e      	b.n	80089f4 <_printf_float+0x9c>
 8008d36:	2301      	movs	r3, #1
 8008d38:	464a      	mov	r2, r9
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b8      	blx	r7
 8008d40:	3001      	adds	r0, #1
 8008d42:	f43f ae57 	beq.w	80089f4 <_printf_float+0x9c>
 8008d46:	f108 0801 	add.w	r8, r8, #1
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	4543      	cmp	r3, r8
 8008d50:	dcf1      	bgt.n	8008d36 <_printf_float+0x3de>
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d58:	e6db      	b.n	8008b12 <_printf_float+0x1ba>
 8008d5a:	f04f 0800 	mov.w	r8, #0
 8008d5e:	f104 091a 	add.w	r9, r4, #26
 8008d62:	e7f2      	b.n	8008d4a <_printf_float+0x3f2>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4642      	mov	r2, r8
 8008d68:	e7df      	b.n	8008d2a <_printf_float+0x3d2>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	464a      	mov	r2, r9
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b8      	blx	r7
 8008d74:	3001      	adds	r0, #1
 8008d76:	f43f ae3d 	beq.w	80089f4 <_printf_float+0x9c>
 8008d7a:	f108 0801 	add.w	r8, r8, #1
 8008d7e:	68e3      	ldr	r3, [r4, #12]
 8008d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d82:	1a5b      	subs	r3, r3, r1
 8008d84:	4543      	cmp	r3, r8
 8008d86:	dcf0      	bgt.n	8008d6a <_printf_float+0x412>
 8008d88:	e6f7      	b.n	8008b7a <_printf_float+0x222>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	f104 0919 	add.w	r9, r4, #25
 8008d92:	e7f4      	b.n	8008d7e <_printf_float+0x426>

08008d94 <_printf_common>:
 8008d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	4616      	mov	r6, r2
 8008d9a:	4699      	mov	r9, r3
 8008d9c:	688a      	ldr	r2, [r1, #8]
 8008d9e:	690b      	ldr	r3, [r1, #16]
 8008da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008da4:	4293      	cmp	r3, r2
 8008da6:	bfb8      	it	lt
 8008da8:	4613      	movlt	r3, r2
 8008daa:	6033      	str	r3, [r6, #0]
 8008dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008db0:	4607      	mov	r7, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b10a      	cbz	r2, 8008dba <_printf_common+0x26>
 8008db6:	3301      	adds	r3, #1
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	0699      	lsls	r1, r3, #26
 8008dbe:	bf42      	ittt	mi
 8008dc0:	6833      	ldrmi	r3, [r6, #0]
 8008dc2:	3302      	addmi	r3, #2
 8008dc4:	6033      	strmi	r3, [r6, #0]
 8008dc6:	6825      	ldr	r5, [r4, #0]
 8008dc8:	f015 0506 	ands.w	r5, r5, #6
 8008dcc:	d106      	bne.n	8008ddc <_printf_common+0x48>
 8008dce:	f104 0a19 	add.w	sl, r4, #25
 8008dd2:	68e3      	ldr	r3, [r4, #12]
 8008dd4:	6832      	ldr	r2, [r6, #0]
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	42ab      	cmp	r3, r5
 8008dda:	dc26      	bgt.n	8008e2a <_printf_common+0x96>
 8008ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008de0:	1e13      	subs	r3, r2, #0
 8008de2:	6822      	ldr	r2, [r4, #0]
 8008de4:	bf18      	it	ne
 8008de6:	2301      	movne	r3, #1
 8008de8:	0692      	lsls	r2, r2, #26
 8008dea:	d42b      	bmi.n	8008e44 <_printf_common+0xb0>
 8008dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df0:	4649      	mov	r1, r9
 8008df2:	4638      	mov	r0, r7
 8008df4:	47c0      	blx	r8
 8008df6:	3001      	adds	r0, #1
 8008df8:	d01e      	beq.n	8008e38 <_printf_common+0xa4>
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	68e5      	ldr	r5, [r4, #12]
 8008dfe:	6832      	ldr	r2, [r6, #0]
 8008e00:	f003 0306 	and.w	r3, r3, #6
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	bf08      	it	eq
 8008e08:	1aad      	subeq	r5, r5, r2
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	6922      	ldr	r2, [r4, #16]
 8008e0e:	bf0c      	ite	eq
 8008e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e14:	2500      	movne	r5, #0
 8008e16:	4293      	cmp	r3, r2
 8008e18:	bfc4      	itt	gt
 8008e1a:	1a9b      	subgt	r3, r3, r2
 8008e1c:	18ed      	addgt	r5, r5, r3
 8008e1e:	2600      	movs	r6, #0
 8008e20:	341a      	adds	r4, #26
 8008e22:	42b5      	cmp	r5, r6
 8008e24:	d11a      	bne.n	8008e5c <_printf_common+0xc8>
 8008e26:	2000      	movs	r0, #0
 8008e28:	e008      	b.n	8008e3c <_printf_common+0xa8>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	4649      	mov	r1, r9
 8008e30:	4638      	mov	r0, r7
 8008e32:	47c0      	blx	r8
 8008e34:	3001      	adds	r0, #1
 8008e36:	d103      	bne.n	8008e40 <_printf_common+0xac>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e40:	3501      	adds	r5, #1
 8008e42:	e7c6      	b.n	8008dd2 <_printf_common+0x3e>
 8008e44:	18e1      	adds	r1, r4, r3
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	2030      	movs	r0, #48	; 0x30
 8008e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e4e:	4422      	add	r2, r4
 8008e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e58:	3302      	adds	r3, #2
 8008e5a:	e7c7      	b.n	8008dec <_printf_common+0x58>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	4622      	mov	r2, r4
 8008e60:	4649      	mov	r1, r9
 8008e62:	4638      	mov	r0, r7
 8008e64:	47c0      	blx	r8
 8008e66:	3001      	adds	r0, #1
 8008e68:	d0e6      	beq.n	8008e38 <_printf_common+0xa4>
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7d9      	b.n	8008e22 <_printf_common+0x8e>
	...

08008e70 <_printf_i>:
 8008e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	460c      	mov	r4, r1
 8008e76:	4691      	mov	r9, r2
 8008e78:	7e27      	ldrb	r7, [r4, #24]
 8008e7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4680      	mov	r8, r0
 8008e80:	469a      	mov	sl, r3
 8008e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e86:	d807      	bhi.n	8008e98 <_printf_i+0x28>
 8008e88:	2f62      	cmp	r7, #98	; 0x62
 8008e8a:	d80a      	bhi.n	8008ea2 <_printf_i+0x32>
 8008e8c:	2f00      	cmp	r7, #0
 8008e8e:	f000 80d8 	beq.w	8009042 <_printf_i+0x1d2>
 8008e92:	2f58      	cmp	r7, #88	; 0x58
 8008e94:	f000 80a3 	beq.w	8008fde <_printf_i+0x16e>
 8008e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea0:	e03a      	b.n	8008f18 <_printf_i+0xa8>
 8008ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ea6:	2b15      	cmp	r3, #21
 8008ea8:	d8f6      	bhi.n	8008e98 <_printf_i+0x28>
 8008eaa:	a001      	add	r0, pc, #4	; (adr r0, 8008eb0 <_printf_i+0x40>)
 8008eac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008eb0:	08008f09 	.word	0x08008f09
 8008eb4:	08008f1d 	.word	0x08008f1d
 8008eb8:	08008e99 	.word	0x08008e99
 8008ebc:	08008e99 	.word	0x08008e99
 8008ec0:	08008e99 	.word	0x08008e99
 8008ec4:	08008e99 	.word	0x08008e99
 8008ec8:	08008f1d 	.word	0x08008f1d
 8008ecc:	08008e99 	.word	0x08008e99
 8008ed0:	08008e99 	.word	0x08008e99
 8008ed4:	08008e99 	.word	0x08008e99
 8008ed8:	08008e99 	.word	0x08008e99
 8008edc:	08009029 	.word	0x08009029
 8008ee0:	08008f4d 	.word	0x08008f4d
 8008ee4:	0800900b 	.word	0x0800900b
 8008ee8:	08008e99 	.word	0x08008e99
 8008eec:	08008e99 	.word	0x08008e99
 8008ef0:	0800904b 	.word	0x0800904b
 8008ef4:	08008e99 	.word	0x08008e99
 8008ef8:	08008f4d 	.word	0x08008f4d
 8008efc:	08008e99 	.word	0x08008e99
 8008f00:	08008e99 	.word	0x08008e99
 8008f04:	08009013 	.word	0x08009013
 8008f08:	680b      	ldr	r3, [r1, #0]
 8008f0a:	1d1a      	adds	r2, r3, #4
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	600a      	str	r2, [r1, #0]
 8008f10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e0a3      	b.n	8009064 <_printf_i+0x1f4>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	6808      	ldr	r0, [r1, #0]
 8008f20:	062e      	lsls	r6, r5, #24
 8008f22:	f100 0304 	add.w	r3, r0, #4
 8008f26:	d50a      	bpl.n	8008f3e <_printf_i+0xce>
 8008f28:	6805      	ldr	r5, [r0, #0]
 8008f2a:	600b      	str	r3, [r1, #0]
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	da03      	bge.n	8008f38 <_printf_i+0xc8>
 8008f30:	232d      	movs	r3, #45	; 0x2d
 8008f32:	426d      	negs	r5, r5
 8008f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f38:	485e      	ldr	r0, [pc, #376]	; (80090b4 <_printf_i+0x244>)
 8008f3a:	230a      	movs	r3, #10
 8008f3c:	e019      	b.n	8008f72 <_printf_i+0x102>
 8008f3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f42:	6805      	ldr	r5, [r0, #0]
 8008f44:	600b      	str	r3, [r1, #0]
 8008f46:	bf18      	it	ne
 8008f48:	b22d      	sxthne	r5, r5
 8008f4a:	e7ef      	b.n	8008f2c <_printf_i+0xbc>
 8008f4c:	680b      	ldr	r3, [r1, #0]
 8008f4e:	6825      	ldr	r5, [r4, #0]
 8008f50:	1d18      	adds	r0, r3, #4
 8008f52:	6008      	str	r0, [r1, #0]
 8008f54:	0628      	lsls	r0, r5, #24
 8008f56:	d501      	bpl.n	8008f5c <_printf_i+0xec>
 8008f58:	681d      	ldr	r5, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <_printf_i+0xf2>
 8008f5c:	0669      	lsls	r1, r5, #25
 8008f5e:	d5fb      	bpl.n	8008f58 <_printf_i+0xe8>
 8008f60:	881d      	ldrh	r5, [r3, #0]
 8008f62:	4854      	ldr	r0, [pc, #336]	; (80090b4 <_printf_i+0x244>)
 8008f64:	2f6f      	cmp	r7, #111	; 0x6f
 8008f66:	bf0c      	ite	eq
 8008f68:	2308      	moveq	r3, #8
 8008f6a:	230a      	movne	r3, #10
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f72:	6866      	ldr	r6, [r4, #4]
 8008f74:	60a6      	str	r6, [r4, #8]
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	bfa2      	ittt	ge
 8008f7a:	6821      	ldrge	r1, [r4, #0]
 8008f7c:	f021 0104 	bicge.w	r1, r1, #4
 8008f80:	6021      	strge	r1, [r4, #0]
 8008f82:	b90d      	cbnz	r5, 8008f88 <_printf_i+0x118>
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	d04d      	beq.n	8009024 <_printf_i+0x1b4>
 8008f88:	4616      	mov	r6, r2
 8008f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f92:	5dc7      	ldrb	r7, [r0, r7]
 8008f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f98:	462f      	mov	r7, r5
 8008f9a:	42bb      	cmp	r3, r7
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	d9f4      	bls.n	8008f8a <_printf_i+0x11a>
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d10b      	bne.n	8008fbc <_printf_i+0x14c>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	07df      	lsls	r7, r3, #31
 8008fa8:	d508      	bpl.n	8008fbc <_printf_i+0x14c>
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	bfde      	ittt	le
 8008fb2:	2330      	movle	r3, #48	; 0x30
 8008fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fbc:	1b92      	subs	r2, r2, r6
 8008fbe:	6122      	str	r2, [r4, #16]
 8008fc0:	f8cd a000 	str.w	sl, [sp]
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	aa03      	add	r2, sp, #12
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4640      	mov	r0, r8
 8008fcc:	f7ff fee2 	bl	8008d94 <_printf_common>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d14c      	bne.n	800906e <_printf_i+0x1fe>
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b004      	add	sp, #16
 8008fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fde:	4835      	ldr	r0, [pc, #212]	; (80090b4 <_printf_i+0x244>)
 8008fe0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	680e      	ldr	r6, [r1, #0]
 8008fe8:	061f      	lsls	r7, r3, #24
 8008fea:	f856 5b04 	ldr.w	r5, [r6], #4
 8008fee:	600e      	str	r6, [r1, #0]
 8008ff0:	d514      	bpl.n	800901c <_printf_i+0x1ac>
 8008ff2:	07d9      	lsls	r1, r3, #31
 8008ff4:	bf44      	itt	mi
 8008ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8008ffa:	6023      	strmi	r3, [r4, #0]
 8008ffc:	b91d      	cbnz	r5, 8009006 <_printf_i+0x196>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	f023 0320 	bic.w	r3, r3, #32
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	2310      	movs	r3, #16
 8009008:	e7b0      	b.n	8008f6c <_printf_i+0xfc>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	f043 0320 	orr.w	r3, r3, #32
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	2378      	movs	r3, #120	; 0x78
 8009014:	4828      	ldr	r0, [pc, #160]	; (80090b8 <_printf_i+0x248>)
 8009016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800901a:	e7e3      	b.n	8008fe4 <_printf_i+0x174>
 800901c:	065e      	lsls	r6, r3, #25
 800901e:	bf48      	it	mi
 8009020:	b2ad      	uxthmi	r5, r5
 8009022:	e7e6      	b.n	8008ff2 <_printf_i+0x182>
 8009024:	4616      	mov	r6, r2
 8009026:	e7bb      	b.n	8008fa0 <_printf_i+0x130>
 8009028:	680b      	ldr	r3, [r1, #0]
 800902a:	6826      	ldr	r6, [r4, #0]
 800902c:	6960      	ldr	r0, [r4, #20]
 800902e:	1d1d      	adds	r5, r3, #4
 8009030:	600d      	str	r5, [r1, #0]
 8009032:	0635      	lsls	r5, r6, #24
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	d501      	bpl.n	800903c <_printf_i+0x1cc>
 8009038:	6018      	str	r0, [r3, #0]
 800903a:	e002      	b.n	8009042 <_printf_i+0x1d2>
 800903c:	0671      	lsls	r1, r6, #25
 800903e:	d5fb      	bpl.n	8009038 <_printf_i+0x1c8>
 8009040:	8018      	strh	r0, [r3, #0]
 8009042:	2300      	movs	r3, #0
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	4616      	mov	r6, r2
 8009048:	e7ba      	b.n	8008fc0 <_printf_i+0x150>
 800904a:	680b      	ldr	r3, [r1, #0]
 800904c:	1d1a      	adds	r2, r3, #4
 800904e:	600a      	str	r2, [r1, #0]
 8009050:	681e      	ldr	r6, [r3, #0]
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	2100      	movs	r1, #0
 8009056:	4630      	mov	r0, r6
 8009058:	f7f7 f8fa 	bl	8000250 <memchr>
 800905c:	b108      	cbz	r0, 8009062 <_printf_i+0x1f2>
 800905e:	1b80      	subs	r0, r0, r6
 8009060:	6060      	str	r0, [r4, #4]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	2300      	movs	r3, #0
 8009068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800906c:	e7a8      	b.n	8008fc0 <_printf_i+0x150>
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	4632      	mov	r2, r6
 8009072:	4649      	mov	r1, r9
 8009074:	4640      	mov	r0, r8
 8009076:	47d0      	blx	sl
 8009078:	3001      	adds	r0, #1
 800907a:	d0ab      	beq.n	8008fd4 <_printf_i+0x164>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	079b      	lsls	r3, r3, #30
 8009080:	d413      	bmi.n	80090aa <_printf_i+0x23a>
 8009082:	68e0      	ldr	r0, [r4, #12]
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	4298      	cmp	r0, r3
 8009088:	bfb8      	it	lt
 800908a:	4618      	movlt	r0, r3
 800908c:	e7a4      	b.n	8008fd8 <_printf_i+0x168>
 800908e:	2301      	movs	r3, #1
 8009090:	4632      	mov	r2, r6
 8009092:	4649      	mov	r1, r9
 8009094:	4640      	mov	r0, r8
 8009096:	47d0      	blx	sl
 8009098:	3001      	adds	r0, #1
 800909a:	d09b      	beq.n	8008fd4 <_printf_i+0x164>
 800909c:	3501      	adds	r5, #1
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	9903      	ldr	r1, [sp, #12]
 80090a2:	1a5b      	subs	r3, r3, r1
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dcf2      	bgt.n	800908e <_printf_i+0x21e>
 80090a8:	e7eb      	b.n	8009082 <_printf_i+0x212>
 80090aa:	2500      	movs	r5, #0
 80090ac:	f104 0619 	add.w	r6, r4, #25
 80090b0:	e7f5      	b.n	800909e <_printf_i+0x22e>
 80090b2:	bf00      	nop
 80090b4:	0800da48 	.word	0x0800da48
 80090b8:	0800da59 	.word	0x0800da59

080090bc <_scanf_float>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b087      	sub	sp, #28
 80090c2:	4617      	mov	r7, r2
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	688b      	ldr	r3, [r1, #8]
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090ce:	bf83      	ittte	hi
 80090d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090d4:	195b      	addhi	r3, r3, r5
 80090d6:	9302      	strhi	r3, [sp, #8]
 80090d8:	2300      	movls	r3, #0
 80090da:	bf86      	itte	hi
 80090dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090e0:	608b      	strhi	r3, [r1, #8]
 80090e2:	9302      	strls	r3, [sp, #8]
 80090e4:	680b      	ldr	r3, [r1, #0]
 80090e6:	468b      	mov	fp, r1
 80090e8:	2500      	movs	r5, #0
 80090ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80090f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090f6:	4680      	mov	r8, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	465e      	mov	r6, fp
 80090fc:	46aa      	mov	sl, r5
 80090fe:	46a9      	mov	r9, r5
 8009100:	9501      	str	r5, [sp, #4]
 8009102:	68a2      	ldr	r2, [r4, #8]
 8009104:	b152      	cbz	r2, 800911c <_scanf_float+0x60>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b4e      	cmp	r3, #78	; 0x4e
 800910c:	d864      	bhi.n	80091d8 <_scanf_float+0x11c>
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d83c      	bhi.n	800918c <_scanf_float+0xd0>
 8009112:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009116:	b2c8      	uxtb	r0, r1
 8009118:	280e      	cmp	r0, #14
 800911a:	d93a      	bls.n	8009192 <_scanf_float+0xd6>
 800911c:	f1b9 0f00 	cmp.w	r9, #0
 8009120:	d003      	beq.n	800912a <_scanf_float+0x6e>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912e:	f1ba 0f01 	cmp.w	sl, #1
 8009132:	f200 8113 	bhi.w	800935c <_scanf_float+0x2a0>
 8009136:	455e      	cmp	r6, fp
 8009138:	f200 8105 	bhi.w	8009346 <_scanf_float+0x28a>
 800913c:	2501      	movs	r5, #1
 800913e:	4628      	mov	r0, r5
 8009140:	b007      	add	sp, #28
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800914a:	2a0d      	cmp	r2, #13
 800914c:	d8e6      	bhi.n	800911c <_scanf_float+0x60>
 800914e:	a101      	add	r1, pc, #4	; (adr r1, 8009154 <_scanf_float+0x98>)
 8009150:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009154:	08009293 	.word	0x08009293
 8009158:	0800911d 	.word	0x0800911d
 800915c:	0800911d 	.word	0x0800911d
 8009160:	0800911d 	.word	0x0800911d
 8009164:	080092f3 	.word	0x080092f3
 8009168:	080092cb 	.word	0x080092cb
 800916c:	0800911d 	.word	0x0800911d
 8009170:	0800911d 	.word	0x0800911d
 8009174:	080092a1 	.word	0x080092a1
 8009178:	0800911d 	.word	0x0800911d
 800917c:	0800911d 	.word	0x0800911d
 8009180:	0800911d 	.word	0x0800911d
 8009184:	0800911d 	.word	0x0800911d
 8009188:	08009259 	.word	0x08009259
 800918c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009190:	e7db      	b.n	800914a <_scanf_float+0x8e>
 8009192:	290e      	cmp	r1, #14
 8009194:	d8c2      	bhi.n	800911c <_scanf_float+0x60>
 8009196:	a001      	add	r0, pc, #4	; (adr r0, 800919c <_scanf_float+0xe0>)
 8009198:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800919c:	0800924b 	.word	0x0800924b
 80091a0:	0800911d 	.word	0x0800911d
 80091a4:	0800924b 	.word	0x0800924b
 80091a8:	080092df 	.word	0x080092df
 80091ac:	0800911d 	.word	0x0800911d
 80091b0:	080091f9 	.word	0x080091f9
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009235 	.word	0x08009235
 80091bc:	08009235 	.word	0x08009235
 80091c0:	08009235 	.word	0x08009235
 80091c4:	08009235 	.word	0x08009235
 80091c8:	08009235 	.word	0x08009235
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	2b6e      	cmp	r3, #110	; 0x6e
 80091da:	d809      	bhi.n	80091f0 <_scanf_float+0x134>
 80091dc:	2b60      	cmp	r3, #96	; 0x60
 80091de:	d8b2      	bhi.n	8009146 <_scanf_float+0x8a>
 80091e0:	2b54      	cmp	r3, #84	; 0x54
 80091e2:	d077      	beq.n	80092d4 <_scanf_float+0x218>
 80091e4:	2b59      	cmp	r3, #89	; 0x59
 80091e6:	d199      	bne.n	800911c <_scanf_float+0x60>
 80091e8:	2d07      	cmp	r5, #7
 80091ea:	d197      	bne.n	800911c <_scanf_float+0x60>
 80091ec:	2508      	movs	r5, #8
 80091ee:	e029      	b.n	8009244 <_scanf_float+0x188>
 80091f0:	2b74      	cmp	r3, #116	; 0x74
 80091f2:	d06f      	beq.n	80092d4 <_scanf_float+0x218>
 80091f4:	2b79      	cmp	r3, #121	; 0x79
 80091f6:	e7f6      	b.n	80091e6 <_scanf_float+0x12a>
 80091f8:	6821      	ldr	r1, [r4, #0]
 80091fa:	05c8      	lsls	r0, r1, #23
 80091fc:	d51a      	bpl.n	8009234 <_scanf_float+0x178>
 80091fe:	9b02      	ldr	r3, [sp, #8]
 8009200:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009204:	6021      	str	r1, [r4, #0]
 8009206:	f109 0901 	add.w	r9, r9, #1
 800920a:	b11b      	cbz	r3, 8009214 <_scanf_float+0x158>
 800920c:	3b01      	subs	r3, #1
 800920e:	3201      	adds	r2, #1
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	60a2      	str	r2, [r4, #8]
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	3b01      	subs	r3, #1
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	3301      	adds	r3, #1
 800921e:	6123      	str	r3, [r4, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3b01      	subs	r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	607b      	str	r3, [r7, #4]
 8009228:	f340 8084 	ble.w	8009334 <_scanf_float+0x278>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	3301      	adds	r3, #1
 8009230:	603b      	str	r3, [r7, #0]
 8009232:	e766      	b.n	8009102 <_scanf_float+0x46>
 8009234:	eb1a 0f05 	cmn.w	sl, r5
 8009238:	f47f af70 	bne.w	800911c <_scanf_float+0x60>
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009242:	6022      	str	r2, [r4, #0]
 8009244:	f806 3b01 	strb.w	r3, [r6], #1
 8009248:	e7e4      	b.n	8009214 <_scanf_float+0x158>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	0610      	lsls	r0, r2, #24
 800924e:	f57f af65 	bpl.w	800911c <_scanf_float+0x60>
 8009252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009256:	e7f4      	b.n	8009242 <_scanf_float+0x186>
 8009258:	f1ba 0f00 	cmp.w	sl, #0
 800925c:	d10e      	bne.n	800927c <_scanf_float+0x1c0>
 800925e:	f1b9 0f00 	cmp.w	r9, #0
 8009262:	d10e      	bne.n	8009282 <_scanf_float+0x1c6>
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800926a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800926e:	d108      	bne.n	8009282 <_scanf_float+0x1c6>
 8009270:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009274:	6022      	str	r2, [r4, #0]
 8009276:	f04f 0a01 	mov.w	sl, #1
 800927a:	e7e3      	b.n	8009244 <_scanf_float+0x188>
 800927c:	f1ba 0f02 	cmp.w	sl, #2
 8009280:	d055      	beq.n	800932e <_scanf_float+0x272>
 8009282:	2d01      	cmp	r5, #1
 8009284:	d002      	beq.n	800928c <_scanf_float+0x1d0>
 8009286:	2d04      	cmp	r5, #4
 8009288:	f47f af48 	bne.w	800911c <_scanf_float+0x60>
 800928c:	3501      	adds	r5, #1
 800928e:	b2ed      	uxtb	r5, r5
 8009290:	e7d8      	b.n	8009244 <_scanf_float+0x188>
 8009292:	f1ba 0f01 	cmp.w	sl, #1
 8009296:	f47f af41 	bne.w	800911c <_scanf_float+0x60>
 800929a:	f04f 0a02 	mov.w	sl, #2
 800929e:	e7d1      	b.n	8009244 <_scanf_float+0x188>
 80092a0:	b97d      	cbnz	r5, 80092c2 <_scanf_float+0x206>
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	f47f af3c 	bne.w	8009122 <_scanf_float+0x66>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092b4:	f47f af39 	bne.w	800912a <_scanf_float+0x6e>
 80092b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	2501      	movs	r5, #1
 80092c0:	e7c0      	b.n	8009244 <_scanf_float+0x188>
 80092c2:	2d03      	cmp	r5, #3
 80092c4:	d0e2      	beq.n	800928c <_scanf_float+0x1d0>
 80092c6:	2d05      	cmp	r5, #5
 80092c8:	e7de      	b.n	8009288 <_scanf_float+0x1cc>
 80092ca:	2d02      	cmp	r5, #2
 80092cc:	f47f af26 	bne.w	800911c <_scanf_float+0x60>
 80092d0:	2503      	movs	r5, #3
 80092d2:	e7b7      	b.n	8009244 <_scanf_float+0x188>
 80092d4:	2d06      	cmp	r5, #6
 80092d6:	f47f af21 	bne.w	800911c <_scanf_float+0x60>
 80092da:	2507      	movs	r5, #7
 80092dc:	e7b2      	b.n	8009244 <_scanf_float+0x188>
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	0591      	lsls	r1, r2, #22
 80092e2:	f57f af1b 	bpl.w	800911c <_scanf_float+0x60>
 80092e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092ea:	6022      	str	r2, [r4, #0]
 80092ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80092f0:	e7a8      	b.n	8009244 <_scanf_float+0x188>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80092f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80092fc:	d006      	beq.n	800930c <_scanf_float+0x250>
 80092fe:	0550      	lsls	r0, r2, #21
 8009300:	f57f af0c 	bpl.w	800911c <_scanf_float+0x60>
 8009304:	f1b9 0f00 	cmp.w	r9, #0
 8009308:	f43f af0f 	beq.w	800912a <_scanf_float+0x6e>
 800930c:	0591      	lsls	r1, r2, #22
 800930e:	bf58      	it	pl
 8009310:	9901      	ldrpl	r1, [sp, #4]
 8009312:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009316:	bf58      	it	pl
 8009318:	eba9 0101 	subpl.w	r1, r9, r1
 800931c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009320:	bf58      	it	pl
 8009322:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f04f 0900 	mov.w	r9, #0
 800932c:	e78a      	b.n	8009244 <_scanf_float+0x188>
 800932e:	f04f 0a03 	mov.w	sl, #3
 8009332:	e787      	b.n	8009244 <_scanf_float+0x188>
 8009334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009338:	4639      	mov	r1, r7
 800933a:	4640      	mov	r0, r8
 800933c:	4798      	blx	r3
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f aedf 	beq.w	8009102 <_scanf_float+0x46>
 8009344:	e6ea      	b.n	800911c <_scanf_float+0x60>
 8009346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800934a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800934e:	463a      	mov	r2, r7
 8009350:	4640      	mov	r0, r8
 8009352:	4798      	blx	r3
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	3b01      	subs	r3, #1
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	e6ec      	b.n	8009136 <_scanf_float+0x7a>
 800935c:	1e6b      	subs	r3, r5, #1
 800935e:	2b06      	cmp	r3, #6
 8009360:	d825      	bhi.n	80093ae <_scanf_float+0x2f2>
 8009362:	2d02      	cmp	r5, #2
 8009364:	d836      	bhi.n	80093d4 <_scanf_float+0x318>
 8009366:	455e      	cmp	r6, fp
 8009368:	f67f aee8 	bls.w	800913c <_scanf_float+0x80>
 800936c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009370:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009374:	463a      	mov	r2, r7
 8009376:	4640      	mov	r0, r8
 8009378:	4798      	blx	r3
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	3b01      	subs	r3, #1
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	e7f1      	b.n	8009366 <_scanf_float+0x2aa>
 8009382:	9802      	ldr	r0, [sp, #8]
 8009384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009388:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800938c:	9002      	str	r0, [sp, #8]
 800938e:	463a      	mov	r2, r7
 8009390:	4640      	mov	r0, r8
 8009392:	4798      	blx	r3
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	3b01      	subs	r3, #1
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800939e:	fa5f fa8a 	uxtb.w	sl, sl
 80093a2:	f1ba 0f02 	cmp.w	sl, #2
 80093a6:	d1ec      	bne.n	8009382 <_scanf_float+0x2c6>
 80093a8:	3d03      	subs	r5, #3
 80093aa:	b2ed      	uxtb	r5, r5
 80093ac:	1b76      	subs	r6, r6, r5
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	05da      	lsls	r2, r3, #23
 80093b2:	d52f      	bpl.n	8009414 <_scanf_float+0x358>
 80093b4:	055b      	lsls	r3, r3, #21
 80093b6:	d510      	bpl.n	80093da <_scanf_float+0x31e>
 80093b8:	455e      	cmp	r6, fp
 80093ba:	f67f aebf 	bls.w	800913c <_scanf_float+0x80>
 80093be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093c6:	463a      	mov	r2, r7
 80093c8:	4640      	mov	r0, r8
 80093ca:	4798      	blx	r3
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	e7f1      	b.n	80093b8 <_scanf_float+0x2fc>
 80093d4:	46aa      	mov	sl, r5
 80093d6:	9602      	str	r6, [sp, #8]
 80093d8:	e7df      	b.n	800939a <_scanf_float+0x2de>
 80093da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	2965      	cmp	r1, #101	; 0x65
 80093e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	d00c      	beq.n	8009408 <_scanf_float+0x34c>
 80093ee:	2945      	cmp	r1, #69	; 0x45
 80093f0:	d00a      	beq.n	8009408 <_scanf_float+0x34c>
 80093f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093f6:	463a      	mov	r2, r7
 80093f8:	4640      	mov	r0, r8
 80093fa:	4798      	blx	r3
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009402:	3b01      	subs	r3, #1
 8009404:	1eb5      	subs	r5, r6, #2
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800940c:	463a      	mov	r2, r7
 800940e:	4640      	mov	r0, r8
 8009410:	4798      	blx	r3
 8009412:	462e      	mov	r6, r5
 8009414:	6825      	ldr	r5, [r4, #0]
 8009416:	f015 0510 	ands.w	r5, r5, #16
 800941a:	d14d      	bne.n	80094b8 <_scanf_float+0x3fc>
 800941c:	7035      	strb	r5, [r6, #0]
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009428:	d11a      	bne.n	8009460 <_scanf_float+0x3a4>
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	454b      	cmp	r3, r9
 800942e:	eba3 0209 	sub.w	r2, r3, r9
 8009432:	d122      	bne.n	800947a <_scanf_float+0x3be>
 8009434:	2200      	movs	r2, #0
 8009436:	4659      	mov	r1, fp
 8009438:	4640      	mov	r0, r8
 800943a:	f000 fecb 	bl	800a1d4 <_strtod_r>
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	6821      	ldr	r1, [r4, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f011 0f02 	tst.w	r1, #2
 8009448:	f103 0204 	add.w	r2, r3, #4
 800944c:	d020      	beq.n	8009490 <_scanf_float+0x3d4>
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	600a      	str	r2, [r1, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	ed83 0b00 	vstr	d0, [r3]
 8009458:	68e3      	ldr	r3, [r4, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60e3      	str	r3, [r4, #12]
 800945e:	e66e      	b.n	800913e <_scanf_float+0x82>
 8009460:	9b04      	ldr	r3, [sp, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0e6      	beq.n	8009434 <_scanf_float+0x378>
 8009466:	9905      	ldr	r1, [sp, #20]
 8009468:	230a      	movs	r3, #10
 800946a:	462a      	mov	r2, r5
 800946c:	3101      	adds	r1, #1
 800946e:	4640      	mov	r0, r8
 8009470:	f000 ff3a 	bl	800a2e8 <_strtol_r>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	9e05      	ldr	r6, [sp, #20]
 8009478:	1ac2      	subs	r2, r0, r3
 800947a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800947e:	429e      	cmp	r6, r3
 8009480:	bf28      	it	cs
 8009482:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009486:	490d      	ldr	r1, [pc, #52]	; (80094bc <_scanf_float+0x400>)
 8009488:	4630      	mov	r0, r6
 800948a:	f000 f821 	bl	80094d0 <siprintf>
 800948e:	e7d1      	b.n	8009434 <_scanf_float+0x378>
 8009490:	f011 0f04 	tst.w	r1, #4
 8009494:	9903      	ldr	r1, [sp, #12]
 8009496:	600a      	str	r2, [r1, #0]
 8009498:	d1db      	bne.n	8009452 <_scanf_float+0x396>
 800949a:	eeb4 0b40 	vcmp.f64	d0, d0
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	681e      	ldr	r6, [r3, #0]
 80094a4:	d705      	bvc.n	80094b2 <_scanf_float+0x3f6>
 80094a6:	4806      	ldr	r0, [pc, #24]	; (80094c0 <_scanf_float+0x404>)
 80094a8:	f000 f80c 	bl	80094c4 <nanf>
 80094ac:	ed86 0a00 	vstr	s0, [r6]
 80094b0:	e7d2      	b.n	8009458 <_scanf_float+0x39c>
 80094b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094b6:	e7f9      	b.n	80094ac <_scanf_float+0x3f0>
 80094b8:	2500      	movs	r5, #0
 80094ba:	e640      	b.n	800913e <_scanf_float+0x82>
 80094bc:	0800da6a 	.word	0x0800da6a
 80094c0:	0800dd9b 	.word	0x0800dd9b

080094c4 <nanf>:
 80094c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094cc <nanf+0x8>
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	7fc00000 	.word	0x7fc00000

080094d0 <siprintf>:
 80094d0:	b40e      	push	{r1, r2, r3}
 80094d2:	b500      	push	{lr}
 80094d4:	b09c      	sub	sp, #112	; 0x70
 80094d6:	ab1d      	add	r3, sp, #116	; 0x74
 80094d8:	9002      	str	r0, [sp, #8]
 80094da:	9006      	str	r0, [sp, #24]
 80094dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e0:	4809      	ldr	r0, [pc, #36]	; (8009508 <siprintf+0x38>)
 80094e2:	9107      	str	r1, [sp, #28]
 80094e4:	9104      	str	r1, [sp, #16]
 80094e6:	4909      	ldr	r1, [pc, #36]	; (800950c <siprintf+0x3c>)
 80094e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ec:	9105      	str	r1, [sp, #20]
 80094ee:	6800      	ldr	r0, [r0, #0]
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	a902      	add	r1, sp, #8
 80094f4:	f002 fed8 	bl	800c2a8 <_svfiprintf_r>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	2200      	movs	r2, #0
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	b01c      	add	sp, #112	; 0x70
 8009500:	f85d eb04 	ldr.w	lr, [sp], #4
 8009504:	b003      	add	sp, #12
 8009506:	4770      	bx	lr
 8009508:	20000058 	.word	0x20000058
 800950c:	ffff0208 	.word	0xffff0208

08009510 <siscanf>:
 8009510:	b40e      	push	{r1, r2, r3}
 8009512:	b510      	push	{r4, lr}
 8009514:	b09f      	sub	sp, #124	; 0x7c
 8009516:	ac21      	add	r4, sp, #132	; 0x84
 8009518:	f44f 7101 	mov.w	r1, #516	; 0x204
 800951c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009520:	9201      	str	r2, [sp, #4]
 8009522:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009526:	9004      	str	r0, [sp, #16]
 8009528:	9008      	str	r0, [sp, #32]
 800952a:	f7f6 fe89 	bl	8000240 <strlen>
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <siscanf+0x50>)
 8009530:	9005      	str	r0, [sp, #20]
 8009532:	9009      	str	r0, [sp, #36]	; 0x24
 8009534:	930d      	str	r3, [sp, #52]	; 0x34
 8009536:	480b      	ldr	r0, [pc, #44]	; (8009564 <siscanf+0x54>)
 8009538:	9a01      	ldr	r2, [sp, #4]
 800953a:	6800      	ldr	r0, [r0, #0]
 800953c:	9403      	str	r4, [sp, #12]
 800953e:	2300      	movs	r3, #0
 8009540:	9311      	str	r3, [sp, #68]	; 0x44
 8009542:	9316      	str	r3, [sp, #88]	; 0x58
 8009544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009548:	f8ad 301e 	strh.w	r3, [sp, #30]
 800954c:	a904      	add	r1, sp, #16
 800954e:	4623      	mov	r3, r4
 8009550:	f003 f804 	bl	800c55c <__ssvfiscanf_r>
 8009554:	b01f      	add	sp, #124	; 0x7c
 8009556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955a:	b003      	add	sp, #12
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	0800958b 	.word	0x0800958b
 8009564:	20000058 	.word	0x20000058

08009568 <__sread>:
 8009568:	b510      	push	{r4, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009570:	f003 fab8 	bl	800cae4 <_read_r>
 8009574:	2800      	cmp	r0, #0
 8009576:	bfab      	itete	ge
 8009578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800957a:	89a3      	ldrhlt	r3, [r4, #12]
 800957c:	181b      	addge	r3, r3, r0
 800957e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009582:	bfac      	ite	ge
 8009584:	6563      	strge	r3, [r4, #84]	; 0x54
 8009586:	81a3      	strhlt	r3, [r4, #12]
 8009588:	bd10      	pop	{r4, pc}

0800958a <__seofread>:
 800958a:	2000      	movs	r0, #0
 800958c:	4770      	bx	lr

0800958e <__swrite>:
 800958e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009592:	461f      	mov	r7, r3
 8009594:	898b      	ldrh	r3, [r1, #12]
 8009596:	05db      	lsls	r3, r3, #23
 8009598:	4605      	mov	r5, r0
 800959a:	460c      	mov	r4, r1
 800959c:	4616      	mov	r6, r2
 800959e:	d505      	bpl.n	80095ac <__swrite+0x1e>
 80095a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a4:	2302      	movs	r3, #2
 80095a6:	2200      	movs	r2, #0
 80095a8:	f002 f880 	bl	800b6ac <_lseek_r>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	4632      	mov	r2, r6
 80095ba:	463b      	mov	r3, r7
 80095bc:	4628      	mov	r0, r5
 80095be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c2:	f000 becd 	b.w	800a360 <_write_r>

080095c6 <__sseek>:
 80095c6:	b510      	push	{r4, lr}
 80095c8:	460c      	mov	r4, r1
 80095ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ce:	f002 f86d 	bl	800b6ac <_lseek_r>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	bf15      	itete	ne
 80095d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80095da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095e2:	81a3      	strheq	r3, [r4, #12]
 80095e4:	bf18      	it	ne
 80095e6:	81a3      	strhne	r3, [r4, #12]
 80095e8:	bd10      	pop	{r4, pc}

080095ea <__sclose>:
 80095ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ee:	f000 bec9 	b.w	800a384 <_close_r>

080095f2 <sulp>:
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	4616      	mov	r6, r2
 80095fa:	ec45 4b10 	vmov	d0, r4, r5
 80095fe:	f002 fbed 	bl	800bddc <__ulp>
 8009602:	b17e      	cbz	r6, 8009624 <sulp+0x32>
 8009604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800960c:	2b00      	cmp	r3, #0
 800960e:	dd09      	ble.n	8009624 <sulp+0x32>
 8009610:	051b      	lsls	r3, r3, #20
 8009612:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009616:	2000      	movs	r0, #0
 8009618:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800961c:	ec41 0b17 	vmov	d7, r0, r1
 8009620:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009624:	bd70      	pop	{r4, r5, r6, pc}
	...

08009628 <_strtod_l>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	ed2d 8b0c 	vpush	{d8-d13}
 8009630:	b09d      	sub	sp, #116	; 0x74
 8009632:	461f      	mov	r7, r3
 8009634:	2300      	movs	r3, #0
 8009636:	9318      	str	r3, [sp, #96]	; 0x60
 8009638:	4ba6      	ldr	r3, [pc, #664]	; (80098d4 <_strtod_l+0x2ac>)
 800963a:	9213      	str	r2, [sp, #76]	; 0x4c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9308      	str	r3, [sp, #32]
 8009640:	4604      	mov	r4, r0
 8009642:	4618      	mov	r0, r3
 8009644:	468a      	mov	sl, r1
 8009646:	f7f6 fdfb 	bl	8000240 <strlen>
 800964a:	f04f 0800 	mov.w	r8, #0
 800964e:	4605      	mov	r5, r0
 8009650:	f04f 0900 	mov.w	r9, #0
 8009654:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	2a2b      	cmp	r2, #43	; 0x2b
 800965e:	d04d      	beq.n	80096fc <_strtod_l+0xd4>
 8009660:	d83a      	bhi.n	80096d8 <_strtod_l+0xb0>
 8009662:	2a0d      	cmp	r2, #13
 8009664:	d833      	bhi.n	80096ce <_strtod_l+0xa6>
 8009666:	2a08      	cmp	r2, #8
 8009668:	d833      	bhi.n	80096d2 <_strtod_l+0xaa>
 800966a:	2a00      	cmp	r2, #0
 800966c:	d03d      	beq.n	80096ea <_strtod_l+0xc2>
 800966e:	2300      	movs	r3, #0
 8009670:	930b      	str	r3, [sp, #44]	; 0x2c
 8009672:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009674:	7833      	ldrb	r3, [r6, #0]
 8009676:	2b30      	cmp	r3, #48	; 0x30
 8009678:	f040 80b6 	bne.w	80097e8 <_strtod_l+0x1c0>
 800967c:	7873      	ldrb	r3, [r6, #1]
 800967e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009682:	2b58      	cmp	r3, #88	; 0x58
 8009684:	d16d      	bne.n	8009762 <_strtod_l+0x13a>
 8009686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	ab18      	add	r3, sp, #96	; 0x60
 800968c:	9702      	str	r7, [sp, #8]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	4a91      	ldr	r2, [pc, #580]	; (80098d8 <_strtod_l+0x2b0>)
 8009692:	ab19      	add	r3, sp, #100	; 0x64
 8009694:	a917      	add	r1, sp, #92	; 0x5c
 8009696:	4620      	mov	r0, r4
 8009698:	f001 fcfc 	bl	800b094 <__gethex>
 800969c:	f010 0507 	ands.w	r5, r0, #7
 80096a0:	4607      	mov	r7, r0
 80096a2:	d005      	beq.n	80096b0 <_strtod_l+0x88>
 80096a4:	2d06      	cmp	r5, #6
 80096a6:	d12b      	bne.n	8009700 <_strtod_l+0xd8>
 80096a8:	3601      	adds	r6, #1
 80096aa:	2300      	movs	r3, #0
 80096ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80096ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80096b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f040 856e 	bne.w	800a194 <_strtod_l+0xb6c>
 80096b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ba:	b1e3      	cbz	r3, 80096f6 <_strtod_l+0xce>
 80096bc:	ec49 8b17 	vmov	d7, r8, r9
 80096c0:	eeb1 0b47 	vneg.f64	d0, d7
 80096c4:	b01d      	add	sp, #116	; 0x74
 80096c6:	ecbd 8b0c 	vpop	{d8-d13}
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	2a20      	cmp	r2, #32
 80096d0:	d1cd      	bne.n	800966e <_strtod_l+0x46>
 80096d2:	3301      	adds	r3, #1
 80096d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80096d6:	e7bf      	b.n	8009658 <_strtod_l+0x30>
 80096d8:	2a2d      	cmp	r2, #45	; 0x2d
 80096da:	d1c8      	bne.n	800966e <_strtod_l+0x46>
 80096dc:	2201      	movs	r2, #1
 80096de:	920b      	str	r2, [sp, #44]	; 0x2c
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	9217      	str	r2, [sp, #92]	; 0x5c
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1c3      	bne.n	8009672 <_strtod_l+0x4a>
 80096ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ec:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 854d 	bne.w	800a190 <_strtod_l+0xb68>
 80096f6:	ec49 8b10 	vmov	d0, r8, r9
 80096fa:	e7e3      	b.n	80096c4 <_strtod_l+0x9c>
 80096fc:	2200      	movs	r2, #0
 80096fe:	e7ee      	b.n	80096de <_strtod_l+0xb6>
 8009700:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009702:	b13a      	cbz	r2, 8009714 <_strtod_l+0xec>
 8009704:	2135      	movs	r1, #53	; 0x35
 8009706:	a81a      	add	r0, sp, #104	; 0x68
 8009708:	f002 fc74 	bl	800bff4 <__copybits>
 800970c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800970e:	4620      	mov	r0, r4
 8009710:	f002 f838 	bl	800b784 <_Bfree>
 8009714:	3d01      	subs	r5, #1
 8009716:	2d05      	cmp	r5, #5
 8009718:	d807      	bhi.n	800972a <_strtod_l+0x102>
 800971a:	e8df f005 	tbb	[pc, r5]
 800971e:	0b0e      	.short	0x0b0e
 8009720:	030e1d18 	.word	0x030e1d18
 8009724:	f04f 0900 	mov.w	r9, #0
 8009728:	46c8      	mov	r8, r9
 800972a:	073b      	lsls	r3, r7, #28
 800972c:	d5c0      	bpl.n	80096b0 <_strtod_l+0x88>
 800972e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009732:	e7bd      	b.n	80096b0 <_strtod_l+0x88>
 8009734:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8009738:	e7f7      	b.n	800972a <_strtod_l+0x102>
 800973a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800973e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009740:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009744:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009748:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800974c:	e7ed      	b.n	800972a <_strtod_l+0x102>
 800974e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80098dc <_strtod_l+0x2b4>
 8009752:	f04f 0800 	mov.w	r8, #0
 8009756:	e7e8      	b.n	800972a <_strtod_l+0x102>
 8009758:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800975c:	f04f 38ff 	mov.w	r8, #4294967295
 8009760:	e7e3      	b.n	800972a <_strtod_l+0x102>
 8009762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	9217      	str	r2, [sp, #92]	; 0x5c
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	2b30      	cmp	r3, #48	; 0x30
 800976c:	d0f9      	beq.n	8009762 <_strtod_l+0x13a>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d09e      	beq.n	80096b0 <_strtod_l+0x88>
 8009772:	2301      	movs	r3, #1
 8009774:	9306      	str	r3, [sp, #24]
 8009776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009778:	930c      	str	r3, [sp, #48]	; 0x30
 800977a:	2300      	movs	r3, #0
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	930a      	str	r3, [sp, #40]	; 0x28
 8009780:	461e      	mov	r6, r3
 8009782:	220a      	movs	r2, #10
 8009784:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009786:	f890 b000 	ldrb.w	fp, [r0]
 800978a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800978e:	b2d9      	uxtb	r1, r3
 8009790:	2909      	cmp	r1, #9
 8009792:	d92b      	bls.n	80097ec <_strtod_l+0x1c4>
 8009794:	9908      	ldr	r1, [sp, #32]
 8009796:	462a      	mov	r2, r5
 8009798:	f003 fa08 	bl	800cbac <strncmp>
 800979c:	2800      	cmp	r0, #0
 800979e:	d035      	beq.n	800980c <_strtod_l+0x1e4>
 80097a0:	2000      	movs	r0, #0
 80097a2:	465a      	mov	r2, fp
 80097a4:	4633      	mov	r3, r6
 80097a6:	4683      	mov	fp, r0
 80097a8:	4601      	mov	r1, r0
 80097aa:	2a65      	cmp	r2, #101	; 0x65
 80097ac:	d001      	beq.n	80097b2 <_strtod_l+0x18a>
 80097ae:	2a45      	cmp	r2, #69	; 0x45
 80097b0:	d118      	bne.n	80097e4 <_strtod_l+0x1bc>
 80097b2:	b91b      	cbnz	r3, 80097bc <_strtod_l+0x194>
 80097b4:	9b06      	ldr	r3, [sp, #24]
 80097b6:	4303      	orrs	r3, r0
 80097b8:	d097      	beq.n	80096ea <_strtod_l+0xc2>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80097c0:	f10a 0201 	add.w	r2, sl, #1
 80097c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097c6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80097ca:	2a2b      	cmp	r2, #43	; 0x2b
 80097cc:	d077      	beq.n	80098be <_strtod_l+0x296>
 80097ce:	2a2d      	cmp	r2, #45	; 0x2d
 80097d0:	d07d      	beq.n	80098ce <_strtod_l+0x2a6>
 80097d2:	f04f 0e00 	mov.w	lr, #0
 80097d6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80097da:	2d09      	cmp	r5, #9
 80097dc:	f240 8084 	bls.w	80098e8 <_strtod_l+0x2c0>
 80097e0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80097e4:	2500      	movs	r5, #0
 80097e6:	e09f      	b.n	8009928 <_strtod_l+0x300>
 80097e8:	2300      	movs	r3, #0
 80097ea:	e7c3      	b.n	8009774 <_strtod_l+0x14c>
 80097ec:	2e08      	cmp	r6, #8
 80097ee:	bfd5      	itete	le
 80097f0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80097f2:	9904      	ldrgt	r1, [sp, #16]
 80097f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80097f8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097fc:	f100 0001 	add.w	r0, r0, #1
 8009800:	bfd4      	ite	le
 8009802:	930a      	strle	r3, [sp, #40]	; 0x28
 8009804:	9304      	strgt	r3, [sp, #16]
 8009806:	3601      	adds	r6, #1
 8009808:	9017      	str	r0, [sp, #92]	; 0x5c
 800980a:	e7bb      	b.n	8009784 <_strtod_l+0x15c>
 800980c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800980e:	195a      	adds	r2, r3, r5
 8009810:	9217      	str	r2, [sp, #92]	; 0x5c
 8009812:	5d5a      	ldrb	r2, [r3, r5]
 8009814:	b3ae      	cbz	r6, 8009882 <_strtod_l+0x25a>
 8009816:	4683      	mov	fp, r0
 8009818:	4633      	mov	r3, r6
 800981a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800981e:	2909      	cmp	r1, #9
 8009820:	d912      	bls.n	8009848 <_strtod_l+0x220>
 8009822:	2101      	movs	r1, #1
 8009824:	e7c1      	b.n	80097aa <_strtod_l+0x182>
 8009826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	9217      	str	r2, [sp, #92]	; 0x5c
 800982c:	785a      	ldrb	r2, [r3, #1]
 800982e:	3001      	adds	r0, #1
 8009830:	2a30      	cmp	r2, #48	; 0x30
 8009832:	d0f8      	beq.n	8009826 <_strtod_l+0x1fe>
 8009834:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009838:	2b08      	cmp	r3, #8
 800983a:	f200 84b0 	bhi.w	800a19e <_strtod_l+0xb76>
 800983e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009840:	930c      	str	r3, [sp, #48]	; 0x30
 8009842:	4683      	mov	fp, r0
 8009844:	2000      	movs	r0, #0
 8009846:	4603      	mov	r3, r0
 8009848:	3a30      	subs	r2, #48	; 0x30
 800984a:	f100 0101 	add.w	r1, r0, #1
 800984e:	d012      	beq.n	8009876 <_strtod_l+0x24e>
 8009850:	448b      	add	fp, r1
 8009852:	eb00 0c03 	add.w	ip, r0, r3
 8009856:	4619      	mov	r1, r3
 8009858:	250a      	movs	r5, #10
 800985a:	4561      	cmp	r1, ip
 800985c:	d113      	bne.n	8009886 <_strtod_l+0x25e>
 800985e:	1819      	adds	r1, r3, r0
 8009860:	2908      	cmp	r1, #8
 8009862:	f103 0301 	add.w	r3, r3, #1
 8009866:	4403      	add	r3, r0
 8009868:	dc1d      	bgt.n	80098a6 <_strtod_l+0x27e>
 800986a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800986c:	210a      	movs	r1, #10
 800986e:	fb01 2200 	mla	r2, r1, r0, r2
 8009872:	920a      	str	r2, [sp, #40]	; 0x28
 8009874:	2100      	movs	r1, #0
 8009876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009878:	1c50      	adds	r0, r2, #1
 800987a:	9017      	str	r0, [sp, #92]	; 0x5c
 800987c:	7852      	ldrb	r2, [r2, #1]
 800987e:	4608      	mov	r0, r1
 8009880:	e7cb      	b.n	800981a <_strtod_l+0x1f2>
 8009882:	4630      	mov	r0, r6
 8009884:	e7d4      	b.n	8009830 <_strtod_l+0x208>
 8009886:	2908      	cmp	r1, #8
 8009888:	dc04      	bgt.n	8009894 <_strtod_l+0x26c>
 800988a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800988c:	436f      	muls	r7, r5
 800988e:	970a      	str	r7, [sp, #40]	; 0x28
 8009890:	3101      	adds	r1, #1
 8009892:	e7e2      	b.n	800985a <_strtod_l+0x232>
 8009894:	f101 0e01 	add.w	lr, r1, #1
 8009898:	f1be 0f10 	cmp.w	lr, #16
 800989c:	bfde      	ittt	le
 800989e:	9f04      	ldrle	r7, [sp, #16]
 80098a0:	436f      	mulle	r7, r5
 80098a2:	9704      	strle	r7, [sp, #16]
 80098a4:	e7f4      	b.n	8009890 <_strtod_l+0x268>
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	bfdf      	itttt	le
 80098aa:	9804      	ldrle	r0, [sp, #16]
 80098ac:	210a      	movle	r1, #10
 80098ae:	fb01 2200 	mlale	r2, r1, r0, r2
 80098b2:	9204      	strle	r2, [sp, #16]
 80098b4:	e7de      	b.n	8009874 <_strtod_l+0x24c>
 80098b6:	f04f 0b00 	mov.w	fp, #0
 80098ba:	2101      	movs	r1, #1
 80098bc:	e77a      	b.n	80097b4 <_strtod_l+0x18c>
 80098be:	f04f 0e00 	mov.w	lr, #0
 80098c2:	f10a 0202 	add.w	r2, sl, #2
 80098c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80098c8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80098cc:	e783      	b.n	80097d6 <_strtod_l+0x1ae>
 80098ce:	f04f 0e01 	mov.w	lr, #1
 80098d2:	e7f6      	b.n	80098c2 <_strtod_l+0x29a>
 80098d4:	0800dbc0 	.word	0x0800dbc0
 80098d8:	0800da70 	.word	0x0800da70
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098e2:	1c55      	adds	r5, r2, #1
 80098e4:	9517      	str	r5, [sp, #92]	; 0x5c
 80098e6:	7852      	ldrb	r2, [r2, #1]
 80098e8:	2a30      	cmp	r2, #48	; 0x30
 80098ea:	d0f9      	beq.n	80098e0 <_strtod_l+0x2b8>
 80098ec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80098f0:	2d08      	cmp	r5, #8
 80098f2:	f63f af77 	bhi.w	80097e4 <_strtod_l+0x1bc>
 80098f6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80098fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098fc:	9208      	str	r2, [sp, #32]
 80098fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009900:	1c55      	adds	r5, r2, #1
 8009902:	9517      	str	r5, [sp, #92]	; 0x5c
 8009904:	7852      	ldrb	r2, [r2, #1]
 8009906:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800990a:	2f09      	cmp	r7, #9
 800990c:	d937      	bls.n	800997e <_strtod_l+0x356>
 800990e:	9f08      	ldr	r7, [sp, #32]
 8009910:	1bed      	subs	r5, r5, r7
 8009912:	2d08      	cmp	r5, #8
 8009914:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009918:	dc02      	bgt.n	8009920 <_strtod_l+0x2f8>
 800991a:	4565      	cmp	r5, ip
 800991c:	bfa8      	it	ge
 800991e:	4665      	movge	r5, ip
 8009920:	f1be 0f00 	cmp.w	lr, #0
 8009924:	d000      	beq.n	8009928 <_strtod_l+0x300>
 8009926:	426d      	negs	r5, r5
 8009928:	2b00      	cmp	r3, #0
 800992a:	d14f      	bne.n	80099cc <_strtod_l+0x3a4>
 800992c:	9b06      	ldr	r3, [sp, #24]
 800992e:	4303      	orrs	r3, r0
 8009930:	f47f aebe 	bne.w	80096b0 <_strtod_l+0x88>
 8009934:	2900      	cmp	r1, #0
 8009936:	f47f aed8 	bne.w	80096ea <_strtod_l+0xc2>
 800993a:	2a69      	cmp	r2, #105	; 0x69
 800993c:	d027      	beq.n	800998e <_strtod_l+0x366>
 800993e:	dc24      	bgt.n	800998a <_strtod_l+0x362>
 8009940:	2a49      	cmp	r2, #73	; 0x49
 8009942:	d024      	beq.n	800998e <_strtod_l+0x366>
 8009944:	2a4e      	cmp	r2, #78	; 0x4e
 8009946:	f47f aed0 	bne.w	80096ea <_strtod_l+0xc2>
 800994a:	499b      	ldr	r1, [pc, #620]	; (8009bb8 <_strtod_l+0x590>)
 800994c:	a817      	add	r0, sp, #92	; 0x5c
 800994e:	f001 fdf9 	bl	800b544 <__match>
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f aec9 	beq.w	80096ea <_strtod_l+0xc2>
 8009958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b28      	cmp	r3, #40	; 0x28
 800995e:	d12d      	bne.n	80099bc <_strtod_l+0x394>
 8009960:	4996      	ldr	r1, [pc, #600]	; (8009bbc <_strtod_l+0x594>)
 8009962:	aa1a      	add	r2, sp, #104	; 0x68
 8009964:	a817      	add	r0, sp, #92	; 0x5c
 8009966:	f001 fe01 	bl	800b56c <__hexnan>
 800996a:	2805      	cmp	r0, #5
 800996c:	d126      	bne.n	80099bc <_strtod_l+0x394>
 800996e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009970:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009974:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009978:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800997c:	e698      	b.n	80096b0 <_strtod_l+0x88>
 800997e:	250a      	movs	r5, #10
 8009980:	fb05 250c 	mla	r5, r5, ip, r2
 8009984:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009988:	e7b9      	b.n	80098fe <_strtod_l+0x2d6>
 800998a:	2a6e      	cmp	r2, #110	; 0x6e
 800998c:	e7db      	b.n	8009946 <_strtod_l+0x31e>
 800998e:	498c      	ldr	r1, [pc, #560]	; (8009bc0 <_strtod_l+0x598>)
 8009990:	a817      	add	r0, sp, #92	; 0x5c
 8009992:	f001 fdd7 	bl	800b544 <__match>
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f aea7 	beq.w	80096ea <_strtod_l+0xc2>
 800999c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800999e:	4989      	ldr	r1, [pc, #548]	; (8009bc4 <_strtod_l+0x59c>)
 80099a0:	3b01      	subs	r3, #1
 80099a2:	a817      	add	r0, sp, #92	; 0x5c
 80099a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80099a6:	f001 fdcd 	bl	800b544 <__match>
 80099aa:	b910      	cbnz	r0, 80099b2 <_strtod_l+0x38a>
 80099ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099ae:	3301      	adds	r3, #1
 80099b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80099b2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009bd8 <_strtod_l+0x5b0>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	e679      	b.n	80096b0 <_strtod_l+0x88>
 80099bc:	4882      	ldr	r0, [pc, #520]	; (8009bc8 <_strtod_l+0x5a0>)
 80099be:	f003 f8a3 	bl	800cb08 <nan>
 80099c2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80099c6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80099ca:	e671      	b.n	80096b0 <_strtod_l+0x88>
 80099cc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80099d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099d4:	eba5 020b 	sub.w	r2, r5, fp
 80099d8:	2e00      	cmp	r6, #0
 80099da:	bf08      	it	eq
 80099dc:	461e      	moveq	r6, r3
 80099de:	2b10      	cmp	r3, #16
 80099e0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80099e4:	9206      	str	r2, [sp, #24]
 80099e6:	461a      	mov	r2, r3
 80099e8:	bfa8      	it	ge
 80099ea:	2210      	movge	r2, #16
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80099f2:	dd0e      	ble.n	8009a12 <_strtod_l+0x3ea>
 80099f4:	4975      	ldr	r1, [pc, #468]	; (8009bcc <_strtod_l+0x5a4>)
 80099f6:	eddd 7a04 	vldr	s15, [sp, #16]
 80099fa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80099fe:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8009a02:	ed9d 5b08 	vldr	d5, [sp, #32]
 8009a06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009a0e:	ec59 8b17 	vmov	r8, r9, d7
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	dc37      	bgt.n	8009a86 <_strtod_l+0x45e>
 8009a16:	9906      	ldr	r1, [sp, #24]
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	f43f ae49 	beq.w	80096b0 <_strtod_l+0x88>
 8009a1e:	dd23      	ble.n	8009a68 <_strtod_l+0x440>
 8009a20:	2916      	cmp	r1, #22
 8009a22:	dc0b      	bgt.n	8009a3c <_strtod_l+0x414>
 8009a24:	4b69      	ldr	r3, [pc, #420]	; (8009bcc <_strtod_l+0x5a4>)
 8009a26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009a2a:	ed93 7b00 	vldr	d7, [r3]
 8009a2e:	ec49 8b16 	vmov	d6, r8, r9
 8009a32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a36:	ec59 8b17 	vmov	r8, r9, d7
 8009a3a:	e639      	b.n	80096b0 <_strtod_l+0x88>
 8009a3c:	9806      	ldr	r0, [sp, #24]
 8009a3e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009a42:	4281      	cmp	r1, r0
 8009a44:	db1f      	blt.n	8009a86 <_strtod_l+0x45e>
 8009a46:	4a61      	ldr	r2, [pc, #388]	; (8009bcc <_strtod_l+0x5a4>)
 8009a48:	f1c3 030f 	rsb	r3, r3, #15
 8009a4c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009a50:	ed91 7b00 	vldr	d7, [r1]
 8009a54:	ec49 8b16 	vmov	d6, r8, r9
 8009a58:	1ac3      	subs	r3, r0, r3
 8009a5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a62:	ed92 6b00 	vldr	d6, [r2]
 8009a66:	e7e4      	b.n	8009a32 <_strtod_l+0x40a>
 8009a68:	9906      	ldr	r1, [sp, #24]
 8009a6a:	3116      	adds	r1, #22
 8009a6c:	db0b      	blt.n	8009a86 <_strtod_l+0x45e>
 8009a6e:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <_strtod_l+0x5a4>)
 8009a70:	ebab 0505 	sub.w	r5, fp, r5
 8009a74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a78:	ed95 7b00 	vldr	d7, [r5]
 8009a7c:	ec49 8b16 	vmov	d6, r8, r9
 8009a80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a84:	e7d7      	b.n	8009a36 <_strtod_l+0x40e>
 8009a86:	9906      	ldr	r1, [sp, #24]
 8009a88:	1a9a      	subs	r2, r3, r2
 8009a8a:	440a      	add	r2, r1
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	dd74      	ble.n	8009b7a <_strtod_l+0x552>
 8009a90:	f012 000f 	ands.w	r0, r2, #15
 8009a94:	d00a      	beq.n	8009aac <_strtod_l+0x484>
 8009a96:	494d      	ldr	r1, [pc, #308]	; (8009bcc <_strtod_l+0x5a4>)
 8009a98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a9c:	ed91 7b00 	vldr	d7, [r1]
 8009aa0:	ec49 8b16 	vmov	d6, r8, r9
 8009aa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009aa8:	ec59 8b17 	vmov	r8, r9, d7
 8009aac:	f032 020f 	bics.w	r2, r2, #15
 8009ab0:	d04f      	beq.n	8009b52 <_strtod_l+0x52a>
 8009ab2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009ab6:	dd22      	ble.n	8009afe <_strtod_l+0x4d6>
 8009ab8:	2500      	movs	r5, #0
 8009aba:	462e      	mov	r6, r5
 8009abc:	950a      	str	r5, [sp, #40]	; 0x28
 8009abe:	462f      	mov	r7, r5
 8009ac0:	2322      	movs	r3, #34	; 0x22
 8009ac2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009bd8 <_strtod_l+0x5b0>
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	f04f 0800 	mov.w	r8, #0
 8009acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f43f adee 	beq.w	80096b0 <_strtod_l+0x88>
 8009ad4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f001 fe54 	bl	800b784 <_Bfree>
 8009adc:	4639      	mov	r1, r7
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 fe50 	bl	800b784 <_Bfree>
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f001 fe4c 	bl	800b784 <_Bfree>
 8009aec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 fe48 	bl	800b784 <_Bfree>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4620      	mov	r0, r4
 8009af8:	f001 fe44 	bl	800b784 <_Bfree>
 8009afc:	e5d8      	b.n	80096b0 <_strtod_l+0x88>
 8009afe:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009b02:	2000      	movs	r0, #0
 8009b04:	4f32      	ldr	r7, [pc, #200]	; (8009bd0 <_strtod_l+0x5a8>)
 8009b06:	1112      	asrs	r2, r2, #4
 8009b08:	4601      	mov	r1, r0
 8009b0a:	2a01      	cmp	r2, #1
 8009b0c:	dc24      	bgt.n	8009b58 <_strtod_l+0x530>
 8009b0e:	b108      	cbz	r0, 8009b14 <_strtod_l+0x4ec>
 8009b10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b14:	4a2e      	ldr	r2, [pc, #184]	; (8009bd0 <_strtod_l+0x5a8>)
 8009b16:	482f      	ldr	r0, [pc, #188]	; (8009bd4 <_strtod_l+0x5ac>)
 8009b18:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009b1c:	ed91 7b00 	vldr	d7, [r1]
 8009b20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b24:	ec49 8b16 	vmov	d6, r8, r9
 8009b28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b30:	9905      	ldr	r1, [sp, #20]
 8009b32:	4a29      	ldr	r2, [pc, #164]	; (8009bd8 <_strtod_l+0x5b0>)
 8009b34:	400a      	ands	r2, r1
 8009b36:	4282      	cmp	r2, r0
 8009b38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b3c:	d8bc      	bhi.n	8009ab8 <_strtod_l+0x490>
 8009b3e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009b42:	4282      	cmp	r2, r0
 8009b44:	bf86      	itte	hi
 8009b46:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009bdc <_strtod_l+0x5b4>
 8009b4a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b4e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009b52:	2200      	movs	r2, #0
 8009b54:	9204      	str	r2, [sp, #16]
 8009b56:	e07f      	b.n	8009c58 <_strtod_l+0x630>
 8009b58:	f012 0f01 	tst.w	r2, #1
 8009b5c:	d00a      	beq.n	8009b74 <_strtod_l+0x54c>
 8009b5e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8009b62:	ed90 7b00 	vldr	d7, [r0]
 8009b66:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009b6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b6e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b72:	2001      	movs	r0, #1
 8009b74:	3101      	adds	r1, #1
 8009b76:	1052      	asrs	r2, r2, #1
 8009b78:	e7c7      	b.n	8009b0a <_strtod_l+0x4e2>
 8009b7a:	d0ea      	beq.n	8009b52 <_strtod_l+0x52a>
 8009b7c:	4252      	negs	r2, r2
 8009b7e:	f012 000f 	ands.w	r0, r2, #15
 8009b82:	d00a      	beq.n	8009b9a <_strtod_l+0x572>
 8009b84:	4911      	ldr	r1, [pc, #68]	; (8009bcc <_strtod_l+0x5a4>)
 8009b86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b8a:	ed91 7b00 	vldr	d7, [r1]
 8009b8e:	ec49 8b16 	vmov	d6, r8, r9
 8009b92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b96:	ec59 8b17 	vmov	r8, r9, d7
 8009b9a:	1112      	asrs	r2, r2, #4
 8009b9c:	d0d9      	beq.n	8009b52 <_strtod_l+0x52a>
 8009b9e:	2a1f      	cmp	r2, #31
 8009ba0:	dd1e      	ble.n	8009be0 <_strtod_l+0x5b8>
 8009ba2:	2500      	movs	r5, #0
 8009ba4:	462e      	mov	r6, r5
 8009ba6:	950a      	str	r5, [sp, #40]	; 0x28
 8009ba8:	462f      	mov	r7, r5
 8009baa:	2322      	movs	r3, #34	; 0x22
 8009bac:	f04f 0800 	mov.w	r8, #0
 8009bb0:	f04f 0900 	mov.w	r9, #0
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	e789      	b.n	8009acc <_strtod_l+0x4a4>
 8009bb8:	0800da45 	.word	0x0800da45
 8009bbc:	0800da84 	.word	0x0800da84
 8009bc0:	0800da3d 	.word	0x0800da3d
 8009bc4:	0800dac3 	.word	0x0800dac3
 8009bc8:	0800dd9b 	.word	0x0800dd9b
 8009bcc:	0800dc60 	.word	0x0800dc60
 8009bd0:	0800dc38 	.word	0x0800dc38
 8009bd4:	7ca00000 	.word	0x7ca00000
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	7fefffff 	.word	0x7fefffff
 8009be0:	f012 0110 	ands.w	r1, r2, #16
 8009be4:	bf18      	it	ne
 8009be6:	216a      	movne	r1, #106	; 0x6a
 8009be8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009bec:	9104      	str	r1, [sp, #16]
 8009bee:	49c0      	ldr	r1, [pc, #768]	; (8009ef0 <_strtod_l+0x8c8>)
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	07d7      	lsls	r7, r2, #31
 8009bf4:	d508      	bpl.n	8009c08 <_strtod_l+0x5e0>
 8009bf6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8009bfa:	ed91 7b00 	vldr	d7, [r1]
 8009bfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c02:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009c06:	2001      	movs	r0, #1
 8009c08:	1052      	asrs	r2, r2, #1
 8009c0a:	f101 0108 	add.w	r1, r1, #8
 8009c0e:	d1f0      	bne.n	8009bf2 <_strtod_l+0x5ca>
 8009c10:	b108      	cbz	r0, 8009c16 <_strtod_l+0x5ee>
 8009c12:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009c16:	9a04      	ldr	r2, [sp, #16]
 8009c18:	b1ba      	cbz	r2, 8009c4a <_strtod_l+0x622>
 8009c1a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009c1e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	4649      	mov	r1, r9
 8009c26:	dd10      	ble.n	8009c4a <_strtod_l+0x622>
 8009c28:	2a1f      	cmp	r2, #31
 8009c2a:	f340 8132 	ble.w	8009e92 <_strtod_l+0x86a>
 8009c2e:	2a34      	cmp	r2, #52	; 0x34
 8009c30:	bfde      	ittt	le
 8009c32:	3a20      	suble	r2, #32
 8009c34:	f04f 30ff 	movle.w	r0, #4294967295
 8009c38:	fa00 f202 	lslle.w	r2, r0, r2
 8009c3c:	f04f 0800 	mov.w	r8, #0
 8009c40:	bfcc      	ite	gt
 8009c42:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c46:	ea02 0901 	andle.w	r9, r2, r1
 8009c4a:	ec49 8b17 	vmov	d7, r8, r9
 8009c4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c56:	d0a4      	beq.n	8009ba2 <_strtod_l+0x57a>
 8009c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c5a:	9200      	str	r2, [sp, #0]
 8009c5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c5e:	4632      	mov	r2, r6
 8009c60:	4620      	mov	r0, r4
 8009c62:	f001 fdfb 	bl	800b85c <__s2b>
 8009c66:	900a      	str	r0, [sp, #40]	; 0x28
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f43f af25 	beq.w	8009ab8 <_strtod_l+0x490>
 8009c6e:	9b06      	ldr	r3, [sp, #24]
 8009c70:	ebab 0505 	sub.w	r5, fp, r5
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bfb4      	ite	lt
 8009c78:	462b      	movlt	r3, r5
 8009c7a:	2300      	movge	r3, #0
 8009c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c7e:	9b06      	ldr	r3, [sp, #24]
 8009c80:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009ed8 <_strtod_l+0x8b0>
 8009c84:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009ee0 <_strtod_l+0x8b8>
 8009c88:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009ee8 <_strtod_l+0x8c0>
 8009c8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c90:	2500      	movs	r5, #0
 8009c92:	9312      	str	r3, [sp, #72]	; 0x48
 8009c94:	462e      	mov	r6, r5
 8009c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c98:	4620      	mov	r0, r4
 8009c9a:	6859      	ldr	r1, [r3, #4]
 8009c9c:	f001 fd32 	bl	800b704 <_Balloc>
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f43f af0c 	beq.w	8009ac0 <_strtod_l+0x498>
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	3202      	adds	r2, #2
 8009cae:	f103 010c 	add.w	r1, r3, #12
 8009cb2:	0092      	lsls	r2, r2, #2
 8009cb4:	300c      	adds	r0, #12
 8009cb6:	f7fe fda7 	bl	8008808 <memcpy>
 8009cba:	ec49 8b10 	vmov	d0, r8, r9
 8009cbe:	aa1a      	add	r2, sp, #104	; 0x68
 8009cc0:	a919      	add	r1, sp, #100	; 0x64
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009cc8:	f002 f904 	bl	800bed4 <__d2b>
 8009ccc:	9018      	str	r0, [sp, #96]	; 0x60
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f43f aef6 	beq.w	8009ac0 <_strtod_l+0x498>
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f001 fe5a 	bl	800b990 <__i2b>
 8009cdc:	4606      	mov	r6, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f aeee 	beq.w	8009ac0 <_strtod_l+0x498>
 8009ce4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ce6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bfab      	itete	ge
 8009cec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009cee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009cf0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8009cf4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009cf8:	bfac      	ite	ge
 8009cfa:	eb03 0b02 	addge.w	fp, r3, r2
 8009cfe:	eba2 0a03 	sublt.w	sl, r2, r3
 8009d02:	9a04      	ldr	r2, [sp, #16]
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	440b      	add	r3, r1
 8009d08:	4a7a      	ldr	r2, [pc, #488]	; (8009ef4 <_strtod_l+0x8cc>)
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009d12:	f280 80d1 	bge.w	8009eb8 <_strtod_l+0x890>
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	2a1f      	cmp	r2, #31
 8009d1a:	eba1 0102 	sub.w	r1, r1, r2
 8009d1e:	f04f 0001 	mov.w	r0, #1
 8009d22:	f300 80bd 	bgt.w	8009ea0 <_strtod_l+0x878>
 8009d26:	fa00 f302 	lsl.w	r3, r0, r2
 8009d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d30:	eb0b 0301 	add.w	r3, fp, r1
 8009d34:	9a04      	ldr	r2, [sp, #16]
 8009d36:	459b      	cmp	fp, r3
 8009d38:	448a      	add	sl, r1
 8009d3a:	4492      	add	sl, r2
 8009d3c:	465a      	mov	r2, fp
 8009d3e:	bfa8      	it	ge
 8009d40:	461a      	movge	r2, r3
 8009d42:	4552      	cmp	r2, sl
 8009d44:	bfa8      	it	ge
 8009d46:	4652      	movge	r2, sl
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	bfc2      	ittt	gt
 8009d4c:	1a9b      	subgt	r3, r3, r2
 8009d4e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009d52:	ebab 0b02 	subgt.w	fp, fp, r2
 8009d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	dd18      	ble.n	8009d8e <_strtod_l+0x766>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4620      	mov	r0, r4
 8009d60:	9315      	str	r3, [sp, #84]	; 0x54
 8009d62:	f001 fed1 	bl	800bb08 <__pow5mult>
 8009d66:	4606      	mov	r6, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f43f aea9 	beq.w	8009ac0 <_strtod_l+0x498>
 8009d6e:	4601      	mov	r1, r0
 8009d70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d72:	4620      	mov	r0, r4
 8009d74:	f001 fe22 	bl	800b9bc <__multiply>
 8009d78:	9014      	str	r0, [sp, #80]	; 0x50
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f43f aea0 	beq.w	8009ac0 <_strtod_l+0x498>
 8009d80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d82:	4620      	mov	r0, r4
 8009d84:	f001 fcfe 	bl	800b784 <_Bfree>
 8009d88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d8c:	9218      	str	r2, [sp, #96]	; 0x60
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f300 8097 	bgt.w	8009ec2 <_strtod_l+0x89a>
 8009d94:	9b06      	ldr	r3, [sp, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd08      	ble.n	8009dac <_strtod_l+0x784>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f001 feb2 	bl	800bb08 <__pow5mult>
 8009da4:	4607      	mov	r7, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f43f ae8a 	beq.w	8009ac0 <_strtod_l+0x498>
 8009dac:	f1ba 0f00 	cmp.w	sl, #0
 8009db0:	dd08      	ble.n	8009dc4 <_strtod_l+0x79c>
 8009db2:	4639      	mov	r1, r7
 8009db4:	4652      	mov	r2, sl
 8009db6:	4620      	mov	r0, r4
 8009db8:	f001 ff00 	bl	800bbbc <__lshift>
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f ae7e 	beq.w	8009ac0 <_strtod_l+0x498>
 8009dc4:	f1bb 0f00 	cmp.w	fp, #0
 8009dc8:	dd08      	ble.n	8009ddc <_strtod_l+0x7b4>
 8009dca:	4631      	mov	r1, r6
 8009dcc:	465a      	mov	r2, fp
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f001 fef4 	bl	800bbbc <__lshift>
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f ae72 	beq.w	8009ac0 <_strtod_l+0x498>
 8009ddc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dde:	463a      	mov	r2, r7
 8009de0:	4620      	mov	r0, r4
 8009de2:	f001 ff73 	bl	800bccc <__mdiff>
 8009de6:	4605      	mov	r5, r0
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f43f ae69 	beq.w	8009ac0 <_strtod_l+0x498>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009df4:	60c3      	str	r3, [r0, #12]
 8009df6:	4631      	mov	r1, r6
 8009df8:	f001 ff4c 	bl	800bc94 <__mcmp>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	da7f      	bge.n	8009f00 <_strtod_l+0x8d8>
 8009e00:	ea5a 0308 	orrs.w	r3, sl, r8
 8009e04:	f040 80a5 	bne.w	8009f52 <_strtod_l+0x92a>
 8009e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 80a0 	bne.w	8009f52 <_strtod_l+0x92a>
 8009e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e16:	0d1b      	lsrs	r3, r3, #20
 8009e18:	051b      	lsls	r3, r3, #20
 8009e1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e1e:	f240 8098 	bls.w	8009f52 <_strtod_l+0x92a>
 8009e22:	696b      	ldr	r3, [r5, #20]
 8009e24:	b91b      	cbnz	r3, 8009e2e <_strtod_l+0x806>
 8009e26:	692b      	ldr	r3, [r5, #16]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	f340 8092 	ble.w	8009f52 <_strtod_l+0x92a>
 8009e2e:	4629      	mov	r1, r5
 8009e30:	2201      	movs	r2, #1
 8009e32:	4620      	mov	r0, r4
 8009e34:	f001 fec2 	bl	800bbbc <__lshift>
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	f001 ff2a 	bl	800bc94 <__mcmp>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f340 8086 	ble.w	8009f52 <_strtod_l+0x92a>
 8009e46:	9904      	ldr	r1, [sp, #16]
 8009e48:	4a2b      	ldr	r2, [pc, #172]	; (8009ef8 <_strtod_l+0x8d0>)
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	f000 80a1 	beq.w	8009f94 <_strtod_l+0x96c>
 8009e52:	ea02 0109 	and.w	r1, r2, r9
 8009e56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e5a:	f300 809b 	bgt.w	8009f94 <_strtod_l+0x96c>
 8009e5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e62:	f77f aea2 	ble.w	8009baa <_strtod_l+0x582>
 8009e66:	4a25      	ldr	r2, [pc, #148]	; (8009efc <_strtod_l+0x8d4>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009e6e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8009e72:	ec49 8b17 	vmov	d7, r8, r9
 8009e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e7e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	bf08      	it	eq
 8009e86:	2322      	moveq	r3, #34	; 0x22
 8009e88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e8c:	bf08      	it	eq
 8009e8e:	6023      	streq	r3, [r4, #0]
 8009e90:	e620      	b.n	8009ad4 <_strtod_l+0x4ac>
 8009e92:	f04f 31ff 	mov.w	r1, #4294967295
 8009e96:	fa01 f202 	lsl.w	r2, r1, r2
 8009e9a:	ea02 0808 	and.w	r8, r2, r8
 8009e9e:	e6d4      	b.n	8009c4a <_strtod_l+0x622>
 8009ea0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009ea4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009ea8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009eac:	33e2      	adds	r3, #226	; 0xe2
 8009eae:	fa00 f303 	lsl.w	r3, r0, r3
 8009eb2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8009eb6:	e73b      	b.n	8009d30 <_strtod_l+0x708>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009ec0:	e736      	b.n	8009d30 <_strtod_l+0x708>
 8009ec2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 fe78 	bl	800bbbc <__lshift>
 8009ecc:	9018      	str	r0, [sp, #96]	; 0x60
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f47f af60 	bne.w	8009d94 <_strtod_l+0x76c>
 8009ed4:	e5f4      	b.n	8009ac0 <_strtod_l+0x498>
 8009ed6:	bf00      	nop
 8009ed8:	94a03595 	.word	0x94a03595
 8009edc:	3fcfffff 	.word	0x3fcfffff
 8009ee0:	94a03595 	.word	0x94a03595
 8009ee4:	3fdfffff 	.word	0x3fdfffff
 8009ee8:	35afe535 	.word	0x35afe535
 8009eec:	3fe00000 	.word	0x3fe00000
 8009ef0:	0800da98 	.word	0x0800da98
 8009ef4:	fffffc02 	.word	0xfffffc02
 8009ef8:	7ff00000 	.word	0x7ff00000
 8009efc:	39500000 	.word	0x39500000
 8009f00:	46cb      	mov	fp, r9
 8009f02:	d165      	bne.n	8009fd0 <_strtod_l+0x9a8>
 8009f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f08:	f1ba 0f00 	cmp.w	sl, #0
 8009f0c:	d02a      	beq.n	8009f64 <_strtod_l+0x93c>
 8009f0e:	4aaa      	ldr	r2, [pc, #680]	; (800a1b8 <_strtod_l+0xb90>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d12b      	bne.n	8009f6c <_strtod_l+0x944>
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	4641      	mov	r1, r8
 8009f18:	b1fb      	cbz	r3, 8009f5a <_strtod_l+0x932>
 8009f1a:	4aa8      	ldr	r2, [pc, #672]	; (800a1bc <_strtod_l+0xb94>)
 8009f1c:	ea09 0202 	and.w	r2, r9, r2
 8009f20:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	d81a      	bhi.n	8009f60 <_strtod_l+0x938>
 8009f2a:	0d12      	lsrs	r2, r2, #20
 8009f2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f30:	fa00 f303 	lsl.w	r3, r0, r3
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d119      	bne.n	8009f6c <_strtod_l+0x944>
 8009f38:	4ba1      	ldr	r3, [pc, #644]	; (800a1c0 <_strtod_l+0xb98>)
 8009f3a:	459b      	cmp	fp, r3
 8009f3c:	d102      	bne.n	8009f44 <_strtod_l+0x91c>
 8009f3e:	3101      	adds	r1, #1
 8009f40:	f43f adbe 	beq.w	8009ac0 <_strtod_l+0x498>
 8009f44:	4b9d      	ldr	r3, [pc, #628]	; (800a1bc <_strtod_l+0xb94>)
 8009f46:	ea0b 0303 	and.w	r3, fp, r3
 8009f4a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009f4e:	f04f 0800 	mov.w	r8, #0
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d186      	bne.n	8009e66 <_strtod_l+0x83e>
 8009f58:	e5bc      	b.n	8009ad4 <_strtod_l+0x4ac>
 8009f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5e:	e7e9      	b.n	8009f34 <_strtod_l+0x90c>
 8009f60:	4603      	mov	r3, r0
 8009f62:	e7e7      	b.n	8009f34 <_strtod_l+0x90c>
 8009f64:	ea53 0308 	orrs.w	r3, r3, r8
 8009f68:	f43f af6d 	beq.w	8009e46 <_strtod_l+0x81e>
 8009f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6e:	b1db      	cbz	r3, 8009fa8 <_strtod_l+0x980>
 8009f70:	ea13 0f0b 	tst.w	r3, fp
 8009f74:	d0ed      	beq.n	8009f52 <_strtod_l+0x92a>
 8009f76:	9a04      	ldr	r2, [sp, #16]
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	f1ba 0f00 	cmp.w	sl, #0
 8009f80:	d016      	beq.n	8009fb0 <_strtod_l+0x988>
 8009f82:	f7ff fb36 	bl	80095f2 <sulp>
 8009f86:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009f8a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009f8e:	ec59 8b17 	vmov	r8, r9, d7
 8009f92:	e7de      	b.n	8009f52 <_strtod_l+0x92a>
 8009f94:	4013      	ands	r3, r2
 8009f96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f9a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009fa2:	f04f 38ff 	mov.w	r8, #4294967295
 8009fa6:	e7d4      	b.n	8009f52 <_strtod_l+0x92a>
 8009fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009faa:	ea13 0f08 	tst.w	r3, r8
 8009fae:	e7e1      	b.n	8009f74 <_strtod_l+0x94c>
 8009fb0:	f7ff fb1f 	bl	80095f2 <sulp>
 8009fb4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009fb8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009fbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009fcc:	d1c1      	bne.n	8009f52 <_strtod_l+0x92a>
 8009fce:	e5ec      	b.n	8009baa <_strtod_l+0x582>
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f001 ffda 	bl	800bf8c <__ratio>
 8009fd8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009fdc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	d867      	bhi.n	800a0b6 <_strtod_l+0xa8e>
 8009fe6:	f1ba 0f00 	cmp.w	sl, #0
 8009fea:	d044      	beq.n	800a076 <_strtod_l+0xa4e>
 8009fec:	4b75      	ldr	r3, [pc, #468]	; (800a1c4 <_strtod_l+0xb9c>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009ff4:	4971      	ldr	r1, [pc, #452]	; (800a1bc <_strtod_l+0xb94>)
 8009ff6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a1d0 <_strtod_l+0xba8>
 8009ffa:	ea0b 0001 	and.w	r0, fp, r1
 8009ffe:	4560      	cmp	r0, ip
 800a000:	900d      	str	r0, [sp, #52]	; 0x34
 800a002:	f040 808b 	bne.w	800a11c <_strtod_l+0xaf4>
 800a006:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a00a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a00e:	ec49 8b10 	vmov	d0, r8, r9
 800a012:	ec43 2b1c 	vmov	d12, r2, r3
 800a016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a01a:	f001 fedf 	bl	800bddc <__ulp>
 800a01e:	ec49 8b1d 	vmov	d13, r8, r9
 800a022:	eeac db00 	vfma.f64	d13, d12, d0
 800a026:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800a02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02c:	4963      	ldr	r1, [pc, #396]	; (800a1bc <_strtod_l+0xb94>)
 800a02e:	4a66      	ldr	r2, [pc, #408]	; (800a1c8 <_strtod_l+0xba0>)
 800a030:	4019      	ands	r1, r3
 800a032:	4291      	cmp	r1, r2
 800a034:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800a038:	d947      	bls.n	800a0ca <_strtod_l+0xaa2>
 800a03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a040:	4293      	cmp	r3, r2
 800a042:	d103      	bne.n	800a04c <_strtod_l+0xa24>
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	3301      	adds	r3, #1
 800a048:	f43f ad3a 	beq.w	8009ac0 <_strtod_l+0x498>
 800a04c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800a1c0 <_strtod_l+0xb98>
 800a050:	f04f 38ff 	mov.w	r8, #4294967295
 800a054:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a056:	4620      	mov	r0, r4
 800a058:	f001 fb94 	bl	800b784 <_Bfree>
 800a05c:	4639      	mov	r1, r7
 800a05e:	4620      	mov	r0, r4
 800a060:	f001 fb90 	bl	800b784 <_Bfree>
 800a064:	4631      	mov	r1, r6
 800a066:	4620      	mov	r0, r4
 800a068:	f001 fb8c 	bl	800b784 <_Bfree>
 800a06c:	4629      	mov	r1, r5
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 fb88 	bl	800b784 <_Bfree>
 800a074:	e60f      	b.n	8009c96 <_strtod_l+0x66e>
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d112      	bne.n	800a0a2 <_strtod_l+0xa7a>
 800a07c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a080:	b9b3      	cbnz	r3, 800a0b0 <_strtod_l+0xa88>
 800a082:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a086:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a092:	d401      	bmi.n	800a098 <_strtod_l+0xa70>
 800a094:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a098:	eeb1 7b48 	vneg.f64	d7, d8
 800a09c:	ec53 2b17 	vmov	r2, r3, d7
 800a0a0:	e7a8      	b.n	8009ff4 <_strtod_l+0x9cc>
 800a0a2:	f1b8 0f01 	cmp.w	r8, #1
 800a0a6:	d103      	bne.n	800a0b0 <_strtod_l+0xa88>
 800a0a8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ac:	f43f ad7d 	beq.w	8009baa <_strtod_l+0x582>
 800a0b0:	4b46      	ldr	r3, [pc, #280]	; (800a1cc <_strtod_l+0xba4>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	e79c      	b.n	8009ff0 <_strtod_l+0x9c8>
 800a0b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a0ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a0be:	f1ba 0f00 	cmp.w	sl, #0
 800a0c2:	d0e9      	beq.n	800a098 <_strtod_l+0xa70>
 800a0c4:	ec53 2b18 	vmov	r2, r3, d8
 800a0c8:	e794      	b.n	8009ff4 <_strtod_l+0x9cc>
 800a0ca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1bf      	bne.n	800a054 <_strtod_l+0xa2c>
 800a0d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0da:	0d1b      	lsrs	r3, r3, #20
 800a0dc:	051b      	lsls	r3, r3, #20
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d1b8      	bne.n	800a054 <_strtod_l+0xa2c>
 800a0e2:	ec51 0b18 	vmov	r0, r1, d8
 800a0e6:	f7f6 fad7 	bl	8000698 <__aeabi_d2lz>
 800a0ea:	f7f6 fa8f 	bl	800060c <__aeabi_l2d>
 800a0ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0f2:	ec41 0b17 	vmov	d7, r0, r1
 800a0f6:	ea43 0308 	orr.w	r3, r3, r8
 800a0fa:	ea53 030a 	orrs.w	r3, r3, sl
 800a0fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a102:	d03e      	beq.n	800a182 <_strtod_l+0xb5a>
 800a104:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	f53f ace2 	bmi.w	8009ad4 <_strtod_l+0x4ac>
 800a110:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a118:	dd9c      	ble.n	800a054 <_strtod_l+0xa2c>
 800a11a:	e4db      	b.n	8009ad4 <_strtod_l+0x4ac>
 800a11c:	9904      	ldr	r1, [sp, #16]
 800a11e:	b301      	cbz	r1, 800a162 <_strtod_l+0xb3a>
 800a120:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a122:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a126:	d81c      	bhi.n	800a162 <_strtod_l+0xb3a>
 800a128:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a1b0 <_strtod_l+0xb88>
 800a12c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	d811      	bhi.n	800a15a <_strtod_l+0xb32>
 800a136:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a13a:	ee18 3a10 	vmov	r3, s16
 800a13e:	2b01      	cmp	r3, #1
 800a140:	bf38      	it	cc
 800a142:	2301      	movcc	r3, #1
 800a144:	ee08 3a10 	vmov	s16, r3
 800a148:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a14c:	f1ba 0f00 	cmp.w	sl, #0
 800a150:	d114      	bne.n	800a17c <_strtod_l+0xb54>
 800a152:	eeb1 7b48 	vneg.f64	d7, d8
 800a156:	ec53 2b17 	vmov	r2, r3, d7
 800a15a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a15c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a160:	1a0b      	subs	r3, r1, r0
 800a162:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a166:	ec43 2b1c 	vmov	d12, r2, r3
 800a16a:	f001 fe37 	bl	800bddc <__ulp>
 800a16e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a172:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a176:	ec59 8b17 	vmov	r8, r9, d7
 800a17a:	e7a8      	b.n	800a0ce <_strtod_l+0xaa6>
 800a17c:	ec53 2b18 	vmov	r2, r3, d8
 800a180:	e7eb      	b.n	800a15a <_strtod_l+0xb32>
 800a182:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18a:	f57f af63 	bpl.w	800a054 <_strtod_l+0xa2c>
 800a18e:	e4a1      	b.n	8009ad4 <_strtod_l+0x4ac>
 800a190:	2300      	movs	r3, #0
 800a192:	930b      	str	r3, [sp, #44]	; 0x2c
 800a194:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	f7ff ba8d 	b.w	80096b8 <_strtod_l+0x90>
 800a19e:	2a65      	cmp	r2, #101	; 0x65
 800a1a0:	f43f ab89 	beq.w	80098b6 <_strtod_l+0x28e>
 800a1a4:	2a45      	cmp	r2, #69	; 0x45
 800a1a6:	f43f ab86 	beq.w	80098b6 <_strtod_l+0x28e>
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	f7ff bbbe 	b.w	800992c <_strtod_l+0x304>
 800a1b0:	ffc00000 	.word	0xffc00000
 800a1b4:	41dfffff 	.word	0x41dfffff
 800a1b8:	000fffff 	.word	0x000fffff
 800a1bc:	7ff00000 	.word	0x7ff00000
 800a1c0:	7fefffff 	.word	0x7fefffff
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	7c9fffff 	.word	0x7c9fffff
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	7fe00000 	.word	0x7fe00000

0800a1d4 <_strtod_r>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <_strtod_r+0x8>)
 800a1d6:	f7ff ba27 	b.w	8009628 <_strtod_l>
 800a1da:	bf00      	nop
 800a1dc:	200000c0 	.word	0x200000c0

0800a1e0 <_strtol_l.isra.0>:
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e6:	d001      	beq.n	800a1ec <_strtol_l.isra.0+0xc>
 800a1e8:	2b24      	cmp	r3, #36	; 0x24
 800a1ea:	d906      	bls.n	800a1fa <_strtol_l.isra.0+0x1a>
 800a1ec:	f7fe fae2 	bl	80087b4 <__errno>
 800a1f0:	2316      	movs	r3, #22
 800a1f2:	6003      	str	r3, [r0, #0]
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fa:	4f3a      	ldr	r7, [pc, #232]	; (800a2e4 <_strtol_l.isra.0+0x104>)
 800a1fc:	468e      	mov	lr, r1
 800a1fe:	4676      	mov	r6, lr
 800a200:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a204:	5de5      	ldrb	r5, [r4, r7]
 800a206:	f015 0508 	ands.w	r5, r5, #8
 800a20a:	d1f8      	bne.n	800a1fe <_strtol_l.isra.0+0x1e>
 800a20c:	2c2d      	cmp	r4, #45	; 0x2d
 800a20e:	d134      	bne.n	800a27a <_strtol_l.isra.0+0x9a>
 800a210:	f89e 4000 	ldrb.w	r4, [lr]
 800a214:	f04f 0801 	mov.w	r8, #1
 800a218:	f106 0e02 	add.w	lr, r6, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d05c      	beq.n	800a2da <_strtol_l.isra.0+0xfa>
 800a220:	2b10      	cmp	r3, #16
 800a222:	d10c      	bne.n	800a23e <_strtol_l.isra.0+0x5e>
 800a224:	2c30      	cmp	r4, #48	; 0x30
 800a226:	d10a      	bne.n	800a23e <_strtol_l.isra.0+0x5e>
 800a228:	f89e 4000 	ldrb.w	r4, [lr]
 800a22c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a230:	2c58      	cmp	r4, #88	; 0x58
 800a232:	d14d      	bne.n	800a2d0 <_strtol_l.isra.0+0xf0>
 800a234:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a238:	2310      	movs	r3, #16
 800a23a:	f10e 0e02 	add.w	lr, lr, #2
 800a23e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a242:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a246:	2600      	movs	r6, #0
 800a248:	fbbc f9f3 	udiv	r9, ip, r3
 800a24c:	4635      	mov	r5, r6
 800a24e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a252:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a256:	2f09      	cmp	r7, #9
 800a258:	d818      	bhi.n	800a28c <_strtol_l.isra.0+0xac>
 800a25a:	463c      	mov	r4, r7
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	dd24      	ble.n	800a2aa <_strtol_l.isra.0+0xca>
 800a260:	2e00      	cmp	r6, #0
 800a262:	db1f      	blt.n	800a2a4 <_strtol_l.isra.0+0xc4>
 800a264:	45a9      	cmp	r9, r5
 800a266:	d31d      	bcc.n	800a2a4 <_strtol_l.isra.0+0xc4>
 800a268:	d101      	bne.n	800a26e <_strtol_l.isra.0+0x8e>
 800a26a:	45a2      	cmp	sl, r4
 800a26c:	db1a      	blt.n	800a2a4 <_strtol_l.isra.0+0xc4>
 800a26e:	fb05 4503 	mla	r5, r5, r3, r4
 800a272:	2601      	movs	r6, #1
 800a274:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a278:	e7eb      	b.n	800a252 <_strtol_l.isra.0+0x72>
 800a27a:	2c2b      	cmp	r4, #43	; 0x2b
 800a27c:	bf08      	it	eq
 800a27e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a282:	46a8      	mov	r8, r5
 800a284:	bf08      	it	eq
 800a286:	f106 0e02 	addeq.w	lr, r6, #2
 800a28a:	e7c7      	b.n	800a21c <_strtol_l.isra.0+0x3c>
 800a28c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a290:	2f19      	cmp	r7, #25
 800a292:	d801      	bhi.n	800a298 <_strtol_l.isra.0+0xb8>
 800a294:	3c37      	subs	r4, #55	; 0x37
 800a296:	e7e1      	b.n	800a25c <_strtol_l.isra.0+0x7c>
 800a298:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a29c:	2f19      	cmp	r7, #25
 800a29e:	d804      	bhi.n	800a2aa <_strtol_l.isra.0+0xca>
 800a2a0:	3c57      	subs	r4, #87	; 0x57
 800a2a2:	e7db      	b.n	800a25c <_strtol_l.isra.0+0x7c>
 800a2a4:	f04f 36ff 	mov.w	r6, #4294967295
 800a2a8:	e7e4      	b.n	800a274 <_strtol_l.isra.0+0x94>
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	da05      	bge.n	800a2ba <_strtol_l.isra.0+0xda>
 800a2ae:	2322      	movs	r3, #34	; 0x22
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	4665      	mov	r5, ip
 800a2b4:	b942      	cbnz	r2, 800a2c8 <_strtol_l.isra.0+0xe8>
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	e79d      	b.n	800a1f6 <_strtol_l.isra.0+0x16>
 800a2ba:	f1b8 0f00 	cmp.w	r8, #0
 800a2be:	d000      	beq.n	800a2c2 <_strtol_l.isra.0+0xe2>
 800a2c0:	426d      	negs	r5, r5
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	d0f7      	beq.n	800a2b6 <_strtol_l.isra.0+0xd6>
 800a2c6:	b10e      	cbz	r6, 800a2cc <_strtol_l.isra.0+0xec>
 800a2c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a2cc:	6011      	str	r1, [r2, #0]
 800a2ce:	e7f2      	b.n	800a2b6 <_strtol_l.isra.0+0xd6>
 800a2d0:	2430      	movs	r4, #48	; 0x30
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1b3      	bne.n	800a23e <_strtol_l.isra.0+0x5e>
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	e7b1      	b.n	800a23e <_strtol_l.isra.0+0x5e>
 800a2da:	2c30      	cmp	r4, #48	; 0x30
 800a2dc:	d0a4      	beq.n	800a228 <_strtol_l.isra.0+0x48>
 800a2de:	230a      	movs	r3, #10
 800a2e0:	e7ad      	b.n	800a23e <_strtol_l.isra.0+0x5e>
 800a2e2:	bf00      	nop
 800a2e4:	0800d931 	.word	0x0800d931

0800a2e8 <_strtol_r>:
 800a2e8:	f7ff bf7a 	b.w	800a1e0 <_strtol_l.isra.0>

0800a2ec <_vsniprintf_r>:
 800a2ec:	b530      	push	{r4, r5, lr}
 800a2ee:	1e14      	subs	r4, r2, #0
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	b09b      	sub	sp, #108	; 0x6c
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	da05      	bge.n	800a304 <_vsniprintf_r+0x18>
 800a2f8:	238b      	movs	r3, #139	; 0x8b
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	b01b      	add	sp, #108	; 0x6c
 800a302:	bd30      	pop	{r4, r5, pc}
 800a304:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a308:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a30c:	bf14      	ite	ne
 800a30e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a312:	4623      	moveq	r3, r4
 800a314:	9302      	str	r3, [sp, #8]
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a31c:	9100      	str	r1, [sp, #0]
 800a31e:	9104      	str	r1, [sp, #16]
 800a320:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a324:	4602      	mov	r2, r0
 800a326:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a328:	4669      	mov	r1, sp
 800a32a:	4628      	mov	r0, r5
 800a32c:	f001 ffbc 	bl	800c2a8 <_svfiprintf_r>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	bfbc      	itt	lt
 800a334:	238b      	movlt	r3, #139	; 0x8b
 800a336:	602b      	strlt	r3, [r5, #0]
 800a338:	2c00      	cmp	r4, #0
 800a33a:	d0e1      	beq.n	800a300 <_vsniprintf_r+0x14>
 800a33c:	9b00      	ldr	r3, [sp, #0]
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	e7dd      	b.n	800a300 <_vsniprintf_r+0x14>

0800a344 <vsniprintf>:
 800a344:	b507      	push	{r0, r1, r2, lr}
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	4613      	mov	r3, r2
 800a34a:	460a      	mov	r2, r1
 800a34c:	4601      	mov	r1, r0
 800a34e:	4803      	ldr	r0, [pc, #12]	; (800a35c <vsniprintf+0x18>)
 800a350:	6800      	ldr	r0, [r0, #0]
 800a352:	f7ff ffcb 	bl	800a2ec <_vsniprintf_r>
 800a356:	b003      	add	sp, #12
 800a358:	f85d fb04 	ldr.w	pc, [sp], #4
 800a35c:	20000058 	.word	0x20000058

0800a360 <_write_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_write_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f8 fbb7 	bl	8002ae2 <_write>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_write_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_write_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	200008c8 	.word	0x200008c8

0800a384 <_close_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d06      	ldr	r5, [pc, #24]	; (800a3a0 <_close_r+0x1c>)
 800a388:	2300      	movs	r3, #0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4608      	mov	r0, r1
 800a38e:	602b      	str	r3, [r5, #0]
 800a390:	f7f8 fbc3 	bl	8002b1a <_close>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_close_r+0x1a>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_close_r+0x1a>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	200008c8 	.word	0x200008c8

0800a3a4 <quorem>:
 800a3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	6903      	ldr	r3, [r0, #16]
 800a3aa:	690c      	ldr	r4, [r1, #16]
 800a3ac:	42a3      	cmp	r3, r4
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	f2c0 8081 	blt.w	800a4b6 <quorem+0x112>
 800a3b4:	3c01      	subs	r4, #1
 800a3b6:	f101 0814 	add.w	r8, r1, #20
 800a3ba:	f100 0514 	add.w	r5, r0, #20
 800a3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a3d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3dc:	d331      	bcc.n	800a442 <quorem+0x9e>
 800a3de:	f04f 0e00 	mov.w	lr, #0
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	46ac      	mov	ip, r5
 800a3e6:	46f2      	mov	sl, lr
 800a3e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3ec:	b293      	uxth	r3, r2
 800a3ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a3f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a3fc:	0c12      	lsrs	r2, r2, #16
 800a3fe:	f8dc a000 	ldr.w	sl, [ip]
 800a402:	fb06 e202 	mla	r2, r6, r2, lr
 800a406:	fa13 f38a 	uxtah	r3, r3, sl
 800a40a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a40e:	fa1f fa82 	uxth.w	sl, r2
 800a412:	f8dc 2000 	ldr.w	r2, [ip]
 800a416:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a41a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a424:	4581      	cmp	r9, r0
 800a426:	f84c 3b04 	str.w	r3, [ip], #4
 800a42a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a42e:	d2db      	bcs.n	800a3e8 <quorem+0x44>
 800a430:	f855 300b 	ldr.w	r3, [r5, fp]
 800a434:	b92b      	cbnz	r3, 800a442 <quorem+0x9e>
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	3b04      	subs	r3, #4
 800a43a:	429d      	cmp	r5, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	d32e      	bcc.n	800a49e <quorem+0xfa>
 800a440:	613c      	str	r4, [r7, #16]
 800a442:	4638      	mov	r0, r7
 800a444:	f001 fc26 	bl	800bc94 <__mcmp>
 800a448:	2800      	cmp	r0, #0
 800a44a:	db24      	blt.n	800a496 <quorem+0xf2>
 800a44c:	3601      	adds	r6, #1
 800a44e:	4628      	mov	r0, r5
 800a450:	f04f 0c00 	mov.w	ip, #0
 800a454:	f858 2b04 	ldr.w	r2, [r8], #4
 800a458:	f8d0 e000 	ldr.w	lr, [r0]
 800a45c:	b293      	uxth	r3, r2
 800a45e:	ebac 0303 	sub.w	r3, ip, r3
 800a462:	0c12      	lsrs	r2, r2, #16
 800a464:	fa13 f38e 	uxtah	r3, r3, lr
 800a468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a46c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a470:	b29b      	uxth	r3, r3
 800a472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a476:	45c1      	cmp	r9, r8
 800a478:	f840 3b04 	str.w	r3, [r0], #4
 800a47c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a480:	d2e8      	bcs.n	800a454 <quorem+0xb0>
 800a482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a48a:	b922      	cbnz	r2, 800a496 <quorem+0xf2>
 800a48c:	3b04      	subs	r3, #4
 800a48e:	429d      	cmp	r5, r3
 800a490:	461a      	mov	r2, r3
 800a492:	d30a      	bcc.n	800a4aa <quorem+0x106>
 800a494:	613c      	str	r4, [r7, #16]
 800a496:	4630      	mov	r0, r6
 800a498:	b003      	add	sp, #12
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	3b04      	subs	r3, #4
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	d1cc      	bne.n	800a440 <quorem+0x9c>
 800a4a6:	3c01      	subs	r4, #1
 800a4a8:	e7c7      	b.n	800a43a <quorem+0x96>
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d1f0      	bne.n	800a494 <quorem+0xf0>
 800a4b2:	3c01      	subs	r4, #1
 800a4b4:	e7eb      	b.n	800a48e <quorem+0xea>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e7ee      	b.n	800a498 <quorem+0xf4>
 800a4ba:	0000      	movs	r0, r0
 800a4bc:	0000      	movs	r0, r0
	...

0800a4c0 <_dtoa_r>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	ec59 8b10 	vmov	r8, r9, d0
 800a4c8:	b095      	sub	sp, #84	; 0x54
 800a4ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4cc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a4ce:	9107      	str	r1, [sp, #28]
 800a4d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d8:	9310      	str	r3, [sp, #64]	; 0x40
 800a4da:	b975      	cbnz	r5, 800a4fa <_dtoa_r+0x3a>
 800a4dc:	2010      	movs	r0, #16
 800a4de:	f001 f8f7 	bl	800b6d0 <malloc>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	6270      	str	r0, [r6, #36]	; 0x24
 800a4e6:	b920      	cbnz	r0, 800a4f2 <_dtoa_r+0x32>
 800a4e8:	4bab      	ldr	r3, [pc, #684]	; (800a798 <_dtoa_r+0x2d8>)
 800a4ea:	21ea      	movs	r1, #234	; 0xea
 800a4ec:	48ab      	ldr	r0, [pc, #684]	; (800a79c <_dtoa_r+0x2dc>)
 800a4ee:	f002 fc35 	bl	800cd5c <__assert_func>
 800a4f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4f6:	6005      	str	r5, [r0, #0]
 800a4f8:	60c5      	str	r5, [r0, #12]
 800a4fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	b151      	cbz	r1, 800a516 <_dtoa_r+0x56>
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	604a      	str	r2, [r1, #4]
 800a504:	2301      	movs	r3, #1
 800a506:	4093      	lsls	r3, r2
 800a508:	608b      	str	r3, [r1, #8]
 800a50a:	4630      	mov	r0, r6
 800a50c:	f001 f93a 	bl	800b784 <_Bfree>
 800a510:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f1b9 0300 	subs.w	r3, r9, #0
 800a51a:	bfbb      	ittet	lt
 800a51c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a520:	9303      	strlt	r3, [sp, #12]
 800a522:	2300      	movge	r3, #0
 800a524:	2201      	movlt	r2, #1
 800a526:	bfac      	ite	ge
 800a528:	6023      	strge	r3, [r4, #0]
 800a52a:	6022      	strlt	r2, [r4, #0]
 800a52c:	4b9c      	ldr	r3, [pc, #624]	; (800a7a0 <_dtoa_r+0x2e0>)
 800a52e:	9c03      	ldr	r4, [sp, #12]
 800a530:	43a3      	bics	r3, r4
 800a532:	d11a      	bne.n	800a56a <_dtoa_r+0xaa>
 800a534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a536:	f242 730f 	movw	r3, #9999	; 0x270f
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a540:	ea53 0308 	orrs.w	r3, r3, r8
 800a544:	f000 8512 	beq.w	800af6c <_dtoa_r+0xaac>
 800a548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a54a:	b953      	cbnz	r3, 800a562 <_dtoa_r+0xa2>
 800a54c:	4b95      	ldr	r3, [pc, #596]	; (800a7a4 <_dtoa_r+0x2e4>)
 800a54e:	e01f      	b.n	800a590 <_dtoa_r+0xd0>
 800a550:	4b95      	ldr	r3, [pc, #596]	; (800a7a8 <_dtoa_r+0x2e8>)
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	3308      	adds	r3, #8
 800a556:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	9800      	ldr	r0, [sp, #0]
 800a55c:	b015      	add	sp, #84	; 0x54
 800a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	4b90      	ldr	r3, [pc, #576]	; (800a7a4 <_dtoa_r+0x2e4>)
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	3303      	adds	r3, #3
 800a568:	e7f5      	b.n	800a556 <_dtoa_r+0x96>
 800a56a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a56e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a576:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a57a:	d10b      	bne.n	800a594 <_dtoa_r+0xd4>
 800a57c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a57e:	2301      	movs	r3, #1
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 84ee 	beq.w	800af66 <_dtoa_r+0xaa6>
 800a58a:	4888      	ldr	r0, [pc, #544]	; (800a7ac <_dtoa_r+0x2ec>)
 800a58c:	6018      	str	r0, [r3, #0]
 800a58e:	1e43      	subs	r3, r0, #1
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	e7e2      	b.n	800a55a <_dtoa_r+0x9a>
 800a594:	a913      	add	r1, sp, #76	; 0x4c
 800a596:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a59a:	aa12      	add	r2, sp, #72	; 0x48
 800a59c:	4630      	mov	r0, r6
 800a59e:	f001 fc99 	bl	800bed4 <__d2b>
 800a5a2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	d047      	beq.n	800a63e <_dtoa_r+0x17e>
 800a5ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a5b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a5b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5b8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a5bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5c0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a5c4:	2400      	movs	r4, #0
 800a5c6:	ec43 2b16 	vmov	d6, r2, r3
 800a5ca:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a5ce:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a780 <_dtoa_r+0x2c0>
 800a5d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a5d6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a788 <_dtoa_r+0x2c8>
 800a5da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a5de:	eeb0 7b46 	vmov.f64	d7, d6
 800a5e2:	ee06 1a90 	vmov	s13, r1
 800a5e6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a5ea:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a790 <_dtoa_r+0x2d0>
 800a5ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a5f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a5f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fe:	ee16 ba90 	vmov	fp, s13
 800a602:	9411      	str	r4, [sp, #68]	; 0x44
 800a604:	d508      	bpl.n	800a618 <_dtoa_r+0x158>
 800a606:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a60a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a612:	bf18      	it	ne
 800a614:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a618:	f1bb 0f16 	cmp.w	fp, #22
 800a61c:	d832      	bhi.n	800a684 <_dtoa_r+0x1c4>
 800a61e:	4b64      	ldr	r3, [pc, #400]	; (800a7b0 <_dtoa_r+0x2f0>)
 800a620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a624:	ed93 7b00 	vldr	d7, [r3]
 800a628:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a62c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	d501      	bpl.n	800a63a <_dtoa_r+0x17a>
 800a636:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a63a:	2300      	movs	r3, #0
 800a63c:	e023      	b.n	800a686 <_dtoa_r+0x1c6>
 800a63e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a640:	4401      	add	r1, r0
 800a642:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a646:	2b20      	cmp	r3, #32
 800a648:	bfc3      	ittte	gt
 800a64a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a64e:	fa04 f303 	lslgt.w	r3, r4, r3
 800a652:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a656:	f1c3 0320 	rsble	r3, r3, #32
 800a65a:	bfc6      	itte	gt
 800a65c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a660:	ea43 0308 	orrgt.w	r3, r3, r8
 800a664:	fa08 f303 	lslle.w	r3, r8, r3
 800a668:	ee07 3a90 	vmov	s15, r3
 800a66c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a670:	3901      	subs	r1, #1
 800a672:	ed8d 7b00 	vstr	d7, [sp]
 800a676:	9c01      	ldr	r4, [sp, #4]
 800a678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a67c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a680:	2401      	movs	r4, #1
 800a682:	e7a0      	b.n	800a5c6 <_dtoa_r+0x106>
 800a684:	2301      	movs	r3, #1
 800a686:	930f      	str	r3, [sp, #60]	; 0x3c
 800a688:	1a43      	subs	r3, r0, r1
 800a68a:	1e5a      	subs	r2, r3, #1
 800a68c:	bf45      	ittet	mi
 800a68e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a692:	9305      	strmi	r3, [sp, #20]
 800a694:	2300      	movpl	r3, #0
 800a696:	2300      	movmi	r3, #0
 800a698:	9206      	str	r2, [sp, #24]
 800a69a:	bf54      	ite	pl
 800a69c:	9305      	strpl	r3, [sp, #20]
 800a69e:	9306      	strmi	r3, [sp, #24]
 800a6a0:	f1bb 0f00 	cmp.w	fp, #0
 800a6a4:	db18      	blt.n	800a6d8 <_dtoa_r+0x218>
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a6ac:	445b      	add	r3, fp
 800a6ae:	9306      	str	r3, [sp, #24]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9a07      	ldr	r2, [sp, #28]
 800a6b4:	2a09      	cmp	r2, #9
 800a6b6:	d849      	bhi.n	800a74c <_dtoa_r+0x28c>
 800a6b8:	2a05      	cmp	r2, #5
 800a6ba:	bfc4      	itt	gt
 800a6bc:	3a04      	subgt	r2, #4
 800a6be:	9207      	strgt	r2, [sp, #28]
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	f1a2 0202 	sub.w	r2, r2, #2
 800a6c6:	bfcc      	ite	gt
 800a6c8:	2400      	movgt	r4, #0
 800a6ca:	2401      	movle	r4, #1
 800a6cc:	2a03      	cmp	r2, #3
 800a6ce:	d848      	bhi.n	800a762 <_dtoa_r+0x2a2>
 800a6d0:	e8df f002 	tbb	[pc, r2]
 800a6d4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	eba3 030b 	sub.w	r3, r3, fp
 800a6e0:	9305      	str	r3, [sp, #20]
 800a6e2:	920e      	str	r2, [sp, #56]	; 0x38
 800a6e4:	f1cb 0300 	rsb	r3, fp, #0
 800a6e8:	e7e3      	b.n	800a6b2 <_dtoa_r+0x1f2>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	9208      	str	r2, [sp, #32]
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	dc39      	bgt.n	800a768 <_dtoa_r+0x2a8>
 800a6f4:	f04f 0a01 	mov.w	sl, #1
 800a6f8:	46d1      	mov	r9, sl
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a700:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a702:	2100      	movs	r1, #0
 800a704:	6079      	str	r1, [r7, #4]
 800a706:	2004      	movs	r0, #4
 800a708:	f100 0c14 	add.w	ip, r0, #20
 800a70c:	4594      	cmp	ip, r2
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	d92f      	bls.n	800a772 <_dtoa_r+0x2b2>
 800a712:	4630      	mov	r0, r6
 800a714:	930c      	str	r3, [sp, #48]	; 0x30
 800a716:	f000 fff5 	bl	800b704 <_Balloc>
 800a71a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71c:	9000      	str	r0, [sp, #0]
 800a71e:	4602      	mov	r2, r0
 800a720:	2800      	cmp	r0, #0
 800a722:	d149      	bne.n	800a7b8 <_dtoa_r+0x2f8>
 800a724:	4b23      	ldr	r3, [pc, #140]	; (800a7b4 <_dtoa_r+0x2f4>)
 800a726:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a72a:	e6df      	b.n	800a4ec <_dtoa_r+0x2c>
 800a72c:	2201      	movs	r2, #1
 800a72e:	e7dd      	b.n	800a6ec <_dtoa_r+0x22c>
 800a730:	2200      	movs	r2, #0
 800a732:	9208      	str	r2, [sp, #32]
 800a734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a736:	eb0b 0a02 	add.w	sl, fp, r2
 800a73a:	f10a 0901 	add.w	r9, sl, #1
 800a73e:	464a      	mov	r2, r9
 800a740:	2a01      	cmp	r2, #1
 800a742:	bfb8      	it	lt
 800a744:	2201      	movlt	r2, #1
 800a746:	e7db      	b.n	800a700 <_dtoa_r+0x240>
 800a748:	2201      	movs	r2, #1
 800a74a:	e7f2      	b.n	800a732 <_dtoa_r+0x272>
 800a74c:	2401      	movs	r4, #1
 800a74e:	2200      	movs	r2, #0
 800a750:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a754:	f04f 3aff 	mov.w	sl, #4294967295
 800a758:	2100      	movs	r1, #0
 800a75a:	46d1      	mov	r9, sl
 800a75c:	2212      	movs	r2, #18
 800a75e:	9109      	str	r1, [sp, #36]	; 0x24
 800a760:	e7ce      	b.n	800a700 <_dtoa_r+0x240>
 800a762:	2201      	movs	r2, #1
 800a764:	9208      	str	r2, [sp, #32]
 800a766:	e7f5      	b.n	800a754 <_dtoa_r+0x294>
 800a768:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a76c:	46d1      	mov	r9, sl
 800a76e:	4652      	mov	r2, sl
 800a770:	e7c6      	b.n	800a700 <_dtoa_r+0x240>
 800a772:	3101      	adds	r1, #1
 800a774:	6079      	str	r1, [r7, #4]
 800a776:	0040      	lsls	r0, r0, #1
 800a778:	e7c6      	b.n	800a708 <_dtoa_r+0x248>
 800a77a:	bf00      	nop
 800a77c:	f3af 8000 	nop.w
 800a780:	636f4361 	.word	0x636f4361
 800a784:	3fd287a7 	.word	0x3fd287a7
 800a788:	8b60c8b3 	.word	0x8b60c8b3
 800a78c:	3fc68a28 	.word	0x3fc68a28
 800a790:	509f79fb 	.word	0x509f79fb
 800a794:	3fd34413 	.word	0x3fd34413
 800a798:	0800dacd 	.word	0x0800dacd
 800a79c:	0800dae4 	.word	0x0800dae4
 800a7a0:	7ff00000 	.word	0x7ff00000
 800a7a4:	0800dac9 	.word	0x0800dac9
 800a7a8:	0800dac0 	.word	0x0800dac0
 800a7ac:	0800dd4a 	.word	0x0800dd4a
 800a7b0:	0800dc60 	.word	0x0800dc60
 800a7b4:	0800db43 	.word	0x0800db43
 800a7b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a7ba:	9900      	ldr	r1, [sp, #0]
 800a7bc:	6011      	str	r1, [r2, #0]
 800a7be:	f1b9 0f0e 	cmp.w	r9, #14
 800a7c2:	d872      	bhi.n	800a8aa <_dtoa_r+0x3ea>
 800a7c4:	2c00      	cmp	r4, #0
 800a7c6:	d070      	beq.n	800a8aa <_dtoa_r+0x3ea>
 800a7c8:	f1bb 0f00 	cmp.w	fp, #0
 800a7cc:	f340 80a6 	ble.w	800a91c <_dtoa_r+0x45c>
 800a7d0:	49ca      	ldr	r1, [pc, #808]	; (800aafc <_dtoa_r+0x63c>)
 800a7d2:	f00b 020f 	and.w	r2, fp, #15
 800a7d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a7da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a7de:	ed92 7b00 	vldr	d7, [r2]
 800a7e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a7e6:	f000 808d 	beq.w	800a904 <_dtoa_r+0x444>
 800a7ea:	4ac5      	ldr	r2, [pc, #788]	; (800ab00 <_dtoa_r+0x640>)
 800a7ec:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a7f0:	ed92 6b08 	vldr	d6, [r2, #32]
 800a7f4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a7f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a7fc:	f001 010f 	and.w	r1, r1, #15
 800a800:	2203      	movs	r2, #3
 800a802:	48bf      	ldr	r0, [pc, #764]	; (800ab00 <_dtoa_r+0x640>)
 800a804:	2900      	cmp	r1, #0
 800a806:	d17f      	bne.n	800a908 <_dtoa_r+0x448>
 800a808:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a80c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a810:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a814:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a816:	2900      	cmp	r1, #0
 800a818:	f000 80b2 	beq.w	800a980 <_dtoa_r+0x4c0>
 800a81c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a820:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a824:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82c:	f140 80a8 	bpl.w	800a980 <_dtoa_r+0x4c0>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	f000 80a4 	beq.w	800a980 <_dtoa_r+0x4c0>
 800a838:	f1ba 0f00 	cmp.w	sl, #0
 800a83c:	dd31      	ble.n	800a8a2 <_dtoa_r+0x3e2>
 800a83e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a842:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a846:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a84a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a84e:	3201      	adds	r2, #1
 800a850:	4650      	mov	r0, sl
 800a852:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a856:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a85a:	ee07 2a90 	vmov	s15, r2
 800a85e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a862:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a866:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a86a:	9c03      	ldr	r4, [sp, #12]
 800a86c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a870:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a874:	2800      	cmp	r0, #0
 800a876:	f040 8086 	bne.w	800a986 <_dtoa_r+0x4c6>
 800a87a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a87e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a882:	ec42 1b17 	vmov	d7, r1, r2
 800a886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88e:	f300 8272 	bgt.w	800ad76 <_dtoa_r+0x8b6>
 800a892:	eeb1 7b47 	vneg.f64	d7, d7
 800a896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89e:	f100 8267 	bmi.w	800ad70 <_dtoa_r+0x8b0>
 800a8a2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a8a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a8aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8ac:	2a00      	cmp	r2, #0
 800a8ae:	f2c0 8129 	blt.w	800ab04 <_dtoa_r+0x644>
 800a8b2:	f1bb 0f0e 	cmp.w	fp, #14
 800a8b6:	f300 8125 	bgt.w	800ab04 <_dtoa_r+0x644>
 800a8ba:	4b90      	ldr	r3, [pc, #576]	; (800aafc <_dtoa_r+0x63c>)
 800a8bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8c0:	ed93 6b00 	vldr	d6, [r3]
 800a8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f280 80c3 	bge.w	800aa52 <_dtoa_r+0x592>
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	f300 80bf 	bgt.w	800aa52 <_dtoa_r+0x592>
 800a8d4:	f040 824c 	bne.w	800ad70 <_dtoa_r+0x8b0>
 800a8d8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a8dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a8e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ec:	464c      	mov	r4, r9
 800a8ee:	464f      	mov	r7, r9
 800a8f0:	f280 8222 	bge.w	800ad38 <_dtoa_r+0x878>
 800a8f4:	f8dd 8000 	ldr.w	r8, [sp]
 800a8f8:	2331      	movs	r3, #49	; 0x31
 800a8fa:	f808 3b01 	strb.w	r3, [r8], #1
 800a8fe:	f10b 0b01 	add.w	fp, fp, #1
 800a902:	e21e      	b.n	800ad42 <_dtoa_r+0x882>
 800a904:	2202      	movs	r2, #2
 800a906:	e77c      	b.n	800a802 <_dtoa_r+0x342>
 800a908:	07cc      	lsls	r4, r1, #31
 800a90a:	d504      	bpl.n	800a916 <_dtoa_r+0x456>
 800a90c:	ed90 6b00 	vldr	d6, [r0]
 800a910:	3201      	adds	r2, #1
 800a912:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a916:	1049      	asrs	r1, r1, #1
 800a918:	3008      	adds	r0, #8
 800a91a:	e773      	b.n	800a804 <_dtoa_r+0x344>
 800a91c:	d02e      	beq.n	800a97c <_dtoa_r+0x4bc>
 800a91e:	f1cb 0100 	rsb	r1, fp, #0
 800a922:	4a76      	ldr	r2, [pc, #472]	; (800aafc <_dtoa_r+0x63c>)
 800a924:	f001 000f 	and.w	r0, r1, #15
 800a928:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a92c:	ed92 7b00 	vldr	d7, [r2]
 800a930:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a934:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a938:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a93c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a940:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a944:	486e      	ldr	r0, [pc, #440]	; (800ab00 <_dtoa_r+0x640>)
 800a946:	1109      	asrs	r1, r1, #4
 800a948:	2400      	movs	r4, #0
 800a94a:	2202      	movs	r2, #2
 800a94c:	b939      	cbnz	r1, 800a95e <_dtoa_r+0x49e>
 800a94e:	2c00      	cmp	r4, #0
 800a950:	f43f af60 	beq.w	800a814 <_dtoa_r+0x354>
 800a954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a95c:	e75a      	b.n	800a814 <_dtoa_r+0x354>
 800a95e:	07cf      	lsls	r7, r1, #31
 800a960:	d509      	bpl.n	800a976 <_dtoa_r+0x4b6>
 800a962:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a966:	ed90 7b00 	vldr	d7, [r0]
 800a96a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a96e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a972:	3201      	adds	r2, #1
 800a974:	2401      	movs	r4, #1
 800a976:	1049      	asrs	r1, r1, #1
 800a978:	3008      	adds	r0, #8
 800a97a:	e7e7      	b.n	800a94c <_dtoa_r+0x48c>
 800a97c:	2202      	movs	r2, #2
 800a97e:	e749      	b.n	800a814 <_dtoa_r+0x354>
 800a980:	465f      	mov	r7, fp
 800a982:	4648      	mov	r0, r9
 800a984:	e765      	b.n	800a852 <_dtoa_r+0x392>
 800a986:	ec42 1b17 	vmov	d7, r1, r2
 800a98a:	4a5c      	ldr	r2, [pc, #368]	; (800aafc <_dtoa_r+0x63c>)
 800a98c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a990:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a994:	9a00      	ldr	r2, [sp, #0]
 800a996:	1814      	adds	r4, r2, r0
 800a998:	9a08      	ldr	r2, [sp, #32]
 800a99a:	b352      	cbz	r2, 800a9f2 <_dtoa_r+0x532>
 800a99c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a9a0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a9a4:	f8dd 8000 	ldr.w	r8, [sp]
 800a9a8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a9ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a9b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a9b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a9b8:	ee14 2a90 	vmov	r2, s9
 800a9bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a9c0:	3230      	adds	r2, #48	; 0x30
 800a9c2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a9c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ce:	f808 2b01 	strb.w	r2, [r8], #1
 800a9d2:	d439      	bmi.n	800aa48 <_dtoa_r+0x588>
 800a9d4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a9d8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e0:	d472      	bmi.n	800aac8 <_dtoa_r+0x608>
 800a9e2:	45a0      	cmp	r8, r4
 800a9e4:	f43f af5d 	beq.w	800a8a2 <_dtoa_r+0x3e2>
 800a9e8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a9ec:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a9f0:	e7e0      	b.n	800a9b4 <_dtoa_r+0x4f4>
 800a9f2:	f8dd 8000 	ldr.w	r8, [sp]
 800a9f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa04:	ee14 2a90 	vmov	r2, s9
 800aa08:	3230      	adds	r2, #48	; 0x30
 800aa0a:	f808 2b01 	strb.w	r2, [r8], #1
 800aa0e:	45a0      	cmp	r8, r4
 800aa10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa14:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa18:	d118      	bne.n	800aa4c <_dtoa_r+0x58c>
 800aa1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aa1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aa22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	dc4d      	bgt.n	800aac8 <_dtoa_r+0x608>
 800aa2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa38:	f57f af33 	bpl.w	800a8a2 <_dtoa_r+0x3e2>
 800aa3c:	4688      	mov	r8, r1
 800aa3e:	3901      	subs	r1, #1
 800aa40:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800aa44:	2b30      	cmp	r3, #48	; 0x30
 800aa46:	d0f9      	beq.n	800aa3c <_dtoa_r+0x57c>
 800aa48:	46bb      	mov	fp, r7
 800aa4a:	e02a      	b.n	800aaa2 <_dtoa_r+0x5e2>
 800aa4c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa50:	e7d6      	b.n	800aa00 <_dtoa_r+0x540>
 800aa52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa56:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800aa5a:	f8dd 8000 	ldr.w	r8, [sp]
 800aa5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aa62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa66:	ee15 3a10 	vmov	r3, s10
 800aa6a:	3330      	adds	r3, #48	; 0x30
 800aa6c:	f808 3b01 	strb.w	r3, [r8], #1
 800aa70:	9b00      	ldr	r3, [sp, #0]
 800aa72:	eba8 0303 	sub.w	r3, r8, r3
 800aa76:	4599      	cmp	r9, r3
 800aa78:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aa7c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aa80:	d133      	bne.n	800aaea <_dtoa_r+0x62a>
 800aa82:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8e:	dc1a      	bgt.n	800aac6 <_dtoa_r+0x606>
 800aa90:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa98:	d103      	bne.n	800aaa2 <_dtoa_r+0x5e2>
 800aa9a:	ee15 3a10 	vmov	r3, s10
 800aa9e:	07d9      	lsls	r1, r3, #31
 800aaa0:	d411      	bmi.n	800aac6 <_dtoa_r+0x606>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f000 fe6d 	bl	800b784 <_Bfree>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaae:	f888 3000 	strb.w	r3, [r8]
 800aab2:	f10b 0301 	add.w	r3, fp, #1
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f43f ad4d 	beq.w	800a55a <_dtoa_r+0x9a>
 800aac0:	f8c3 8000 	str.w	r8, [r3]
 800aac4:	e549      	b.n	800a55a <_dtoa_r+0x9a>
 800aac6:	465f      	mov	r7, fp
 800aac8:	4643      	mov	r3, r8
 800aaca:	4698      	mov	r8, r3
 800aacc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad0:	2a39      	cmp	r2, #57	; 0x39
 800aad2:	d106      	bne.n	800aae2 <_dtoa_r+0x622>
 800aad4:	9a00      	ldr	r2, [sp, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d1f7      	bne.n	800aaca <_dtoa_r+0x60a>
 800aada:	9900      	ldr	r1, [sp, #0]
 800aadc:	2230      	movs	r2, #48	; 0x30
 800aade:	3701      	adds	r7, #1
 800aae0:	700a      	strb	r2, [r1, #0]
 800aae2:	781a      	ldrb	r2, [r3, #0]
 800aae4:	3201      	adds	r2, #1
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	e7ae      	b.n	800aa48 <_dtoa_r+0x588>
 800aaea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aaee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf6:	d1b2      	bne.n	800aa5e <_dtoa_r+0x59e>
 800aaf8:	e7d3      	b.n	800aaa2 <_dtoa_r+0x5e2>
 800aafa:	bf00      	nop
 800aafc:	0800dc60 	.word	0x0800dc60
 800ab00:	0800dc38 	.word	0x0800dc38
 800ab04:	9908      	ldr	r1, [sp, #32]
 800ab06:	2900      	cmp	r1, #0
 800ab08:	f000 80d1 	beq.w	800acae <_dtoa_r+0x7ee>
 800ab0c:	9907      	ldr	r1, [sp, #28]
 800ab0e:	2901      	cmp	r1, #1
 800ab10:	f300 80b4 	bgt.w	800ac7c <_dtoa_r+0x7bc>
 800ab14:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab16:	2900      	cmp	r1, #0
 800ab18:	f000 80ac 	beq.w	800ac74 <_dtoa_r+0x7b4>
 800ab1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ab24:	461c      	mov	r4, r3
 800ab26:	930a      	str	r3, [sp, #40]	; 0x28
 800ab28:	9b05      	ldr	r3, [sp, #20]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	9b06      	ldr	r3, [sp, #24]
 800ab30:	2101      	movs	r1, #1
 800ab32:	4413      	add	r3, r2
 800ab34:	4630      	mov	r0, r6
 800ab36:	9306      	str	r3, [sp, #24]
 800ab38:	f000 ff2a 	bl	800b990 <__i2b>
 800ab3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3e:	4607      	mov	r7, r0
 800ab40:	f1b8 0f00 	cmp.w	r8, #0
 800ab44:	dd0d      	ble.n	800ab62 <_dtoa_r+0x6a2>
 800ab46:	9a06      	ldr	r2, [sp, #24]
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	dd0a      	ble.n	800ab62 <_dtoa_r+0x6a2>
 800ab4c:	4542      	cmp	r2, r8
 800ab4e:	9905      	ldr	r1, [sp, #20]
 800ab50:	bfa8      	it	ge
 800ab52:	4642      	movge	r2, r8
 800ab54:	1a89      	subs	r1, r1, r2
 800ab56:	9105      	str	r1, [sp, #20]
 800ab58:	9906      	ldr	r1, [sp, #24]
 800ab5a:	eba8 0802 	sub.w	r8, r8, r2
 800ab5e:	1a8a      	subs	r2, r1, r2
 800ab60:	9206      	str	r2, [sp, #24]
 800ab62:	b303      	cbz	r3, 800aba6 <_dtoa_r+0x6e6>
 800ab64:	9a08      	ldr	r2, [sp, #32]
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	f000 80a6 	beq.w	800acb8 <_dtoa_r+0x7f8>
 800ab6c:	2c00      	cmp	r4, #0
 800ab6e:	dd13      	ble.n	800ab98 <_dtoa_r+0x6d8>
 800ab70:	4639      	mov	r1, r7
 800ab72:	4622      	mov	r2, r4
 800ab74:	4630      	mov	r0, r6
 800ab76:	930c      	str	r3, [sp, #48]	; 0x30
 800ab78:	f000 ffc6 	bl	800bb08 <__pow5mult>
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4607      	mov	r7, r0
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 ff1a 	bl	800b9bc <__multiply>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	900a      	str	r0, [sp, #40]	; 0x28
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 fdf9 	bl	800b784 <_Bfree>
 800ab92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab96:	4615      	mov	r5, r2
 800ab98:	1b1a      	subs	r2, r3, r4
 800ab9a:	d004      	beq.n	800aba6 <_dtoa_r+0x6e6>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 ffb2 	bl	800bb08 <__pow5mult>
 800aba4:	4605      	mov	r5, r0
 800aba6:	2101      	movs	r1, #1
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 fef1 	bl	800b990 <__i2b>
 800abae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	f340 8082 	ble.w	800acbc <_dtoa_r+0x7fc>
 800abb8:	461a      	mov	r2, r3
 800abba:	4601      	mov	r1, r0
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 ffa3 	bl	800bb08 <__pow5mult>
 800abc2:	9b07      	ldr	r3, [sp, #28]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	4604      	mov	r4, r0
 800abc8:	dd7b      	ble.n	800acc2 <_dtoa_r+0x802>
 800abca:	2300      	movs	r3, #0
 800abcc:	930a      	str	r3, [sp, #40]	; 0x28
 800abce:	6922      	ldr	r2, [r4, #16]
 800abd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800abd4:	6910      	ldr	r0, [r2, #16]
 800abd6:	f000 fe8b 	bl	800b8f0 <__hi0bits>
 800abda:	f1c0 0020 	rsb	r0, r0, #32
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	4418      	add	r0, r3
 800abe2:	f010 001f 	ands.w	r0, r0, #31
 800abe6:	f000 808d 	beq.w	800ad04 <_dtoa_r+0x844>
 800abea:	f1c0 0220 	rsb	r2, r0, #32
 800abee:	2a04      	cmp	r2, #4
 800abf0:	f340 8086 	ble.w	800ad00 <_dtoa_r+0x840>
 800abf4:	f1c0 001c 	rsb	r0, r0, #28
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	4403      	add	r3, r0
 800abfc:	9305      	str	r3, [sp, #20]
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	4403      	add	r3, r0
 800ac02:	4480      	add	r8, r0
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	9b05      	ldr	r3, [sp, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x758>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 ffd3 	bl	800bbbc <__lshift>
 800ac16:	4605      	mov	r5, r0
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd05      	ble.n	800ac2a <_dtoa_r+0x76a>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	461a      	mov	r2, r3
 800ac22:	4630      	mov	r0, r6
 800ac24:	f000 ffca 	bl	800bbbc <__lshift>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d06b      	beq.n	800ad08 <_dtoa_r+0x848>
 800ac30:	4621      	mov	r1, r4
 800ac32:	4628      	mov	r0, r5
 800ac34:	f001 f82e 	bl	800bc94 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	da65      	bge.n	800ad08 <_dtoa_r+0x848>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4629      	mov	r1, r5
 800ac40:	220a      	movs	r2, #10
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 fdc0 	bl	800b7c8 <__multadd>
 800ac48:	9b08      	ldr	r3, [sp, #32]
 800ac4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac4e:	4605      	mov	r5, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8192 	beq.w	800af7a <_dtoa_r+0xaba>
 800ac56:	4639      	mov	r1, r7
 800ac58:	2300      	movs	r3, #0
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f000 fdb3 	bl	800b7c8 <__multadd>
 800ac62:	f1ba 0f00 	cmp.w	sl, #0
 800ac66:	4607      	mov	r7, r0
 800ac68:	f300 808e 	bgt.w	800ad88 <_dtoa_r+0x8c8>
 800ac6c:	9b07      	ldr	r3, [sp, #28]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	dc51      	bgt.n	800ad16 <_dtoa_r+0x856>
 800ac72:	e089      	b.n	800ad88 <_dtoa_r+0x8c8>
 800ac74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac7a:	e751      	b.n	800ab20 <_dtoa_r+0x660>
 800ac7c:	f109 34ff 	add.w	r4, r9, #4294967295
 800ac80:	42a3      	cmp	r3, r4
 800ac82:	bfbf      	itttt	lt
 800ac84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ac86:	1ae3      	sublt	r3, r4, r3
 800ac88:	18d2      	addlt	r2, r2, r3
 800ac8a:	4613      	movlt	r3, r2
 800ac8c:	bfb7      	itett	lt
 800ac8e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac90:	1b1c      	subge	r4, r3, r4
 800ac92:	4623      	movlt	r3, r4
 800ac94:	2400      	movlt	r4, #0
 800ac96:	f1b9 0f00 	cmp.w	r9, #0
 800ac9a:	bfb5      	itete	lt
 800ac9c:	9a05      	ldrlt	r2, [sp, #20]
 800ac9e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800aca2:	eba2 0809 	sublt.w	r8, r2, r9
 800aca6:	464a      	movge	r2, r9
 800aca8:	bfb8      	it	lt
 800acaa:	2200      	movlt	r2, #0
 800acac:	e73b      	b.n	800ab26 <_dtoa_r+0x666>
 800acae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800acb2:	9f08      	ldr	r7, [sp, #32]
 800acb4:	461c      	mov	r4, r3
 800acb6:	e743      	b.n	800ab40 <_dtoa_r+0x680>
 800acb8:	461a      	mov	r2, r3
 800acba:	e76f      	b.n	800ab9c <_dtoa_r+0x6dc>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	dc18      	bgt.n	800acf4 <_dtoa_r+0x834>
 800acc2:	9b02      	ldr	r3, [sp, #8]
 800acc4:	b9b3      	cbnz	r3, 800acf4 <_dtoa_r+0x834>
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800accc:	b9a2      	cbnz	r2, 800acf8 <_dtoa_r+0x838>
 800acce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acd2:	0d12      	lsrs	r2, r2, #20
 800acd4:	0512      	lsls	r2, r2, #20
 800acd6:	b18a      	cbz	r2, 800acfc <_dtoa_r+0x83c>
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	3301      	adds	r3, #1
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9306      	str	r3, [sp, #24]
 800ace4:	2301      	movs	r3, #1
 800ace6:	930a      	str	r3, [sp, #40]	; 0x28
 800ace8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acea:	2b00      	cmp	r3, #0
 800acec:	f47f af6f 	bne.w	800abce <_dtoa_r+0x70e>
 800acf0:	2001      	movs	r0, #1
 800acf2:	e774      	b.n	800abde <_dtoa_r+0x71e>
 800acf4:	2300      	movs	r3, #0
 800acf6:	e7f6      	b.n	800ace6 <_dtoa_r+0x826>
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	e7f4      	b.n	800ace6 <_dtoa_r+0x826>
 800acfc:	920a      	str	r2, [sp, #40]	; 0x28
 800acfe:	e7f3      	b.n	800ace8 <_dtoa_r+0x828>
 800ad00:	d081      	beq.n	800ac06 <_dtoa_r+0x746>
 800ad02:	4610      	mov	r0, r2
 800ad04:	301c      	adds	r0, #28
 800ad06:	e777      	b.n	800abf8 <_dtoa_r+0x738>
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	dc37      	bgt.n	800ad7e <_dtoa_r+0x8be>
 800ad0e:	9b07      	ldr	r3, [sp, #28]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	dd34      	ble.n	800ad7e <_dtoa_r+0x8be>
 800ad14:	46ca      	mov	sl, r9
 800ad16:	f1ba 0f00 	cmp.w	sl, #0
 800ad1a:	d10d      	bne.n	800ad38 <_dtoa_r+0x878>
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4653      	mov	r3, sl
 800ad20:	2205      	movs	r2, #5
 800ad22:	4630      	mov	r0, r6
 800ad24:	f000 fd50 	bl	800b7c8 <__multadd>
 800ad28:	4601      	mov	r1, r0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f000 ffb1 	bl	800bc94 <__mcmp>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	f73f adde 	bgt.w	800a8f4 <_dtoa_r+0x434>
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	f8dd 8000 	ldr.w	r8, [sp]
 800ad3e:	ea6f 0b03 	mvn.w	fp, r3
 800ad42:	f04f 0900 	mov.w	r9, #0
 800ad46:	4621      	mov	r1, r4
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f000 fd1b 	bl	800b784 <_Bfree>
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	f43f aea7 	beq.w	800aaa2 <_dtoa_r+0x5e2>
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	d005      	beq.n	800ad66 <_dtoa_r+0x8a6>
 800ad5a:	45b9      	cmp	r9, r7
 800ad5c:	d003      	beq.n	800ad66 <_dtoa_r+0x8a6>
 800ad5e:	4649      	mov	r1, r9
 800ad60:	4630      	mov	r0, r6
 800ad62:	f000 fd0f 	bl	800b784 <_Bfree>
 800ad66:	4639      	mov	r1, r7
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 fd0b 	bl	800b784 <_Bfree>
 800ad6e:	e698      	b.n	800aaa2 <_dtoa_r+0x5e2>
 800ad70:	2400      	movs	r4, #0
 800ad72:	4627      	mov	r7, r4
 800ad74:	e7e0      	b.n	800ad38 <_dtoa_r+0x878>
 800ad76:	46bb      	mov	fp, r7
 800ad78:	4604      	mov	r4, r0
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	e5ba      	b.n	800a8f4 <_dtoa_r+0x434>
 800ad7e:	9b08      	ldr	r3, [sp, #32]
 800ad80:	46ca      	mov	sl, r9
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 8100 	beq.w	800af88 <_dtoa_r+0xac8>
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	dd05      	ble.n	800ad9a <_dtoa_r+0x8da>
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4642      	mov	r2, r8
 800ad92:	4630      	mov	r0, r6
 800ad94:	f000 ff12 	bl	800bbbc <__lshift>
 800ad98:	4607      	mov	r7, r0
 800ad9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d05d      	beq.n	800ae5c <_dtoa_r+0x99c>
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 fcae 	bl	800b704 <_Balloc>
 800ada8:	4680      	mov	r8, r0
 800adaa:	b928      	cbnz	r0, 800adb8 <_dtoa_r+0x8f8>
 800adac:	4b82      	ldr	r3, [pc, #520]	; (800afb8 <_dtoa_r+0xaf8>)
 800adae:	4602      	mov	r2, r0
 800adb0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adb4:	f7ff bb9a 	b.w	800a4ec <_dtoa_r+0x2c>
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	3202      	adds	r2, #2
 800adbc:	0092      	lsls	r2, r2, #2
 800adbe:	f107 010c 	add.w	r1, r7, #12
 800adc2:	300c      	adds	r0, #12
 800adc4:	f7fd fd20 	bl	8008808 <memcpy>
 800adc8:	2201      	movs	r2, #1
 800adca:	4641      	mov	r1, r8
 800adcc:	4630      	mov	r0, r6
 800adce:	f000 fef5 	bl	800bbbc <__lshift>
 800add2:	9b00      	ldr	r3, [sp, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	9b00      	ldr	r3, [sp, #0]
 800adda:	4453      	add	r3, sl
 800addc:	9309      	str	r3, [sp, #36]	; 0x24
 800adde:	9b02      	ldr	r3, [sp, #8]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	46b9      	mov	r9, r7
 800ade6:	9308      	str	r3, [sp, #32]
 800ade8:	4607      	mov	r7, r0
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	4621      	mov	r1, r4
 800adee:	3b01      	subs	r3, #1
 800adf0:	4628      	mov	r0, r5
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	f7ff fad6 	bl	800a3a4 <quorem>
 800adf8:	4603      	mov	r3, r0
 800adfa:	3330      	adds	r3, #48	; 0x30
 800adfc:	9006      	str	r0, [sp, #24]
 800adfe:	4649      	mov	r1, r9
 800ae00:	4628      	mov	r0, r5
 800ae02:	930a      	str	r3, [sp, #40]	; 0x28
 800ae04:	f000 ff46 	bl	800bc94 <__mcmp>
 800ae08:	463a      	mov	r2, r7
 800ae0a:	4682      	mov	sl, r0
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f000 ff5c 	bl	800bccc <__mdiff>
 800ae14:	68c2      	ldr	r2, [r0, #12]
 800ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae18:	4680      	mov	r8, r0
 800ae1a:	bb0a      	cbnz	r2, 800ae60 <_dtoa_r+0x9a0>
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f000 ff38 	bl	800bc94 <__mcmp>
 800ae24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae26:	4602      	mov	r2, r0
 800ae28:	4641      	mov	r1, r8
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	920e      	str	r2, [sp, #56]	; 0x38
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	f000 fca8 	bl	800b784 <_Bfree>
 800ae34:	9b07      	ldr	r3, [sp, #28]
 800ae36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ae3c:	ea43 0102 	orr.w	r1, r3, r2
 800ae40:	9b08      	ldr	r3, [sp, #32]
 800ae42:	430b      	orrs	r3, r1
 800ae44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae46:	d10d      	bne.n	800ae64 <_dtoa_r+0x9a4>
 800ae48:	2b39      	cmp	r3, #57	; 0x39
 800ae4a:	d029      	beq.n	800aea0 <_dtoa_r+0x9e0>
 800ae4c:	f1ba 0f00 	cmp.w	sl, #0
 800ae50:	dd01      	ble.n	800ae56 <_dtoa_r+0x996>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	3331      	adds	r3, #49	; 0x31
 800ae56:	9a02      	ldr	r2, [sp, #8]
 800ae58:	7013      	strb	r3, [r2, #0]
 800ae5a:	e774      	b.n	800ad46 <_dtoa_r+0x886>
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	e7b8      	b.n	800add2 <_dtoa_r+0x912>
 800ae60:	2201      	movs	r2, #1
 800ae62:	e7e1      	b.n	800ae28 <_dtoa_r+0x968>
 800ae64:	f1ba 0f00 	cmp.w	sl, #0
 800ae68:	db06      	blt.n	800ae78 <_dtoa_r+0x9b8>
 800ae6a:	9907      	ldr	r1, [sp, #28]
 800ae6c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ae70:	9908      	ldr	r1, [sp, #32]
 800ae72:	ea5a 0101 	orrs.w	r1, sl, r1
 800ae76:	d120      	bne.n	800aeba <_dtoa_r+0x9fa>
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	ddec      	ble.n	800ae56 <_dtoa_r+0x996>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4630      	mov	r0, r6
 800ae82:	9305      	str	r3, [sp, #20]
 800ae84:	f000 fe9a 	bl	800bbbc <__lshift>
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	f000 ff02 	bl	800bc94 <__mcmp>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	9b05      	ldr	r3, [sp, #20]
 800ae94:	dc02      	bgt.n	800ae9c <_dtoa_r+0x9dc>
 800ae96:	d1de      	bne.n	800ae56 <_dtoa_r+0x996>
 800ae98:	07da      	lsls	r2, r3, #31
 800ae9a:	d5dc      	bpl.n	800ae56 <_dtoa_r+0x996>
 800ae9c:	2b39      	cmp	r3, #57	; 0x39
 800ae9e:	d1d8      	bne.n	800ae52 <_dtoa_r+0x992>
 800aea0:	9a02      	ldr	r2, [sp, #8]
 800aea2:	2339      	movs	r3, #57	; 0x39
 800aea4:	7013      	strb	r3, [r2, #0]
 800aea6:	4643      	mov	r3, r8
 800aea8:	4698      	mov	r8, r3
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aeb0:	2a39      	cmp	r2, #57	; 0x39
 800aeb2:	d051      	beq.n	800af58 <_dtoa_r+0xa98>
 800aeb4:	3201      	adds	r2, #1
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	e745      	b.n	800ad46 <_dtoa_r+0x886>
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	dd03      	ble.n	800aec6 <_dtoa_r+0xa06>
 800aebe:	2b39      	cmp	r3, #57	; 0x39
 800aec0:	d0ee      	beq.n	800aea0 <_dtoa_r+0x9e0>
 800aec2:	3301      	adds	r3, #1
 800aec4:	e7c7      	b.n	800ae56 <_dtoa_r+0x996>
 800aec6:	9a05      	ldr	r2, [sp, #20]
 800aec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeca:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aece:	428a      	cmp	r2, r1
 800aed0:	d02b      	beq.n	800af2a <_dtoa_r+0xa6a>
 800aed2:	4629      	mov	r1, r5
 800aed4:	2300      	movs	r3, #0
 800aed6:	220a      	movs	r2, #10
 800aed8:	4630      	mov	r0, r6
 800aeda:	f000 fc75 	bl	800b7c8 <__multadd>
 800aede:	45b9      	cmp	r9, r7
 800aee0:	4605      	mov	r5, r0
 800aee2:	f04f 0300 	mov.w	r3, #0
 800aee6:	f04f 020a 	mov.w	r2, #10
 800aeea:	4649      	mov	r1, r9
 800aeec:	4630      	mov	r0, r6
 800aeee:	d107      	bne.n	800af00 <_dtoa_r+0xa40>
 800aef0:	f000 fc6a 	bl	800b7c8 <__multadd>
 800aef4:	4681      	mov	r9, r0
 800aef6:	4607      	mov	r7, r0
 800aef8:	9b05      	ldr	r3, [sp, #20]
 800aefa:	3301      	adds	r3, #1
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	e774      	b.n	800adea <_dtoa_r+0x92a>
 800af00:	f000 fc62 	bl	800b7c8 <__multadd>
 800af04:	4639      	mov	r1, r7
 800af06:	4681      	mov	r9, r0
 800af08:	2300      	movs	r3, #0
 800af0a:	220a      	movs	r2, #10
 800af0c:	4630      	mov	r0, r6
 800af0e:	f000 fc5b 	bl	800b7c8 <__multadd>
 800af12:	4607      	mov	r7, r0
 800af14:	e7f0      	b.n	800aef8 <_dtoa_r+0xa38>
 800af16:	f1ba 0f00 	cmp.w	sl, #0
 800af1a:	9a00      	ldr	r2, [sp, #0]
 800af1c:	bfcc      	ite	gt
 800af1e:	46d0      	movgt	r8, sl
 800af20:	f04f 0801 	movle.w	r8, #1
 800af24:	4490      	add	r8, r2
 800af26:	f04f 0900 	mov.w	r9, #0
 800af2a:	4629      	mov	r1, r5
 800af2c:	2201      	movs	r2, #1
 800af2e:	4630      	mov	r0, r6
 800af30:	9302      	str	r3, [sp, #8]
 800af32:	f000 fe43 	bl	800bbbc <__lshift>
 800af36:	4621      	mov	r1, r4
 800af38:	4605      	mov	r5, r0
 800af3a:	f000 feab 	bl	800bc94 <__mcmp>
 800af3e:	2800      	cmp	r0, #0
 800af40:	dcb1      	bgt.n	800aea6 <_dtoa_r+0x9e6>
 800af42:	d102      	bne.n	800af4a <_dtoa_r+0xa8a>
 800af44:	9b02      	ldr	r3, [sp, #8]
 800af46:	07db      	lsls	r3, r3, #31
 800af48:	d4ad      	bmi.n	800aea6 <_dtoa_r+0x9e6>
 800af4a:	4643      	mov	r3, r8
 800af4c:	4698      	mov	r8, r3
 800af4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af52:	2a30      	cmp	r2, #48	; 0x30
 800af54:	d0fa      	beq.n	800af4c <_dtoa_r+0xa8c>
 800af56:	e6f6      	b.n	800ad46 <_dtoa_r+0x886>
 800af58:	9a00      	ldr	r2, [sp, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d1a4      	bne.n	800aea8 <_dtoa_r+0x9e8>
 800af5e:	f10b 0b01 	add.w	fp, fp, #1
 800af62:	2331      	movs	r3, #49	; 0x31
 800af64:	e778      	b.n	800ae58 <_dtoa_r+0x998>
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <_dtoa_r+0xafc>)
 800af68:	f7ff bb12 	b.w	800a590 <_dtoa_r+0xd0>
 800af6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f47f aaee 	bne.w	800a550 <_dtoa_r+0x90>
 800af74:	4b12      	ldr	r3, [pc, #72]	; (800afc0 <_dtoa_r+0xb00>)
 800af76:	f7ff bb0b 	b.w	800a590 <_dtoa_r+0xd0>
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	dc03      	bgt.n	800af88 <_dtoa_r+0xac8>
 800af80:	9b07      	ldr	r3, [sp, #28]
 800af82:	2b02      	cmp	r3, #2
 800af84:	f73f aec7 	bgt.w	800ad16 <_dtoa_r+0x856>
 800af88:	f8dd 8000 	ldr.w	r8, [sp]
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f7ff fa08 	bl	800a3a4 <quorem>
 800af94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af98:	f808 3b01 	strb.w	r3, [r8], #1
 800af9c:	9a00      	ldr	r2, [sp, #0]
 800af9e:	eba8 0202 	sub.w	r2, r8, r2
 800afa2:	4592      	cmp	sl, r2
 800afa4:	ddb7      	ble.n	800af16 <_dtoa_r+0xa56>
 800afa6:	4629      	mov	r1, r5
 800afa8:	2300      	movs	r3, #0
 800afaa:	220a      	movs	r2, #10
 800afac:	4630      	mov	r0, r6
 800afae:	f000 fc0b 	bl	800b7c8 <__multadd>
 800afb2:	4605      	mov	r5, r0
 800afb4:	e7ea      	b.n	800af8c <_dtoa_r+0xacc>
 800afb6:	bf00      	nop
 800afb8:	0800db43 	.word	0x0800db43
 800afbc:	0800dd49 	.word	0x0800dd49
 800afc0:	0800dac0 	.word	0x0800dac0

0800afc4 <rshift>:
 800afc4:	6903      	ldr	r3, [r0, #16]
 800afc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afd2:	f100 0414 	add.w	r4, r0, #20
 800afd6:	dd45      	ble.n	800b064 <rshift+0xa0>
 800afd8:	f011 011f 	ands.w	r1, r1, #31
 800afdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afe4:	d10c      	bne.n	800b000 <rshift+0x3c>
 800afe6:	f100 0710 	add.w	r7, r0, #16
 800afea:	4629      	mov	r1, r5
 800afec:	42b1      	cmp	r1, r6
 800afee:	d334      	bcc.n	800b05a <rshift+0x96>
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	1eea      	subs	r2, r5, #3
 800aff6:	4296      	cmp	r6, r2
 800aff8:	bf38      	it	cc
 800affa:	2300      	movcc	r3, #0
 800affc:	4423      	add	r3, r4
 800affe:	e015      	b.n	800b02c <rshift+0x68>
 800b000:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b004:	f1c1 0820 	rsb	r8, r1, #32
 800b008:	40cf      	lsrs	r7, r1
 800b00a:	f105 0e04 	add.w	lr, r5, #4
 800b00e:	46a1      	mov	r9, r4
 800b010:	4576      	cmp	r6, lr
 800b012:	46f4      	mov	ip, lr
 800b014:	d815      	bhi.n	800b042 <rshift+0x7e>
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	009a      	lsls	r2, r3, #2
 800b01a:	3a04      	subs	r2, #4
 800b01c:	3501      	adds	r5, #1
 800b01e:	42ae      	cmp	r6, r5
 800b020:	bf38      	it	cc
 800b022:	2200      	movcc	r2, #0
 800b024:	18a3      	adds	r3, r4, r2
 800b026:	50a7      	str	r7, [r4, r2]
 800b028:	b107      	cbz	r7, 800b02c <rshift+0x68>
 800b02a:	3304      	adds	r3, #4
 800b02c:	1b1a      	subs	r2, r3, r4
 800b02e:	42a3      	cmp	r3, r4
 800b030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b034:	bf08      	it	eq
 800b036:	2300      	moveq	r3, #0
 800b038:	6102      	str	r2, [r0, #16]
 800b03a:	bf08      	it	eq
 800b03c:	6143      	streq	r3, [r0, #20]
 800b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b042:	f8dc c000 	ldr.w	ip, [ip]
 800b046:	fa0c fc08 	lsl.w	ip, ip, r8
 800b04a:	ea4c 0707 	orr.w	r7, ip, r7
 800b04e:	f849 7b04 	str.w	r7, [r9], #4
 800b052:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b056:	40cf      	lsrs	r7, r1
 800b058:	e7da      	b.n	800b010 <rshift+0x4c>
 800b05a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b05e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b062:	e7c3      	b.n	800afec <rshift+0x28>
 800b064:	4623      	mov	r3, r4
 800b066:	e7e1      	b.n	800b02c <rshift+0x68>

0800b068 <__hexdig_fun>:
 800b068:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	d802      	bhi.n	800b076 <__hexdig_fun+0xe>
 800b070:	3820      	subs	r0, #32
 800b072:	b2c0      	uxtb	r0, r0
 800b074:	4770      	bx	lr
 800b076:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d801      	bhi.n	800b082 <__hexdig_fun+0x1a>
 800b07e:	3847      	subs	r0, #71	; 0x47
 800b080:	e7f7      	b.n	800b072 <__hexdig_fun+0xa>
 800b082:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b086:	2b05      	cmp	r3, #5
 800b088:	d801      	bhi.n	800b08e <__hexdig_fun+0x26>
 800b08a:	3827      	subs	r0, #39	; 0x27
 800b08c:	e7f1      	b.n	800b072 <__hexdig_fun+0xa>
 800b08e:	2000      	movs	r0, #0
 800b090:	4770      	bx	lr
	...

0800b094 <__gethex>:
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	ed2d 8b02 	vpush	{d8}
 800b09c:	b089      	sub	sp, #36	; 0x24
 800b09e:	ee08 0a10 	vmov	s16, r0
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	4bbc      	ldr	r3, [pc, #752]	; (800b398 <__gethex+0x304>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	468b      	mov	fp, r1
 800b0ae:	4690      	mov	r8, r2
 800b0b0:	f7f5 f8c6 	bl	8000240 <strlen>
 800b0b4:	9b01      	ldr	r3, [sp, #4]
 800b0b6:	f8db 2000 	ldr.w	r2, [fp]
 800b0ba:	4403      	add	r3, r0
 800b0bc:	4682      	mov	sl, r0
 800b0be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	1c93      	adds	r3, r2, #2
 800b0c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0ce:	32fe      	adds	r2, #254	; 0xfe
 800b0d0:	18d1      	adds	r1, r2, r3
 800b0d2:	461f      	mov	r7, r3
 800b0d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0d8:	9100      	str	r1, [sp, #0]
 800b0da:	2830      	cmp	r0, #48	; 0x30
 800b0dc:	d0f8      	beq.n	800b0d0 <__gethex+0x3c>
 800b0de:	f7ff ffc3 	bl	800b068 <__hexdig_fun>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d13a      	bne.n	800b15e <__gethex+0xca>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f001 fd5d 	bl	800cbac <strncmp>
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d168      	bne.n	800b1ca <__gethex+0x136>
 800b0f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b0fc:	eb07 060a 	add.w	r6, r7, sl
 800b100:	f7ff ffb2 	bl	800b068 <__hexdig_fun>
 800b104:	2800      	cmp	r0, #0
 800b106:	d062      	beq.n	800b1ce <__gethex+0x13a>
 800b108:	4633      	mov	r3, r6
 800b10a:	7818      	ldrb	r0, [r3, #0]
 800b10c:	2830      	cmp	r0, #48	; 0x30
 800b10e:	461f      	mov	r7, r3
 800b110:	f103 0301 	add.w	r3, r3, #1
 800b114:	d0f9      	beq.n	800b10a <__gethex+0x76>
 800b116:	f7ff ffa7 	bl	800b068 <__hexdig_fun>
 800b11a:	2301      	movs	r3, #1
 800b11c:	fab0 f480 	clz	r4, r0
 800b120:	0964      	lsrs	r4, r4, #5
 800b122:	4635      	mov	r5, r6
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	463a      	mov	r2, r7
 800b128:	4616      	mov	r6, r2
 800b12a:	3201      	adds	r2, #1
 800b12c:	7830      	ldrb	r0, [r6, #0]
 800b12e:	f7ff ff9b 	bl	800b068 <__hexdig_fun>
 800b132:	2800      	cmp	r0, #0
 800b134:	d1f8      	bne.n	800b128 <__gethex+0x94>
 800b136:	9901      	ldr	r1, [sp, #4]
 800b138:	4652      	mov	r2, sl
 800b13a:	4630      	mov	r0, r6
 800b13c:	f001 fd36 	bl	800cbac <strncmp>
 800b140:	b980      	cbnz	r0, 800b164 <__gethex+0xd0>
 800b142:	b94d      	cbnz	r5, 800b158 <__gethex+0xc4>
 800b144:	eb06 050a 	add.w	r5, r6, sl
 800b148:	462a      	mov	r2, r5
 800b14a:	4616      	mov	r6, r2
 800b14c:	3201      	adds	r2, #1
 800b14e:	7830      	ldrb	r0, [r6, #0]
 800b150:	f7ff ff8a 	bl	800b068 <__hexdig_fun>
 800b154:	2800      	cmp	r0, #0
 800b156:	d1f8      	bne.n	800b14a <__gethex+0xb6>
 800b158:	1bad      	subs	r5, r5, r6
 800b15a:	00ad      	lsls	r5, r5, #2
 800b15c:	e004      	b.n	800b168 <__gethex+0xd4>
 800b15e:	2400      	movs	r4, #0
 800b160:	4625      	mov	r5, r4
 800b162:	e7e0      	b.n	800b126 <__gethex+0x92>
 800b164:	2d00      	cmp	r5, #0
 800b166:	d1f7      	bne.n	800b158 <__gethex+0xc4>
 800b168:	7833      	ldrb	r3, [r6, #0]
 800b16a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b16e:	2b50      	cmp	r3, #80	; 0x50
 800b170:	d13b      	bne.n	800b1ea <__gethex+0x156>
 800b172:	7873      	ldrb	r3, [r6, #1]
 800b174:	2b2b      	cmp	r3, #43	; 0x2b
 800b176:	d02c      	beq.n	800b1d2 <__gethex+0x13e>
 800b178:	2b2d      	cmp	r3, #45	; 0x2d
 800b17a:	d02e      	beq.n	800b1da <__gethex+0x146>
 800b17c:	1c71      	adds	r1, r6, #1
 800b17e:	f04f 0900 	mov.w	r9, #0
 800b182:	7808      	ldrb	r0, [r1, #0]
 800b184:	f7ff ff70 	bl	800b068 <__hexdig_fun>
 800b188:	1e43      	subs	r3, r0, #1
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b18      	cmp	r3, #24
 800b18e:	d82c      	bhi.n	800b1ea <__gethex+0x156>
 800b190:	f1a0 0210 	sub.w	r2, r0, #16
 800b194:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b198:	f7ff ff66 	bl	800b068 <__hexdig_fun>
 800b19c:	1e43      	subs	r3, r0, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b18      	cmp	r3, #24
 800b1a2:	d91d      	bls.n	800b1e0 <__gethex+0x14c>
 800b1a4:	f1b9 0f00 	cmp.w	r9, #0
 800b1a8:	d000      	beq.n	800b1ac <__gethex+0x118>
 800b1aa:	4252      	negs	r2, r2
 800b1ac:	4415      	add	r5, r2
 800b1ae:	f8cb 1000 	str.w	r1, [fp]
 800b1b2:	b1e4      	cbz	r4, 800b1ee <__gethex+0x15a>
 800b1b4:	9b00      	ldr	r3, [sp, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2700      	movne	r7, #0
 800b1bc:	2706      	moveq	r7, #6
 800b1be:	4638      	mov	r0, r7
 800b1c0:	b009      	add	sp, #36	; 0x24
 800b1c2:	ecbd 8b02 	vpop	{d8}
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	4625      	mov	r5, r4
 800b1ce:	2401      	movs	r4, #1
 800b1d0:	e7ca      	b.n	800b168 <__gethex+0xd4>
 800b1d2:	f04f 0900 	mov.w	r9, #0
 800b1d6:	1cb1      	adds	r1, r6, #2
 800b1d8:	e7d3      	b.n	800b182 <__gethex+0xee>
 800b1da:	f04f 0901 	mov.w	r9, #1
 800b1de:	e7fa      	b.n	800b1d6 <__gethex+0x142>
 800b1e0:	230a      	movs	r3, #10
 800b1e2:	fb03 0202 	mla	r2, r3, r2, r0
 800b1e6:	3a10      	subs	r2, #16
 800b1e8:	e7d4      	b.n	800b194 <__gethex+0x100>
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	e7df      	b.n	800b1ae <__gethex+0x11a>
 800b1ee:	1bf3      	subs	r3, r6, r7
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	dc0b      	bgt.n	800b210 <__gethex+0x17c>
 800b1f8:	ee18 0a10 	vmov	r0, s16
 800b1fc:	f000 fa82 	bl	800b704 <_Balloc>
 800b200:	4604      	mov	r4, r0
 800b202:	b940      	cbnz	r0, 800b216 <__gethex+0x182>
 800b204:	4b65      	ldr	r3, [pc, #404]	; (800b39c <__gethex+0x308>)
 800b206:	4602      	mov	r2, r0
 800b208:	21de      	movs	r1, #222	; 0xde
 800b20a:	4865      	ldr	r0, [pc, #404]	; (800b3a0 <__gethex+0x30c>)
 800b20c:	f001 fda6 	bl	800cd5c <__assert_func>
 800b210:	3101      	adds	r1, #1
 800b212:	105b      	asrs	r3, r3, #1
 800b214:	e7ee      	b.n	800b1f4 <__gethex+0x160>
 800b216:	f100 0914 	add.w	r9, r0, #20
 800b21a:	f04f 0b00 	mov.w	fp, #0
 800b21e:	f1ca 0301 	rsb	r3, sl, #1
 800b222:	f8cd 9008 	str.w	r9, [sp, #8]
 800b226:	f8cd b000 	str.w	fp, [sp]
 800b22a:	9306      	str	r3, [sp, #24]
 800b22c:	42b7      	cmp	r7, r6
 800b22e:	d340      	bcc.n	800b2b2 <__gethex+0x21e>
 800b230:	9802      	ldr	r0, [sp, #8]
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	f840 3b04 	str.w	r3, [r0], #4
 800b238:	eba0 0009 	sub.w	r0, r0, r9
 800b23c:	1080      	asrs	r0, r0, #2
 800b23e:	0146      	lsls	r6, r0, #5
 800b240:	6120      	str	r0, [r4, #16]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fb54 	bl	800b8f0 <__hi0bits>
 800b248:	1a30      	subs	r0, r6, r0
 800b24a:	f8d8 6000 	ldr.w	r6, [r8]
 800b24e:	42b0      	cmp	r0, r6
 800b250:	dd63      	ble.n	800b31a <__gethex+0x286>
 800b252:	1b87      	subs	r7, r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	4620      	mov	r0, r4
 800b258:	f000 feef 	bl	800c03a <__any_on>
 800b25c:	4682      	mov	sl, r0
 800b25e:	b1a8      	cbz	r0, 800b28c <__gethex+0x1f8>
 800b260:	1e7b      	subs	r3, r7, #1
 800b262:	1159      	asrs	r1, r3, #5
 800b264:	f003 021f 	and.w	r2, r3, #31
 800b268:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b26c:	f04f 0a01 	mov.w	sl, #1
 800b270:	fa0a f202 	lsl.w	r2, sl, r2
 800b274:	420a      	tst	r2, r1
 800b276:	d009      	beq.n	800b28c <__gethex+0x1f8>
 800b278:	4553      	cmp	r3, sl
 800b27a:	dd05      	ble.n	800b288 <__gethex+0x1f4>
 800b27c:	1eb9      	subs	r1, r7, #2
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fedb 	bl	800c03a <__any_on>
 800b284:	2800      	cmp	r0, #0
 800b286:	d145      	bne.n	800b314 <__gethex+0x280>
 800b288:	f04f 0a02 	mov.w	sl, #2
 800b28c:	4639      	mov	r1, r7
 800b28e:	4620      	mov	r0, r4
 800b290:	f7ff fe98 	bl	800afc4 <rshift>
 800b294:	443d      	add	r5, r7
 800b296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b29a:	42ab      	cmp	r3, r5
 800b29c:	da4c      	bge.n	800b338 <__gethex+0x2a4>
 800b29e:	ee18 0a10 	vmov	r0, s16
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	f000 fa6e 	bl	800b784 <_Bfree>
 800b2a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	27a3      	movs	r7, #163	; 0xa3
 800b2b0:	e785      	b.n	800b1be <__gethex+0x12a>
 800b2b2:	1e73      	subs	r3, r6, #1
 800b2b4:	9a05      	ldr	r2, [sp, #20]
 800b2b6:	9303      	str	r3, [sp, #12]
 800b2b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d019      	beq.n	800b2f4 <__gethex+0x260>
 800b2c0:	f1bb 0f20 	cmp.w	fp, #32
 800b2c4:	d107      	bne.n	800b2d6 <__gethex+0x242>
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	9a00      	ldr	r2, [sp, #0]
 800b2ca:	f843 2b04 	str.w	r2, [r3], #4
 800b2ce:	9302      	str	r3, [sp, #8]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	469b      	mov	fp, r3
 800b2d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b2da:	f7ff fec5 	bl	800b068 <__hexdig_fun>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	f000 000f 	and.w	r0, r0, #15
 800b2e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b2e8:	4303      	orrs	r3, r0
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	f10b 0b04 	add.w	fp, fp, #4
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	e00d      	b.n	800b310 <__gethex+0x27c>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	42bb      	cmp	r3, r7
 800b2fc:	d3e0      	bcc.n	800b2c0 <__gethex+0x22c>
 800b2fe:	4618      	mov	r0, r3
 800b300:	9901      	ldr	r1, [sp, #4]
 800b302:	9307      	str	r3, [sp, #28]
 800b304:	4652      	mov	r2, sl
 800b306:	f001 fc51 	bl	800cbac <strncmp>
 800b30a:	9b07      	ldr	r3, [sp, #28]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1d7      	bne.n	800b2c0 <__gethex+0x22c>
 800b310:	461e      	mov	r6, r3
 800b312:	e78b      	b.n	800b22c <__gethex+0x198>
 800b314:	f04f 0a03 	mov.w	sl, #3
 800b318:	e7b8      	b.n	800b28c <__gethex+0x1f8>
 800b31a:	da0a      	bge.n	800b332 <__gethex+0x29e>
 800b31c:	1a37      	subs	r7, r6, r0
 800b31e:	4621      	mov	r1, r4
 800b320:	ee18 0a10 	vmov	r0, s16
 800b324:	463a      	mov	r2, r7
 800b326:	f000 fc49 	bl	800bbbc <__lshift>
 800b32a:	1bed      	subs	r5, r5, r7
 800b32c:	4604      	mov	r4, r0
 800b32e:	f100 0914 	add.w	r9, r0, #20
 800b332:	f04f 0a00 	mov.w	sl, #0
 800b336:	e7ae      	b.n	800b296 <__gethex+0x202>
 800b338:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b33c:	42a8      	cmp	r0, r5
 800b33e:	dd72      	ble.n	800b426 <__gethex+0x392>
 800b340:	1b45      	subs	r5, r0, r5
 800b342:	42ae      	cmp	r6, r5
 800b344:	dc36      	bgt.n	800b3b4 <__gethex+0x320>
 800b346:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d02a      	beq.n	800b3a4 <__gethex+0x310>
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d02c      	beq.n	800b3ac <__gethex+0x318>
 800b352:	2b01      	cmp	r3, #1
 800b354:	d115      	bne.n	800b382 <__gethex+0x2ee>
 800b356:	42ae      	cmp	r6, r5
 800b358:	d113      	bne.n	800b382 <__gethex+0x2ee>
 800b35a:	2e01      	cmp	r6, #1
 800b35c:	d10b      	bne.n	800b376 <__gethex+0x2e2>
 800b35e:	9a04      	ldr	r2, [sp, #16]
 800b360:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	2301      	movs	r3, #1
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	f8c9 3000 	str.w	r3, [r9]
 800b36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b370:	2762      	movs	r7, #98	; 0x62
 800b372:	601c      	str	r4, [r3, #0]
 800b374:	e723      	b.n	800b1be <__gethex+0x12a>
 800b376:	1e71      	subs	r1, r6, #1
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fe5e 	bl	800c03a <__any_on>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d1ed      	bne.n	800b35e <__gethex+0x2ca>
 800b382:	ee18 0a10 	vmov	r0, s16
 800b386:	4621      	mov	r1, r4
 800b388:	f000 f9fc 	bl	800b784 <_Bfree>
 800b38c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b38e:	2300      	movs	r3, #0
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	2750      	movs	r7, #80	; 0x50
 800b394:	e713      	b.n	800b1be <__gethex+0x12a>
 800b396:	bf00      	nop
 800b398:	0800dbc0 	.word	0x0800dbc0
 800b39c:	0800db43 	.word	0x0800db43
 800b3a0:	0800db54 	.word	0x0800db54
 800b3a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1eb      	bne.n	800b382 <__gethex+0x2ee>
 800b3aa:	e7d8      	b.n	800b35e <__gethex+0x2ca>
 800b3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1d5      	bne.n	800b35e <__gethex+0x2ca>
 800b3b2:	e7e6      	b.n	800b382 <__gethex+0x2ee>
 800b3b4:	1e6f      	subs	r7, r5, #1
 800b3b6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ba:	d131      	bne.n	800b420 <__gethex+0x38c>
 800b3bc:	b127      	cbz	r7, 800b3c8 <__gethex+0x334>
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fe3a 	bl	800c03a <__any_on>
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	117b      	asrs	r3, r7, #5
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b3d0:	f007 071f 	and.w	r7, r7, #31
 800b3d4:	fa01 f707 	lsl.w	r7, r1, r7
 800b3d8:	421f      	tst	r7, r3
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4620      	mov	r0, r4
 800b3de:	bf18      	it	ne
 800b3e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b3e4:	1b76      	subs	r6, r6, r5
 800b3e6:	f7ff fded 	bl	800afc4 <rshift>
 800b3ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3ee:	2702      	movs	r7, #2
 800b3f0:	f1ba 0f00 	cmp.w	sl, #0
 800b3f4:	d048      	beq.n	800b488 <__gethex+0x3f4>
 800b3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d015      	beq.n	800b42a <__gethex+0x396>
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d017      	beq.n	800b432 <__gethex+0x39e>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d109      	bne.n	800b41a <__gethex+0x386>
 800b406:	f01a 0f02 	tst.w	sl, #2
 800b40a:	d006      	beq.n	800b41a <__gethex+0x386>
 800b40c:	f8d9 0000 	ldr.w	r0, [r9]
 800b410:	ea4a 0a00 	orr.w	sl, sl, r0
 800b414:	f01a 0f01 	tst.w	sl, #1
 800b418:	d10e      	bne.n	800b438 <__gethex+0x3a4>
 800b41a:	f047 0710 	orr.w	r7, r7, #16
 800b41e:	e033      	b.n	800b488 <__gethex+0x3f4>
 800b420:	f04f 0a01 	mov.w	sl, #1
 800b424:	e7d0      	b.n	800b3c8 <__gethex+0x334>
 800b426:	2701      	movs	r7, #1
 800b428:	e7e2      	b.n	800b3f0 <__gethex+0x35c>
 800b42a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42c:	f1c3 0301 	rsb	r3, r3, #1
 800b430:	9315      	str	r3, [sp, #84]	; 0x54
 800b432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0f0      	beq.n	800b41a <__gethex+0x386>
 800b438:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b43c:	f104 0314 	add.w	r3, r4, #20
 800b440:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b444:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b448:	f04f 0c00 	mov.w	ip, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b452:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b456:	d01c      	beq.n	800b492 <__gethex+0x3fe>
 800b458:	3201      	adds	r2, #1
 800b45a:	6002      	str	r2, [r0, #0]
 800b45c:	2f02      	cmp	r7, #2
 800b45e:	f104 0314 	add.w	r3, r4, #20
 800b462:	d13f      	bne.n	800b4e4 <__gethex+0x450>
 800b464:	f8d8 2000 	ldr.w	r2, [r8]
 800b468:	3a01      	subs	r2, #1
 800b46a:	42b2      	cmp	r2, r6
 800b46c:	d10a      	bne.n	800b484 <__gethex+0x3f0>
 800b46e:	1171      	asrs	r1, r6, #5
 800b470:	2201      	movs	r2, #1
 800b472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b476:	f006 061f 	and.w	r6, r6, #31
 800b47a:	fa02 f606 	lsl.w	r6, r2, r6
 800b47e:	421e      	tst	r6, r3
 800b480:	bf18      	it	ne
 800b482:	4617      	movne	r7, r2
 800b484:	f047 0720 	orr.w	r7, r7, #32
 800b488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b48a:	601c      	str	r4, [r3, #0]
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	601d      	str	r5, [r3, #0]
 800b490:	e695      	b.n	800b1be <__gethex+0x12a>
 800b492:	4299      	cmp	r1, r3
 800b494:	f843 cc04 	str.w	ip, [r3, #-4]
 800b498:	d8d8      	bhi.n	800b44c <__gethex+0x3b8>
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	459b      	cmp	fp, r3
 800b49e:	db19      	blt.n	800b4d4 <__gethex+0x440>
 800b4a0:	6861      	ldr	r1, [r4, #4]
 800b4a2:	ee18 0a10 	vmov	r0, s16
 800b4a6:	3101      	adds	r1, #1
 800b4a8:	f000 f92c 	bl	800b704 <_Balloc>
 800b4ac:	4681      	mov	r9, r0
 800b4ae:	b918      	cbnz	r0, 800b4b8 <__gethex+0x424>
 800b4b0:	4b1a      	ldr	r3, [pc, #104]	; (800b51c <__gethex+0x488>)
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	2184      	movs	r1, #132	; 0x84
 800b4b6:	e6a8      	b.n	800b20a <__gethex+0x176>
 800b4b8:	6922      	ldr	r2, [r4, #16]
 800b4ba:	3202      	adds	r2, #2
 800b4bc:	f104 010c 	add.w	r1, r4, #12
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	300c      	adds	r0, #12
 800b4c4:	f7fd f9a0 	bl	8008808 <memcpy>
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	ee18 0a10 	vmov	r0, s16
 800b4ce:	f000 f959 	bl	800b784 <_Bfree>
 800b4d2:	464c      	mov	r4, r9
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4dc:	6122      	str	r2, [r4, #16]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	615a      	str	r2, [r3, #20]
 800b4e2:	e7bb      	b.n	800b45c <__gethex+0x3c8>
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	455a      	cmp	r2, fp
 800b4e8:	dd0b      	ble.n	800b502 <__gethex+0x46e>
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff fd69 	bl	800afc4 <rshift>
 800b4f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4f6:	3501      	adds	r5, #1
 800b4f8:	42ab      	cmp	r3, r5
 800b4fa:	f6ff aed0 	blt.w	800b29e <__gethex+0x20a>
 800b4fe:	2701      	movs	r7, #1
 800b500:	e7c0      	b.n	800b484 <__gethex+0x3f0>
 800b502:	f016 061f 	ands.w	r6, r6, #31
 800b506:	d0fa      	beq.n	800b4fe <__gethex+0x46a>
 800b508:	449a      	add	sl, r3
 800b50a:	f1c6 0620 	rsb	r6, r6, #32
 800b50e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b512:	f000 f9ed 	bl	800b8f0 <__hi0bits>
 800b516:	42b0      	cmp	r0, r6
 800b518:	dbe7      	blt.n	800b4ea <__gethex+0x456>
 800b51a:	e7f0      	b.n	800b4fe <__gethex+0x46a>
 800b51c:	0800db43 	.word	0x0800db43

0800b520 <L_shift>:
 800b520:	f1c2 0208 	rsb	r2, r2, #8
 800b524:	0092      	lsls	r2, r2, #2
 800b526:	b570      	push	{r4, r5, r6, lr}
 800b528:	f1c2 0620 	rsb	r6, r2, #32
 800b52c:	6843      	ldr	r3, [r0, #4]
 800b52e:	6804      	ldr	r4, [r0, #0]
 800b530:	fa03 f506 	lsl.w	r5, r3, r6
 800b534:	432c      	orrs	r4, r5
 800b536:	40d3      	lsrs	r3, r2
 800b538:	6004      	str	r4, [r0, #0]
 800b53a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b53e:	4288      	cmp	r0, r1
 800b540:	d3f4      	bcc.n	800b52c <L_shift+0xc>
 800b542:	bd70      	pop	{r4, r5, r6, pc}

0800b544 <__match>:
 800b544:	b530      	push	{r4, r5, lr}
 800b546:	6803      	ldr	r3, [r0, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b54e:	b914      	cbnz	r4, 800b556 <__match+0x12>
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	2001      	movs	r0, #1
 800b554:	bd30      	pop	{r4, r5, pc}
 800b556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b55e:	2d19      	cmp	r5, #25
 800b560:	bf98      	it	ls
 800b562:	3220      	addls	r2, #32
 800b564:	42a2      	cmp	r2, r4
 800b566:	d0f0      	beq.n	800b54a <__match+0x6>
 800b568:	2000      	movs	r0, #0
 800b56a:	e7f3      	b.n	800b554 <__match+0x10>

0800b56c <__hexnan>:
 800b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	680b      	ldr	r3, [r1, #0]
 800b572:	6801      	ldr	r1, [r0, #0]
 800b574:	115e      	asrs	r6, r3, #5
 800b576:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b57a:	f013 031f 	ands.w	r3, r3, #31
 800b57e:	b087      	sub	sp, #28
 800b580:	bf18      	it	ne
 800b582:	3604      	addne	r6, #4
 800b584:	2500      	movs	r5, #0
 800b586:	1f37      	subs	r7, r6, #4
 800b588:	4682      	mov	sl, r0
 800b58a:	4690      	mov	r8, r2
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b592:	46b9      	mov	r9, r7
 800b594:	463c      	mov	r4, r7
 800b596:	9502      	str	r5, [sp, #8]
 800b598:	46ab      	mov	fp, r5
 800b59a:	784a      	ldrb	r2, [r1, #1]
 800b59c:	1c4b      	adds	r3, r1, #1
 800b59e:	9303      	str	r3, [sp, #12]
 800b5a0:	b342      	cbz	r2, 800b5f4 <__hexnan+0x88>
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	9105      	str	r1, [sp, #20]
 800b5a6:	9204      	str	r2, [sp, #16]
 800b5a8:	f7ff fd5e 	bl	800b068 <__hexdig_fun>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d14f      	bne.n	800b650 <__hexnan+0xe4>
 800b5b0:	9a04      	ldr	r2, [sp, #16]
 800b5b2:	9905      	ldr	r1, [sp, #20]
 800b5b4:	2a20      	cmp	r2, #32
 800b5b6:	d818      	bhi.n	800b5ea <__hexnan+0x7e>
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	459b      	cmp	fp, r3
 800b5bc:	dd13      	ble.n	800b5e6 <__hexnan+0x7a>
 800b5be:	454c      	cmp	r4, r9
 800b5c0:	d206      	bcs.n	800b5d0 <__hexnan+0x64>
 800b5c2:	2d07      	cmp	r5, #7
 800b5c4:	dc04      	bgt.n	800b5d0 <__hexnan+0x64>
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff ffa8 	bl	800b520 <L_shift>
 800b5d0:	4544      	cmp	r4, r8
 800b5d2:	d950      	bls.n	800b676 <__hexnan+0x10a>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f1a4 0904 	sub.w	r9, r4, #4
 800b5da:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5de:	f8cd b008 	str.w	fp, [sp, #8]
 800b5e2:	464c      	mov	r4, r9
 800b5e4:	461d      	mov	r5, r3
 800b5e6:	9903      	ldr	r1, [sp, #12]
 800b5e8:	e7d7      	b.n	800b59a <__hexnan+0x2e>
 800b5ea:	2a29      	cmp	r2, #41	; 0x29
 800b5ec:	d156      	bne.n	800b69c <__hexnan+0x130>
 800b5ee:	3102      	adds	r1, #2
 800b5f0:	f8ca 1000 	str.w	r1, [sl]
 800b5f4:	f1bb 0f00 	cmp.w	fp, #0
 800b5f8:	d050      	beq.n	800b69c <__hexnan+0x130>
 800b5fa:	454c      	cmp	r4, r9
 800b5fc:	d206      	bcs.n	800b60c <__hexnan+0xa0>
 800b5fe:	2d07      	cmp	r5, #7
 800b600:	dc04      	bgt.n	800b60c <__hexnan+0xa0>
 800b602:	462a      	mov	r2, r5
 800b604:	4649      	mov	r1, r9
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff ff8a 	bl	800b520 <L_shift>
 800b60c:	4544      	cmp	r4, r8
 800b60e:	d934      	bls.n	800b67a <__hexnan+0x10e>
 800b610:	f1a8 0204 	sub.w	r2, r8, #4
 800b614:	4623      	mov	r3, r4
 800b616:	f853 1b04 	ldr.w	r1, [r3], #4
 800b61a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b61e:	429f      	cmp	r7, r3
 800b620:	d2f9      	bcs.n	800b616 <__hexnan+0xaa>
 800b622:	1b3b      	subs	r3, r7, r4
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	3304      	adds	r3, #4
 800b62a:	3401      	adds	r4, #1
 800b62c:	3e03      	subs	r6, #3
 800b62e:	42b4      	cmp	r4, r6
 800b630:	bf88      	it	hi
 800b632:	2304      	movhi	r3, #4
 800b634:	4443      	add	r3, r8
 800b636:	2200      	movs	r2, #0
 800b638:	f843 2b04 	str.w	r2, [r3], #4
 800b63c:	429f      	cmp	r7, r3
 800b63e:	d2fb      	bcs.n	800b638 <__hexnan+0xcc>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	b91b      	cbnz	r3, 800b64c <__hexnan+0xe0>
 800b644:	4547      	cmp	r7, r8
 800b646:	d127      	bne.n	800b698 <__hexnan+0x12c>
 800b648:	2301      	movs	r3, #1
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	2005      	movs	r0, #5
 800b64e:	e026      	b.n	800b69e <__hexnan+0x132>
 800b650:	3501      	adds	r5, #1
 800b652:	2d08      	cmp	r5, #8
 800b654:	f10b 0b01 	add.w	fp, fp, #1
 800b658:	dd06      	ble.n	800b668 <__hexnan+0xfc>
 800b65a:	4544      	cmp	r4, r8
 800b65c:	d9c3      	bls.n	800b5e6 <__hexnan+0x7a>
 800b65e:	2300      	movs	r3, #0
 800b660:	f844 3c04 	str.w	r3, [r4, #-4]
 800b664:	2501      	movs	r5, #1
 800b666:	3c04      	subs	r4, #4
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	f000 000f 	and.w	r0, r0, #15
 800b66e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b672:	6022      	str	r2, [r4, #0]
 800b674:	e7b7      	b.n	800b5e6 <__hexnan+0x7a>
 800b676:	2508      	movs	r5, #8
 800b678:	e7b5      	b.n	800b5e6 <__hexnan+0x7a>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0df      	beq.n	800b640 <__hexnan+0xd4>
 800b680:	f04f 32ff 	mov.w	r2, #4294967295
 800b684:	f1c3 0320 	rsb	r3, r3, #32
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
 800b68c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b690:	401a      	ands	r2, r3
 800b692:	f846 2c04 	str.w	r2, [r6, #-4]
 800b696:	e7d3      	b.n	800b640 <__hexnan+0xd4>
 800b698:	3f04      	subs	r7, #4
 800b69a:	e7d1      	b.n	800b640 <__hexnan+0xd4>
 800b69c:	2004      	movs	r0, #4
 800b69e:	b007      	add	sp, #28
 800b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6a4 <_localeconv_r>:
 800b6a4:	4800      	ldr	r0, [pc, #0]	; (800b6a8 <_localeconv_r+0x4>)
 800b6a6:	4770      	bx	lr
 800b6a8:	200001b0 	.word	0x200001b0

0800b6ac <_lseek_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d07      	ldr	r5, [pc, #28]	; (800b6cc <_lseek_r+0x20>)
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	602a      	str	r2, [r5, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f7f7 fa54 	bl	8002b68 <_lseek>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_lseek_r+0x1e>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_lseek_r+0x1e>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	200008c8 	.word	0x200008c8

0800b6d0 <malloc>:
 800b6d0:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <malloc+0xc>)
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	f000 bd31 	b.w	800c13c <_malloc_r>
 800b6da:	bf00      	nop
 800b6dc:	20000058 	.word	0x20000058

0800b6e0 <__ascii_mbtowc>:
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	b901      	cbnz	r1, 800b6e6 <__ascii_mbtowc+0x6>
 800b6e4:	a901      	add	r1, sp, #4
 800b6e6:	b142      	cbz	r2, 800b6fa <__ascii_mbtowc+0x1a>
 800b6e8:	b14b      	cbz	r3, 800b6fe <__ascii_mbtowc+0x1e>
 800b6ea:	7813      	ldrb	r3, [r2, #0]
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	1e10      	subs	r0, r2, #0
 800b6f2:	bf18      	it	ne
 800b6f4:	2001      	movne	r0, #1
 800b6f6:	b002      	add	sp, #8
 800b6f8:	4770      	bx	lr
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	e7fb      	b.n	800b6f6 <__ascii_mbtowc+0x16>
 800b6fe:	f06f 0001 	mvn.w	r0, #1
 800b702:	e7f8      	b.n	800b6f6 <__ascii_mbtowc+0x16>

0800b704 <_Balloc>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b708:	4604      	mov	r4, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Balloc+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7ff ffde 	bl	800b6d0 <malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	6260      	str	r0, [r4, #36]	; 0x24
 800b718:	b920      	cbnz	r0, 800b724 <_Balloc+0x20>
 800b71a:	4b18      	ldr	r3, [pc, #96]	; (800b77c <_Balloc+0x78>)
 800b71c:	4818      	ldr	r0, [pc, #96]	; (800b780 <_Balloc+0x7c>)
 800b71e:	2166      	movs	r1, #102	; 0x66
 800b720:	f001 fb1c 	bl	800cd5c <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b72e:	68f3      	ldr	r3, [r6, #12]
 800b730:	b183      	cbz	r3, 800b754 <_Balloc+0x50>
 800b732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b73a:	b9b8      	cbnz	r0, 800b76c <_Balloc+0x68>
 800b73c:	2101      	movs	r1, #1
 800b73e:	fa01 f605 	lsl.w	r6, r1, r5
 800b742:	1d72      	adds	r2, r6, #5
 800b744:	0092      	lsls	r2, r2, #2
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fc98 	bl	800c07c <_calloc_r>
 800b74c:	b160      	cbz	r0, 800b768 <_Balloc+0x64>
 800b74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b752:	e00e      	b.n	800b772 <_Balloc+0x6e>
 800b754:	2221      	movs	r2, #33	; 0x21
 800b756:	2104      	movs	r1, #4
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fc8f 	bl	800c07c <_calloc_r>
 800b75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b760:	60f0      	str	r0, [r6, #12]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e4      	bne.n	800b732 <_Balloc+0x2e>
 800b768:	2000      	movs	r0, #0
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	6802      	ldr	r2, [r0, #0]
 800b76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b772:	2300      	movs	r3, #0
 800b774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b778:	e7f7      	b.n	800b76a <_Balloc+0x66>
 800b77a:	bf00      	nop
 800b77c:	0800dacd 	.word	0x0800dacd
 800b780:	0800dbd4 	.word	0x0800dbd4

0800b784 <_Bfree>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b788:	4605      	mov	r5, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	b976      	cbnz	r6, 800b7ac <_Bfree+0x28>
 800b78e:	2010      	movs	r0, #16
 800b790:	f7ff ff9e 	bl	800b6d0 <malloc>
 800b794:	4602      	mov	r2, r0
 800b796:	6268      	str	r0, [r5, #36]	; 0x24
 800b798:	b920      	cbnz	r0, 800b7a4 <_Bfree+0x20>
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <_Bfree+0x3c>)
 800b79c:	4809      	ldr	r0, [pc, #36]	; (800b7c4 <_Bfree+0x40>)
 800b79e:	218a      	movs	r1, #138	; 0x8a
 800b7a0:	f001 fadc 	bl	800cd5c <__assert_func>
 800b7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a8:	6006      	str	r6, [r0, #0]
 800b7aa:	60c6      	str	r6, [r0, #12]
 800b7ac:	b13c      	cbz	r4, 800b7be <_Bfree+0x3a>
 800b7ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7b0:	6862      	ldr	r2, [r4, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7b8:	6021      	str	r1, [r4, #0]
 800b7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	0800dacd 	.word	0x0800dacd
 800b7c4:	0800dbd4 	.word	0x0800dbd4

0800b7c8 <__multadd>:
 800b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	690e      	ldr	r6, [r1, #16]
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f101 0014 	add.w	r0, r1, #20
 800b7d8:	2300      	movs	r3, #0
 800b7da:	6805      	ldr	r5, [r0, #0]
 800b7dc:	b2a9      	uxth	r1, r5
 800b7de:	fb02 8101 	mla	r1, r2, r1, r8
 800b7e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b7e6:	0c2d      	lsrs	r5, r5, #16
 800b7e8:	fb02 c505 	mla	r5, r2, r5, ip
 800b7ec:	b289      	uxth	r1, r1
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b7f4:	429e      	cmp	r6, r3
 800b7f6:	f840 1b04 	str.w	r1, [r0], #4
 800b7fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b7fe:	dcec      	bgt.n	800b7da <__multadd+0x12>
 800b800:	f1b8 0f00 	cmp.w	r8, #0
 800b804:	d022      	beq.n	800b84c <__multadd+0x84>
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	42b3      	cmp	r3, r6
 800b80a:	dc19      	bgt.n	800b840 <__multadd+0x78>
 800b80c:	6861      	ldr	r1, [r4, #4]
 800b80e:	4638      	mov	r0, r7
 800b810:	3101      	adds	r1, #1
 800b812:	f7ff ff77 	bl	800b704 <_Balloc>
 800b816:	4605      	mov	r5, r0
 800b818:	b928      	cbnz	r0, 800b826 <__multadd+0x5e>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <__multadd+0x8c>)
 800b81e:	480e      	ldr	r0, [pc, #56]	; (800b858 <__multadd+0x90>)
 800b820:	21b5      	movs	r1, #181	; 0xb5
 800b822:	f001 fa9b 	bl	800cd5c <__assert_func>
 800b826:	6922      	ldr	r2, [r4, #16]
 800b828:	3202      	adds	r2, #2
 800b82a:	f104 010c 	add.w	r1, r4, #12
 800b82e:	0092      	lsls	r2, r2, #2
 800b830:	300c      	adds	r0, #12
 800b832:	f7fc ffe9 	bl	8008808 <memcpy>
 800b836:	4621      	mov	r1, r4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ffa3 	bl	800b784 <_Bfree>
 800b83e:	462c      	mov	r4, r5
 800b840:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b844:	3601      	adds	r6, #1
 800b846:	f8c3 8014 	str.w	r8, [r3, #20]
 800b84a:	6126      	str	r6, [r4, #16]
 800b84c:	4620      	mov	r0, r4
 800b84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b852:	bf00      	nop
 800b854:	0800db43 	.word	0x0800db43
 800b858:	0800dbd4 	.word	0x0800dbd4

0800b85c <__s2b>:
 800b85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b860:	460c      	mov	r4, r1
 800b862:	4615      	mov	r5, r2
 800b864:	461f      	mov	r7, r3
 800b866:	2209      	movs	r2, #9
 800b868:	3308      	adds	r3, #8
 800b86a:	4606      	mov	r6, r0
 800b86c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b870:	2100      	movs	r1, #0
 800b872:	2201      	movs	r2, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	db09      	blt.n	800b88c <__s2b+0x30>
 800b878:	4630      	mov	r0, r6
 800b87a:	f7ff ff43 	bl	800b704 <_Balloc>
 800b87e:	b940      	cbnz	r0, 800b892 <__s2b+0x36>
 800b880:	4602      	mov	r2, r0
 800b882:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <__s2b+0x8c>)
 800b884:	4819      	ldr	r0, [pc, #100]	; (800b8ec <__s2b+0x90>)
 800b886:	21ce      	movs	r1, #206	; 0xce
 800b888:	f001 fa68 	bl	800cd5c <__assert_func>
 800b88c:	0052      	lsls	r2, r2, #1
 800b88e:	3101      	adds	r1, #1
 800b890:	e7f0      	b.n	800b874 <__s2b+0x18>
 800b892:	9b08      	ldr	r3, [sp, #32]
 800b894:	6143      	str	r3, [r0, #20]
 800b896:	2d09      	cmp	r5, #9
 800b898:	f04f 0301 	mov.w	r3, #1
 800b89c:	6103      	str	r3, [r0, #16]
 800b89e:	dd16      	ble.n	800b8ce <__s2b+0x72>
 800b8a0:	f104 0909 	add.w	r9, r4, #9
 800b8a4:	46c8      	mov	r8, r9
 800b8a6:	442c      	add	r4, r5
 800b8a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	3b30      	subs	r3, #48	; 0x30
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff88 	bl	800b7c8 <__multadd>
 800b8b8:	45a0      	cmp	r8, r4
 800b8ba:	d1f5      	bne.n	800b8a8 <__s2b+0x4c>
 800b8bc:	f1a5 0408 	sub.w	r4, r5, #8
 800b8c0:	444c      	add	r4, r9
 800b8c2:	1b2d      	subs	r5, r5, r4
 800b8c4:	1963      	adds	r3, r4, r5
 800b8c6:	42bb      	cmp	r3, r7
 800b8c8:	db04      	blt.n	800b8d4 <__s2b+0x78>
 800b8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	340a      	adds	r4, #10
 800b8d0:	2509      	movs	r5, #9
 800b8d2:	e7f6      	b.n	800b8c2 <__s2b+0x66>
 800b8d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8d8:	4601      	mov	r1, r0
 800b8da:	3b30      	subs	r3, #48	; 0x30
 800b8dc:	220a      	movs	r2, #10
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7ff ff72 	bl	800b7c8 <__multadd>
 800b8e4:	e7ee      	b.n	800b8c4 <__s2b+0x68>
 800b8e6:	bf00      	nop
 800b8e8:	0800db43 	.word	0x0800db43
 800b8ec:	0800dbd4 	.word	0x0800dbd4

0800b8f0 <__hi0bits>:
 800b8f0:	0c03      	lsrs	r3, r0, #16
 800b8f2:	041b      	lsls	r3, r3, #16
 800b8f4:	b9d3      	cbnz	r3, 800b92c <__hi0bits+0x3c>
 800b8f6:	0400      	lsls	r0, r0, #16
 800b8f8:	2310      	movs	r3, #16
 800b8fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8fe:	bf04      	itt	eq
 800b900:	0200      	lsleq	r0, r0, #8
 800b902:	3308      	addeq	r3, #8
 800b904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b908:	bf04      	itt	eq
 800b90a:	0100      	lsleq	r0, r0, #4
 800b90c:	3304      	addeq	r3, #4
 800b90e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b912:	bf04      	itt	eq
 800b914:	0080      	lsleq	r0, r0, #2
 800b916:	3302      	addeq	r3, #2
 800b918:	2800      	cmp	r0, #0
 800b91a:	db05      	blt.n	800b928 <__hi0bits+0x38>
 800b91c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b920:	f103 0301 	add.w	r3, r3, #1
 800b924:	bf08      	it	eq
 800b926:	2320      	moveq	r3, #32
 800b928:	4618      	mov	r0, r3
 800b92a:	4770      	bx	lr
 800b92c:	2300      	movs	r3, #0
 800b92e:	e7e4      	b.n	800b8fa <__hi0bits+0xa>

0800b930 <__lo0bits>:
 800b930:	6803      	ldr	r3, [r0, #0]
 800b932:	f013 0207 	ands.w	r2, r3, #7
 800b936:	4601      	mov	r1, r0
 800b938:	d00b      	beq.n	800b952 <__lo0bits+0x22>
 800b93a:	07da      	lsls	r2, r3, #31
 800b93c:	d424      	bmi.n	800b988 <__lo0bits+0x58>
 800b93e:	0798      	lsls	r0, r3, #30
 800b940:	bf49      	itett	mi
 800b942:	085b      	lsrmi	r3, r3, #1
 800b944:	089b      	lsrpl	r3, r3, #2
 800b946:	2001      	movmi	r0, #1
 800b948:	600b      	strmi	r3, [r1, #0]
 800b94a:	bf5c      	itt	pl
 800b94c:	600b      	strpl	r3, [r1, #0]
 800b94e:	2002      	movpl	r0, #2
 800b950:	4770      	bx	lr
 800b952:	b298      	uxth	r0, r3
 800b954:	b9b0      	cbnz	r0, 800b984 <__lo0bits+0x54>
 800b956:	0c1b      	lsrs	r3, r3, #16
 800b958:	2010      	movs	r0, #16
 800b95a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b95e:	bf04      	itt	eq
 800b960:	0a1b      	lsreq	r3, r3, #8
 800b962:	3008      	addeq	r0, #8
 800b964:	071a      	lsls	r2, r3, #28
 800b966:	bf04      	itt	eq
 800b968:	091b      	lsreq	r3, r3, #4
 800b96a:	3004      	addeq	r0, #4
 800b96c:	079a      	lsls	r2, r3, #30
 800b96e:	bf04      	itt	eq
 800b970:	089b      	lsreq	r3, r3, #2
 800b972:	3002      	addeq	r0, #2
 800b974:	07da      	lsls	r2, r3, #31
 800b976:	d403      	bmi.n	800b980 <__lo0bits+0x50>
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	f100 0001 	add.w	r0, r0, #1
 800b97e:	d005      	beq.n	800b98c <__lo0bits+0x5c>
 800b980:	600b      	str	r3, [r1, #0]
 800b982:	4770      	bx	lr
 800b984:	4610      	mov	r0, r2
 800b986:	e7e8      	b.n	800b95a <__lo0bits+0x2a>
 800b988:	2000      	movs	r0, #0
 800b98a:	4770      	bx	lr
 800b98c:	2020      	movs	r0, #32
 800b98e:	4770      	bx	lr

0800b990 <__i2b>:
 800b990:	b510      	push	{r4, lr}
 800b992:	460c      	mov	r4, r1
 800b994:	2101      	movs	r1, #1
 800b996:	f7ff feb5 	bl	800b704 <_Balloc>
 800b99a:	4602      	mov	r2, r0
 800b99c:	b928      	cbnz	r0, 800b9aa <__i2b+0x1a>
 800b99e:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <__i2b+0x24>)
 800b9a0:	4805      	ldr	r0, [pc, #20]	; (800b9b8 <__i2b+0x28>)
 800b9a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9a6:	f001 f9d9 	bl	800cd5c <__assert_func>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	6144      	str	r4, [r0, #20]
 800b9ae:	6103      	str	r3, [r0, #16]
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	bf00      	nop
 800b9b4:	0800db43 	.word	0x0800db43
 800b9b8:	0800dbd4 	.word	0x0800dbd4

0800b9bc <__multiply>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	4614      	mov	r4, r2
 800b9c2:	690a      	ldr	r2, [r1, #16]
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	bfb8      	it	lt
 800b9ca:	460b      	movlt	r3, r1
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	bfbc      	itt	lt
 800b9d0:	4625      	movlt	r5, r4
 800b9d2:	461c      	movlt	r4, r3
 800b9d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b9d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b9dc:	68ab      	ldr	r3, [r5, #8]
 800b9de:	6869      	ldr	r1, [r5, #4]
 800b9e0:	eb0a 0709 	add.w	r7, sl, r9
 800b9e4:	42bb      	cmp	r3, r7
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	bfb8      	it	lt
 800b9ea:	3101      	addlt	r1, #1
 800b9ec:	f7ff fe8a 	bl	800b704 <_Balloc>
 800b9f0:	b930      	cbnz	r0, 800ba00 <__multiply+0x44>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4b42      	ldr	r3, [pc, #264]	; (800bb00 <__multiply+0x144>)
 800b9f6:	4843      	ldr	r0, [pc, #268]	; (800bb04 <__multiply+0x148>)
 800b9f8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9fc:	f001 f9ae 	bl	800cd5c <__assert_func>
 800ba00:	f100 0614 	add.w	r6, r0, #20
 800ba04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba08:	4633      	mov	r3, r6
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4543      	cmp	r3, r8
 800ba0e:	d31e      	bcc.n	800ba4e <__multiply+0x92>
 800ba10:	f105 0c14 	add.w	ip, r5, #20
 800ba14:	f104 0314 	add.w	r3, r4, #20
 800ba18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba20:	9202      	str	r2, [sp, #8]
 800ba22:	ebac 0205 	sub.w	r2, ip, r5
 800ba26:	3a15      	subs	r2, #21
 800ba28:	f022 0203 	bic.w	r2, r2, #3
 800ba2c:	3204      	adds	r2, #4
 800ba2e:	f105 0115 	add.w	r1, r5, #21
 800ba32:	458c      	cmp	ip, r1
 800ba34:	bf38      	it	cc
 800ba36:	2204      	movcc	r2, #4
 800ba38:	9201      	str	r2, [sp, #4]
 800ba3a:	9a02      	ldr	r2, [sp, #8]
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d808      	bhi.n	800ba54 <__multiply+0x98>
 800ba42:	2f00      	cmp	r7, #0
 800ba44:	dc55      	bgt.n	800baf2 <__multiply+0x136>
 800ba46:	6107      	str	r7, [r0, #16]
 800ba48:	b005      	add	sp, #20
 800ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4e:	f843 2b04 	str.w	r2, [r3], #4
 800ba52:	e7db      	b.n	800ba0c <__multiply+0x50>
 800ba54:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba58:	f1ba 0f00 	cmp.w	sl, #0
 800ba5c:	d020      	beq.n	800baa0 <__multiply+0xe4>
 800ba5e:	f105 0e14 	add.w	lr, r5, #20
 800ba62:	46b1      	mov	r9, r6
 800ba64:	2200      	movs	r2, #0
 800ba66:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba6a:	f8d9 b000 	ldr.w	fp, [r9]
 800ba6e:	b2a1      	uxth	r1, r4
 800ba70:	fa1f fb8b 	uxth.w	fp, fp
 800ba74:	fb0a b101 	mla	r1, sl, r1, fp
 800ba78:	4411      	add	r1, r2
 800ba7a:	f8d9 2000 	ldr.w	r2, [r9]
 800ba7e:	0c24      	lsrs	r4, r4, #16
 800ba80:	0c12      	lsrs	r2, r2, #16
 800ba82:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba8a:	b289      	uxth	r1, r1
 800ba8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba90:	45f4      	cmp	ip, lr
 800ba92:	f849 1b04 	str.w	r1, [r9], #4
 800ba96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba9a:	d8e4      	bhi.n	800ba66 <__multiply+0xaa>
 800ba9c:	9901      	ldr	r1, [sp, #4]
 800ba9e:	5072      	str	r2, [r6, r1]
 800baa0:	9a03      	ldr	r2, [sp, #12]
 800baa2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800baa6:	3304      	adds	r3, #4
 800baa8:	f1b9 0f00 	cmp.w	r9, #0
 800baac:	d01f      	beq.n	800baee <__multiply+0x132>
 800baae:	6834      	ldr	r4, [r6, #0]
 800bab0:	f105 0114 	add.w	r1, r5, #20
 800bab4:	46b6      	mov	lr, r6
 800bab6:	f04f 0a00 	mov.w	sl, #0
 800baba:	880a      	ldrh	r2, [r1, #0]
 800babc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bac0:	fb09 b202 	mla	r2, r9, r2, fp
 800bac4:	4492      	add	sl, r2
 800bac6:	b2a4      	uxth	r4, r4
 800bac8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bacc:	f84e 4b04 	str.w	r4, [lr], #4
 800bad0:	f851 4b04 	ldr.w	r4, [r1], #4
 800bad4:	f8be 2000 	ldrh.w	r2, [lr]
 800bad8:	0c24      	lsrs	r4, r4, #16
 800bada:	fb09 2404 	mla	r4, r9, r4, r2
 800bade:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bae2:	458c      	cmp	ip, r1
 800bae4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bae8:	d8e7      	bhi.n	800baba <__multiply+0xfe>
 800baea:	9a01      	ldr	r2, [sp, #4]
 800baec:	50b4      	str	r4, [r6, r2]
 800baee:	3604      	adds	r6, #4
 800baf0:	e7a3      	b.n	800ba3a <__multiply+0x7e>
 800baf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1a5      	bne.n	800ba46 <__multiply+0x8a>
 800bafa:	3f01      	subs	r7, #1
 800bafc:	e7a1      	b.n	800ba42 <__multiply+0x86>
 800bafe:	bf00      	nop
 800bb00:	0800db43 	.word	0x0800db43
 800bb04:	0800dbd4 	.word	0x0800dbd4

0800bb08 <__pow5mult>:
 800bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	f012 0203 	ands.w	r2, r2, #3
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	d007      	beq.n	800bb28 <__pow5mult+0x20>
 800bb18:	4c25      	ldr	r4, [pc, #148]	; (800bbb0 <__pow5mult+0xa8>)
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb22:	f7ff fe51 	bl	800b7c8 <__multadd>
 800bb26:	4607      	mov	r7, r0
 800bb28:	10ad      	asrs	r5, r5, #2
 800bb2a:	d03d      	beq.n	800bba8 <__pow5mult+0xa0>
 800bb2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb2e:	b97c      	cbnz	r4, 800bb50 <__pow5mult+0x48>
 800bb30:	2010      	movs	r0, #16
 800bb32:	f7ff fdcd 	bl	800b6d0 <malloc>
 800bb36:	4602      	mov	r2, r0
 800bb38:	6270      	str	r0, [r6, #36]	; 0x24
 800bb3a:	b928      	cbnz	r0, 800bb48 <__pow5mult+0x40>
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	; (800bbb4 <__pow5mult+0xac>)
 800bb3e:	481e      	ldr	r0, [pc, #120]	; (800bbb8 <__pow5mult+0xb0>)
 800bb40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb44:	f001 f90a 	bl	800cd5c <__assert_func>
 800bb48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb4c:	6004      	str	r4, [r0, #0]
 800bb4e:	60c4      	str	r4, [r0, #12]
 800bb50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb58:	b94c      	cbnz	r4, 800bb6e <__pow5mult+0x66>
 800bb5a:	f240 2171 	movw	r1, #625	; 0x271
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7ff ff16 	bl	800b990 <__i2b>
 800bb64:	2300      	movs	r3, #0
 800bb66:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	6003      	str	r3, [r0, #0]
 800bb6e:	f04f 0900 	mov.w	r9, #0
 800bb72:	07eb      	lsls	r3, r5, #31
 800bb74:	d50a      	bpl.n	800bb8c <__pow5mult+0x84>
 800bb76:	4639      	mov	r1, r7
 800bb78:	4622      	mov	r2, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7ff ff1e 	bl	800b9bc <__multiply>
 800bb80:	4639      	mov	r1, r7
 800bb82:	4680      	mov	r8, r0
 800bb84:	4630      	mov	r0, r6
 800bb86:	f7ff fdfd 	bl	800b784 <_Bfree>
 800bb8a:	4647      	mov	r7, r8
 800bb8c:	106d      	asrs	r5, r5, #1
 800bb8e:	d00b      	beq.n	800bba8 <__pow5mult+0xa0>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	b938      	cbnz	r0, 800bba4 <__pow5mult+0x9c>
 800bb94:	4622      	mov	r2, r4
 800bb96:	4621      	mov	r1, r4
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff ff0f 	bl	800b9bc <__multiply>
 800bb9e:	6020      	str	r0, [r4, #0]
 800bba0:	f8c0 9000 	str.w	r9, [r0]
 800bba4:	4604      	mov	r4, r0
 800bba6:	e7e4      	b.n	800bb72 <__pow5mult+0x6a>
 800bba8:	4638      	mov	r0, r7
 800bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800dd28 	.word	0x0800dd28
 800bbb4:	0800dacd 	.word	0x0800dacd
 800bbb8:	0800dbd4 	.word	0x0800dbd4

0800bbbc <__lshift>:
 800bbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	6849      	ldr	r1, [r1, #4]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	4607      	mov	r7, r0
 800bbce:	4691      	mov	r9, r2
 800bbd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbd4:	f108 0601 	add.w	r6, r8, #1
 800bbd8:	42b3      	cmp	r3, r6
 800bbda:	db0b      	blt.n	800bbf4 <__lshift+0x38>
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff fd91 	bl	800b704 <_Balloc>
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	b948      	cbnz	r0, 800bbfa <__lshift+0x3e>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	4b28      	ldr	r3, [pc, #160]	; (800bc8c <__lshift+0xd0>)
 800bbea:	4829      	ldr	r0, [pc, #164]	; (800bc90 <__lshift+0xd4>)
 800bbec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbf0:	f001 f8b4 	bl	800cd5c <__assert_func>
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__lshift+0x1c>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f100 0114 	add.w	r1, r0, #20
 800bc00:	f100 0210 	add.w	r2, r0, #16
 800bc04:	4618      	mov	r0, r3
 800bc06:	4553      	cmp	r3, sl
 800bc08:	db33      	blt.n	800bc72 <__lshift+0xb6>
 800bc0a:	6920      	ldr	r0, [r4, #16]
 800bc0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc10:	f104 0314 	add.w	r3, r4, #20
 800bc14:	f019 091f 	ands.w	r9, r9, #31
 800bc18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc20:	d02b      	beq.n	800bc7a <__lshift+0xbe>
 800bc22:	f1c9 0e20 	rsb	lr, r9, #32
 800bc26:	468a      	mov	sl, r1
 800bc28:	2200      	movs	r2, #0
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc30:	4302      	orrs	r2, r0
 800bc32:	f84a 2b04 	str.w	r2, [sl], #4
 800bc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc3a:	459c      	cmp	ip, r3
 800bc3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc40:	d8f3      	bhi.n	800bc2a <__lshift+0x6e>
 800bc42:	ebac 0304 	sub.w	r3, ip, r4
 800bc46:	3b15      	subs	r3, #21
 800bc48:	f023 0303 	bic.w	r3, r3, #3
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	f104 0015 	add.w	r0, r4, #21
 800bc52:	4584      	cmp	ip, r0
 800bc54:	bf38      	it	cc
 800bc56:	2304      	movcc	r3, #4
 800bc58:	50ca      	str	r2, [r1, r3]
 800bc5a:	b10a      	cbz	r2, 800bc60 <__lshift+0xa4>
 800bc5c:	f108 0602 	add.w	r6, r8, #2
 800bc60:	3e01      	subs	r6, #1
 800bc62:	4638      	mov	r0, r7
 800bc64:	612e      	str	r6, [r5, #16]
 800bc66:	4621      	mov	r1, r4
 800bc68:	f7ff fd8c 	bl	800b784 <_Bfree>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc76:	3301      	adds	r3, #1
 800bc78:	e7c5      	b.n	800bc06 <__lshift+0x4a>
 800bc7a:	3904      	subs	r1, #4
 800bc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc84:	459c      	cmp	ip, r3
 800bc86:	d8f9      	bhi.n	800bc7c <__lshift+0xc0>
 800bc88:	e7ea      	b.n	800bc60 <__lshift+0xa4>
 800bc8a:	bf00      	nop
 800bc8c:	0800db43 	.word	0x0800db43
 800bc90:	0800dbd4 	.word	0x0800dbd4

0800bc94 <__mcmp>:
 800bc94:	b530      	push	{r4, r5, lr}
 800bc96:	6902      	ldr	r2, [r0, #16]
 800bc98:	690c      	ldr	r4, [r1, #16]
 800bc9a:	1b12      	subs	r2, r2, r4
 800bc9c:	d10e      	bne.n	800bcbc <__mcmp+0x28>
 800bc9e:	f100 0314 	add.w	r3, r0, #20
 800bca2:	3114      	adds	r1, #20
 800bca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bcac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcb4:	42a5      	cmp	r5, r4
 800bcb6:	d003      	beq.n	800bcc0 <__mcmp+0x2c>
 800bcb8:	d305      	bcc.n	800bcc6 <__mcmp+0x32>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	bd30      	pop	{r4, r5, pc}
 800bcc0:	4283      	cmp	r3, r0
 800bcc2:	d3f3      	bcc.n	800bcac <__mcmp+0x18>
 800bcc4:	e7fa      	b.n	800bcbc <__mcmp+0x28>
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	e7f7      	b.n	800bcbc <__mcmp+0x28>

0800bccc <__mdiff>:
 800bccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4617      	mov	r7, r2
 800bcda:	f7ff ffdb 	bl	800bc94 <__mcmp>
 800bcde:	1e05      	subs	r5, r0, #0
 800bce0:	d110      	bne.n	800bd04 <__mdiff+0x38>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff fd0d 	bl	800b704 <_Balloc>
 800bcea:	b930      	cbnz	r0, 800bcfa <__mdiff+0x2e>
 800bcec:	4b39      	ldr	r3, [pc, #228]	; (800bdd4 <__mdiff+0x108>)
 800bcee:	4602      	mov	r2, r0
 800bcf0:	f240 2132 	movw	r1, #562	; 0x232
 800bcf4:	4838      	ldr	r0, [pc, #224]	; (800bdd8 <__mdiff+0x10c>)
 800bcf6:	f001 f831 	bl	800cd5c <__assert_func>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	bfa4      	itt	ge
 800bd06:	463b      	movge	r3, r7
 800bd08:	4627      	movge	r7, r4
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	bfa6      	itte	ge
 800bd10:	461c      	movge	r4, r3
 800bd12:	2500      	movge	r5, #0
 800bd14:	2501      	movlt	r5, #1
 800bd16:	f7ff fcf5 	bl	800b704 <_Balloc>
 800bd1a:	b920      	cbnz	r0, 800bd26 <__mdiff+0x5a>
 800bd1c:	4b2d      	ldr	r3, [pc, #180]	; (800bdd4 <__mdiff+0x108>)
 800bd1e:	4602      	mov	r2, r0
 800bd20:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd24:	e7e6      	b.n	800bcf4 <__mdiff+0x28>
 800bd26:	693e      	ldr	r6, [r7, #16]
 800bd28:	60c5      	str	r5, [r0, #12]
 800bd2a:	6925      	ldr	r5, [r4, #16]
 800bd2c:	f107 0114 	add.w	r1, r7, #20
 800bd30:	f104 0914 	add.w	r9, r4, #20
 800bd34:	f100 0e14 	add.w	lr, r0, #20
 800bd38:	f107 0210 	add.w	r2, r7, #16
 800bd3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bd40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bd44:	46f2      	mov	sl, lr
 800bd46:	2700      	movs	r7, #0
 800bd48:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd50:	fa1f f883 	uxth.w	r8, r3
 800bd54:	fa17 f78b 	uxtah	r7, r7, fp
 800bd58:	0c1b      	lsrs	r3, r3, #16
 800bd5a:	eba7 0808 	sub.w	r8, r7, r8
 800bd5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd66:	fa1f f888 	uxth.w	r8, r8
 800bd6a:	141f      	asrs	r7, r3, #16
 800bd6c:	454d      	cmp	r5, r9
 800bd6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd72:	f84a 3b04 	str.w	r3, [sl], #4
 800bd76:	d8e7      	bhi.n	800bd48 <__mdiff+0x7c>
 800bd78:	1b2b      	subs	r3, r5, r4
 800bd7a:	3b15      	subs	r3, #21
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	3304      	adds	r3, #4
 800bd82:	3415      	adds	r4, #21
 800bd84:	42a5      	cmp	r5, r4
 800bd86:	bf38      	it	cc
 800bd88:	2304      	movcc	r3, #4
 800bd8a:	4419      	add	r1, r3
 800bd8c:	4473      	add	r3, lr
 800bd8e:	469e      	mov	lr, r3
 800bd90:	460d      	mov	r5, r1
 800bd92:	4565      	cmp	r5, ip
 800bd94:	d30e      	bcc.n	800bdb4 <__mdiff+0xe8>
 800bd96:	f10c 0203 	add.w	r2, ip, #3
 800bd9a:	1a52      	subs	r2, r2, r1
 800bd9c:	f022 0203 	bic.w	r2, r2, #3
 800bda0:	3903      	subs	r1, #3
 800bda2:	458c      	cmp	ip, r1
 800bda4:	bf38      	it	cc
 800bda6:	2200      	movcc	r2, #0
 800bda8:	441a      	add	r2, r3
 800bdaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bdae:	b17b      	cbz	r3, 800bdd0 <__mdiff+0x104>
 800bdb0:	6106      	str	r6, [r0, #16]
 800bdb2:	e7a5      	b.n	800bd00 <__mdiff+0x34>
 800bdb4:	f855 8b04 	ldr.w	r8, [r5], #4
 800bdb8:	fa17 f488 	uxtah	r4, r7, r8
 800bdbc:	1422      	asrs	r2, r4, #16
 800bdbe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bdc2:	b2a4      	uxth	r4, r4
 800bdc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bdc8:	f84e 4b04 	str.w	r4, [lr], #4
 800bdcc:	1417      	asrs	r7, r2, #16
 800bdce:	e7e0      	b.n	800bd92 <__mdiff+0xc6>
 800bdd0:	3e01      	subs	r6, #1
 800bdd2:	e7ea      	b.n	800bdaa <__mdiff+0xde>
 800bdd4:	0800db43 	.word	0x0800db43
 800bdd8:	0800dbd4 	.word	0x0800dbd4

0800bddc <__ulp>:
 800bddc:	b082      	sub	sp, #8
 800bdde:	ed8d 0b00 	vstr	d0, [sp]
 800bde2:	9b01      	ldr	r3, [sp, #4]
 800bde4:	4912      	ldr	r1, [pc, #72]	; (800be30 <__ulp+0x54>)
 800bde6:	4019      	ands	r1, r3
 800bde8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bdec:	2900      	cmp	r1, #0
 800bdee:	dd05      	ble.n	800bdfc <__ulp+0x20>
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	ec43 2b10 	vmov	d0, r2, r3
 800bdf8:	b002      	add	sp, #8
 800bdfa:	4770      	bx	lr
 800bdfc:	4249      	negs	r1, r1
 800bdfe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be02:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	f04f 0300 	mov.w	r3, #0
 800be0e:	da04      	bge.n	800be1a <__ulp+0x3e>
 800be10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be14:	fa41 f300 	asr.w	r3, r1, r0
 800be18:	e7ec      	b.n	800bdf4 <__ulp+0x18>
 800be1a:	f1a0 0114 	sub.w	r1, r0, #20
 800be1e:	291e      	cmp	r1, #30
 800be20:	bfda      	itte	le
 800be22:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be26:	fa20 f101 	lsrle.w	r1, r0, r1
 800be2a:	2101      	movgt	r1, #1
 800be2c:	460a      	mov	r2, r1
 800be2e:	e7e1      	b.n	800bdf4 <__ulp+0x18>
 800be30:	7ff00000 	.word	0x7ff00000

0800be34 <__b2d>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	6905      	ldr	r5, [r0, #16]
 800be38:	f100 0714 	add.w	r7, r0, #20
 800be3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be40:	1f2e      	subs	r6, r5, #4
 800be42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be46:	4620      	mov	r0, r4
 800be48:	f7ff fd52 	bl	800b8f0 <__hi0bits>
 800be4c:	f1c0 0320 	rsb	r3, r0, #32
 800be50:	280a      	cmp	r0, #10
 800be52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bed0 <__b2d+0x9c>
 800be56:	600b      	str	r3, [r1, #0]
 800be58:	dc14      	bgt.n	800be84 <__b2d+0x50>
 800be5a:	f1c0 0e0b 	rsb	lr, r0, #11
 800be5e:	fa24 f10e 	lsr.w	r1, r4, lr
 800be62:	42b7      	cmp	r7, r6
 800be64:	ea41 030c 	orr.w	r3, r1, ip
 800be68:	bf34      	ite	cc
 800be6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be6e:	2100      	movcs	r1, #0
 800be70:	3015      	adds	r0, #21
 800be72:	fa04 f000 	lsl.w	r0, r4, r0
 800be76:	fa21 f10e 	lsr.w	r1, r1, lr
 800be7a:	ea40 0201 	orr.w	r2, r0, r1
 800be7e:	ec43 2b10 	vmov	d0, r2, r3
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	42b7      	cmp	r7, r6
 800be86:	bf3a      	itte	cc
 800be88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be8c:	f1a5 0608 	subcc.w	r6, r5, #8
 800be90:	2100      	movcs	r1, #0
 800be92:	380b      	subs	r0, #11
 800be94:	d017      	beq.n	800bec6 <__b2d+0x92>
 800be96:	f1c0 0c20 	rsb	ip, r0, #32
 800be9a:	fa04 f500 	lsl.w	r5, r4, r0
 800be9e:	42be      	cmp	r6, r7
 800bea0:	fa21 f40c 	lsr.w	r4, r1, ip
 800bea4:	ea45 0504 	orr.w	r5, r5, r4
 800bea8:	bf8c      	ite	hi
 800beaa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800beae:	2400      	movls	r4, #0
 800beb0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800beb4:	fa01 f000 	lsl.w	r0, r1, r0
 800beb8:	fa24 f40c 	lsr.w	r4, r4, ip
 800bebc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bec0:	ea40 0204 	orr.w	r2, r0, r4
 800bec4:	e7db      	b.n	800be7e <__b2d+0x4a>
 800bec6:	ea44 030c 	orr.w	r3, r4, ip
 800beca:	460a      	mov	r2, r1
 800becc:	e7d7      	b.n	800be7e <__b2d+0x4a>
 800bece:	bf00      	nop
 800bed0:	3ff00000 	.word	0x3ff00000

0800bed4 <__d2b>:
 800bed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bed8:	4689      	mov	r9, r1
 800beda:	2101      	movs	r1, #1
 800bedc:	ec57 6b10 	vmov	r6, r7, d0
 800bee0:	4690      	mov	r8, r2
 800bee2:	f7ff fc0f 	bl	800b704 <_Balloc>
 800bee6:	4604      	mov	r4, r0
 800bee8:	b930      	cbnz	r0, 800bef8 <__d2b+0x24>
 800beea:	4602      	mov	r2, r0
 800beec:	4b25      	ldr	r3, [pc, #148]	; (800bf84 <__d2b+0xb0>)
 800beee:	4826      	ldr	r0, [pc, #152]	; (800bf88 <__d2b+0xb4>)
 800bef0:	f240 310a 	movw	r1, #778	; 0x30a
 800bef4:	f000 ff32 	bl	800cd5c <__assert_func>
 800bef8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800befc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf00:	bb35      	cbnz	r5, 800bf50 <__d2b+0x7c>
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	d028      	beq.n	800bf5a <__d2b+0x86>
 800bf08:	4668      	mov	r0, sp
 800bf0a:	9600      	str	r6, [sp, #0]
 800bf0c:	f7ff fd10 	bl	800b930 <__lo0bits>
 800bf10:	9900      	ldr	r1, [sp, #0]
 800bf12:	b300      	cbz	r0, 800bf56 <__d2b+0x82>
 800bf14:	9a01      	ldr	r2, [sp, #4]
 800bf16:	f1c0 0320 	rsb	r3, r0, #32
 800bf1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1e:	430b      	orrs	r3, r1
 800bf20:	40c2      	lsrs	r2, r0
 800bf22:	6163      	str	r3, [r4, #20]
 800bf24:	9201      	str	r2, [sp, #4]
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	61a3      	str	r3, [r4, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bf14      	ite	ne
 800bf2e:	2202      	movne	r2, #2
 800bf30:	2201      	moveq	r2, #1
 800bf32:	6122      	str	r2, [r4, #16]
 800bf34:	b1d5      	cbz	r5, 800bf6c <__d2b+0x98>
 800bf36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf3a:	4405      	add	r5, r0
 800bf3c:	f8c9 5000 	str.w	r5, [r9]
 800bf40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf44:	f8c8 0000 	str.w	r0, [r8]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	b003      	add	sp, #12
 800bf4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf54:	e7d5      	b.n	800bf02 <__d2b+0x2e>
 800bf56:	6161      	str	r1, [r4, #20]
 800bf58:	e7e5      	b.n	800bf26 <__d2b+0x52>
 800bf5a:	a801      	add	r0, sp, #4
 800bf5c:	f7ff fce8 	bl	800b930 <__lo0bits>
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	6163      	str	r3, [r4, #20]
 800bf64:	2201      	movs	r2, #1
 800bf66:	6122      	str	r2, [r4, #16]
 800bf68:	3020      	adds	r0, #32
 800bf6a:	e7e3      	b.n	800bf34 <__d2b+0x60>
 800bf6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf74:	f8c9 0000 	str.w	r0, [r9]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f7ff fcb9 	bl	800b8f0 <__hi0bits>
 800bf7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf82:	e7df      	b.n	800bf44 <__d2b+0x70>
 800bf84:	0800db43 	.word	0x0800db43
 800bf88:	0800dbd4 	.word	0x0800dbd4

0800bf8c <__ratio>:
 800bf8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	468a      	mov	sl, r1
 800bf92:	4669      	mov	r1, sp
 800bf94:	4683      	mov	fp, r0
 800bf96:	f7ff ff4d 	bl	800be34 <__b2d>
 800bf9a:	a901      	add	r1, sp, #4
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	ec59 8b10 	vmov	r8, r9, d0
 800bfa2:	ee10 6a10 	vmov	r6, s0
 800bfa6:	f7ff ff45 	bl	800be34 <__b2d>
 800bfaa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bfae:	f8da 2010 	ldr.w	r2, [sl, #16]
 800bfb2:	eba3 0c02 	sub.w	ip, r3, r2
 800bfb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfc0:	ec55 4b10 	vmov	r4, r5, d0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	ee10 0a10 	vmov	r0, s0
 800bfca:	bfce      	itee	gt
 800bfcc:	464a      	movgt	r2, r9
 800bfce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfd2:	462a      	movle	r2, r5
 800bfd4:	464f      	mov	r7, r9
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	bfcc      	ite	gt
 800bfda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfde:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bfe2:	ec47 6b17 	vmov	d7, r6, r7
 800bfe6:	ec41 0b16 	vmov	d6, r0, r1
 800bfea:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bff4 <__copybits>:
 800bff4:	3901      	subs	r1, #1
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	1149      	asrs	r1, r1, #5
 800bffa:	6914      	ldr	r4, [r2, #16]
 800bffc:	3101      	adds	r1, #1
 800bffe:	f102 0314 	add.w	r3, r2, #20
 800c002:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c006:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c00a:	1f05      	subs	r5, r0, #4
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	d30c      	bcc.n	800c02a <__copybits+0x36>
 800c010:	1aa3      	subs	r3, r4, r2
 800c012:	3b11      	subs	r3, #17
 800c014:	f023 0303 	bic.w	r3, r3, #3
 800c018:	3211      	adds	r2, #17
 800c01a:	42a2      	cmp	r2, r4
 800c01c:	bf88      	it	hi
 800c01e:	2300      	movhi	r3, #0
 800c020:	4418      	add	r0, r3
 800c022:	2300      	movs	r3, #0
 800c024:	4288      	cmp	r0, r1
 800c026:	d305      	bcc.n	800c034 <__copybits+0x40>
 800c028:	bd70      	pop	{r4, r5, r6, pc}
 800c02a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c02e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c032:	e7eb      	b.n	800c00c <__copybits+0x18>
 800c034:	f840 3b04 	str.w	r3, [r0], #4
 800c038:	e7f4      	b.n	800c024 <__copybits+0x30>

0800c03a <__any_on>:
 800c03a:	f100 0214 	add.w	r2, r0, #20
 800c03e:	6900      	ldr	r0, [r0, #16]
 800c040:	114b      	asrs	r3, r1, #5
 800c042:	4298      	cmp	r0, r3
 800c044:	b510      	push	{r4, lr}
 800c046:	db11      	blt.n	800c06c <__any_on+0x32>
 800c048:	dd0a      	ble.n	800c060 <__any_on+0x26>
 800c04a:	f011 011f 	ands.w	r1, r1, #31
 800c04e:	d007      	beq.n	800c060 <__any_on+0x26>
 800c050:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c054:	fa24 f001 	lsr.w	r0, r4, r1
 800c058:	fa00 f101 	lsl.w	r1, r0, r1
 800c05c:	428c      	cmp	r4, r1
 800c05e:	d10b      	bne.n	800c078 <__any_on+0x3e>
 800c060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c064:	4293      	cmp	r3, r2
 800c066:	d803      	bhi.n	800c070 <__any_on+0x36>
 800c068:	2000      	movs	r0, #0
 800c06a:	bd10      	pop	{r4, pc}
 800c06c:	4603      	mov	r3, r0
 800c06e:	e7f7      	b.n	800c060 <__any_on+0x26>
 800c070:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c074:	2900      	cmp	r1, #0
 800c076:	d0f5      	beq.n	800c064 <__any_on+0x2a>
 800c078:	2001      	movs	r0, #1
 800c07a:	e7f6      	b.n	800c06a <__any_on+0x30>

0800c07c <_calloc_r>:
 800c07c:	b513      	push	{r0, r1, r4, lr}
 800c07e:	434a      	muls	r2, r1
 800c080:	4611      	mov	r1, r2
 800c082:	9201      	str	r2, [sp, #4]
 800c084:	f000 f85a 	bl	800c13c <_malloc_r>
 800c088:	4604      	mov	r4, r0
 800c08a:	b118      	cbz	r0, 800c094 <_calloc_r+0x18>
 800c08c:	9a01      	ldr	r2, [sp, #4]
 800c08e:	2100      	movs	r1, #0
 800c090:	f7fc fbc8 	bl	8008824 <memset>
 800c094:	4620      	mov	r0, r4
 800c096:	b002      	add	sp, #8
 800c098:	bd10      	pop	{r4, pc}
	...

0800c09c <_free_r>:
 800c09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	d048      	beq.n	800c134 <_free_r+0x98>
 800c0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a6:	9001      	str	r0, [sp, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c0ae:	bfb8      	it	lt
 800c0b0:	18e4      	addlt	r4, r4, r3
 800c0b2:	f001 f857 	bl	800d164 <__malloc_lock>
 800c0b6:	4a20      	ldr	r2, [pc, #128]	; (800c138 <_free_r+0x9c>)
 800c0b8:	9801      	ldr	r0, [sp, #4]
 800c0ba:	6813      	ldr	r3, [r2, #0]
 800c0bc:	4615      	mov	r5, r2
 800c0be:	b933      	cbnz	r3, 800c0ce <_free_r+0x32>
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	6014      	str	r4, [r2, #0]
 800c0c4:	b003      	add	sp, #12
 800c0c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0ca:	f001 b851 	b.w	800d170 <__malloc_unlock>
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	d90b      	bls.n	800c0ea <_free_r+0x4e>
 800c0d2:	6821      	ldr	r1, [r4, #0]
 800c0d4:	1862      	adds	r2, r4, r1
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	bf04      	itt	eq
 800c0da:	681a      	ldreq	r2, [r3, #0]
 800c0dc:	685b      	ldreq	r3, [r3, #4]
 800c0de:	6063      	str	r3, [r4, #4]
 800c0e0:	bf04      	itt	eq
 800c0e2:	1852      	addeq	r2, r2, r1
 800c0e4:	6022      	streq	r2, [r4, #0]
 800c0e6:	602c      	str	r4, [r5, #0]
 800c0e8:	e7ec      	b.n	800c0c4 <_free_r+0x28>
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b10b      	cbz	r3, 800c0f4 <_free_r+0x58>
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	d9fa      	bls.n	800c0ea <_free_r+0x4e>
 800c0f4:	6811      	ldr	r1, [r2, #0]
 800c0f6:	1855      	adds	r5, r2, r1
 800c0f8:	42a5      	cmp	r5, r4
 800c0fa:	d10b      	bne.n	800c114 <_free_r+0x78>
 800c0fc:	6824      	ldr	r4, [r4, #0]
 800c0fe:	4421      	add	r1, r4
 800c100:	1854      	adds	r4, r2, r1
 800c102:	42a3      	cmp	r3, r4
 800c104:	6011      	str	r1, [r2, #0]
 800c106:	d1dd      	bne.n	800c0c4 <_free_r+0x28>
 800c108:	681c      	ldr	r4, [r3, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	6053      	str	r3, [r2, #4]
 800c10e:	4421      	add	r1, r4
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	e7d7      	b.n	800c0c4 <_free_r+0x28>
 800c114:	d902      	bls.n	800c11c <_free_r+0x80>
 800c116:	230c      	movs	r3, #12
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	e7d3      	b.n	800c0c4 <_free_r+0x28>
 800c11c:	6825      	ldr	r5, [r4, #0]
 800c11e:	1961      	adds	r1, r4, r5
 800c120:	428b      	cmp	r3, r1
 800c122:	bf04      	itt	eq
 800c124:	6819      	ldreq	r1, [r3, #0]
 800c126:	685b      	ldreq	r3, [r3, #4]
 800c128:	6063      	str	r3, [r4, #4]
 800c12a:	bf04      	itt	eq
 800c12c:	1949      	addeq	r1, r1, r5
 800c12e:	6021      	streq	r1, [r4, #0]
 800c130:	6054      	str	r4, [r2, #4]
 800c132:	e7c7      	b.n	800c0c4 <_free_r+0x28>
 800c134:	b003      	add	sp, #12
 800c136:	bd30      	pop	{r4, r5, pc}
 800c138:	2000024c 	.word	0x2000024c

0800c13c <_malloc_r>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	1ccd      	adds	r5, r1, #3
 800c140:	f025 0503 	bic.w	r5, r5, #3
 800c144:	3508      	adds	r5, #8
 800c146:	2d0c      	cmp	r5, #12
 800c148:	bf38      	it	cc
 800c14a:	250c      	movcc	r5, #12
 800c14c:	2d00      	cmp	r5, #0
 800c14e:	4606      	mov	r6, r0
 800c150:	db01      	blt.n	800c156 <_malloc_r+0x1a>
 800c152:	42a9      	cmp	r1, r5
 800c154:	d903      	bls.n	800c15e <_malloc_r+0x22>
 800c156:	230c      	movs	r3, #12
 800c158:	6033      	str	r3, [r6, #0]
 800c15a:	2000      	movs	r0, #0
 800c15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15e:	f001 f801 	bl	800d164 <__malloc_lock>
 800c162:	4921      	ldr	r1, [pc, #132]	; (800c1e8 <_malloc_r+0xac>)
 800c164:	680a      	ldr	r2, [r1, #0]
 800c166:	4614      	mov	r4, r2
 800c168:	b99c      	cbnz	r4, 800c192 <_malloc_r+0x56>
 800c16a:	4f20      	ldr	r7, [pc, #128]	; (800c1ec <_malloc_r+0xb0>)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	b923      	cbnz	r3, 800c17a <_malloc_r+0x3e>
 800c170:	4621      	mov	r1, r4
 800c172:	4630      	mov	r0, r6
 800c174:	f000 fcd0 	bl	800cb18 <_sbrk_r>
 800c178:	6038      	str	r0, [r7, #0]
 800c17a:	4629      	mov	r1, r5
 800c17c:	4630      	mov	r0, r6
 800c17e:	f000 fccb 	bl	800cb18 <_sbrk_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d123      	bne.n	800c1ce <_malloc_r+0x92>
 800c186:	230c      	movs	r3, #12
 800c188:	6033      	str	r3, [r6, #0]
 800c18a:	4630      	mov	r0, r6
 800c18c:	f000 fff0 	bl	800d170 <__malloc_unlock>
 800c190:	e7e3      	b.n	800c15a <_malloc_r+0x1e>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	1b5b      	subs	r3, r3, r5
 800c196:	d417      	bmi.n	800c1c8 <_malloc_r+0x8c>
 800c198:	2b0b      	cmp	r3, #11
 800c19a:	d903      	bls.n	800c1a4 <_malloc_r+0x68>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	441c      	add	r4, r3
 800c1a0:	6025      	str	r5, [r4, #0]
 800c1a2:	e004      	b.n	800c1ae <_malloc_r+0x72>
 800c1a4:	6863      	ldr	r3, [r4, #4]
 800c1a6:	42a2      	cmp	r2, r4
 800c1a8:	bf0c      	ite	eq
 800c1aa:	600b      	streq	r3, [r1, #0]
 800c1ac:	6053      	strne	r3, [r2, #4]
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f000 ffde 	bl	800d170 <__malloc_unlock>
 800c1b4:	f104 000b 	add.w	r0, r4, #11
 800c1b8:	1d23      	adds	r3, r4, #4
 800c1ba:	f020 0007 	bic.w	r0, r0, #7
 800c1be:	1ac2      	subs	r2, r0, r3
 800c1c0:	d0cc      	beq.n	800c15c <_malloc_r+0x20>
 800c1c2:	1a1b      	subs	r3, r3, r0
 800c1c4:	50a3      	str	r3, [r4, r2]
 800c1c6:	e7c9      	b.n	800c15c <_malloc_r+0x20>
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	6864      	ldr	r4, [r4, #4]
 800c1cc:	e7cc      	b.n	800c168 <_malloc_r+0x2c>
 800c1ce:	1cc4      	adds	r4, r0, #3
 800c1d0:	f024 0403 	bic.w	r4, r4, #3
 800c1d4:	42a0      	cmp	r0, r4
 800c1d6:	d0e3      	beq.n	800c1a0 <_malloc_r+0x64>
 800c1d8:	1a21      	subs	r1, r4, r0
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f000 fc9c 	bl	800cb18 <_sbrk_r>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d1dd      	bne.n	800c1a0 <_malloc_r+0x64>
 800c1e4:	e7cf      	b.n	800c186 <_malloc_r+0x4a>
 800c1e6:	bf00      	nop
 800c1e8:	2000024c 	.word	0x2000024c
 800c1ec:	20000250 	.word	0x20000250

0800c1f0 <__ssputs_r>:
 800c1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	688e      	ldr	r6, [r1, #8]
 800c1f6:	429e      	cmp	r6, r3
 800c1f8:	4682      	mov	sl, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	4690      	mov	r8, r2
 800c1fe:	461f      	mov	r7, r3
 800c200:	d838      	bhi.n	800c274 <__ssputs_r+0x84>
 800c202:	898a      	ldrh	r2, [r1, #12]
 800c204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c208:	d032      	beq.n	800c270 <__ssputs_r+0x80>
 800c20a:	6825      	ldr	r5, [r4, #0]
 800c20c:	6909      	ldr	r1, [r1, #16]
 800c20e:	eba5 0901 	sub.w	r9, r5, r1
 800c212:	6965      	ldr	r5, [r4, #20]
 800c214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c21c:	3301      	adds	r3, #1
 800c21e:	444b      	add	r3, r9
 800c220:	106d      	asrs	r5, r5, #1
 800c222:	429d      	cmp	r5, r3
 800c224:	bf38      	it	cc
 800c226:	461d      	movcc	r5, r3
 800c228:	0553      	lsls	r3, r2, #21
 800c22a:	d531      	bpl.n	800c290 <__ssputs_r+0xa0>
 800c22c:	4629      	mov	r1, r5
 800c22e:	f7ff ff85 	bl	800c13c <_malloc_r>
 800c232:	4606      	mov	r6, r0
 800c234:	b950      	cbnz	r0, 800c24c <__ssputs_r+0x5c>
 800c236:	230c      	movs	r3, #12
 800c238:	f8ca 3000 	str.w	r3, [sl]
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	f04f 30ff 	mov.w	r0, #4294967295
 800c248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24c:	6921      	ldr	r1, [r4, #16]
 800c24e:	464a      	mov	r2, r9
 800c250:	f7fc fada 	bl	8008808 <memcpy>
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	6126      	str	r6, [r4, #16]
 800c262:	6165      	str	r5, [r4, #20]
 800c264:	444e      	add	r6, r9
 800c266:	eba5 0509 	sub.w	r5, r5, r9
 800c26a:	6026      	str	r6, [r4, #0]
 800c26c:	60a5      	str	r5, [r4, #8]
 800c26e:	463e      	mov	r6, r7
 800c270:	42be      	cmp	r6, r7
 800c272:	d900      	bls.n	800c276 <__ssputs_r+0x86>
 800c274:	463e      	mov	r6, r7
 800c276:	4632      	mov	r2, r6
 800c278:	6820      	ldr	r0, [r4, #0]
 800c27a:	4641      	mov	r1, r8
 800c27c:	f000 ff58 	bl	800d130 <memmove>
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	1b9b      	subs	r3, r3, r6
 800c286:	4432      	add	r2, r6
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	2000      	movs	r0, #0
 800c28e:	e7db      	b.n	800c248 <__ssputs_r+0x58>
 800c290:	462a      	mov	r2, r5
 800c292:	f000 ff73 	bl	800d17c <_realloc_r>
 800c296:	4606      	mov	r6, r0
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1e1      	bne.n	800c260 <__ssputs_r+0x70>
 800c29c:	6921      	ldr	r1, [r4, #16]
 800c29e:	4650      	mov	r0, sl
 800c2a0:	f7ff fefc 	bl	800c09c <_free_r>
 800c2a4:	e7c7      	b.n	800c236 <__ssputs_r+0x46>
	...

0800c2a8 <_svfiprintf_r>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4698      	mov	r8, r3
 800c2ae:	898b      	ldrh	r3, [r1, #12]
 800c2b0:	061b      	lsls	r3, r3, #24
 800c2b2:	b09d      	sub	sp, #116	; 0x74
 800c2b4:	4607      	mov	r7, r0
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	d50e      	bpl.n	800c2da <_svfiprintf_r+0x32>
 800c2bc:	690b      	ldr	r3, [r1, #16]
 800c2be:	b963      	cbnz	r3, 800c2da <_svfiprintf_r+0x32>
 800c2c0:	2140      	movs	r1, #64	; 0x40
 800c2c2:	f7ff ff3b 	bl	800c13c <_malloc_r>
 800c2c6:	6028      	str	r0, [r5, #0]
 800c2c8:	6128      	str	r0, [r5, #16]
 800c2ca:	b920      	cbnz	r0, 800c2d6 <_svfiprintf_r+0x2e>
 800c2cc:	230c      	movs	r3, #12
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	e0d1      	b.n	800c47a <_svfiprintf_r+0x1d2>
 800c2d6:	2340      	movs	r3, #64	; 0x40
 800c2d8:	616b      	str	r3, [r5, #20]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2de:	2320      	movs	r3, #32
 800c2e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e8:	2330      	movs	r3, #48	; 0x30
 800c2ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c494 <_svfiprintf_r+0x1ec>
 800c2ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2f2:	f04f 0901 	mov.w	r9, #1
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	469a      	mov	sl, r3
 800c2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2fe:	b10a      	cbz	r2, 800c304 <_svfiprintf_r+0x5c>
 800c300:	2a25      	cmp	r2, #37	; 0x25
 800c302:	d1f9      	bne.n	800c2f8 <_svfiprintf_r+0x50>
 800c304:	ebba 0b04 	subs.w	fp, sl, r4
 800c308:	d00b      	beq.n	800c322 <_svfiprintf_r+0x7a>
 800c30a:	465b      	mov	r3, fp
 800c30c:	4622      	mov	r2, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff ff6d 	bl	800c1f0 <__ssputs_r>
 800c316:	3001      	adds	r0, #1
 800c318:	f000 80aa 	beq.w	800c470 <_svfiprintf_r+0x1c8>
 800c31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c31e:	445a      	add	r2, fp
 800c320:	9209      	str	r2, [sp, #36]	; 0x24
 800c322:	f89a 3000 	ldrb.w	r3, [sl]
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 80a2 	beq.w	800c470 <_svfiprintf_r+0x1c8>
 800c32c:	2300      	movs	r3, #0
 800c32e:	f04f 32ff 	mov.w	r2, #4294967295
 800c332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c336:	f10a 0a01 	add.w	sl, sl, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	9307      	str	r3, [sp, #28]
 800c33e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c342:	931a      	str	r3, [sp, #104]	; 0x68
 800c344:	4654      	mov	r4, sl
 800c346:	2205      	movs	r2, #5
 800c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34c:	4851      	ldr	r0, [pc, #324]	; (800c494 <_svfiprintf_r+0x1ec>)
 800c34e:	f7f3 ff7f 	bl	8000250 <memchr>
 800c352:	9a04      	ldr	r2, [sp, #16]
 800c354:	b9d8      	cbnz	r0, 800c38e <_svfiprintf_r+0xe6>
 800c356:	06d0      	lsls	r0, r2, #27
 800c358:	bf44      	itt	mi
 800c35a:	2320      	movmi	r3, #32
 800c35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c360:	0711      	lsls	r1, r2, #28
 800c362:	bf44      	itt	mi
 800c364:	232b      	movmi	r3, #43	; 0x2b
 800c366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c36a:	f89a 3000 	ldrb.w	r3, [sl]
 800c36e:	2b2a      	cmp	r3, #42	; 0x2a
 800c370:	d015      	beq.n	800c39e <_svfiprintf_r+0xf6>
 800c372:	9a07      	ldr	r2, [sp, #28]
 800c374:	4654      	mov	r4, sl
 800c376:	2000      	movs	r0, #0
 800c378:	f04f 0c0a 	mov.w	ip, #10
 800c37c:	4621      	mov	r1, r4
 800c37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c382:	3b30      	subs	r3, #48	; 0x30
 800c384:	2b09      	cmp	r3, #9
 800c386:	d94e      	bls.n	800c426 <_svfiprintf_r+0x17e>
 800c388:	b1b0      	cbz	r0, 800c3b8 <_svfiprintf_r+0x110>
 800c38a:	9207      	str	r2, [sp, #28]
 800c38c:	e014      	b.n	800c3b8 <_svfiprintf_r+0x110>
 800c38e:	eba0 0308 	sub.w	r3, r0, r8
 800c392:	fa09 f303 	lsl.w	r3, r9, r3
 800c396:	4313      	orrs	r3, r2
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	46a2      	mov	sl, r4
 800c39c:	e7d2      	b.n	800c344 <_svfiprintf_r+0x9c>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	1d19      	adds	r1, r3, #4
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	9103      	str	r1, [sp, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	bfbb      	ittet	lt
 800c3aa:	425b      	neglt	r3, r3
 800c3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b0:	9307      	strge	r3, [sp, #28]
 800c3b2:	9307      	strlt	r3, [sp, #28]
 800c3b4:	bfb8      	it	lt
 800c3b6:	9204      	strlt	r2, [sp, #16]
 800c3b8:	7823      	ldrb	r3, [r4, #0]
 800c3ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c3bc:	d10c      	bne.n	800c3d8 <_svfiprintf_r+0x130>
 800c3be:	7863      	ldrb	r3, [r4, #1]
 800c3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c2:	d135      	bne.n	800c430 <_svfiprintf_r+0x188>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	1d1a      	adds	r2, r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	9203      	str	r2, [sp, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bfb8      	it	lt
 800c3d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3d4:	3402      	adds	r4, #2
 800c3d6:	9305      	str	r3, [sp, #20]
 800c3d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4a4 <_svfiprintf_r+0x1fc>
 800c3dc:	7821      	ldrb	r1, [r4, #0]
 800c3de:	2203      	movs	r2, #3
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	f7f3 ff35 	bl	8000250 <memchr>
 800c3e6:	b140      	cbz	r0, 800c3fa <_svfiprintf_r+0x152>
 800c3e8:	2340      	movs	r3, #64	; 0x40
 800c3ea:	eba0 000a 	sub.w	r0, r0, sl
 800c3ee:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	4303      	orrs	r3, r0
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fe:	4826      	ldr	r0, [pc, #152]	; (800c498 <_svfiprintf_r+0x1f0>)
 800c400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c404:	2206      	movs	r2, #6
 800c406:	f7f3 ff23 	bl	8000250 <memchr>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d038      	beq.n	800c480 <_svfiprintf_r+0x1d8>
 800c40e:	4b23      	ldr	r3, [pc, #140]	; (800c49c <_svfiprintf_r+0x1f4>)
 800c410:	bb1b      	cbnz	r3, 800c45a <_svfiprintf_r+0x1b2>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	3307      	adds	r3, #7
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	3308      	adds	r3, #8
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c420:	4433      	add	r3, r6
 800c422:	9309      	str	r3, [sp, #36]	; 0x24
 800c424:	e767      	b.n	800c2f6 <_svfiprintf_r+0x4e>
 800c426:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42a:	460c      	mov	r4, r1
 800c42c:	2001      	movs	r0, #1
 800c42e:	e7a5      	b.n	800c37c <_svfiprintf_r+0xd4>
 800c430:	2300      	movs	r3, #0
 800c432:	3401      	adds	r4, #1
 800c434:	9305      	str	r3, [sp, #20]
 800c436:	4619      	mov	r1, r3
 800c438:	f04f 0c0a 	mov.w	ip, #10
 800c43c:	4620      	mov	r0, r4
 800c43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c442:	3a30      	subs	r2, #48	; 0x30
 800c444:	2a09      	cmp	r2, #9
 800c446:	d903      	bls.n	800c450 <_svfiprintf_r+0x1a8>
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0c5      	beq.n	800c3d8 <_svfiprintf_r+0x130>
 800c44c:	9105      	str	r1, [sp, #20]
 800c44e:	e7c3      	b.n	800c3d8 <_svfiprintf_r+0x130>
 800c450:	fb0c 2101 	mla	r1, ip, r1, r2
 800c454:	4604      	mov	r4, r0
 800c456:	2301      	movs	r3, #1
 800c458:	e7f0      	b.n	800c43c <_svfiprintf_r+0x194>
 800c45a:	ab03      	add	r3, sp, #12
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	462a      	mov	r2, r5
 800c460:	4b0f      	ldr	r3, [pc, #60]	; (800c4a0 <_svfiprintf_r+0x1f8>)
 800c462:	a904      	add	r1, sp, #16
 800c464:	4638      	mov	r0, r7
 800c466:	f7fc fa77 	bl	8008958 <_printf_float>
 800c46a:	1c42      	adds	r2, r0, #1
 800c46c:	4606      	mov	r6, r0
 800c46e:	d1d6      	bne.n	800c41e <_svfiprintf_r+0x176>
 800c470:	89ab      	ldrh	r3, [r5, #12]
 800c472:	065b      	lsls	r3, r3, #25
 800c474:	f53f af2c 	bmi.w	800c2d0 <_svfiprintf_r+0x28>
 800c478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c47a:	b01d      	add	sp, #116	; 0x74
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	ab03      	add	r3, sp, #12
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	462a      	mov	r2, r5
 800c486:	4b06      	ldr	r3, [pc, #24]	; (800c4a0 <_svfiprintf_r+0x1f8>)
 800c488:	a904      	add	r1, sp, #16
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7fc fcf0 	bl	8008e70 <_printf_i>
 800c490:	e7eb      	b.n	800c46a <_svfiprintf_r+0x1c2>
 800c492:	bf00      	nop
 800c494:	0800dd34 	.word	0x0800dd34
 800c498:	0800dd3e 	.word	0x0800dd3e
 800c49c:	08008959 	.word	0x08008959
 800c4a0:	0800c1f1 	.word	0x0800c1f1
 800c4a4:	0800dd3a 	.word	0x0800dd3a

0800c4a8 <_sungetc_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	1c4b      	adds	r3, r1, #1
 800c4ac:	4614      	mov	r4, r2
 800c4ae:	d103      	bne.n	800c4b8 <_sungetc_r+0x10>
 800c4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	8993      	ldrh	r3, [r2, #12]
 800c4ba:	f023 0320 	bic.w	r3, r3, #32
 800c4be:	8193      	strh	r3, [r2, #12]
 800c4c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c2:	6852      	ldr	r2, [r2, #4]
 800c4c4:	b2cd      	uxtb	r5, r1
 800c4c6:	b18b      	cbz	r3, 800c4ec <_sungetc_r+0x44>
 800c4c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	dd08      	ble.n	800c4e0 <_sungetc_r+0x38>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	1e5a      	subs	r2, r3, #1
 800c4d2:	6022      	str	r2, [r4, #0]
 800c4d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c4d8:	6863      	ldr	r3, [r4, #4]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	6063      	str	r3, [r4, #4]
 800c4de:	e7e9      	b.n	800c4b4 <_sungetc_r+0xc>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	f000 fbf3 	bl	800cccc <__submore>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d0f1      	beq.n	800c4ce <_sungetc_r+0x26>
 800c4ea:	e7e1      	b.n	800c4b0 <_sungetc_r+0x8>
 800c4ec:	6921      	ldr	r1, [r4, #16]
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	b151      	cbz	r1, 800c508 <_sungetc_r+0x60>
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d208      	bcs.n	800c508 <_sungetc_r+0x60>
 800c4f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c4fa:	42a9      	cmp	r1, r5
 800c4fc:	d104      	bne.n	800c508 <_sungetc_r+0x60>
 800c4fe:	3b01      	subs	r3, #1
 800c500:	3201      	adds	r2, #1
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	6062      	str	r2, [r4, #4]
 800c506:	e7d5      	b.n	800c4b4 <_sungetc_r+0xc>
 800c508:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c510:	6363      	str	r3, [r4, #52]	; 0x34
 800c512:	2303      	movs	r3, #3
 800c514:	63a3      	str	r3, [r4, #56]	; 0x38
 800c516:	4623      	mov	r3, r4
 800c518:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	2301      	movs	r3, #1
 800c520:	e7dc      	b.n	800c4dc <_sungetc_r+0x34>

0800c522 <__ssrefill_r>:
 800c522:	b510      	push	{r4, lr}
 800c524:	460c      	mov	r4, r1
 800c526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c528:	b169      	cbz	r1, 800c546 <__ssrefill_r+0x24>
 800c52a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c52e:	4299      	cmp	r1, r3
 800c530:	d001      	beq.n	800c536 <__ssrefill_r+0x14>
 800c532:	f7ff fdb3 	bl	800c09c <_free_r>
 800c536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c538:	6063      	str	r3, [r4, #4]
 800c53a:	2000      	movs	r0, #0
 800c53c:	6360      	str	r0, [r4, #52]	; 0x34
 800c53e:	b113      	cbz	r3, 800c546 <__ssrefill_r+0x24>
 800c540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	bd10      	pop	{r4, pc}
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2300      	movs	r3, #0
 800c54c:	6063      	str	r3, [r4, #4]
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f043 0320 	orr.w	r3, r3, #32
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	f04f 30ff 	mov.w	r0, #4294967295
 800c55a:	e7f3      	b.n	800c544 <__ssrefill_r+0x22>

0800c55c <__ssvfiscanf_r>:
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	460c      	mov	r4, r1
 800c562:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c566:	2100      	movs	r1, #0
 800c568:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c56c:	49b2      	ldr	r1, [pc, #712]	; (800c838 <__ssvfiscanf_r+0x2dc>)
 800c56e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c570:	f10d 0804 	add.w	r8, sp, #4
 800c574:	49b1      	ldr	r1, [pc, #708]	; (800c83c <__ssvfiscanf_r+0x2e0>)
 800c576:	4fb2      	ldr	r7, [pc, #712]	; (800c840 <__ssvfiscanf_r+0x2e4>)
 800c578:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c844 <__ssvfiscanf_r+0x2e8>
 800c57c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c580:	4606      	mov	r6, r0
 800c582:	91a1      	str	r1, [sp, #644]	; 0x284
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	f892 a000 	ldrb.w	sl, [r2]
 800c58a:	f1ba 0f00 	cmp.w	sl, #0
 800c58e:	f000 8151 	beq.w	800c834 <__ssvfiscanf_r+0x2d8>
 800c592:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c596:	f013 0308 	ands.w	r3, r3, #8
 800c59a:	f102 0501 	add.w	r5, r2, #1
 800c59e:	d019      	beq.n	800c5d4 <__ssvfiscanf_r+0x78>
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dd0f      	ble.n	800c5c6 <__ssvfiscanf_r+0x6a>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	781a      	ldrb	r2, [r3, #0]
 800c5aa:	5cba      	ldrb	r2, [r7, r2]
 800c5ac:	0712      	lsls	r2, r2, #28
 800c5ae:	d401      	bmi.n	800c5b4 <__ssvfiscanf_r+0x58>
 800c5b0:	462a      	mov	r2, r5
 800c5b2:	e7e8      	b.n	800c586 <__ssvfiscanf_r+0x2a>
 800c5b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5b6:	3201      	adds	r2, #1
 800c5b8:	9245      	str	r2, [sp, #276]	; 0x114
 800c5ba:	6862      	ldr	r2, [r4, #4]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	3a01      	subs	r2, #1
 800c5c0:	6062      	str	r2, [r4, #4]
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	e7ec      	b.n	800c5a0 <__ssvfiscanf_r+0x44>
 800c5c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4798      	blx	r3
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d0e9      	beq.n	800c5a6 <__ssvfiscanf_r+0x4a>
 800c5d2:	e7ed      	b.n	800c5b0 <__ssvfiscanf_r+0x54>
 800c5d4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c5d8:	f040 8083 	bne.w	800c6e2 <__ssvfiscanf_r+0x186>
 800c5dc:	9341      	str	r3, [sp, #260]	; 0x104
 800c5de:	9343      	str	r3, [sp, #268]	; 0x10c
 800c5e0:	7853      	ldrb	r3, [r2, #1]
 800c5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e4:	bf02      	ittt	eq
 800c5e6:	2310      	moveq	r3, #16
 800c5e8:	1c95      	addeq	r5, r2, #2
 800c5ea:	9341      	streq	r3, [sp, #260]	; 0x104
 800c5ec:	220a      	movs	r2, #10
 800c5ee:	46ab      	mov	fp, r5
 800c5f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c5f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c5f8:	2b09      	cmp	r3, #9
 800c5fa:	d91d      	bls.n	800c638 <__ssvfiscanf_r+0xdc>
 800c5fc:	4891      	ldr	r0, [pc, #580]	; (800c844 <__ssvfiscanf_r+0x2e8>)
 800c5fe:	2203      	movs	r2, #3
 800c600:	f7f3 fe26 	bl	8000250 <memchr>
 800c604:	b140      	cbz	r0, 800c618 <__ssvfiscanf_r+0xbc>
 800c606:	2301      	movs	r3, #1
 800c608:	eba0 0009 	sub.w	r0, r0, r9
 800c60c:	fa03 f000 	lsl.w	r0, r3, r0
 800c610:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c612:	4318      	orrs	r0, r3
 800c614:	9041      	str	r0, [sp, #260]	; 0x104
 800c616:	465d      	mov	r5, fp
 800c618:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c61c:	2b78      	cmp	r3, #120	; 0x78
 800c61e:	d806      	bhi.n	800c62e <__ssvfiscanf_r+0xd2>
 800c620:	2b57      	cmp	r3, #87	; 0x57
 800c622:	d810      	bhi.n	800c646 <__ssvfiscanf_r+0xea>
 800c624:	2b25      	cmp	r3, #37	; 0x25
 800c626:	d05c      	beq.n	800c6e2 <__ssvfiscanf_r+0x186>
 800c628:	d856      	bhi.n	800c6d8 <__ssvfiscanf_r+0x17c>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d074      	beq.n	800c718 <__ssvfiscanf_r+0x1bc>
 800c62e:	2303      	movs	r3, #3
 800c630:	9347      	str	r3, [sp, #284]	; 0x11c
 800c632:	230a      	movs	r3, #10
 800c634:	9342      	str	r3, [sp, #264]	; 0x108
 800c636:	e081      	b.n	800c73c <__ssvfiscanf_r+0x1e0>
 800c638:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c63a:	fb02 1303 	mla	r3, r2, r3, r1
 800c63e:	3b30      	subs	r3, #48	; 0x30
 800c640:	9343      	str	r3, [sp, #268]	; 0x10c
 800c642:	465d      	mov	r5, fp
 800c644:	e7d3      	b.n	800c5ee <__ssvfiscanf_r+0x92>
 800c646:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c64a:	2a20      	cmp	r2, #32
 800c64c:	d8ef      	bhi.n	800c62e <__ssvfiscanf_r+0xd2>
 800c64e:	a101      	add	r1, pc, #4	; (adr r1, 800c654 <__ssvfiscanf_r+0xf8>)
 800c650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c654:	0800c727 	.word	0x0800c727
 800c658:	0800c62f 	.word	0x0800c62f
 800c65c:	0800c62f 	.word	0x0800c62f
 800c660:	0800c785 	.word	0x0800c785
 800c664:	0800c62f 	.word	0x0800c62f
 800c668:	0800c62f 	.word	0x0800c62f
 800c66c:	0800c62f 	.word	0x0800c62f
 800c670:	0800c62f 	.word	0x0800c62f
 800c674:	0800c62f 	.word	0x0800c62f
 800c678:	0800c62f 	.word	0x0800c62f
 800c67c:	0800c62f 	.word	0x0800c62f
 800c680:	0800c79b 	.word	0x0800c79b
 800c684:	0800c771 	.word	0x0800c771
 800c688:	0800c6df 	.word	0x0800c6df
 800c68c:	0800c6df 	.word	0x0800c6df
 800c690:	0800c6df 	.word	0x0800c6df
 800c694:	0800c62f 	.word	0x0800c62f
 800c698:	0800c775 	.word	0x0800c775
 800c69c:	0800c62f 	.word	0x0800c62f
 800c6a0:	0800c62f 	.word	0x0800c62f
 800c6a4:	0800c62f 	.word	0x0800c62f
 800c6a8:	0800c62f 	.word	0x0800c62f
 800c6ac:	0800c7ab 	.word	0x0800c7ab
 800c6b0:	0800c77d 	.word	0x0800c77d
 800c6b4:	0800c71f 	.word	0x0800c71f
 800c6b8:	0800c62f 	.word	0x0800c62f
 800c6bc:	0800c62f 	.word	0x0800c62f
 800c6c0:	0800c7a7 	.word	0x0800c7a7
 800c6c4:	0800c62f 	.word	0x0800c62f
 800c6c8:	0800c771 	.word	0x0800c771
 800c6cc:	0800c62f 	.word	0x0800c62f
 800c6d0:	0800c62f 	.word	0x0800c62f
 800c6d4:	0800c727 	.word	0x0800c727
 800c6d8:	3b45      	subs	r3, #69	; 0x45
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d8a7      	bhi.n	800c62e <__ssvfiscanf_r+0xd2>
 800c6de:	2305      	movs	r3, #5
 800c6e0:	e02b      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd0d      	ble.n	800c704 <__ssvfiscanf_r+0x1a8>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	4552      	cmp	r2, sl
 800c6ee:	f040 80a1 	bne.w	800c834 <__ssvfiscanf_r+0x2d8>
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	6862      	ldr	r2, [r4, #4]
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	6062      	str	r2, [r4, #4]
 800c700:	9345      	str	r3, [sp, #276]	; 0x114
 800c702:	e755      	b.n	800c5b0 <__ssvfiscanf_r+0x54>
 800c704:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c706:	4621      	mov	r1, r4
 800c708:	4630      	mov	r0, r6
 800c70a:	4798      	blx	r3
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d0eb      	beq.n	800c6e8 <__ssvfiscanf_r+0x18c>
 800c710:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c712:	2800      	cmp	r0, #0
 800c714:	f040 8084 	bne.w	800c820 <__ssvfiscanf_r+0x2c4>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	e086      	b.n	800c82c <__ssvfiscanf_r+0x2d0>
 800c71e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c720:	f042 0220 	orr.w	r2, r2, #32
 800c724:	9241      	str	r2, [sp, #260]	; 0x104
 800c726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c72c:	9241      	str	r2, [sp, #260]	; 0x104
 800c72e:	2210      	movs	r2, #16
 800c730:	2b6f      	cmp	r3, #111	; 0x6f
 800c732:	9242      	str	r2, [sp, #264]	; 0x108
 800c734:	bf34      	ite	cc
 800c736:	2303      	movcc	r3, #3
 800c738:	2304      	movcs	r3, #4
 800c73a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c73c:	6863      	ldr	r3, [r4, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	dd41      	ble.n	800c7c6 <__ssvfiscanf_r+0x26a>
 800c742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c744:	0659      	lsls	r1, r3, #25
 800c746:	d404      	bmi.n	800c752 <__ssvfiscanf_r+0x1f6>
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	5cba      	ldrb	r2, [r7, r2]
 800c74e:	0712      	lsls	r2, r2, #28
 800c750:	d440      	bmi.n	800c7d4 <__ssvfiscanf_r+0x278>
 800c752:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c754:	2b02      	cmp	r3, #2
 800c756:	dc4f      	bgt.n	800c7f8 <__ssvfiscanf_r+0x29c>
 800c758:	466b      	mov	r3, sp
 800c75a:	4622      	mov	r2, r4
 800c75c:	a941      	add	r1, sp, #260	; 0x104
 800c75e:	4630      	mov	r0, r6
 800c760:	f000 f874 	bl	800c84c <_scanf_chars>
 800c764:	2801      	cmp	r0, #1
 800c766:	d065      	beq.n	800c834 <__ssvfiscanf_r+0x2d8>
 800c768:	2802      	cmp	r0, #2
 800c76a:	f47f af21 	bne.w	800c5b0 <__ssvfiscanf_r+0x54>
 800c76e:	e7cf      	b.n	800c710 <__ssvfiscanf_r+0x1b4>
 800c770:	220a      	movs	r2, #10
 800c772:	e7dd      	b.n	800c730 <__ssvfiscanf_r+0x1d4>
 800c774:	2300      	movs	r3, #0
 800c776:	9342      	str	r3, [sp, #264]	; 0x108
 800c778:	2303      	movs	r3, #3
 800c77a:	e7de      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c77c:	2308      	movs	r3, #8
 800c77e:	9342      	str	r3, [sp, #264]	; 0x108
 800c780:	2304      	movs	r3, #4
 800c782:	e7da      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c784:	4629      	mov	r1, r5
 800c786:	4640      	mov	r0, r8
 800c788:	f000 f9d6 	bl	800cb38 <__sccl>
 800c78c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c792:	9341      	str	r3, [sp, #260]	; 0x104
 800c794:	4605      	mov	r5, r0
 800c796:	2301      	movs	r3, #1
 800c798:	e7cf      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c79a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a0:	9341      	str	r3, [sp, #260]	; 0x104
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e7c9      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e7c7      	b.n	800c73a <__ssvfiscanf_r+0x1de>
 800c7aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c7ac:	06c3      	lsls	r3, r0, #27
 800c7ae:	f53f aeff 	bmi.w	800c5b0 <__ssvfiscanf_r+0x54>
 800c7b2:	9b00      	ldr	r3, [sp, #0]
 800c7b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7b6:	1d19      	adds	r1, r3, #4
 800c7b8:	9100      	str	r1, [sp, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	07c0      	lsls	r0, r0, #31
 800c7be:	bf4c      	ite	mi
 800c7c0:	801a      	strhmi	r2, [r3, #0]
 800c7c2:	601a      	strpl	r2, [r3, #0]
 800c7c4:	e6f4      	b.n	800c5b0 <__ssvfiscanf_r+0x54>
 800c7c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4798      	blx	r3
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d0b7      	beq.n	800c742 <__ssvfiscanf_r+0x1e6>
 800c7d2:	e79d      	b.n	800c710 <__ssvfiscanf_r+0x1b4>
 800c7d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	9245      	str	r2, [sp, #276]	; 0x114
 800c7da:	6862      	ldr	r2, [r4, #4]
 800c7dc:	3a01      	subs	r2, #1
 800c7de:	2a00      	cmp	r2, #0
 800c7e0:	6062      	str	r2, [r4, #4]
 800c7e2:	dd02      	ble.n	800c7ea <__ssvfiscanf_r+0x28e>
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	6023      	str	r3, [r4, #0]
 800c7e8:	e7ae      	b.n	800c748 <__ssvfiscanf_r+0x1ec>
 800c7ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4798      	blx	r3
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d0a8      	beq.n	800c748 <__ssvfiscanf_r+0x1ec>
 800c7f6:	e78b      	b.n	800c710 <__ssvfiscanf_r+0x1b4>
 800c7f8:	2b04      	cmp	r3, #4
 800c7fa:	dc06      	bgt.n	800c80a <__ssvfiscanf_r+0x2ae>
 800c7fc:	466b      	mov	r3, sp
 800c7fe:	4622      	mov	r2, r4
 800c800:	a941      	add	r1, sp, #260	; 0x104
 800c802:	4630      	mov	r0, r6
 800c804:	f000 f87a 	bl	800c8fc <_scanf_i>
 800c808:	e7ac      	b.n	800c764 <__ssvfiscanf_r+0x208>
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <__ssvfiscanf_r+0x2ec>)
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f43f aecf 	beq.w	800c5b0 <__ssvfiscanf_r+0x54>
 800c812:	466b      	mov	r3, sp
 800c814:	4622      	mov	r2, r4
 800c816:	a941      	add	r1, sp, #260	; 0x104
 800c818:	4630      	mov	r0, r6
 800c81a:	f7fc fc4f 	bl	80090bc <_scanf_float>
 800c81e:	e7a1      	b.n	800c764 <__ssvfiscanf_r+0x208>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c826:	bf18      	it	ne
 800c828:	f04f 30ff 	movne.w	r0, #4294967295
 800c82c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c834:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c836:	e7f9      	b.n	800c82c <__ssvfiscanf_r+0x2d0>
 800c838:	0800c4a9 	.word	0x0800c4a9
 800c83c:	0800c523 	.word	0x0800c523
 800c840:	0800d931 	.word	0x0800d931
 800c844:	0800dd3a 	.word	0x0800dd3a
 800c848:	080090bd 	.word	0x080090bd

0800c84c <_scanf_chars>:
 800c84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c850:	4615      	mov	r5, r2
 800c852:	688a      	ldr	r2, [r1, #8]
 800c854:	4680      	mov	r8, r0
 800c856:	460c      	mov	r4, r1
 800c858:	b932      	cbnz	r2, 800c868 <_scanf_chars+0x1c>
 800c85a:	698a      	ldr	r2, [r1, #24]
 800c85c:	2a00      	cmp	r2, #0
 800c85e:	bf0c      	ite	eq
 800c860:	2201      	moveq	r2, #1
 800c862:	f04f 32ff 	movne.w	r2, #4294967295
 800c866:	608a      	str	r2, [r1, #8]
 800c868:	6822      	ldr	r2, [r4, #0]
 800c86a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c8f8 <_scanf_chars+0xac>
 800c86e:	06d1      	lsls	r1, r2, #27
 800c870:	bf5f      	itttt	pl
 800c872:	681a      	ldrpl	r2, [r3, #0]
 800c874:	1d11      	addpl	r1, r2, #4
 800c876:	6019      	strpl	r1, [r3, #0]
 800c878:	6816      	ldrpl	r6, [r2, #0]
 800c87a:	2700      	movs	r7, #0
 800c87c:	69a0      	ldr	r0, [r4, #24]
 800c87e:	b188      	cbz	r0, 800c8a4 <_scanf_chars+0x58>
 800c880:	2801      	cmp	r0, #1
 800c882:	d107      	bne.n	800c894 <_scanf_chars+0x48>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	781a      	ldrb	r2, [r3, #0]
 800c888:	6963      	ldr	r3, [r4, #20]
 800c88a:	5c9b      	ldrb	r3, [r3, r2]
 800c88c:	b953      	cbnz	r3, 800c8a4 <_scanf_chars+0x58>
 800c88e:	bb27      	cbnz	r7, 800c8da <_scanf_chars+0x8e>
 800c890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c894:	2802      	cmp	r0, #2
 800c896:	d120      	bne.n	800c8da <_scanf_chars+0x8e>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c8a0:	071b      	lsls	r3, r3, #28
 800c8a2:	d41a      	bmi.n	800c8da <_scanf_chars+0x8e>
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	06da      	lsls	r2, r3, #27
 800c8a8:	bf5e      	ittt	pl
 800c8aa:	682b      	ldrpl	r3, [r5, #0]
 800c8ac:	781b      	ldrbpl	r3, [r3, #0]
 800c8ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c8b2:	682a      	ldr	r2, [r5, #0]
 800c8b4:	686b      	ldr	r3, [r5, #4]
 800c8b6:	3201      	adds	r2, #1
 800c8b8:	602a      	str	r2, [r5, #0]
 800c8ba:	68a2      	ldr	r2, [r4, #8]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	606b      	str	r3, [r5, #4]
 800c8c2:	3701      	adds	r7, #1
 800c8c4:	60a2      	str	r2, [r4, #8]
 800c8c6:	b142      	cbz	r2, 800c8da <_scanf_chars+0x8e>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	dcd7      	bgt.n	800c87c <_scanf_chars+0x30>
 800c8cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	4798      	blx	r3
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d0d0      	beq.n	800c87c <_scanf_chars+0x30>
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	f013 0310 	ands.w	r3, r3, #16
 800c8e0:	d105      	bne.n	800c8ee <_scanf_chars+0xa2>
 800c8e2:	68e2      	ldr	r2, [r4, #12]
 800c8e4:	3201      	adds	r2, #1
 800c8e6:	60e2      	str	r2, [r4, #12]
 800c8e8:	69a2      	ldr	r2, [r4, #24]
 800c8ea:	b102      	cbz	r2, 800c8ee <_scanf_chars+0xa2>
 800c8ec:	7033      	strb	r3, [r6, #0]
 800c8ee:	6923      	ldr	r3, [r4, #16]
 800c8f0:	441f      	add	r7, r3
 800c8f2:	6127      	str	r7, [r4, #16]
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	e7cb      	b.n	800c890 <_scanf_chars+0x44>
 800c8f8:	0800d931 	.word	0x0800d931

0800c8fc <_scanf_i>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	4698      	mov	r8, r3
 800c902:	4b74      	ldr	r3, [pc, #464]	; (800cad4 <_scanf_i+0x1d8>)
 800c904:	460c      	mov	r4, r1
 800c906:	4682      	mov	sl, r0
 800c908:	4616      	mov	r6, r2
 800c90a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c90e:	b087      	sub	sp, #28
 800c910:	ab03      	add	r3, sp, #12
 800c912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c916:	4b70      	ldr	r3, [pc, #448]	; (800cad8 <_scanf_i+0x1dc>)
 800c918:	69a1      	ldr	r1, [r4, #24]
 800c91a:	4a70      	ldr	r2, [pc, #448]	; (800cadc <_scanf_i+0x1e0>)
 800c91c:	2903      	cmp	r1, #3
 800c91e:	bf18      	it	ne
 800c920:	461a      	movne	r2, r3
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	9201      	str	r2, [sp, #4]
 800c926:	1e5a      	subs	r2, r3, #1
 800c928:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c92c:	bf88      	it	hi
 800c92e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c932:	4627      	mov	r7, r4
 800c934:	bf82      	ittt	hi
 800c936:	eb03 0905 	addhi.w	r9, r3, r5
 800c93a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c93e:	60a3      	strhi	r3, [r4, #8]
 800c940:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c944:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c948:	bf98      	it	ls
 800c94a:	f04f 0900 	movls.w	r9, #0
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	463d      	mov	r5, r7
 800c952:	f04f 0b00 	mov.w	fp, #0
 800c956:	6831      	ldr	r1, [r6, #0]
 800c958:	ab03      	add	r3, sp, #12
 800c95a:	7809      	ldrb	r1, [r1, #0]
 800c95c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c960:	2202      	movs	r2, #2
 800c962:	f7f3 fc75 	bl	8000250 <memchr>
 800c966:	b328      	cbz	r0, 800c9b4 <_scanf_i+0xb8>
 800c968:	f1bb 0f01 	cmp.w	fp, #1
 800c96c:	d159      	bne.n	800ca22 <_scanf_i+0x126>
 800c96e:	6862      	ldr	r2, [r4, #4]
 800c970:	b92a      	cbnz	r2, 800c97e <_scanf_i+0x82>
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	2308      	movs	r3, #8
 800c976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c97a:	6063      	str	r3, [r4, #4]
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	68a2      	ldr	r2, [r4, #8]
 800c988:	1e51      	subs	r1, r2, #1
 800c98a:	60a1      	str	r1, [r4, #8]
 800c98c:	b192      	cbz	r2, 800c9b4 <_scanf_i+0xb8>
 800c98e:	6832      	ldr	r2, [r6, #0]
 800c990:	1c51      	adds	r1, r2, #1
 800c992:	6031      	str	r1, [r6, #0]
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	f805 2b01 	strb.w	r2, [r5], #1
 800c99a:	6872      	ldr	r2, [r6, #4]
 800c99c:	3a01      	subs	r2, #1
 800c99e:	2a00      	cmp	r2, #0
 800c9a0:	6072      	str	r2, [r6, #4]
 800c9a2:	dc07      	bgt.n	800c9b4 <_scanf_i+0xb8>
 800c9a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4650      	mov	r0, sl
 800c9ac:	4790      	blx	r2
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8085 	bne.w	800cabe <_scanf_i+0x1c2>
 800c9b4:	f10b 0b01 	add.w	fp, fp, #1
 800c9b8:	f1bb 0f03 	cmp.w	fp, #3
 800c9bc:	d1cb      	bne.n	800c956 <_scanf_i+0x5a>
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	b90b      	cbnz	r3, 800c9c6 <_scanf_i+0xca>
 800c9c2:	230a      	movs	r3, #10
 800c9c4:	6063      	str	r3, [r4, #4]
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	4945      	ldr	r1, [pc, #276]	; (800cae0 <_scanf_i+0x1e4>)
 800c9ca:	6960      	ldr	r0, [r4, #20]
 800c9cc:	1ac9      	subs	r1, r1, r3
 800c9ce:	f000 f8b3 	bl	800cb38 <__sccl>
 800c9d2:	f04f 0b00 	mov.w	fp, #0
 800c9d6:	68a3      	ldr	r3, [r4, #8]
 800c9d8:	6822      	ldr	r2, [r4, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d03d      	beq.n	800ca5a <_scanf_i+0x15e>
 800c9de:	6831      	ldr	r1, [r6, #0]
 800c9e0:	6960      	ldr	r0, [r4, #20]
 800c9e2:	f891 c000 	ldrb.w	ip, [r1]
 800c9e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d035      	beq.n	800ca5a <_scanf_i+0x15e>
 800c9ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c9f2:	d124      	bne.n	800ca3e <_scanf_i+0x142>
 800c9f4:	0510      	lsls	r0, r2, #20
 800c9f6:	d522      	bpl.n	800ca3e <_scanf_i+0x142>
 800c9f8:	f10b 0b01 	add.w	fp, fp, #1
 800c9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ca00:	d003      	beq.n	800ca0a <_scanf_i+0x10e>
 800ca02:	3301      	adds	r3, #1
 800ca04:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca08:	60a3      	str	r3, [r4, #8]
 800ca0a:	6873      	ldr	r3, [r6, #4]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	6073      	str	r3, [r6, #4]
 800ca12:	dd1b      	ble.n	800ca4c <_scanf_i+0x150>
 800ca14:	6833      	ldr	r3, [r6, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	6033      	str	r3, [r6, #0]
 800ca1a:	68a3      	ldr	r3, [r4, #8]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	60a3      	str	r3, [r4, #8]
 800ca20:	e7d9      	b.n	800c9d6 <_scanf_i+0xda>
 800ca22:	f1bb 0f02 	cmp.w	fp, #2
 800ca26:	d1ae      	bne.n	800c986 <_scanf_i+0x8a>
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca32:	d1bf      	bne.n	800c9b4 <_scanf_i+0xb8>
 800ca34:	2310      	movs	r3, #16
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca3c:	e7a2      	b.n	800c984 <_scanf_i+0x88>
 800ca3e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca42:	6022      	str	r2, [r4, #0]
 800ca44:	780b      	ldrb	r3, [r1, #0]
 800ca46:	f805 3b01 	strb.w	r3, [r5], #1
 800ca4a:	e7de      	b.n	800ca0a <_scanf_i+0x10e>
 800ca4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca50:	4631      	mov	r1, r6
 800ca52:	4650      	mov	r0, sl
 800ca54:	4798      	blx	r3
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d0df      	beq.n	800ca1a <_scanf_i+0x11e>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	05d9      	lsls	r1, r3, #23
 800ca5e:	d50d      	bpl.n	800ca7c <_scanf_i+0x180>
 800ca60:	42bd      	cmp	r5, r7
 800ca62:	d909      	bls.n	800ca78 <_scanf_i+0x17c>
 800ca64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4798      	blx	r3
 800ca72:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca76:	464d      	mov	r5, r9
 800ca78:	42bd      	cmp	r5, r7
 800ca7a:	d028      	beq.n	800cace <_scanf_i+0x1d2>
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	f012 0210 	ands.w	r2, r2, #16
 800ca82:	d113      	bne.n	800caac <_scanf_i+0x1b0>
 800ca84:	702a      	strb	r2, [r5, #0]
 800ca86:	6863      	ldr	r3, [r4, #4]
 800ca88:	9e01      	ldr	r6, [sp, #4]
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	4650      	mov	r0, sl
 800ca8e:	47b0      	blx	r6
 800ca90:	f8d8 3000 	ldr.w	r3, [r8]
 800ca94:	6821      	ldr	r1, [r4, #0]
 800ca96:	1d1a      	adds	r2, r3, #4
 800ca98:	f8c8 2000 	str.w	r2, [r8]
 800ca9c:	f011 0f20 	tst.w	r1, #32
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	d00f      	beq.n	800cac4 <_scanf_i+0x1c8>
 800caa4:	6018      	str	r0, [r3, #0]
 800caa6:	68e3      	ldr	r3, [r4, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	60e3      	str	r3, [r4, #12]
 800caac:	1bed      	subs	r5, r5, r7
 800caae:	44ab      	add	fp, r5
 800cab0:	6925      	ldr	r5, [r4, #16]
 800cab2:	445d      	add	r5, fp
 800cab4:	6125      	str	r5, [r4, #16]
 800cab6:	2000      	movs	r0, #0
 800cab8:	b007      	add	sp, #28
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	f04f 0b00 	mov.w	fp, #0
 800cac2:	e7ca      	b.n	800ca5a <_scanf_i+0x15e>
 800cac4:	07ca      	lsls	r2, r1, #31
 800cac6:	bf4c      	ite	mi
 800cac8:	8018      	strhmi	r0, [r3, #0]
 800caca:	6018      	strpl	r0, [r3, #0]
 800cacc:	e7eb      	b.n	800caa6 <_scanf_i+0x1aa>
 800cace:	2001      	movs	r0, #1
 800cad0:	e7f2      	b.n	800cab8 <_scanf_i+0x1bc>
 800cad2:	bf00      	nop
 800cad4:	0800d90c 	.word	0x0800d90c
 800cad8:	0800ccc9 	.word	0x0800ccc9
 800cadc:	0800a2e9 	.word	0x0800a2e9
 800cae0:	0800dd5e 	.word	0x0800dd5e

0800cae4 <_read_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d07      	ldr	r5, [pc, #28]	; (800cb04 <_read_r+0x20>)
 800cae8:	4604      	mov	r4, r0
 800caea:	4608      	mov	r0, r1
 800caec:	4611      	mov	r1, r2
 800caee:	2200      	movs	r2, #0
 800caf0:	602a      	str	r2, [r5, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f7f5 ffd8 	bl	8002aa8 <_read>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_read_r+0x1e>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_read_r+0x1e>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	200008c8 	.word	0x200008c8

0800cb08 <nan>:
 800cb08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb10 <nan+0x8>
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	00000000 	.word	0x00000000
 800cb14:	7ff80000 	.word	0x7ff80000

0800cb18 <_sbrk_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d06      	ldr	r5, [pc, #24]	; (800cb34 <_sbrk_r+0x1c>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f6 f82e 	bl	8002b84 <_sbrk>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_sbrk_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_sbrk_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	200008c8 	.word	0x200008c8

0800cb38 <__sccl>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	780b      	ldrb	r3, [r1, #0]
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	2b5e      	cmp	r3, #94	; 0x5e
 800cb40:	bf0b      	itete	eq
 800cb42:	784b      	ldrbeq	r3, [r1, #1]
 800cb44:	1c48      	addne	r0, r1, #1
 800cb46:	1c88      	addeq	r0, r1, #2
 800cb48:	2200      	movne	r2, #0
 800cb4a:	bf08      	it	eq
 800cb4c:	2201      	moveq	r2, #1
 800cb4e:	1e61      	subs	r1, r4, #1
 800cb50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb54:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cb58:	42a9      	cmp	r1, r5
 800cb5a:	d1fb      	bne.n	800cb54 <__sccl+0x1c>
 800cb5c:	b90b      	cbnz	r3, 800cb62 <__sccl+0x2a>
 800cb5e:	3801      	subs	r0, #1
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
 800cb62:	f082 0101 	eor.w	r1, r2, #1
 800cb66:	54e1      	strb	r1, [r4, r3]
 800cb68:	1c42      	adds	r2, r0, #1
 800cb6a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800cb6e:	2d2d      	cmp	r5, #45	; 0x2d
 800cb70:	f102 36ff 	add.w	r6, r2, #4294967295
 800cb74:	4610      	mov	r0, r2
 800cb76:	d006      	beq.n	800cb86 <__sccl+0x4e>
 800cb78:	2d5d      	cmp	r5, #93	; 0x5d
 800cb7a:	d0f1      	beq.n	800cb60 <__sccl+0x28>
 800cb7c:	b90d      	cbnz	r5, 800cb82 <__sccl+0x4a>
 800cb7e:	4630      	mov	r0, r6
 800cb80:	e7ee      	b.n	800cb60 <__sccl+0x28>
 800cb82:	462b      	mov	r3, r5
 800cb84:	e7ef      	b.n	800cb66 <__sccl+0x2e>
 800cb86:	7816      	ldrb	r6, [r2, #0]
 800cb88:	2e5d      	cmp	r6, #93	; 0x5d
 800cb8a:	d0fa      	beq.n	800cb82 <__sccl+0x4a>
 800cb8c:	42b3      	cmp	r3, r6
 800cb8e:	dcf8      	bgt.n	800cb82 <__sccl+0x4a>
 800cb90:	4618      	mov	r0, r3
 800cb92:	3001      	adds	r0, #1
 800cb94:	4286      	cmp	r6, r0
 800cb96:	5421      	strb	r1, [r4, r0]
 800cb98:	dcfb      	bgt.n	800cb92 <__sccl+0x5a>
 800cb9a:	43d8      	mvns	r0, r3
 800cb9c:	4430      	add	r0, r6
 800cb9e:	1c5d      	adds	r5, r3, #1
 800cba0:	42b3      	cmp	r3, r6
 800cba2:	bfa8      	it	ge
 800cba4:	2000      	movge	r0, #0
 800cba6:	182b      	adds	r3, r5, r0
 800cba8:	3202      	adds	r2, #2
 800cbaa:	e7de      	b.n	800cb6a <__sccl+0x32>

0800cbac <strncmp>:
 800cbac:	b510      	push	{r4, lr}
 800cbae:	b16a      	cbz	r2, 800cbcc <strncmp+0x20>
 800cbb0:	3901      	subs	r1, #1
 800cbb2:	1884      	adds	r4, r0, r2
 800cbb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cbb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d103      	bne.n	800cbc8 <strncmp+0x1c>
 800cbc0:	42a0      	cmp	r0, r4
 800cbc2:	d001      	beq.n	800cbc8 <strncmp+0x1c>
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1f5      	bne.n	800cbb4 <strncmp+0x8>
 800cbc8:	1a98      	subs	r0, r3, r2
 800cbca:	bd10      	pop	{r4, pc}
 800cbcc:	4610      	mov	r0, r2
 800cbce:	e7fc      	b.n	800cbca <strncmp+0x1e>

0800cbd0 <_strtoul_l.isra.0>:
 800cbd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbd4:	4e3b      	ldr	r6, [pc, #236]	; (800ccc4 <_strtoul_l.isra.0+0xf4>)
 800cbd6:	4686      	mov	lr, r0
 800cbd8:	468c      	mov	ip, r1
 800cbda:	4660      	mov	r0, ip
 800cbdc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cbe0:	5da5      	ldrb	r5, [r4, r6]
 800cbe2:	f015 0508 	ands.w	r5, r5, #8
 800cbe6:	d1f8      	bne.n	800cbda <_strtoul_l.isra.0+0xa>
 800cbe8:	2c2d      	cmp	r4, #45	; 0x2d
 800cbea:	d134      	bne.n	800cc56 <_strtoul_l.isra.0+0x86>
 800cbec:	f89c 4000 	ldrb.w	r4, [ip]
 800cbf0:	f04f 0801 	mov.w	r8, #1
 800cbf4:	f100 0c02 	add.w	ip, r0, #2
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d05e      	beq.n	800ccba <_strtoul_l.isra.0+0xea>
 800cbfc:	2b10      	cmp	r3, #16
 800cbfe:	d10c      	bne.n	800cc1a <_strtoul_l.isra.0+0x4a>
 800cc00:	2c30      	cmp	r4, #48	; 0x30
 800cc02:	d10a      	bne.n	800cc1a <_strtoul_l.isra.0+0x4a>
 800cc04:	f89c 0000 	ldrb.w	r0, [ip]
 800cc08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc0c:	2858      	cmp	r0, #88	; 0x58
 800cc0e:	d14f      	bne.n	800ccb0 <_strtoul_l.isra.0+0xe0>
 800cc10:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800cc14:	2310      	movs	r3, #16
 800cc16:	f10c 0c02 	add.w	ip, ip, #2
 800cc1a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc1e:	2500      	movs	r5, #0
 800cc20:	fbb7 f7f3 	udiv	r7, r7, r3
 800cc24:	fb03 f907 	mul.w	r9, r3, r7
 800cc28:	ea6f 0909 	mvn.w	r9, r9
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800cc32:	2e09      	cmp	r6, #9
 800cc34:	d818      	bhi.n	800cc68 <_strtoul_l.isra.0+0x98>
 800cc36:	4634      	mov	r4, r6
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	dd24      	ble.n	800cc86 <_strtoul_l.isra.0+0xb6>
 800cc3c:	2d00      	cmp	r5, #0
 800cc3e:	db1f      	blt.n	800cc80 <_strtoul_l.isra.0+0xb0>
 800cc40:	4287      	cmp	r7, r0
 800cc42:	d31d      	bcc.n	800cc80 <_strtoul_l.isra.0+0xb0>
 800cc44:	d101      	bne.n	800cc4a <_strtoul_l.isra.0+0x7a>
 800cc46:	45a1      	cmp	r9, r4
 800cc48:	db1a      	blt.n	800cc80 <_strtoul_l.isra.0+0xb0>
 800cc4a:	fb00 4003 	mla	r0, r0, r3, r4
 800cc4e:	2501      	movs	r5, #1
 800cc50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cc54:	e7eb      	b.n	800cc2e <_strtoul_l.isra.0+0x5e>
 800cc56:	2c2b      	cmp	r4, #43	; 0x2b
 800cc58:	bf08      	it	eq
 800cc5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800cc5e:	46a8      	mov	r8, r5
 800cc60:	bf08      	it	eq
 800cc62:	f100 0c02 	addeq.w	ip, r0, #2
 800cc66:	e7c7      	b.n	800cbf8 <_strtoul_l.isra.0+0x28>
 800cc68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800cc6c:	2e19      	cmp	r6, #25
 800cc6e:	d801      	bhi.n	800cc74 <_strtoul_l.isra.0+0xa4>
 800cc70:	3c37      	subs	r4, #55	; 0x37
 800cc72:	e7e1      	b.n	800cc38 <_strtoul_l.isra.0+0x68>
 800cc74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800cc78:	2e19      	cmp	r6, #25
 800cc7a:	d804      	bhi.n	800cc86 <_strtoul_l.isra.0+0xb6>
 800cc7c:	3c57      	subs	r4, #87	; 0x57
 800cc7e:	e7db      	b.n	800cc38 <_strtoul_l.isra.0+0x68>
 800cc80:	f04f 35ff 	mov.w	r5, #4294967295
 800cc84:	e7e4      	b.n	800cc50 <_strtoul_l.isra.0+0x80>
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	da07      	bge.n	800cc9a <_strtoul_l.isra.0+0xca>
 800cc8a:	2322      	movs	r3, #34	; 0x22
 800cc8c:	f8ce 3000 	str.w	r3, [lr]
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	b942      	cbnz	r2, 800cca8 <_strtoul_l.isra.0+0xd8>
 800cc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc9a:	f1b8 0f00 	cmp.w	r8, #0
 800cc9e:	d000      	beq.n	800cca2 <_strtoul_l.isra.0+0xd2>
 800cca0:	4240      	negs	r0, r0
 800cca2:	2a00      	cmp	r2, #0
 800cca4:	d0f7      	beq.n	800cc96 <_strtoul_l.isra.0+0xc6>
 800cca6:	b10d      	cbz	r5, 800ccac <_strtoul_l.isra.0+0xdc>
 800cca8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ccac:	6011      	str	r1, [r2, #0]
 800ccae:	e7f2      	b.n	800cc96 <_strtoul_l.isra.0+0xc6>
 800ccb0:	2430      	movs	r4, #48	; 0x30
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1b1      	bne.n	800cc1a <_strtoul_l.isra.0+0x4a>
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	e7af      	b.n	800cc1a <_strtoul_l.isra.0+0x4a>
 800ccba:	2c30      	cmp	r4, #48	; 0x30
 800ccbc:	d0a2      	beq.n	800cc04 <_strtoul_l.isra.0+0x34>
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	e7ab      	b.n	800cc1a <_strtoul_l.isra.0+0x4a>
 800ccc2:	bf00      	nop
 800ccc4:	0800d931 	.word	0x0800d931

0800ccc8 <_strtoul_r>:
 800ccc8:	f7ff bf82 	b.w	800cbd0 <_strtoul_l.isra.0>

0800cccc <__submore>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d11d      	bne.n	800cd18 <__submore+0x4c>
 800ccdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cce0:	f7ff fa2c 	bl	800c13c <_malloc_r>
 800cce4:	b918      	cbnz	r0, 800ccee <__submore+0x22>
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ccf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ccf8:	6360      	str	r0, [r4, #52]	; 0x34
 800ccfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ccfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd12:	6020      	str	r0, [r4, #0]
 800cd14:	2000      	movs	r0, #0
 800cd16:	e7e8      	b.n	800ccea <__submore+0x1e>
 800cd18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd1a:	0077      	lsls	r7, r6, #1
 800cd1c:	463a      	mov	r2, r7
 800cd1e:	f000 fa2d 	bl	800d17c <_realloc_r>
 800cd22:	4605      	mov	r5, r0
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d0de      	beq.n	800cce6 <__submore+0x1a>
 800cd28:	eb00 0806 	add.w	r8, r0, r6
 800cd2c:	4601      	mov	r1, r0
 800cd2e:	4632      	mov	r2, r6
 800cd30:	4640      	mov	r0, r8
 800cd32:	f7fb fd69 	bl	8008808 <memcpy>
 800cd36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd3a:	f8c4 8000 	str.w	r8, [r4]
 800cd3e:	e7e9      	b.n	800cd14 <__submore+0x48>

0800cd40 <__ascii_wctomb>:
 800cd40:	b149      	cbz	r1, 800cd56 <__ascii_wctomb+0x16>
 800cd42:	2aff      	cmp	r2, #255	; 0xff
 800cd44:	bf85      	ittet	hi
 800cd46:	238a      	movhi	r3, #138	; 0x8a
 800cd48:	6003      	strhi	r3, [r0, #0]
 800cd4a:	700a      	strbls	r2, [r1, #0]
 800cd4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd50:	bf98      	it	ls
 800cd52:	2001      	movls	r0, #1
 800cd54:	4770      	bx	lr
 800cd56:	4608      	mov	r0, r1
 800cd58:	4770      	bx	lr
	...

0800cd5c <__assert_func>:
 800cd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd5e:	4614      	mov	r4, r2
 800cd60:	461a      	mov	r2, r3
 800cd62:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <__assert_func+0x2c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4605      	mov	r5, r0
 800cd68:	68d8      	ldr	r0, [r3, #12]
 800cd6a:	b14c      	cbz	r4, 800cd80 <__assert_func+0x24>
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <__assert_func+0x30>)
 800cd6e:	9100      	str	r1, [sp, #0]
 800cd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd74:	4906      	ldr	r1, [pc, #24]	; (800cd90 <__assert_func+0x34>)
 800cd76:	462b      	mov	r3, r5
 800cd78:	f000 f9a6 	bl	800d0c8 <fiprintf>
 800cd7c:	f000 fc3e 	bl	800d5fc <abort>
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <__assert_func+0x38>)
 800cd82:	461c      	mov	r4, r3
 800cd84:	e7f3      	b.n	800cd6e <__assert_func+0x12>
 800cd86:	bf00      	nop
 800cd88:	20000058 	.word	0x20000058
 800cd8c:	0800dd60 	.word	0x0800dd60
 800cd90:	0800dd6d 	.word	0x0800dd6d
 800cd94:	0800dd9b 	.word	0x0800dd9b

0800cd98 <__sflush_r>:
 800cd98:	898a      	ldrh	r2, [r1, #12]
 800cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9e:	4605      	mov	r5, r0
 800cda0:	0710      	lsls	r0, r2, #28
 800cda2:	460c      	mov	r4, r1
 800cda4:	d458      	bmi.n	800ce58 <__sflush_r+0xc0>
 800cda6:	684b      	ldr	r3, [r1, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	dc05      	bgt.n	800cdb8 <__sflush_r+0x20>
 800cdac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dc02      	bgt.n	800cdb8 <__sflush_r+0x20>
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdba:	2e00      	cmp	r6, #0
 800cdbc:	d0f9      	beq.n	800cdb2 <__sflush_r+0x1a>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdc4:	682f      	ldr	r7, [r5, #0]
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	d032      	beq.n	800ce30 <__sflush_r+0x98>
 800cdca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	075a      	lsls	r2, r3, #29
 800cdd0:	d505      	bpl.n	800cdde <__sflush_r+0x46>
 800cdd2:	6863      	ldr	r3, [r4, #4]
 800cdd4:	1ac0      	subs	r0, r0, r3
 800cdd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdd8:	b10b      	cbz	r3, 800cdde <__sflush_r+0x46>
 800cdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cddc:	1ac0      	subs	r0, r0, r3
 800cdde:	2300      	movs	r3, #0
 800cde0:	4602      	mov	r2, r0
 800cde2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cde4:	6a21      	ldr	r1, [r4, #32]
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b0      	blx	r6
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	d106      	bne.n	800cdfe <__sflush_r+0x66>
 800cdf0:	6829      	ldr	r1, [r5, #0]
 800cdf2:	291d      	cmp	r1, #29
 800cdf4:	d82c      	bhi.n	800ce50 <__sflush_r+0xb8>
 800cdf6:	4a2a      	ldr	r2, [pc, #168]	; (800cea0 <__sflush_r+0x108>)
 800cdf8:	40ca      	lsrs	r2, r1
 800cdfa:	07d6      	lsls	r6, r2, #31
 800cdfc:	d528      	bpl.n	800ce50 <__sflush_r+0xb8>
 800cdfe:	2200      	movs	r2, #0
 800ce00:	6062      	str	r2, [r4, #4]
 800ce02:	04d9      	lsls	r1, r3, #19
 800ce04:	6922      	ldr	r2, [r4, #16]
 800ce06:	6022      	str	r2, [r4, #0]
 800ce08:	d504      	bpl.n	800ce14 <__sflush_r+0x7c>
 800ce0a:	1c42      	adds	r2, r0, #1
 800ce0c:	d101      	bne.n	800ce12 <__sflush_r+0x7a>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	b903      	cbnz	r3, 800ce14 <__sflush_r+0x7c>
 800ce12:	6560      	str	r0, [r4, #84]	; 0x54
 800ce14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce16:	602f      	str	r7, [r5, #0]
 800ce18:	2900      	cmp	r1, #0
 800ce1a:	d0ca      	beq.n	800cdb2 <__sflush_r+0x1a>
 800ce1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce20:	4299      	cmp	r1, r3
 800ce22:	d002      	beq.n	800ce2a <__sflush_r+0x92>
 800ce24:	4628      	mov	r0, r5
 800ce26:	f7ff f939 	bl	800c09c <_free_r>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ce2e:	e7c1      	b.n	800cdb4 <__sflush_r+0x1c>
 800ce30:	6a21      	ldr	r1, [r4, #32]
 800ce32:	2301      	movs	r3, #1
 800ce34:	4628      	mov	r0, r5
 800ce36:	47b0      	blx	r6
 800ce38:	1c41      	adds	r1, r0, #1
 800ce3a:	d1c7      	bne.n	800cdcc <__sflush_r+0x34>
 800ce3c:	682b      	ldr	r3, [r5, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0c4      	beq.n	800cdcc <__sflush_r+0x34>
 800ce42:	2b1d      	cmp	r3, #29
 800ce44:	d001      	beq.n	800ce4a <__sflush_r+0xb2>
 800ce46:	2b16      	cmp	r3, #22
 800ce48:	d101      	bne.n	800ce4e <__sflush_r+0xb6>
 800ce4a:	602f      	str	r7, [r5, #0]
 800ce4c:	e7b1      	b.n	800cdb2 <__sflush_r+0x1a>
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	e7ad      	b.n	800cdb4 <__sflush_r+0x1c>
 800ce58:	690f      	ldr	r7, [r1, #16]
 800ce5a:	2f00      	cmp	r7, #0
 800ce5c:	d0a9      	beq.n	800cdb2 <__sflush_r+0x1a>
 800ce5e:	0793      	lsls	r3, r2, #30
 800ce60:	680e      	ldr	r6, [r1, #0]
 800ce62:	bf08      	it	eq
 800ce64:	694b      	ldreq	r3, [r1, #20]
 800ce66:	600f      	str	r7, [r1, #0]
 800ce68:	bf18      	it	ne
 800ce6a:	2300      	movne	r3, #0
 800ce6c:	eba6 0807 	sub.w	r8, r6, r7
 800ce70:	608b      	str	r3, [r1, #8]
 800ce72:	f1b8 0f00 	cmp.w	r8, #0
 800ce76:	dd9c      	ble.n	800cdb2 <__sflush_r+0x1a>
 800ce78:	6a21      	ldr	r1, [r4, #32]
 800ce7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce7c:	4643      	mov	r3, r8
 800ce7e:	463a      	mov	r2, r7
 800ce80:	4628      	mov	r0, r5
 800ce82:	47b0      	blx	r6
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dc06      	bgt.n	800ce96 <__sflush_r+0xfe>
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e78e      	b.n	800cdb4 <__sflush_r+0x1c>
 800ce96:	4407      	add	r7, r0
 800ce98:	eba8 0800 	sub.w	r8, r8, r0
 800ce9c:	e7e9      	b.n	800ce72 <__sflush_r+0xda>
 800ce9e:	bf00      	nop
 800cea0:	20400001 	.word	0x20400001

0800cea4 <_fflush_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	690b      	ldr	r3, [r1, #16]
 800cea8:	4605      	mov	r5, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	b913      	cbnz	r3, 800ceb4 <_fflush_r+0x10>
 800ceae:	2500      	movs	r5, #0
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	b118      	cbz	r0, 800cebe <_fflush_r+0x1a>
 800ceb6:	6983      	ldr	r3, [r0, #24]
 800ceb8:	b90b      	cbnz	r3, 800cebe <_fflush_r+0x1a>
 800ceba:	f000 f887 	bl	800cfcc <__sinit>
 800cebe:	4b14      	ldr	r3, [pc, #80]	; (800cf10 <_fflush_r+0x6c>)
 800cec0:	429c      	cmp	r4, r3
 800cec2:	d11b      	bne.n	800cefc <_fflush_r+0x58>
 800cec4:	686c      	ldr	r4, [r5, #4]
 800cec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0ef      	beq.n	800ceae <_fflush_r+0xa>
 800cece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ced0:	07d0      	lsls	r0, r2, #31
 800ced2:	d404      	bmi.n	800cede <_fflush_r+0x3a>
 800ced4:	0599      	lsls	r1, r3, #22
 800ced6:	d402      	bmi.n	800cede <_fflush_r+0x3a>
 800ced8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceda:	f000 f927 	bl	800d12c <__retarget_lock_acquire_recursive>
 800cede:	4628      	mov	r0, r5
 800cee0:	4621      	mov	r1, r4
 800cee2:	f7ff ff59 	bl	800cd98 <__sflush_r>
 800cee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cee8:	07da      	lsls	r2, r3, #31
 800ceea:	4605      	mov	r5, r0
 800ceec:	d4e0      	bmi.n	800ceb0 <_fflush_r+0xc>
 800ceee:	89a3      	ldrh	r3, [r4, #12]
 800cef0:	059b      	lsls	r3, r3, #22
 800cef2:	d4dd      	bmi.n	800ceb0 <_fflush_r+0xc>
 800cef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cef6:	f000 f91a 	bl	800d12e <__retarget_lock_release_recursive>
 800cefa:	e7d9      	b.n	800ceb0 <_fflush_r+0xc>
 800cefc:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <_fflush_r+0x70>)
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d101      	bne.n	800cf06 <_fflush_r+0x62>
 800cf02:	68ac      	ldr	r4, [r5, #8]
 800cf04:	e7df      	b.n	800cec6 <_fflush_r+0x22>
 800cf06:	4b04      	ldr	r3, [pc, #16]	; (800cf18 <_fflush_r+0x74>)
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	bf08      	it	eq
 800cf0c:	68ec      	ldreq	r4, [r5, #12]
 800cf0e:	e7da      	b.n	800cec6 <_fflush_r+0x22>
 800cf10:	0800ddbc 	.word	0x0800ddbc
 800cf14:	0800dddc 	.word	0x0800dddc
 800cf18:	0800dd9c 	.word	0x0800dd9c

0800cf1c <std>:
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	b510      	push	{r4, lr}
 800cf20:	4604      	mov	r4, r0
 800cf22:	e9c0 3300 	strd	r3, r3, [r0]
 800cf26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf2a:	6083      	str	r3, [r0, #8]
 800cf2c:	8181      	strh	r1, [r0, #12]
 800cf2e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf30:	81c2      	strh	r2, [r0, #14]
 800cf32:	6183      	str	r3, [r0, #24]
 800cf34:	4619      	mov	r1, r3
 800cf36:	2208      	movs	r2, #8
 800cf38:	305c      	adds	r0, #92	; 0x5c
 800cf3a:	f7fb fc73 	bl	8008824 <memset>
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <std+0x38>)
 800cf40:	6263      	str	r3, [r4, #36]	; 0x24
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <std+0x3c>)
 800cf44:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf46:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <std+0x40>)
 800cf48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf4a:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <std+0x44>)
 800cf4c:	6224      	str	r4, [r4, #32]
 800cf4e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	bf00      	nop
 800cf54:	08009569 	.word	0x08009569
 800cf58:	0800958f 	.word	0x0800958f
 800cf5c:	080095c7 	.word	0x080095c7
 800cf60:	080095eb 	.word	0x080095eb

0800cf64 <_cleanup_r>:
 800cf64:	4901      	ldr	r1, [pc, #4]	; (800cf6c <_cleanup_r+0x8>)
 800cf66:	f000 b8c1 	b.w	800d0ec <_fwalk_reent>
 800cf6a:	bf00      	nop
 800cf6c:	0800cea5 	.word	0x0800cea5

0800cf70 <__sfmoreglue>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	1e4a      	subs	r2, r1, #1
 800cf74:	2568      	movs	r5, #104	; 0x68
 800cf76:	4355      	muls	r5, r2
 800cf78:	460e      	mov	r6, r1
 800cf7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf7e:	f7ff f8dd 	bl	800c13c <_malloc_r>
 800cf82:	4604      	mov	r4, r0
 800cf84:	b140      	cbz	r0, 800cf98 <__sfmoreglue+0x28>
 800cf86:	2100      	movs	r1, #0
 800cf88:	e9c0 1600 	strd	r1, r6, [r0]
 800cf8c:	300c      	adds	r0, #12
 800cf8e:	60a0      	str	r0, [r4, #8]
 800cf90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf94:	f7fb fc46 	bl	8008824 <memset>
 800cf98:	4620      	mov	r0, r4
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}

0800cf9c <__sfp_lock_acquire>:
 800cf9c:	4801      	ldr	r0, [pc, #4]	; (800cfa4 <__sfp_lock_acquire+0x8>)
 800cf9e:	f000 b8c5 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800cfa2:	bf00      	nop
 800cfa4:	200008d4 	.word	0x200008d4

0800cfa8 <__sfp_lock_release>:
 800cfa8:	4801      	ldr	r0, [pc, #4]	; (800cfb0 <__sfp_lock_release+0x8>)
 800cfaa:	f000 b8c0 	b.w	800d12e <__retarget_lock_release_recursive>
 800cfae:	bf00      	nop
 800cfb0:	200008d4 	.word	0x200008d4

0800cfb4 <__sinit_lock_acquire>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	; (800cfbc <__sinit_lock_acquire+0x8>)
 800cfb6:	f000 b8b9 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800cfba:	bf00      	nop
 800cfbc:	200008cf 	.word	0x200008cf

0800cfc0 <__sinit_lock_release>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	; (800cfc8 <__sinit_lock_release+0x8>)
 800cfc2:	f000 b8b4 	b.w	800d12e <__retarget_lock_release_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	200008cf 	.word	0x200008cf

0800cfcc <__sinit>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	4604      	mov	r4, r0
 800cfd0:	f7ff fff0 	bl	800cfb4 <__sinit_lock_acquire>
 800cfd4:	69a3      	ldr	r3, [r4, #24]
 800cfd6:	b11b      	cbz	r3, 800cfe0 <__sinit+0x14>
 800cfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfdc:	f7ff bff0 	b.w	800cfc0 <__sinit_lock_release>
 800cfe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfe4:	6523      	str	r3, [r4, #80]	; 0x50
 800cfe6:	4b13      	ldr	r3, [pc, #76]	; (800d034 <__sinit+0x68>)
 800cfe8:	4a13      	ldr	r2, [pc, #76]	; (800d038 <__sinit+0x6c>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	bf04      	itt	eq
 800cff2:	2301      	moveq	r3, #1
 800cff4:	61a3      	streq	r3, [r4, #24]
 800cff6:	4620      	mov	r0, r4
 800cff8:	f000 f820 	bl	800d03c <__sfp>
 800cffc:	6060      	str	r0, [r4, #4]
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 f81c 	bl	800d03c <__sfp>
 800d004:	60a0      	str	r0, [r4, #8]
 800d006:	4620      	mov	r0, r4
 800d008:	f000 f818 	bl	800d03c <__sfp>
 800d00c:	2200      	movs	r2, #0
 800d00e:	60e0      	str	r0, [r4, #12]
 800d010:	2104      	movs	r1, #4
 800d012:	6860      	ldr	r0, [r4, #4]
 800d014:	f7ff ff82 	bl	800cf1c <std>
 800d018:	68a0      	ldr	r0, [r4, #8]
 800d01a:	2201      	movs	r2, #1
 800d01c:	2109      	movs	r1, #9
 800d01e:	f7ff ff7d 	bl	800cf1c <std>
 800d022:	68e0      	ldr	r0, [r4, #12]
 800d024:	2202      	movs	r2, #2
 800d026:	2112      	movs	r1, #18
 800d028:	f7ff ff78 	bl	800cf1c <std>
 800d02c:	2301      	movs	r3, #1
 800d02e:	61a3      	str	r3, [r4, #24]
 800d030:	e7d2      	b.n	800cfd8 <__sinit+0xc>
 800d032:	bf00      	nop
 800d034:	0800da34 	.word	0x0800da34
 800d038:	0800cf65 	.word	0x0800cf65

0800d03c <__sfp>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	4607      	mov	r7, r0
 800d040:	f7ff ffac 	bl	800cf9c <__sfp_lock_acquire>
 800d044:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <__sfp+0x84>)
 800d046:	681e      	ldr	r6, [r3, #0]
 800d048:	69b3      	ldr	r3, [r6, #24]
 800d04a:	b913      	cbnz	r3, 800d052 <__sfp+0x16>
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7ff ffbd 	bl	800cfcc <__sinit>
 800d052:	3648      	adds	r6, #72	; 0x48
 800d054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d058:	3b01      	subs	r3, #1
 800d05a:	d503      	bpl.n	800d064 <__sfp+0x28>
 800d05c:	6833      	ldr	r3, [r6, #0]
 800d05e:	b30b      	cbz	r3, 800d0a4 <__sfp+0x68>
 800d060:	6836      	ldr	r6, [r6, #0]
 800d062:	e7f7      	b.n	800d054 <__sfp+0x18>
 800d064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d068:	b9d5      	cbnz	r5, 800d0a0 <__sfp+0x64>
 800d06a:	4b16      	ldr	r3, [pc, #88]	; (800d0c4 <__sfp+0x88>)
 800d06c:	60e3      	str	r3, [r4, #12]
 800d06e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d072:	6665      	str	r5, [r4, #100]	; 0x64
 800d074:	f000 f859 	bl	800d12a <__retarget_lock_init_recursive>
 800d078:	f7ff ff96 	bl	800cfa8 <__sfp_lock_release>
 800d07c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d084:	6025      	str	r5, [r4, #0]
 800d086:	61a5      	str	r5, [r4, #24]
 800d088:	2208      	movs	r2, #8
 800d08a:	4629      	mov	r1, r5
 800d08c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d090:	f7fb fbc8 	bl	8008824 <memset>
 800d094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d09c:	4620      	mov	r0, r4
 800d09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a0:	3468      	adds	r4, #104	; 0x68
 800d0a2:	e7d9      	b.n	800d058 <__sfp+0x1c>
 800d0a4:	2104      	movs	r1, #4
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	f7ff ff62 	bl	800cf70 <__sfmoreglue>
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	6030      	str	r0, [r6, #0]
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d1d5      	bne.n	800d060 <__sfp+0x24>
 800d0b4:	f7ff ff78 	bl	800cfa8 <__sfp_lock_release>
 800d0b8:	230c      	movs	r3, #12
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	e7ee      	b.n	800d09c <__sfp+0x60>
 800d0be:	bf00      	nop
 800d0c0:	0800da34 	.word	0x0800da34
 800d0c4:	ffff0001 	.word	0xffff0001

0800d0c8 <fiprintf>:
 800d0c8:	b40e      	push	{r1, r2, r3}
 800d0ca:	b503      	push	{r0, r1, lr}
 800d0cc:	4601      	mov	r1, r0
 800d0ce:	ab03      	add	r3, sp, #12
 800d0d0:	4805      	ldr	r0, [pc, #20]	; (800d0e8 <fiprintf+0x20>)
 800d0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d6:	6800      	ldr	r0, [r0, #0]
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	f000 f89f 	bl	800d21c <_vfiprintf_r>
 800d0de:	b002      	add	sp, #8
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	b003      	add	sp, #12
 800d0e6:	4770      	bx	lr
 800d0e8:	20000058 	.word	0x20000058

0800d0ec <_fwalk_reent>:
 800d0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4688      	mov	r8, r1
 800d0f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0f8:	2700      	movs	r7, #0
 800d0fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0fe:	f1b9 0901 	subs.w	r9, r9, #1
 800d102:	d505      	bpl.n	800d110 <_fwalk_reent+0x24>
 800d104:	6824      	ldr	r4, [r4, #0]
 800d106:	2c00      	cmp	r4, #0
 800d108:	d1f7      	bne.n	800d0fa <_fwalk_reent+0xe>
 800d10a:	4638      	mov	r0, r7
 800d10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d110:	89ab      	ldrh	r3, [r5, #12]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d907      	bls.n	800d126 <_fwalk_reent+0x3a>
 800d116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d11a:	3301      	adds	r3, #1
 800d11c:	d003      	beq.n	800d126 <_fwalk_reent+0x3a>
 800d11e:	4629      	mov	r1, r5
 800d120:	4630      	mov	r0, r6
 800d122:	47c0      	blx	r8
 800d124:	4307      	orrs	r7, r0
 800d126:	3568      	adds	r5, #104	; 0x68
 800d128:	e7e9      	b.n	800d0fe <_fwalk_reent+0x12>

0800d12a <__retarget_lock_init_recursive>:
 800d12a:	4770      	bx	lr

0800d12c <__retarget_lock_acquire_recursive>:
 800d12c:	4770      	bx	lr

0800d12e <__retarget_lock_release_recursive>:
 800d12e:	4770      	bx	lr

0800d130 <memmove>:
 800d130:	4288      	cmp	r0, r1
 800d132:	b510      	push	{r4, lr}
 800d134:	eb01 0402 	add.w	r4, r1, r2
 800d138:	d902      	bls.n	800d140 <memmove+0x10>
 800d13a:	4284      	cmp	r4, r0
 800d13c:	4623      	mov	r3, r4
 800d13e:	d807      	bhi.n	800d150 <memmove+0x20>
 800d140:	1e43      	subs	r3, r0, #1
 800d142:	42a1      	cmp	r1, r4
 800d144:	d008      	beq.n	800d158 <memmove+0x28>
 800d146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d14e:	e7f8      	b.n	800d142 <memmove+0x12>
 800d150:	4402      	add	r2, r0
 800d152:	4601      	mov	r1, r0
 800d154:	428a      	cmp	r2, r1
 800d156:	d100      	bne.n	800d15a <memmove+0x2a>
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d162:	e7f7      	b.n	800d154 <memmove+0x24>

0800d164 <__malloc_lock>:
 800d164:	4801      	ldr	r0, [pc, #4]	; (800d16c <__malloc_lock+0x8>)
 800d166:	f7ff bfe1 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800d16a:	bf00      	nop
 800d16c:	200008d0 	.word	0x200008d0

0800d170 <__malloc_unlock>:
 800d170:	4801      	ldr	r0, [pc, #4]	; (800d178 <__malloc_unlock+0x8>)
 800d172:	f7ff bfdc 	b.w	800d12e <__retarget_lock_release_recursive>
 800d176:	bf00      	nop
 800d178:	200008d0 	.word	0x200008d0

0800d17c <_realloc_r>:
 800d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17e:	4607      	mov	r7, r0
 800d180:	4614      	mov	r4, r2
 800d182:	460e      	mov	r6, r1
 800d184:	b921      	cbnz	r1, 800d190 <_realloc_r+0x14>
 800d186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d18a:	4611      	mov	r1, r2
 800d18c:	f7fe bfd6 	b.w	800c13c <_malloc_r>
 800d190:	b922      	cbnz	r2, 800d19c <_realloc_r+0x20>
 800d192:	f7fe ff83 	bl	800c09c <_free_r>
 800d196:	4625      	mov	r5, r4
 800d198:	4628      	mov	r0, r5
 800d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d19c:	f000 fa9a 	bl	800d6d4 <_malloc_usable_size_r>
 800d1a0:	42a0      	cmp	r0, r4
 800d1a2:	d20f      	bcs.n	800d1c4 <_realloc_r+0x48>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7fe ffc8 	bl	800c13c <_malloc_r>
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d0f2      	beq.n	800d198 <_realloc_r+0x1c>
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	f7fb fb27 	bl	8008808 <memcpy>
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	4638      	mov	r0, r7
 800d1be:	f7fe ff6d 	bl	800c09c <_free_r>
 800d1c2:	e7e9      	b.n	800d198 <_realloc_r+0x1c>
 800d1c4:	4635      	mov	r5, r6
 800d1c6:	e7e7      	b.n	800d198 <_realloc_r+0x1c>

0800d1c8 <__sfputc_r>:
 800d1c8:	6893      	ldr	r3, [r2, #8]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	b410      	push	{r4}
 800d1d0:	6093      	str	r3, [r2, #8]
 800d1d2:	da08      	bge.n	800d1e6 <__sfputc_r+0x1e>
 800d1d4:	6994      	ldr	r4, [r2, #24]
 800d1d6:	42a3      	cmp	r3, r4
 800d1d8:	db01      	blt.n	800d1de <__sfputc_r+0x16>
 800d1da:	290a      	cmp	r1, #10
 800d1dc:	d103      	bne.n	800d1e6 <__sfputc_r+0x1e>
 800d1de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1e2:	f000 b94b 	b.w	800d47c <__swbuf_r>
 800d1e6:	6813      	ldr	r3, [r2, #0]
 800d1e8:	1c58      	adds	r0, r3, #1
 800d1ea:	6010      	str	r0, [r2, #0]
 800d1ec:	7019      	strb	r1, [r3, #0]
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <__sfputs_r>:
 800d1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	460f      	mov	r7, r1
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	18d5      	adds	r5, r2, r3
 800d200:	42ac      	cmp	r4, r5
 800d202:	d101      	bne.n	800d208 <__sfputs_r+0x12>
 800d204:	2000      	movs	r0, #0
 800d206:	e007      	b.n	800d218 <__sfputs_r+0x22>
 800d208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20c:	463a      	mov	r2, r7
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff ffda 	bl	800d1c8 <__sfputc_r>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d1f3      	bne.n	800d200 <__sfputs_r+0xa>
 800d218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d21c <_vfiprintf_r>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	460d      	mov	r5, r1
 800d222:	b09d      	sub	sp, #116	; 0x74
 800d224:	4614      	mov	r4, r2
 800d226:	4698      	mov	r8, r3
 800d228:	4606      	mov	r6, r0
 800d22a:	b118      	cbz	r0, 800d234 <_vfiprintf_r+0x18>
 800d22c:	6983      	ldr	r3, [r0, #24]
 800d22e:	b90b      	cbnz	r3, 800d234 <_vfiprintf_r+0x18>
 800d230:	f7ff fecc 	bl	800cfcc <__sinit>
 800d234:	4b89      	ldr	r3, [pc, #548]	; (800d45c <_vfiprintf_r+0x240>)
 800d236:	429d      	cmp	r5, r3
 800d238:	d11b      	bne.n	800d272 <_vfiprintf_r+0x56>
 800d23a:	6875      	ldr	r5, [r6, #4]
 800d23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d23e:	07d9      	lsls	r1, r3, #31
 800d240:	d405      	bmi.n	800d24e <_vfiprintf_r+0x32>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d402      	bmi.n	800d24e <_vfiprintf_r+0x32>
 800d248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24a:	f7ff ff6f 	bl	800d12c <__retarget_lock_acquire_recursive>
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	071b      	lsls	r3, r3, #28
 800d252:	d501      	bpl.n	800d258 <_vfiprintf_r+0x3c>
 800d254:	692b      	ldr	r3, [r5, #16]
 800d256:	b9eb      	cbnz	r3, 800d294 <_vfiprintf_r+0x78>
 800d258:	4629      	mov	r1, r5
 800d25a:	4630      	mov	r0, r6
 800d25c:	f000 f960 	bl	800d520 <__swsetup_r>
 800d260:	b1c0      	cbz	r0, 800d294 <_vfiprintf_r+0x78>
 800d262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d264:	07dc      	lsls	r4, r3, #31
 800d266:	d50e      	bpl.n	800d286 <_vfiprintf_r+0x6a>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b01d      	add	sp, #116	; 0x74
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	4b7b      	ldr	r3, [pc, #492]	; (800d460 <_vfiprintf_r+0x244>)
 800d274:	429d      	cmp	r5, r3
 800d276:	d101      	bne.n	800d27c <_vfiprintf_r+0x60>
 800d278:	68b5      	ldr	r5, [r6, #8]
 800d27a:	e7df      	b.n	800d23c <_vfiprintf_r+0x20>
 800d27c:	4b79      	ldr	r3, [pc, #484]	; (800d464 <_vfiprintf_r+0x248>)
 800d27e:	429d      	cmp	r5, r3
 800d280:	bf08      	it	eq
 800d282:	68f5      	ldreq	r5, [r6, #12]
 800d284:	e7da      	b.n	800d23c <_vfiprintf_r+0x20>
 800d286:	89ab      	ldrh	r3, [r5, #12]
 800d288:	0598      	lsls	r0, r3, #22
 800d28a:	d4ed      	bmi.n	800d268 <_vfiprintf_r+0x4c>
 800d28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d28e:	f7ff ff4e 	bl	800d12e <__retarget_lock_release_recursive>
 800d292:	e7e9      	b.n	800d268 <_vfiprintf_r+0x4c>
 800d294:	2300      	movs	r3, #0
 800d296:	9309      	str	r3, [sp, #36]	; 0x24
 800d298:	2320      	movs	r3, #32
 800d29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d29e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a2:	2330      	movs	r3, #48	; 0x30
 800d2a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d468 <_vfiprintf_r+0x24c>
 800d2a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2ac:	f04f 0901 	mov.w	r9, #1
 800d2b0:	4623      	mov	r3, r4
 800d2b2:	469a      	mov	sl, r3
 800d2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b8:	b10a      	cbz	r2, 800d2be <_vfiprintf_r+0xa2>
 800d2ba:	2a25      	cmp	r2, #37	; 0x25
 800d2bc:	d1f9      	bne.n	800d2b2 <_vfiprintf_r+0x96>
 800d2be:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c2:	d00b      	beq.n	800d2dc <_vfiprintf_r+0xc0>
 800d2c4:	465b      	mov	r3, fp
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f7ff ff93 	bl	800d1f6 <__sfputs_r>
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	f000 80aa 	beq.w	800d42a <_vfiprintf_r+0x20e>
 800d2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d8:	445a      	add	r2, fp
 800d2da:	9209      	str	r2, [sp, #36]	; 0x24
 800d2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 80a2 	beq.w	800d42a <_vfiprintf_r+0x20e>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f0:	f10a 0a01 	add.w	sl, sl, #1
 800d2f4:	9304      	str	r3, [sp, #16]
 800d2f6:	9307      	str	r3, [sp, #28]
 800d2f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2fc:	931a      	str	r3, [sp, #104]	; 0x68
 800d2fe:	4654      	mov	r4, sl
 800d300:	2205      	movs	r2, #5
 800d302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d306:	4858      	ldr	r0, [pc, #352]	; (800d468 <_vfiprintf_r+0x24c>)
 800d308:	f7f2 ffa2 	bl	8000250 <memchr>
 800d30c:	9a04      	ldr	r2, [sp, #16]
 800d30e:	b9d8      	cbnz	r0, 800d348 <_vfiprintf_r+0x12c>
 800d310:	06d1      	lsls	r1, r2, #27
 800d312:	bf44      	itt	mi
 800d314:	2320      	movmi	r3, #32
 800d316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d31a:	0713      	lsls	r3, r2, #28
 800d31c:	bf44      	itt	mi
 800d31e:	232b      	movmi	r3, #43	; 0x2b
 800d320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d324:	f89a 3000 	ldrb.w	r3, [sl]
 800d328:	2b2a      	cmp	r3, #42	; 0x2a
 800d32a:	d015      	beq.n	800d358 <_vfiprintf_r+0x13c>
 800d32c:	9a07      	ldr	r2, [sp, #28]
 800d32e:	4654      	mov	r4, sl
 800d330:	2000      	movs	r0, #0
 800d332:	f04f 0c0a 	mov.w	ip, #10
 800d336:	4621      	mov	r1, r4
 800d338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d33c:	3b30      	subs	r3, #48	; 0x30
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d94e      	bls.n	800d3e0 <_vfiprintf_r+0x1c4>
 800d342:	b1b0      	cbz	r0, 800d372 <_vfiprintf_r+0x156>
 800d344:	9207      	str	r2, [sp, #28]
 800d346:	e014      	b.n	800d372 <_vfiprintf_r+0x156>
 800d348:	eba0 0308 	sub.w	r3, r0, r8
 800d34c:	fa09 f303 	lsl.w	r3, r9, r3
 800d350:	4313      	orrs	r3, r2
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	46a2      	mov	sl, r4
 800d356:	e7d2      	b.n	800d2fe <_vfiprintf_r+0xe2>
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	1d19      	adds	r1, r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	9103      	str	r1, [sp, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	bfbb      	ittet	lt
 800d364:	425b      	neglt	r3, r3
 800d366:	f042 0202 	orrlt.w	r2, r2, #2
 800d36a:	9307      	strge	r3, [sp, #28]
 800d36c:	9307      	strlt	r3, [sp, #28]
 800d36e:	bfb8      	it	lt
 800d370:	9204      	strlt	r2, [sp, #16]
 800d372:	7823      	ldrb	r3, [r4, #0]
 800d374:	2b2e      	cmp	r3, #46	; 0x2e
 800d376:	d10c      	bne.n	800d392 <_vfiprintf_r+0x176>
 800d378:	7863      	ldrb	r3, [r4, #1]
 800d37a:	2b2a      	cmp	r3, #42	; 0x2a
 800d37c:	d135      	bne.n	800d3ea <_vfiprintf_r+0x1ce>
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	1d1a      	adds	r2, r3, #4
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	9203      	str	r2, [sp, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	bfb8      	it	lt
 800d38a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d38e:	3402      	adds	r4, #2
 800d390:	9305      	str	r3, [sp, #20]
 800d392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d478 <_vfiprintf_r+0x25c>
 800d396:	7821      	ldrb	r1, [r4, #0]
 800d398:	2203      	movs	r2, #3
 800d39a:	4650      	mov	r0, sl
 800d39c:	f7f2 ff58 	bl	8000250 <memchr>
 800d3a0:	b140      	cbz	r0, 800d3b4 <_vfiprintf_r+0x198>
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	eba0 000a 	sub.w	r0, r0, sl
 800d3a8:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	4303      	orrs	r3, r0
 800d3b0:	3401      	adds	r4, #1
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b8:	482c      	ldr	r0, [pc, #176]	; (800d46c <_vfiprintf_r+0x250>)
 800d3ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3be:	2206      	movs	r2, #6
 800d3c0:	f7f2 ff46 	bl	8000250 <memchr>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d03f      	beq.n	800d448 <_vfiprintf_r+0x22c>
 800d3c8:	4b29      	ldr	r3, [pc, #164]	; (800d470 <_vfiprintf_r+0x254>)
 800d3ca:	bb1b      	cbnz	r3, 800d414 <_vfiprintf_r+0x1f8>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	3307      	adds	r3, #7
 800d3d0:	f023 0307 	bic.w	r3, r3, #7
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3da:	443b      	add	r3, r7
 800d3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d3de:	e767      	b.n	800d2b0 <_vfiprintf_r+0x94>
 800d3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	e7a5      	b.n	800d336 <_vfiprintf_r+0x11a>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	9305      	str	r3, [sp, #20]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f04f 0c0a 	mov.w	ip, #10
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3fc:	3a30      	subs	r2, #48	; 0x30
 800d3fe:	2a09      	cmp	r2, #9
 800d400:	d903      	bls.n	800d40a <_vfiprintf_r+0x1ee>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0c5      	beq.n	800d392 <_vfiprintf_r+0x176>
 800d406:	9105      	str	r1, [sp, #20]
 800d408:	e7c3      	b.n	800d392 <_vfiprintf_r+0x176>
 800d40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d40e:	4604      	mov	r4, r0
 800d410:	2301      	movs	r3, #1
 800d412:	e7f0      	b.n	800d3f6 <_vfiprintf_r+0x1da>
 800d414:	ab03      	add	r3, sp, #12
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	462a      	mov	r2, r5
 800d41a:	4b16      	ldr	r3, [pc, #88]	; (800d474 <_vfiprintf_r+0x258>)
 800d41c:	a904      	add	r1, sp, #16
 800d41e:	4630      	mov	r0, r6
 800d420:	f7fb fa9a 	bl	8008958 <_printf_float>
 800d424:	4607      	mov	r7, r0
 800d426:	1c78      	adds	r0, r7, #1
 800d428:	d1d6      	bne.n	800d3d8 <_vfiprintf_r+0x1bc>
 800d42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d42c:	07d9      	lsls	r1, r3, #31
 800d42e:	d405      	bmi.n	800d43c <_vfiprintf_r+0x220>
 800d430:	89ab      	ldrh	r3, [r5, #12]
 800d432:	059a      	lsls	r2, r3, #22
 800d434:	d402      	bmi.n	800d43c <_vfiprintf_r+0x220>
 800d436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d438:	f7ff fe79 	bl	800d12e <__retarget_lock_release_recursive>
 800d43c:	89ab      	ldrh	r3, [r5, #12]
 800d43e:	065b      	lsls	r3, r3, #25
 800d440:	f53f af12 	bmi.w	800d268 <_vfiprintf_r+0x4c>
 800d444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d446:	e711      	b.n	800d26c <_vfiprintf_r+0x50>
 800d448:	ab03      	add	r3, sp, #12
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	462a      	mov	r2, r5
 800d44e:	4b09      	ldr	r3, [pc, #36]	; (800d474 <_vfiprintf_r+0x258>)
 800d450:	a904      	add	r1, sp, #16
 800d452:	4630      	mov	r0, r6
 800d454:	f7fb fd0c 	bl	8008e70 <_printf_i>
 800d458:	e7e4      	b.n	800d424 <_vfiprintf_r+0x208>
 800d45a:	bf00      	nop
 800d45c:	0800ddbc 	.word	0x0800ddbc
 800d460:	0800dddc 	.word	0x0800dddc
 800d464:	0800dd9c 	.word	0x0800dd9c
 800d468:	0800dd34 	.word	0x0800dd34
 800d46c:	0800dd3e 	.word	0x0800dd3e
 800d470:	08008959 	.word	0x08008959
 800d474:	0800d1f7 	.word	0x0800d1f7
 800d478:	0800dd3a 	.word	0x0800dd3a

0800d47c <__swbuf_r>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	460e      	mov	r6, r1
 800d480:	4614      	mov	r4, r2
 800d482:	4605      	mov	r5, r0
 800d484:	b118      	cbz	r0, 800d48e <__swbuf_r+0x12>
 800d486:	6983      	ldr	r3, [r0, #24]
 800d488:	b90b      	cbnz	r3, 800d48e <__swbuf_r+0x12>
 800d48a:	f7ff fd9f 	bl	800cfcc <__sinit>
 800d48e:	4b21      	ldr	r3, [pc, #132]	; (800d514 <__swbuf_r+0x98>)
 800d490:	429c      	cmp	r4, r3
 800d492:	d12b      	bne.n	800d4ec <__swbuf_r+0x70>
 800d494:	686c      	ldr	r4, [r5, #4]
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d52f      	bpl.n	800d500 <__swbuf_r+0x84>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b36b      	cbz	r3, 800d500 <__swbuf_r+0x84>
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1ac0      	subs	r0, r0, r3
 800d4aa:	6963      	ldr	r3, [r4, #20]
 800d4ac:	b2f6      	uxtb	r6, r6
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	4637      	mov	r7, r6
 800d4b2:	dc04      	bgt.n	800d4be <__swbuf_r+0x42>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f7ff fcf4 	bl	800cea4 <_fflush_r>
 800d4bc:	bb30      	cbnz	r0, 800d50c <__swbuf_r+0x90>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6022      	str	r2, [r4, #0]
 800d4ca:	701e      	strb	r6, [r3, #0]
 800d4cc:	6963      	ldr	r3, [r4, #20]
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	4283      	cmp	r3, r0
 800d4d2:	d004      	beq.n	800d4de <__swbuf_r+0x62>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	07db      	lsls	r3, r3, #31
 800d4d8:	d506      	bpl.n	800d4e8 <__swbuf_r+0x6c>
 800d4da:	2e0a      	cmp	r6, #10
 800d4dc:	d104      	bne.n	800d4e8 <__swbuf_r+0x6c>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f7ff fcdf 	bl	800cea4 <_fflush_r>
 800d4e6:	b988      	cbnz	r0, 800d50c <__swbuf_r+0x90>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <__swbuf_r+0x9c>)
 800d4ee:	429c      	cmp	r4, r3
 800d4f0:	d101      	bne.n	800d4f6 <__swbuf_r+0x7a>
 800d4f2:	68ac      	ldr	r4, [r5, #8]
 800d4f4:	e7cf      	b.n	800d496 <__swbuf_r+0x1a>
 800d4f6:	4b09      	ldr	r3, [pc, #36]	; (800d51c <__swbuf_r+0xa0>)
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	bf08      	it	eq
 800d4fc:	68ec      	ldreq	r4, [r5, #12]
 800d4fe:	e7ca      	b.n	800d496 <__swbuf_r+0x1a>
 800d500:	4621      	mov	r1, r4
 800d502:	4628      	mov	r0, r5
 800d504:	f000 f80c 	bl	800d520 <__swsetup_r>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d0cb      	beq.n	800d4a4 <__swbuf_r+0x28>
 800d50c:	f04f 37ff 	mov.w	r7, #4294967295
 800d510:	e7ea      	b.n	800d4e8 <__swbuf_r+0x6c>
 800d512:	bf00      	nop
 800d514:	0800ddbc 	.word	0x0800ddbc
 800d518:	0800dddc 	.word	0x0800dddc
 800d51c:	0800dd9c 	.word	0x0800dd9c

0800d520 <__swsetup_r>:
 800d520:	4b32      	ldr	r3, [pc, #200]	; (800d5ec <__swsetup_r+0xcc>)
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	681d      	ldr	r5, [r3, #0]
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	b125      	cbz	r5, 800d536 <__swsetup_r+0x16>
 800d52c:	69ab      	ldr	r3, [r5, #24]
 800d52e:	b913      	cbnz	r3, 800d536 <__swsetup_r+0x16>
 800d530:	4628      	mov	r0, r5
 800d532:	f7ff fd4b 	bl	800cfcc <__sinit>
 800d536:	4b2e      	ldr	r3, [pc, #184]	; (800d5f0 <__swsetup_r+0xd0>)
 800d538:	429c      	cmp	r4, r3
 800d53a:	d10f      	bne.n	800d55c <__swsetup_r+0x3c>
 800d53c:	686c      	ldr	r4, [r5, #4]
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d544:	0719      	lsls	r1, r3, #28
 800d546:	d42c      	bmi.n	800d5a2 <__swsetup_r+0x82>
 800d548:	06dd      	lsls	r5, r3, #27
 800d54a:	d411      	bmi.n	800d570 <__swsetup_r+0x50>
 800d54c:	2309      	movs	r3, #9
 800d54e:	6033      	str	r3, [r6, #0]
 800d550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	e03e      	b.n	800d5da <__swsetup_r+0xba>
 800d55c:	4b25      	ldr	r3, [pc, #148]	; (800d5f4 <__swsetup_r+0xd4>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <__swsetup_r+0x46>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7eb      	b.n	800d53e <__swsetup_r+0x1e>
 800d566:	4b24      	ldr	r3, [pc, #144]	; (800d5f8 <__swsetup_r+0xd8>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7e6      	b.n	800d53e <__swsetup_r+0x1e>
 800d570:	0758      	lsls	r0, r3, #29
 800d572:	d512      	bpl.n	800d59a <__swsetup_r+0x7a>
 800d574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d576:	b141      	cbz	r1, 800d58a <__swsetup_r+0x6a>
 800d578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57c:	4299      	cmp	r1, r3
 800d57e:	d002      	beq.n	800d586 <__swsetup_r+0x66>
 800d580:	4630      	mov	r0, r6
 800d582:	f7fe fd8b 	bl	800c09c <_free_r>
 800d586:	2300      	movs	r3, #0
 800d588:	6363      	str	r3, [r4, #52]	; 0x34
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d590:	81a3      	strh	r3, [r4, #12]
 800d592:	2300      	movs	r3, #0
 800d594:	6063      	str	r3, [r4, #4]
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	f043 0308 	orr.w	r3, r3, #8
 800d5a0:	81a3      	strh	r3, [r4, #12]
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	b94b      	cbnz	r3, 800d5ba <__swsetup_r+0x9a>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b0:	d003      	beq.n	800d5ba <__swsetup_r+0x9a>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f000 f84d 	bl	800d654 <__smakebuf_r>
 800d5ba:	89a0      	ldrh	r0, [r4, #12]
 800d5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c0:	f010 0301 	ands.w	r3, r0, #1
 800d5c4:	d00a      	beq.n	800d5dc <__swsetup_r+0xbc>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	6963      	ldr	r3, [r4, #20]
 800d5cc:	425b      	negs	r3, r3
 800d5ce:	61a3      	str	r3, [r4, #24]
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	b943      	cbnz	r3, 800d5e6 <__swsetup_r+0xc6>
 800d5d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5d8:	d1ba      	bne.n	800d550 <__swsetup_r+0x30>
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
 800d5dc:	0781      	lsls	r1, r0, #30
 800d5de:	bf58      	it	pl
 800d5e0:	6963      	ldrpl	r3, [r4, #20]
 800d5e2:	60a3      	str	r3, [r4, #8]
 800d5e4:	e7f4      	b.n	800d5d0 <__swsetup_r+0xb0>
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	e7f7      	b.n	800d5da <__swsetup_r+0xba>
 800d5ea:	bf00      	nop
 800d5ec:	20000058 	.word	0x20000058
 800d5f0:	0800ddbc 	.word	0x0800ddbc
 800d5f4:	0800dddc 	.word	0x0800dddc
 800d5f8:	0800dd9c 	.word	0x0800dd9c

0800d5fc <abort>:
 800d5fc:	b508      	push	{r3, lr}
 800d5fe:	2006      	movs	r0, #6
 800d600:	f000 f898 	bl	800d734 <raise>
 800d604:	2001      	movs	r0, #1
 800d606:	f7f5 fa45 	bl	8002a94 <_exit>

0800d60a <__swhatbuf_r>:
 800d60a:	b570      	push	{r4, r5, r6, lr}
 800d60c:	460e      	mov	r6, r1
 800d60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d612:	2900      	cmp	r1, #0
 800d614:	b096      	sub	sp, #88	; 0x58
 800d616:	4614      	mov	r4, r2
 800d618:	461d      	mov	r5, r3
 800d61a:	da07      	bge.n	800d62c <__swhatbuf_r+0x22>
 800d61c:	2300      	movs	r3, #0
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	89b3      	ldrh	r3, [r6, #12]
 800d622:	061a      	lsls	r2, r3, #24
 800d624:	d410      	bmi.n	800d648 <__swhatbuf_r+0x3e>
 800d626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d62a:	e00e      	b.n	800d64a <__swhatbuf_r+0x40>
 800d62c:	466a      	mov	r2, sp
 800d62e:	f000 f89d 	bl	800d76c <_fstat_r>
 800d632:	2800      	cmp	r0, #0
 800d634:	dbf2      	blt.n	800d61c <__swhatbuf_r+0x12>
 800d636:	9a01      	ldr	r2, [sp, #4]
 800d638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d63c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d640:	425a      	negs	r2, r3
 800d642:	415a      	adcs	r2, r3
 800d644:	602a      	str	r2, [r5, #0]
 800d646:	e7ee      	b.n	800d626 <__swhatbuf_r+0x1c>
 800d648:	2340      	movs	r3, #64	; 0x40
 800d64a:	2000      	movs	r0, #0
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	b016      	add	sp, #88	; 0x58
 800d650:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d654 <__smakebuf_r>:
 800d654:	898b      	ldrh	r3, [r1, #12]
 800d656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d658:	079d      	lsls	r5, r3, #30
 800d65a:	4606      	mov	r6, r0
 800d65c:	460c      	mov	r4, r1
 800d65e:	d507      	bpl.n	800d670 <__smakebuf_r+0x1c>
 800d660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	6123      	str	r3, [r4, #16]
 800d668:	2301      	movs	r3, #1
 800d66a:	6163      	str	r3, [r4, #20]
 800d66c:	b002      	add	sp, #8
 800d66e:	bd70      	pop	{r4, r5, r6, pc}
 800d670:	ab01      	add	r3, sp, #4
 800d672:	466a      	mov	r2, sp
 800d674:	f7ff ffc9 	bl	800d60a <__swhatbuf_r>
 800d678:	9900      	ldr	r1, [sp, #0]
 800d67a:	4605      	mov	r5, r0
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7fe fd5d 	bl	800c13c <_malloc_r>
 800d682:	b948      	cbnz	r0, 800d698 <__smakebuf_r+0x44>
 800d684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d688:	059a      	lsls	r2, r3, #22
 800d68a:	d4ef      	bmi.n	800d66c <__smakebuf_r+0x18>
 800d68c:	f023 0303 	bic.w	r3, r3, #3
 800d690:	f043 0302 	orr.w	r3, r3, #2
 800d694:	81a3      	strh	r3, [r4, #12]
 800d696:	e7e3      	b.n	800d660 <__smakebuf_r+0xc>
 800d698:	4b0d      	ldr	r3, [pc, #52]	; (800d6d0 <__smakebuf_r+0x7c>)
 800d69a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	6020      	str	r0, [r4, #0]
 800d6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6a4:	81a3      	strh	r3, [r4, #12]
 800d6a6:	9b00      	ldr	r3, [sp, #0]
 800d6a8:	6163      	str	r3, [r4, #20]
 800d6aa:	9b01      	ldr	r3, [sp, #4]
 800d6ac:	6120      	str	r0, [r4, #16]
 800d6ae:	b15b      	cbz	r3, 800d6c8 <__smakebuf_r+0x74>
 800d6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f000 f86b 	bl	800d790 <_isatty_r>
 800d6ba:	b128      	cbz	r0, 800d6c8 <__smakebuf_r+0x74>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f023 0303 	bic.w	r3, r3, #3
 800d6c2:	f043 0301 	orr.w	r3, r3, #1
 800d6c6:	81a3      	strh	r3, [r4, #12]
 800d6c8:	89a0      	ldrh	r0, [r4, #12]
 800d6ca:	4305      	orrs	r5, r0
 800d6cc:	81a5      	strh	r5, [r4, #12]
 800d6ce:	e7cd      	b.n	800d66c <__smakebuf_r+0x18>
 800d6d0:	0800cf65 	.word	0x0800cf65

0800d6d4 <_malloc_usable_size_r>:
 800d6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6d8:	1f18      	subs	r0, r3, #4
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bfbc      	itt	lt
 800d6de:	580b      	ldrlt	r3, [r1, r0]
 800d6e0:	18c0      	addlt	r0, r0, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_raise_r>:
 800d6e4:	291f      	cmp	r1, #31
 800d6e6:	b538      	push	{r3, r4, r5, lr}
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	d904      	bls.n	800d6f8 <_raise_r+0x14>
 800d6ee:	2316      	movs	r3, #22
 800d6f0:	6003      	str	r3, [r0, #0]
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	bd38      	pop	{r3, r4, r5, pc}
 800d6f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6fa:	b112      	cbz	r2, 800d702 <_raise_r+0x1e>
 800d6fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d700:	b94b      	cbnz	r3, 800d716 <_raise_r+0x32>
 800d702:	4620      	mov	r0, r4
 800d704:	f000 f830 	bl	800d768 <_getpid_r>
 800d708:	462a      	mov	r2, r5
 800d70a:	4601      	mov	r1, r0
 800d70c:	4620      	mov	r0, r4
 800d70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d712:	f000 b817 	b.w	800d744 <_kill_r>
 800d716:	2b01      	cmp	r3, #1
 800d718:	d00a      	beq.n	800d730 <_raise_r+0x4c>
 800d71a:	1c59      	adds	r1, r3, #1
 800d71c:	d103      	bne.n	800d726 <_raise_r+0x42>
 800d71e:	2316      	movs	r3, #22
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	2001      	movs	r0, #1
 800d724:	e7e7      	b.n	800d6f6 <_raise_r+0x12>
 800d726:	2400      	movs	r4, #0
 800d728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d72c:	4628      	mov	r0, r5
 800d72e:	4798      	blx	r3
 800d730:	2000      	movs	r0, #0
 800d732:	e7e0      	b.n	800d6f6 <_raise_r+0x12>

0800d734 <raise>:
 800d734:	4b02      	ldr	r3, [pc, #8]	; (800d740 <raise+0xc>)
 800d736:	4601      	mov	r1, r0
 800d738:	6818      	ldr	r0, [r3, #0]
 800d73a:	f7ff bfd3 	b.w	800d6e4 <_raise_r>
 800d73e:	bf00      	nop
 800d740:	20000058 	.word	0x20000058

0800d744 <_kill_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d07      	ldr	r5, [pc, #28]	; (800d764 <_kill_r+0x20>)
 800d748:	2300      	movs	r3, #0
 800d74a:	4604      	mov	r4, r0
 800d74c:	4608      	mov	r0, r1
 800d74e:	4611      	mov	r1, r2
 800d750:	602b      	str	r3, [r5, #0]
 800d752:	f7f5 f98f 	bl	8002a74 <_kill>
 800d756:	1c43      	adds	r3, r0, #1
 800d758:	d102      	bne.n	800d760 <_kill_r+0x1c>
 800d75a:	682b      	ldr	r3, [r5, #0]
 800d75c:	b103      	cbz	r3, 800d760 <_kill_r+0x1c>
 800d75e:	6023      	str	r3, [r4, #0]
 800d760:	bd38      	pop	{r3, r4, r5, pc}
 800d762:	bf00      	nop
 800d764:	200008c8 	.word	0x200008c8

0800d768 <_getpid_r>:
 800d768:	f7f5 b97c 	b.w	8002a64 <_getpid>

0800d76c <_fstat_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d07      	ldr	r5, [pc, #28]	; (800d78c <_fstat_r+0x20>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	4611      	mov	r1, r2
 800d778:	602b      	str	r3, [r5, #0]
 800d77a:	f7f5 f9da 	bl	8002b32 <_fstat>
 800d77e:	1c43      	adds	r3, r0, #1
 800d780:	d102      	bne.n	800d788 <_fstat_r+0x1c>
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	b103      	cbz	r3, 800d788 <_fstat_r+0x1c>
 800d786:	6023      	str	r3, [r4, #0]
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	bf00      	nop
 800d78c:	200008c8 	.word	0x200008c8

0800d790 <_isatty_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <_isatty_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f5 f9d9 	bl	8002b52 <_isatty>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_isatty_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_isatty_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	200008c8 	.word	0x200008c8

0800d7b0 <_init>:
 800d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b2:	bf00      	nop
 800d7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b6:	bc08      	pop	{r3}
 800d7b8:	469e      	mov	lr, r3
 800d7ba:	4770      	bx	lr

0800d7bc <_fini>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	bf00      	nop
 800d7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c2:	bc08      	pop	{r3}
 800d7c4:	469e      	mov	lr, r3
 800d7c6:	4770      	bx	lr
