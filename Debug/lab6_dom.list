
lab6_dom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d098  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800d298  0800d298  0001d298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d854  0800d854  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d85c  0800d85c  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d860  0800d860  0001d860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800d864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  2000022c  0800da90  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800da90  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cac2  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d86  00000000  00000000  0003cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00040aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00042070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006236  00000000  00000000  000434b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2d0  00000000  00000000  000496e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010530b  00000000  00000000  000639b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00168cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000701c  00000000  00000000  00168d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d280 	.word	0x0800d280

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800d280 	.word	0x0800d280

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 fa4b 	bl	8000e74 <null_ptr_check>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d117      	bne.n	8000a1a <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	20d0      	movs	r0, #208	; 0xd0
 80009f2:	f000 f818 	bl	8000a26 <bmp2_get_regs>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10b      	bne.n	8000a1a <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b58      	cmp	r3, #88	; 0x58
 8000a08:	d105      	bne.n	8000a16 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 fa7d 	bl	8000f0a <get_calib_param>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e001      	b.n	8000a1a <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000a16:	23fc      	movs	r3, #252	; 0xfc
 8000a18:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000a26:	b590      	push	{r4, r7, lr}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	f000 fa1c 	bl	8000e74 <null_ptr_check>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d11e      	bne.n	8000a86 <bmp2_get_regs+0x60>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01b      	beq.n	8000a86 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a5c:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68dc      	ldr	r4, [r3, #12]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	7bf8      	ldrb	r0, [r7, #15]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	47a0      	blx	r4
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000a80:	23fe      	movs	r3, #254	; 0xfe
 8000a82:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000a84:	e001      	b.n	8000a8a <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000a86:	23ff      	movs	r3, #255	; 0xff
 8000a88:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}

08000a96 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000a96:	b590      	push	{r4, r7, lr}
 8000a98:	b08b      	sub	sp, #44	; 0x2c
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d901      	bls.n	8000aae <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000aae:	6838      	ldr	r0, [r7, #0]
 8000ab0:	f000 f9e0 	bl	8000e74 <null_ptr_check>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d150      	bne.n	8000b64 <bmp2_set_regs+0xce>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d04d      	beq.n	8000b64 <bmp2_set_regs+0xce>
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d04a      	beq.n	8000b64 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d043      	beq.n	8000b5c <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d114      	bne.n	8000b0c <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77fb      	strb	r3, [r7, #31]
 8000ae6:	e00d      	b.n	8000b04 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4413      	add	r3, r2
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	68f9      	ldr	r1, [r7, #12]
 8000af4:	440b      	add	r3, r1
 8000af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3301      	adds	r3, #1
 8000b02:	77fb      	strb	r3, [r7, #31]
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8ed      	bhi.n	8000ae8 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d90b      	bls.n	8000b2a <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000b12:	f107 0114 	add.w	r1, r7, #20
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f000 f9ca 	bl	8000eb4 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	3b01      	subs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	e001      	b.n	8000b2e <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691c      	ldr	r4, [r3, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	7818      	ldrb	r0, [r3, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f107 0114 	add.w	r1, r7, #20
 8000b3e:	6a3a      	ldr	r2, [r7, #32]
 8000b40:	47a0      	blx	r4
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000b54:	23fe      	movs	r3, #254	; 0xfe
 8000b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000b5a:	e007      	b.n	8000b6c <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000b5c:	23fd      	movs	r3, #253	; 0xfd
 8000b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000b62:	e003      	b.n	8000b6c <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000b64:	23ff      	movs	r3, #255	; 0xff
 8000b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b6a:	e000      	b.n	8000b6e <bmp2_set_regs+0xd8>
        if (len > 0)
 8000b6c:	bf00      	nop
    }

    return rslt;
 8000b6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	372c      	adds	r7, #44	; 0x2c
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}

08000b7a <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000b82:	23e0      	movs	r3, #224	; 0xe0
 8000b84:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000b86:	23b6      	movs	r3, #182	; 0xb6
 8000b88:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000b8a:	f107 010d 	add.w	r1, r7, #13
 8000b8e:	f107 000e 	add.w	r0, r7, #14
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	f7ff ff7e 	bl	8000a96 <bmp2_set_regs>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d02d      	beq.n	8000c1a <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8000bbe:	f107 010c 	add.w	r1, r7, #12
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	20f4      	movs	r0, #244	; 0xf4
 8000bc8:	f7ff ff2d 	bl	8000a26 <bmp2_get_regs>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d122      	bne.n	8000c1e <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8000be2:	7b3b      	ldrb	r3, [r7, #12]
 8000be4:	109b      	asrs	r3, r3, #2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	095b      	lsrs	r3, r3, #5
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8000bfc:	7b7b      	ldrb	r3, [r7, #13]
 8000bfe:	109b      	asrs	r3, r3, #2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	715a      	strb	r2, [r3, #5]
 8000c18:	e001      	b.n	8000c1e <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000c1a:	23ff      	movs	r3, #255	; 0xff
 8000c1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fa01 	bl	8001040 <conf_sensor>
 8000c3e:	4603      	mov	r3, r0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01b      	beq.n	8000c90 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8000c58:	f107 010e 	add.w	r1, r7, #14
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	20f3      	movs	r0, #243	; 0xf3
 8000c62:	f7ff fee0 	bl	8000a26 <bmp2_get_regs>
 8000c66:	4603      	mov	r3, r0
 8000c68:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d110      	bne.n	8000c94 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	10db      	asrs	r3, r3, #3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	705a      	strb	r2, [r3, #1]
 8000c8e:	e001      	b.n	8000c94 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000c90:	23ff      	movs	r3, #255	; 0xff
 8000c92:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f9c3 	bl	8001040 <conf_sensor>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8000cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d024      	beq.n	8000d36 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8000cec:	f107 0110 	add.w	r1, r7, #16
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	20f7      	movs	r0, #247	; 0xf7
 8000cf6:	f7ff fe96 	bl	8000a26 <bmp2_get_regs>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d119      	bne.n	8000d3a <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8000d06:	f107 0208 	add.w	r2, r7, #8
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fabd 	bl	8001290 <parse_sensor_data>
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8000d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10b      	bne.n	8000d3a <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f80b 	bl	8000d46 <bmp2_compensate_data>
 8000d30:	4603      	mov	r3, r0
 8000d32:	75fb      	strb	r3, [r7, #23]
 8000d34:	e001      	b.n	8000d3a <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000d36:	23ff      	movs	r3, #255	; 0xff
 8000d38:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f88e 	bl	8000e74 <null_ptr_check>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8000d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d129      	bne.n	8000db8 <bmp2_compensate_data+0x72>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d026      	beq.n	8000db8 <bmp2_compensate_data+0x72>
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68f9      	ldr	r1, [r7, #12]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fabf 	bl	8001318 <compensate_temperature>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10a      	bne.n	8000dbc <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68f9      	ldr	r1, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fb7f 	bl	80014b0 <compensate_pressure>
 8000db2:	4603      	mov	r3, r0
 8000db4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8000db6:	e001      	b.n	8000dbc <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b092      	sub	sp, #72	; 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <bmp2_compute_meas_time+0xa4>)
 8000dd6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000dda:	461d      	mov	r5, r3
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <bmp2_compute_meas_time+0xa8>)
 8000de6:	f107 0410 	add.w	r4, r7, #16
 8000dea:	461d      	mov	r5, r3
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f83b 	bl	8000e74 <null_ptr_check>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8000e04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d125      	bne.n	8000e58 <bmp2_compute_meas_time+0x90>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d022      	beq.n	8000e58 <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e1b      	ldrb	r3, [r3, #24]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d113      	bne.n	8000e42 <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	78db      	ldrb	r3, [r3, #3]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e24:	4413      	add	r3, r2
 8000e26:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e34:	440b      	add	r3, r1
 8000e36:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000e40:	e00d      	b.n	8000e5e <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000e56:	e002      	b.n	8000e5e <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8000e5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3748      	adds	r7, #72	; 0x48
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800d298 	.word	0x0800d298
 8000e70:	0800d2ac 	.word	0x0800d2ac

08000e74 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <null_ptr_check+0x26>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <null_ptr_check+0x26>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <null_ptr_check+0x26>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8000e9a:	23ff      	movs	r3, #255	; 0xff
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e001      	b.n	8000ea4 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e015      	b.n	8000ef4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	441a      	add	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	441a      	add	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	440b      	add	r3, r1
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3e5      	bcc.n	8000ec8 <interleave_data+0x14>
    }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b08a      	sub	sp, #40	; 0x28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8000f28:	f107 010c 	add.w	r1, r7, #12
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2219      	movs	r2, #25
 8000f30:	2088      	movs	r0, #136	; 0x88
 8000f32:	f7ff fd78 	bl	8000a26 <bmp2_get_regs>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8000f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d177      	bne.n	8001034 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8000f6a:	7c7b      	ldrb	r3, [r7, #17]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	7c3b      	ldrb	r3, [r7, #16]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7cbb      	ldrb	r3, [r7, #18]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8000f90:	7d7b      	ldrb	r3, [r7, #21]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7d3b      	ldrb	r3, [r7, #20]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	7dbb      	ldrb	r3, [r7, #22]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8000fb4:	7e7b      	ldrb	r3, [r7, #25]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7e3b      	ldrb	r3, [r7, #24]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8000fc6:	7efb      	ldrb	r3, [r7, #27]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7ebb      	ldrb	r3, [r7, #26]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7f3b      	ldrb	r3, [r7, #28]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	7fbb      	ldrb	r3, [r7, #30]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8000ffc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800102c:	b25a      	sxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001038:	4618      	mov	r0, r3
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800104e:	2300      	movs	r3, #0
 8001050:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001052:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001056:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d074      	beq.n	8001148 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800105e:	f107 0114 	add.w	r1, r7, #20
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	20f4      	movs	r0, #244	; 0xf4
 8001068:	f7ff fcdd 	bl	8000a26 <bmp2_get_regs>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d169      	bne.n	800114c <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fd7e 	bl	8000b7a <bmp2_soft_reset>
 800107e:	4603      	mov	r3, r0
 8001080:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d160      	bne.n	800114c <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f861 	bl	8001158 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001096:	7d7b      	ldrb	r3, [r7, #21]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	015b      	lsls	r3, r3, #5
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f023 031c 	bic.w	r3, r3, #28
 80010b8:	b25a      	sxtb	r2, r3
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 031c 	and.w	r3, r3, #28
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	795b      	ldrb	r3, [r3, #5]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80010ee:	f107 0114 	add.w	r1, r7, #20
 80010f2:	f107 0010 	add.w	r0, r7, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2202      	movs	r2, #2
 80010fa:	f7ff fccc 	bl	8000a96 <bmp2_set_regs>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001102:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d120      	bne.n	800114c <conf_sensor+0x10c>
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01d      	beq.n	800114c <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	b25a      	sxtb	r2, r3
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b25b      	sxtb	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001132:	f107 0114 	add.w	r1, r7, #20
 8001136:	f107 0010 	add.w	r0, r7, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f7ff fcaa 	bl	8000a96 <bmp2_set_regs>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
 8001146:	e001      	b.n	800114c <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001148:	23ff      	movs	r3, #255	; 0xff
 800114a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800114c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b04      	cmp	r3, #4
 8001168:	f200 808b 	bhi.w	8001282 <set_os_mode+0x12a>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <set_os_mode+0x1c>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001189 	.word	0x08001189
 8001178:	080011bb 	.word	0x080011bb
 800117c:	080011ed 	.word	0x080011ed
 8001180:	0800121f 	.word	0x0800121f
 8001184:	08001251 	.word	0x08001251
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	b25b      	sxtb	r3, r3
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	b25b      	sxtb	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	f023 031c 	bic.w	r3, r3, #28
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	701a      	strb	r2, [r3, #0]
            break;
 80011b8:	e064      	b.n	8001284 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f023 031c 	bic.w	r3, r3, #28
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	701a      	strb	r2, [r3, #0]
            break;
 80011ea:	e04b      	b.n	8001284 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	f023 031c 	bic.w	r3, r3, #28
 800120e:	b25b      	sxtb	r3, r3
 8001210:	f043 030c 	orr.w	r3, r3, #12
 8001214:	b25b      	sxtb	r3, r3
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	701a      	strb	r2, [r3, #0]
            break;
 800121c:	e032      	b.n	8001284 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	b25b      	sxtb	r3, r3
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	f023 031c 	bic.w	r3, r3, #28
 8001240:	b25b      	sxtb	r3, r3
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	b25b      	sxtb	r3, r3
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	701a      	strb	r2, [r3, #0]
            break;
 800124e:	e019      	b.n	8001284 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	b25b      	sxtb	r3, r3
 800125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2da      	uxtb	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f023 031c 	bic.w	r3, r3, #28
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f043 0314 	orr.w	r3, r3, #20
 8001278:	b25b      	sxtb	r3, r3
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	701a      	strb	r2, [r3, #0]
            break;
 8001280:	e000      	b.n	8001284 <set_os_mode+0x12c>
        default:
            break;
 8001282:	bf00      	nop
    }
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3301      	adds	r3, #1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3303      	adds	r3, #3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	031b      	lsls	r3, r3, #12
 80012ce:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3305      	adds	r3, #5
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f000 fa31 	bl	8001768 <st_check_boundaries>
 8001306:	4603      	mov	r3, r0
 8001308:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800130a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001318:	b480      	push	{r7}
 800131a:	b08d      	sub	sp, #52	; 0x34
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001336:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001470 <compensate_temperature+0x158>
 800133a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8b9b      	ldrh	r3, [r3, #28]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800134a:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 8001478 <compensate_temperature+0x160>
 800134e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001352:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001364:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001368:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001378:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001480 <compensate_temperature+0x168>
 800137c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8b9b      	ldrh	r3, [r3, #28]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800138c:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 8001488 <compensate_temperature+0x170>
 8001390:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001394:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013a4:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8001480 <compensate_temperature+0x168>
 80013a8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8b9b      	ldrh	r3, [r3, #28]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 80013b8:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8001488 <compensate_temperature+0x170>
 80013bc:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80013c0:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80013c4:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 80013d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013da:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80013de:	ed97 6b06 	vldr	d6, [r7, #24]
 80013e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80013e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013ee:	ee17 2a90 	vmov	r2, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 80013f6:	ed97 6b06 	vldr	d6, [r7, #24]
 80013fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001402:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8001490 <compensate_temperature+0x178>
 8001406:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800140a:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 800140e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001412:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001498 <compensate_temperature+0x180>
 8001416:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d507      	bpl.n	8001430 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <compensate_temperature+0x190>)
 8001426:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001430:	ed97 7b08 	vldr	d7, [r7, #32]
 8001434:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80014a0 <compensate_temperature+0x188>
 8001438:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd07      	ble.n	8001452 <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <compensate_temperature+0x194>)
 8001448:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800144c:	2302      	movs	r3, #2
 800144e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001452:	68f9      	ldr	r1, [r7, #12]
 8001454:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001458:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800145c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001460:	4618      	mov	r0, r3
 8001462:	3734      	adds	r7, #52	; 0x34
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	f3af 8000 	nop.w
 8001470:	00000000 	.word	0x00000000
 8001474:	40d00000 	.word	0x40d00000
 8001478:	00000000 	.word	0x00000000
 800147c:	40900000 	.word	0x40900000
 8001480:	00000000 	.word	0x00000000
 8001484:	41000000 	.word	0x41000000
 8001488:	00000000 	.word	0x00000000
 800148c:	40c00000 	.word	0x40c00000
 8001490:	00000000 	.word	0x00000000
 8001494:	40b40000 	.word	0x40b40000
 8001498:	00000000 	.word	0x00000000
 800149c:	c0440000 	.word	0xc0440000
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40554000 	.word	0x40554000
 80014a8:	c0440000 	.word	0xc0440000
 80014ac:	40554000 	.word	0x40554000

080014b0 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b08d      	sub	sp, #52	; 0x34
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014e2:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001718 <compensate_pressure+0x268>
 80014e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014ea:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 80014ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80014f2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001504:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001508:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001720 <compensate_pressure+0x270>
 800150c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001510:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001522:	ed97 7b06 	vldr	d7, [r7, #24]
 8001526:	ee26 7b07 	vmul.f64	d7, d6, d7
 800152a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800152e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001532:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001536:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800153a:	ed97 7b04 	vldr	d7, [r7, #16]
 800153e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001542:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001554:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001728 <compensate_pressure+0x278>
 8001558:	ee27 7b05 	vmul.f64	d7, d7, d5
 800155c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001560:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001572:	ed97 7b06 	vldr	d7, [r7, #24]
 8001576:	ee26 6b07 	vmul.f64	d6, d6, d7
 800157a:	ed97 7b06 	vldr	d7, [r7, #24]
 800157e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001582:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001730 <compensate_pressure+0x280>
 8001586:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001598:	ed97 7b06 	vldr	d7, [r7, #24]
 800159c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001730 <compensate_pressure+0x280>
 80015a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ac:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 80015b0:	ed97 6b06 	vldr	d6, [r7, #24]
 80015b4:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001720 <compensate_pressure+0x270>
 80015b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015c0:	ee37 6b06 	vadd.f64	d6, d7, d6
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015d4:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 80015d8:	ed97 7b06 	vldr	d7, [r7, #24]
 80015dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d407      	bmi.n	80015f6 <compensate_pressure+0x146>
 80015e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	f340 8086 	ble.w	8001702 <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001602:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001738 <compensate_pressure+0x288>
 8001606:	ee36 7b47 	vsub.f64	d7, d6, d7
 800160a:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800160e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001612:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001740 <compensate_pressure+0x290>
 8001616:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800161a:	ed97 6b08 	vldr	d6, [r7, #32]
 800161e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001622:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001748 <compensate_pressure+0x298>
 8001626:	ee27 5b06 	vmul.f64	d5, d7, d6
 800162a:	ed97 6b06 	vldr	d6, [r7, #24]
 800162e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001632:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001644:	ed97 7b08 	vldr	d7, [r7, #32]
 8001648:	ee26 6b07 	vmul.f64	d6, d6, d7
 800164c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001650:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001654:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001750 <compensate_pressure+0x2a0>
 8001658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165c:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800166e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001672:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001676:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001720 <compensate_pressure+0x270>
 800167a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800167e:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001682:	ed97 6b06 	vldr	d6, [r7, #24]
 8001686:	ed97 7b04 	vldr	d7, [r7, #16]
 800168a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800169c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016a0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80016a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a8:	ed97 6b08 	vldr	d6, [r7, #32]
 80016ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b0:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 80016b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80016b8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001758 <compensate_pressure+0x2a8>
 80016bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d507      	bpl.n	80016d6 <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 80016c6:	a324      	add	r3, pc, #144	; (adr r3, 8001758 <compensate_pressure+0x2a8>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 80016d0:	2303      	movs	r3, #3
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 80016d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80016da:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001760 <compensate_pressure+0x2b0>
 80016de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd07      	ble.n	80016f8 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 80016e8:	a31d      	add	r3, pc, #116	; (adr r3, 8001760 <compensate_pressure+0x2b0>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 80016f2:	2304      	movs	r3, #4
 80016f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fe:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001702:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001706:	4618      	mov	r0, r3
 8001708:	3734      	adds	r7, #52	; 0x34
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	00000000 	.word	0x00000000
 800171c:	40ef4000 	.word	0x40ef4000
 8001720:	00000000 	.word	0x00000000
 8001724:	40e00000 	.word	0x40e00000
 8001728:	00000000 	.word	0x00000000
 800172c:	40f00000 	.word	0x40f00000
 8001730:	00000000 	.word	0x00000000
 8001734:	41200000 	.word	0x41200000
 8001738:	00000000 	.word	0x00000000
 800173c:	41300000 	.word	0x41300000
 8001740:	00000000 	.word	0x00000000
 8001744:	40b00000 	.word	0x40b00000
 8001748:	00000000 	.word	0x00000000
 800174c:	40b86a00 	.word	0x40b86a00
 8001750:	00000000 	.word	0x00000000
 8001754:	41e00000 	.word	0x41e00000
 8001758:	00000000 	.word	0x00000000
 800175c:	40dd4c00 	.word	0x40dd4c00
 8001760:	00000000 	.word	0x00000000
 8001764:	40fadb00 	.word	0x40fadb00

08001768 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db03      	blt.n	8001784 <st_check_boundaries+0x1c>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <st_check_boundaries+0x88>)
 8001780:	4293      	cmp	r3, r2
 8001782:	dd09      	ble.n	8001798 <st_check_boundaries+0x30>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db06      	blt.n	8001798 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <st_check_boundaries+0x88>)
 800178e:	4293      	cmp	r3, r2
 8001790:	dc02      	bgt.n	8001798 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001792:	23fa      	movs	r3, #250	; 0xfa
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e023      	b.n	80017e0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db03      	blt.n	80017a6 <st_check_boundaries+0x3e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <st_check_boundaries+0x88>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	dd09      	ble.n	80017ba <st_check_boundaries+0x52>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db06      	blt.n	80017ba <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <st_check_boundaries+0x88>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	dc02      	bgt.n	80017ba <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 80017b4:	23fb      	movs	r3, #251	; 0xfb
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e012      	b.n	80017e0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db03      	blt.n	80017c8 <st_check_boundaries+0x60>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <st_check_boundaries+0x88>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	dd09      	ble.n	80017dc <st_check_boundaries+0x74>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db03      	blt.n	80017d6 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <st_check_boundaries+0x88>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	dd02      	ble.n	80017dc <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80017d6:	23f9      	movs	r3, #249	; 0xf9
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e001      	b.n	80017e0 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	000ffff0 	.word	0x000ffff0

080017f4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff f8e7 	bl	80009d0 <bmp2_init>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f9cc 	bl	8000baa <bmp2_get_config>
 8001812:	4603      	mov	r3, r0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001816:	2300      	movs	r3, #0
 8001818:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 800181a:	2300      	movs	r3, #0
 800181c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 800181e:	2303      	movs	r3, #3
 8001820:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9fe 	bl	8000c2a <bmp2_set_config>
 800182e:	4603      	mov	r3, r0
 8001830:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4619      	mov	r1, r3
 800183a:	2003      	movs	r0, #3
 800183c:	f7ff fa30 	bl	8000ca0 <bmp2_set_power_mode>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001844:	f107 0108 	add.w	r1, r7, #8
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff faba 	bl	8000dc8 <bmp2_compute_meas_time>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b096      	sub	sp, #88	; 0x58
 8001868:	af02      	add	r7, sp, #8
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
 8001884:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80018b4:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 80018b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 80018ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <bmp2_spi_read+0xf4>)
 80018c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <bmp2_spi_read+0xf8>)
 80018ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	f001 fe53 	bl	800357c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f107 0214 	add.w	r2, r7, #20
 80018e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018e6:	2005      	movs	r0, #5
 80018e8:	9000      	str	r0, [sp, #0]
 80018ea:	481d      	ldr	r0, [pc, #116]	; (8001960 <bmp2_spi_read+0xfc>)
 80018ec:	f003 fb1d 	bl	8004f2a <HAL_SPI_TransmitReceive>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80018fc:	e012      	b.n	8001924 <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 80018fe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <bmp2_spi_read+0xf4>)
 8001904:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001908:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <bmp2_spi_read+0xf8>)
 800190e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001912:	2201      	movs	r2, #1
 8001914:	4619      	mov	r1, r3
 8001916:	f001 fe31 	bl	800357c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 800191a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800191e:	3301      	adds	r3, #1
 8001920:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001924:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001928:	2b01      	cmp	r3, #1
 800192a:	d9e8      	bls.n	80018fe <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 800192c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	3301      	adds	r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4619      	mov	r1, r3
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f006 fd03 	bl	8008350 <memcpy>

  return iError;
 800194a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800194e:	4618      	mov	r0, r3
 8001950:	3750      	adds	r7, #80	; 0x50
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000004 	.word	0x20000004
 800195c:	2000000c 	.word	0x2000000c
 8001960:	200002a8 	.word	0x200002a8

08001964 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800199e:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 80019a0:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	3301      	adds	r3, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 fccf 	bl	8008350 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 80019b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <bmp2_spi_write+0xd4>)
 80019b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <bmp2_spi_write+0xd8>)
 80019c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f001 fdd7 	bl	800357c <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f107 0110 	add.w	r1, r7, #16
 80019da:	2305      	movs	r3, #5
 80019dc:	4818      	ldr	r0, [pc, #96]	; (8001a40 <bmp2_spi_write+0xdc>)
 80019de:	f003 f936 	bl	8004c4e <HAL_SPI_Transmit>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80019ee:	e012      	b.n	8001a16 <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 80019f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019f4:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <bmp2_spi_write+0xd4>)
 80019f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <bmp2_spi_write+0xd8>)
 8001a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	f001 fdb8 	bl	800357c <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001a16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d9e8      	bls.n	80019f0 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001a26:	23ff      	movs	r3, #255	; 0xff
 8001a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001a2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	200002a8 	.word	0x200002a8

08001a44 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <bmp2_delay_us+0x24>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fa1b 	bl	8002e94 <HAL_Delay>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001a74:	23ff      	movs	r3, #255	; 0xff
 8001a76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <BMP2_ReadTemperature_degC+0x78>)
 8001a80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001a84:	230a      	movs	r3, #10
 8001a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f8d9 	bl	8000c48 <bmp2_get_status>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f911 	bl	8000cca <bmp2_get_sensor_data>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001aae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab2:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001ab6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001ac4:	7f3b      	ldrb	r3, [r7, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <BMP2_ReadTemperature_degC+0x66>
 8001aca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dcdb      	bgt.n	8001a8a <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ad6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ada:	eeb0 0b47 	vmov.f64	d0, d7
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	bff00000 	.word	0xbff00000

08001ae8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a84      	ldr	r2, [pc, #528]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a60      	ldr	r2, [pc, #384]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <MX_GPIO_Init+0x244>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS1_Pin|BMP280_CS2_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001bc4:	485a      	ldr	r0, [pc, #360]	; (8001d30 <MX_GPIO_Init+0x248>)
 8001bc6:	f001 fcd9 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_E_Pin|LCD_RS_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8001bca:	2200      	movs	r2, #0
 8001bcc:	217f      	movs	r1, #127	; 0x7f
 8001bce:	4859      	ldr	r0, [pc, #356]	; (8001d34 <MX_GPIO_Init+0x24c>)
 8001bd0:	f001 fcd4 	bl	800357c <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f244 0181 	movw	r1, #16513	; 0x4081
 8001bda:	4857      	ldr	r0, [pc, #348]	; (8001d38 <MX_GPIO_Init+0x250>)
 8001bdc:	f001 fcce 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2140      	movs	r1, #64	; 0x40
 8001be4:	4855      	ldr	r0, [pc, #340]	; (8001d3c <MX_GPIO_Init+0x254>)
 8001be6:	f001 fcc9 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS1_Pin|BMP280_CS2_Pin;
 8001bea:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	484b      	ldr	r0, [pc, #300]	; (8001d30 <MX_GPIO_Init+0x248>)
 8001c04:	f001 fb0e 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <MX_GPIO_Init+0x258>)
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4849      	ldr	r0, [pc, #292]	; (8001d44 <MX_GPIO_Init+0x25c>)
 8001c1e:	f001 fb01 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8001c22:	237f      	movs	r3, #127	; 0x7f
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_DB6_Pin|LCD_DB7_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	483e      	ldr	r0, [pc, #248]	; (8001d34 <MX_GPIO_Init+0x24c>)
 8001c3a:	f001 faf3 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c3e:	2332      	movs	r3, #50	; 0x32
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c4e:	230b      	movs	r3, #11
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	483a      	ldr	r0, [pc, #232]	; (8001d44 <MX_GPIO_Init+0x25c>)
 8001c5a:	f001 fae3 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c5e:	2386      	movs	r3, #134	; 0x86
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c6e:	230b      	movs	r3, #11
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	4833      	ldr	r0, [pc, #204]	; (8001d48 <MX_GPIO_Init+0x260>)
 8001c7a:	f001 fad3 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c7e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4828      	ldr	r0, [pc, #160]	; (8001d38 <MX_GPIO_Init+0x250>)
 8001c98:	f001 fac4 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	481f      	ldr	r0, [pc, #124]	; (8001d38 <MX_GPIO_Init+0x250>)
 8001cba:	f001 fab3 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_GPIO_Init+0x254>)
 8001cd6:	f001 faa5 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_GPIO_Init+0x254>)
 8001cee:	f001 fa99 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d04:	230b      	movs	r3, #11
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <MX_GPIO_Init+0x254>)
 8001d10:	f001 fa88 	bl	8003224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2028      	movs	r0, #40	; 0x28
 8001d1a:	f001 f9ba 	bl	8003092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1e:	2028      	movs	r0, #40	; 0x28
 8001d20:	f001 f9d3 	bl	80030ca <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	; 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	10110000 	.word	0x10110000
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b090      	sub	sp, #64	; 0x40
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_UART_RxCpltCallback+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 80de 	bne.w	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
	{
		uint8_t tx_buffer[32];

		if(Data[0]=='C')
 8001d60:	4b71      	ldr	r3, [pc, #452]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b43      	cmp	r3, #67	; 0x43
 8001d66:	d159      	bne.n	8001e1c <HAL_UART_RxCpltCallback+0xd0>
		{
			sscanf((char*)&Data[1], "%f", &PWM_Control_Fan);
 8001d68:	4a70      	ldr	r2, [pc, #448]	; (8001f2c <HAL_UART_RxCpltCallback+0x1e0>)
 8001d6a:	4971      	ldr	r1, [pc, #452]	; (8001f30 <HAL_UART_RxCpltCallback+0x1e4>)
 8001d6c:	4871      	ldr	r0, [pc, #452]	; (8001f34 <HAL_UART_RxCpltCallback+0x1e8>)
 8001d6e:	f007 f973 	bl	8009058 <siscanf>
			if(PWM_Control_Fan>= 0 && PWM_Control_Fan<= 1000)
 8001d72:	4b6e      	ldr	r3, [pc, #440]	; (8001f2c <HAL_UART_RxCpltCallback+0x1e0>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	db35      	blt.n	8001dee <HAL_UART_RxCpltCallback+0xa2>
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_UART_RxCpltCallback+0x1e0>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001f38 <HAL_UART_RxCpltCallback+0x1ec>
 8001d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d82b      	bhi.n	8001dee <HAL_UART_RxCpltCallback+0xa2>
			{
				int resp_len = sprintf((char*)tx_buffer, "Fan DUTY: %i%%\r\n", (int)(PWM_Control_Fan/10));
 8001d96:	4b65      	ldr	r3, [pc, #404]	; (8001f2c <HAL_UART_RxCpltCallback+0x1e0>)
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	ee17 2a90 	vmov	r2, s15
 8001db0:	4962      	ldr	r1, [pc, #392]	; (8001f3c <HAL_UART_RxCpltCallback+0x1f0>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f007 f930 	bl	8009018 <siprintf>
 8001db8:	6338      	str	r0, [r7, #48]	; 0x30
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	f107 010c 	add.w	r1, r7, #12
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	485e      	ldr	r0, [pc, #376]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001dc6:	f004 ff45 	bl	8006c54 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_UART_RxCpltCallback+0x1f8>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4955      	ldr	r1, [pc, #340]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001dd2:	485b      	ldr	r0, [pc, #364]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001dd4:	f004 ffd1 	bl	8006d7a <HAL_UART_Receive_IT>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 8001dd8:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_UART_RxCpltCallback+0x1e0>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_UART_RxCpltCallback+0x1fc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de6:	ee17 2a90 	vmov	r2, s15
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
			{
 8001dec:	e096      	b.n	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
			}
			else
			{
				int resp_len = sprintf((char*)tx_buffer, "Wrong DUTY\r\n");
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4956      	ldr	r1, [pc, #344]	; (8001f4c <HAL_UART_RxCpltCallback+0x200>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f007 f90f 	bl	8009018 <siprintf>
 8001dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f107 010c 	add.w	r1, r7, #12
 8001e04:	230a      	movs	r3, #10
 8001e06:	484e      	ldr	r0, [pc, #312]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001e08:	f004 ff24 	bl	8006c54 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4945      	ldr	r1, [pc, #276]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e14:	484a      	ldr	r0, [pc, #296]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001e16:	f004 ffb0 	bl	8006d7a <HAL_UART_Receive_IT>
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
		}
	}
}
 8001e1a:	e07f      	b.n	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
		else if(Data[0]=='H')
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b48      	cmp	r3, #72	; 0x48
 8001e22:	d159      	bne.n	8001ed8 <HAL_UART_RxCpltCallback+0x18c>
			sscanf((char*)&Data[1], "%f", &PWM_Control_Heater);
 8001e24:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_UART_RxCpltCallback+0x204>)
 8001e26:	4942      	ldr	r1, [pc, #264]	; (8001f30 <HAL_UART_RxCpltCallback+0x1e4>)
 8001e28:	4842      	ldr	r0, [pc, #264]	; (8001f34 <HAL_UART_RxCpltCallback+0x1e8>)
 8001e2a:	f007 f915 	bl	8009058 <siscanf>
			if(PWM_Control_Heater>= 0 && PWM_Control_Heater<= 1000)
 8001e2e:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_UART_RxCpltCallback+0x204>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	db35      	blt.n	8001eaa <HAL_UART_RxCpltCallback+0x15e>
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_UART_RxCpltCallback+0x204>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001f38 <HAL_UART_RxCpltCallback+0x1ec>
 8001e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	d82b      	bhi.n	8001eaa <HAL_UART_RxCpltCallback+0x15e>
				int resp_len = sprintf((char*)tx_buffer, "Heater DUTY: %i%%\r\n", (int)(PWM_Control_Heater/10));
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_UART_RxCpltCallback+0x204>)
 8001e54:	ed93 7a00 	vldr	s14, [r3]
 8001e58:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	4939      	ldr	r1, [pc, #228]	; (8001f54 <HAL_UART_RxCpltCallback+0x208>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f007 f8d2 	bl	8009018 <siprintf>
 8001e74:	63b8      	str	r0, [r7, #56]	; 0x38
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 010c 	add.w	r1, r7, #12
 8001e7e:	230a      	movs	r3, #10
 8001e80:	482f      	ldr	r0, [pc, #188]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001e82:	f004 fee7 	bl	8006c54 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len2);
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_UART_RxCpltCallback+0x20c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4926      	ldr	r1, [pc, #152]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e8e:	482c      	ldr	r0, [pc, #176]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001e90:	f004 ff73 	bl	8006d7a <HAL_UART_Receive_IT>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_UART_RxCpltCallback+0x204>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_UART_RxCpltCallback+0x1fc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
			{
 8001ea8:	e038      	b.n	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
				int resp_len = sprintf((char*)tx_buffer, "Wrong DUTY\r\n");
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_UART_RxCpltCallback+0x200>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 f8b1 	bl	8009018 <siprintf>
 8001eb6:	6378      	str	r0, [r7, #52]	; 0x34
				HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f107 010c 	add.w	r1, r7, #12
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	481f      	ldr	r0, [pc, #124]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001ec4:	f004 fec6 	bl	8006c54 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_UART_RxCpltCallback+0x1f8>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ed0:	481b      	ldr	r0, [pc, #108]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001ed2:	f004 ff52 	bl	8006d7a <HAL_UART_Receive_IT>
}
 8001ed6:	e021      	b.n	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
			sscanf((char*)&Data[0], "%f", &temperature_reference);
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_UART_RxCpltCallback+0x210>)
 8001eda:	4915      	ldr	r1, [pc, #84]	; (8001f30 <HAL_UART_RxCpltCallback+0x1e4>)
 8001edc:	4812      	ldr	r0, [pc, #72]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ede:	f007 f8bb 	bl	8009058 <siscanf>
			int resp_len = sprintf((char*)tx_buffer, "Temp Ref: %f\r\n", temperature_reference);
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_UART_RxCpltCallback+0x210>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eec:	f107 000c 	add.w	r0, r7, #12
 8001ef0:	ec53 2b17 	vmov	r2, r3, d7
 8001ef4:	491a      	ldr	r1, [pc, #104]	; (8001f60 <HAL_UART_RxCpltCallback+0x214>)
 8001ef6:	f007 f88f 	bl	8009018 <siprintf>
 8001efa:	63f8      	str	r0, [r7, #60]	; 0x3c
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	230a      	movs	r3, #10
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001f08:	f004 fea4 	bl	8006c54 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_UART_RxCpltCallback+0x1f8>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4905      	ldr	r1, [pc, #20]	; (8001f28 <HAL_UART_RxCpltCallback+0x1dc>)
 8001f14:	480a      	ldr	r0, [pc, #40]	; (8001f40 <HAL_UART_RxCpltCallback+0x1f4>)
 8001f16:	f004 ff30 	bl	8006d7a <HAL_UART_Receive_IT>
}
 8001f1a:	e7ff      	b.n	8001f1c <HAL_UART_RxCpltCallback+0x1d0>
 8001f1c:	bf00      	nop
 8001f1e:	3740      	adds	r7, #64	; 0x40
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004800 	.word	0x40004800
 8001f28:	20000290 	.word	0x20000290
 8001f2c:	200002a0 	.word	0x200002a0
 8001f30:	0800d2cc 	.word	0x0800d2cc
 8001f34:	20000291 	.word	0x20000291
 8001f38:	447a0000 	.word	0x447a0000
 8001f3c:	0800d2d0 	.word	0x0800d2d0
 8001f40:	2000043c 	.word	0x2000043c
 8001f44:	20000288 	.word	0x20000288
 8001f48:	20000358 	.word	0x20000358
 8001f4c:	0800d2e4 	.word	0x0800d2e4
 8001f50:	200002a4 	.word	0x200002a4
 8001f54:	0800d2f4 	.word	0x0800d2f4
 8001f58:	20000286 	.word	0x20000286
 8001f5c:	20000298 	.word	0x20000298
 8001f60:	0800d308 	.word	0x0800d308

08001f64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0a0      	sub	sp, #128	; 0x80
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d12e      	bne.n	8001fd4 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		char str_buffer[100];
		int n;

#ifdef BMP2_VER_2021
		float temp = BMP2_ReadTemperature_degC(&hbmp2_1);
 8001f76:	4819      	ldr	r0, [pc, #100]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f78:	f7ff fd78 	bl	8001a6c <BMP2_ReadTemperature_degC>
 8001f7c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f84:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		float temp_ref = temperature_reference;
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	673b      	str	r3, [r7, #112]	; 0x70
		n = sprintf(str_buffer, "{\"Current Temperature\": %2.02f *C} {\"Reference Temperature\": %2.02f *C}\r\n", temp, temp_ref);
 8001f8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f92:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f96:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f9e:	f107 0008 	add.w	r0, r7, #8
 8001fa2:	ed8d 7b00 	vstr	d7, [sp]
 8001fa6:	ec53 2b16 	vmov	r2, r3, d6
 8001faa:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001fac:	f007 f834 	bl	8009018 <siprintf>
 8001fb0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

		str_buffer[n] = '\n';
 8001fb2:	f107 0208 	add.w	r2, r7, #8
 8001fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb8:	4413      	add	r3, r2
 8001fba:	220a      	movs	r2, #10
 8001fbc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+1, 1000);
 8001fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	f107 0108 	add.w	r1, r7, #8
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001fd0:	f004 fe40 	bl	8006c54 <HAL_UART_Transmit>
	}
}
 8001fd4:	bf00      	nop
 8001fd6:	3778      	adds	r7, #120	; 0x78
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000010 	.word	0x20000010
 8001fe0:	20000298 	.word	0x20000298
 8001fe4:	0800d318 	.word	0x0800d318
 8001fe8:	2000043c 	.word	0x2000043c
 8001fec:	00000000 	.word	0x00000000

08001ff0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ff6:	f000 fef0 	bl	8002dda <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ffa:	f000 f91b 	bl	8002234 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ffe:	f7ff fd73 	bl	8001ae8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8002002:	f000 fdbb 	bl	8002b7c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8002006:	f000 fe35 	bl	8002c74 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI4_Init();
 800200a:	f000 f9b3 	bl	8002374 <MX_SPI4_Init>
	MX_TIM2_Init();
 800200e:	f000 fba5 	bl	800275c <MX_TIM2_Init>
	MX_TIM3_Init();
 8002012:	f000 fbf1 	bl	80027f8 <MX_TIM3_Init>
	MX_TIM5_Init();
 8002016:	f000 fc7d 	bl	8002914 <MX_TIM5_Init>
	MX_TIM7_Init();
 800201a:	f000 fcc9 	bl	80029b0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800201e:	2100      	movs	r1, #0
 8002020:	4871      	ldr	r0, [pc, #452]	; (80021e8 <main+0x1f8>)
 8002022:	f003 fd47 	bl	8005ab4 <HAL_TIM_PWM_Start>
	PWM_Control_Heater = 0;
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <main+0x1fc>)
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 800202e:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <main+0x1fc>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <main+0x1f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203c:	ee17 2a90 	vmov	r2, s15
 8002040:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002042:	2104      	movs	r1, #4
 8002044:	4868      	ldr	r0, [pc, #416]	; (80021e8 <main+0x1f8>)
 8002046:	f003 fd35 	bl	8005ab4 <HAL_TIM_PWM_Start>
	PWM_Control_Fan = 0;
 800204a:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <main+0x200>)
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <main+0x200>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <main+0x1f8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	639a      	str	r2, [r3, #56]	; 0x38

	PID.Kp = 1.3;
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <main+0x204>)
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <main+0x208>)
 800206a:	619a      	str	r2, [r3, #24]
	PID.Ki = 0.001*Tp;
 800206c:	eddf 7a63 	vldr	s15, [pc, #396]	; 80021fc <main+0x20c>
 8002070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002074:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80021d8 <main+0x1e8>
 8002078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800207c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002080:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <main+0x204>)
 8002082:	edc3 7a07 	vstr	s15, [r3, #28]
	PID.Kd = 3.3/Tp;
 8002086:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80021fc <main+0x20c>
 800208a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800208e:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80021e0 <main+0x1f0>
 8002092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800209a:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <main+0x204>)
 800209c:	edc3 7a08 	vstr	s15, [r3, #32]
	arm_pid_init_f32(&PID, 1);
 80020a0:	2101      	movs	r1, #1
 80020a2:	4854      	ldr	r0, [pc, #336]	; (80021f4 <main+0x204>)
 80020a4:	f006 f90c 	bl	80082c0 <arm_pid_init_f32>

	temperature_reference = 30.00;
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <main+0x210>)
 80020aa:	4a56      	ldr	r2, [pc, #344]	; (8002204 <main+0x214>)
 80020ac:	601a      	str	r2, [r3, #0]

	//	LCD_Init(&hlcd1);

	msg_len = strlen("C000\r");
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <main+0x218>)
 80020b0:	2205      	movs	r2, #5
 80020b2:	801a      	strh	r2, [r3, #0]
	msg_len2 = strlen("H000\r");
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <main+0x21c>)
 80020b6:	2205      	movs	r2, #5
 80020b8:	801a      	strh	r2, [r3, #0]

#ifdef BMP2_VER_2021
	BMP2_Init(&hbmp2_1);
 80020ba:	4855      	ldr	r0, [pc, #340]	; (8002210 <main+0x220>)
 80020bc:	f7ff fb9a 	bl	80017f4 <BMP2_Init>
#endif

	HAL_TIM_Base_Start_IT(&htim2);
 80020c0:	4854      	ldr	r0, [pc, #336]	; (8002214 <main+0x224>)
 80020c2:	f003 fc1d 	bl	8005900 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80020c6:	4854      	ldr	r0, [pc, #336]	; (8002218 <main+0x228>)
 80020c8:	f003 fc1a 	bl	8005900 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, Data, msg_len);
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <main+0x218>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4952      	ldr	r1, [pc, #328]	; (800221c <main+0x22c>)
 80020d4:	4852      	ldr	r0, [pc, #328]	; (8002220 <main+0x230>)
 80020d6:	f004 fe50 	bl	8006d7a <HAL_UART_Receive_IT>
		//			LCD_Locate(0,0);
		//			LCD_String(" STM32");
		//			LCD_Locate(0,1);
		//			LCD_String("www.msalamon.pl ");

		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1);
 80020da:	484d      	ldr	r0, [pc, #308]	; (8002210 <main+0x220>)
 80020dc:	f7ff fcc6 	bl	8001a6c <BMP2_ReadTemperature_degC>
 80020e0:	eeb0 7b40 	vmov.f64	d7, d0
 80020e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <main+0x234>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
		temperature_error = temperature_reference - temperature_current;
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <main+0x210>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <main+0x234>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <main+0x238>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
		PWM_Control_Heater = 999.0*arm_pid_f32(&PID, temperature_error);
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <main+0x238>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <main+0x204>)
 800210a:	60fa      	str	r2, [r7, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	edd7 7a02 	vldr	s15, [r7, #8]
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	edd3 7a03 	vldr	s15, [r3, #12]
 8002128:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800212c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edd3 6a02 	vldr	s13, [r3, #8]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edd3 7a04 	vldr	s15, [r3, #16]
 800213c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002166:	edd7 7a01 	vldr	s15, [r7, #4]
 800216a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800222c <main+0x23c>
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <main+0x1fc>)
 8002174:	edc3 7a00 	vstr	s15, [r3]

		//Saturation limit
		if(PWM_Control_Heater < 0)
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <main+0x1fc>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	d503      	bpl.n	8002190 <main+0x1a0>
		{
			Heater_PWM_Duty = 0;
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <main+0x240>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e018      	b.n	80021c2 <main+0x1d2>
		}
		else if(PWM_Control_Heater > 999.0)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <main+0x1fc>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800222c <main+0x23c>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	dd04      	ble.n	80021ae <main+0x1be>
		{
			Heater_PWM_Duty = 999;
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <main+0x240>)
 80021a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	e009      	b.n	80021c2 <main+0x1d2>
		}
		else
		{
			Heater_PWM_Duty = (uint16_t)PWM_Control_Heater;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <main+0x1fc>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b8:	ee17 3a90 	vmov	r3, s15
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <main+0x240>)
 80021c0:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Heater_PWM_Duty);
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <main+0x240>)
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <main+0x1f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
		//				{
		//					PWM_Control_Fan = 0;
		//					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
		//				}

		HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f000 fe61 	bl	8002e94 <HAL_Delay>
		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1);
 80021d2:	e782      	b.n	80020da <main+0xea>
 80021d4:	f3af 8000 	nop.w
 80021d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80021dc:	3f50624d 	.word	0x3f50624d
 80021e0:	66666666 	.word	0x66666666
 80021e4:	400a6666 	.word	0x400a6666
 80021e8:	20000358 	.word	0x20000358
 80021ec:	200002a4 	.word	0x200002a4
 80021f0:	200002a0 	.word	0x200002a0
 80021f4:	20000260 	.word	0x20000260
 80021f8:	3fa66666 	.word	0x3fa66666
 80021fc:	3c1374bc 	.word	0x3c1374bc
 8002200:	20000298 	.word	0x20000298
 8002204:	41f00000 	.word	0x41f00000
 8002208:	20000288 	.word	0x20000288
 800220c:	20000286 	.word	0x20000286
 8002210:	20000010 	.word	0x20000010
 8002214:	200003a4 	.word	0x200003a4
 8002218:	200003f0 	.word	0x200003f0
 800221c:	20000290 	.word	0x20000290
 8002220:	2000043c 	.word	0x2000043c
 8002224:	2000025c 	.word	0x2000025c
 8002228:	2000028c 	.word	0x2000028c
 800222c:	4479c000 	.word	0x4479c000
 8002230:	20000284 	.word	0x20000284

08002234 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0b8      	sub	sp, #224	; 0xe0
 8002238:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800223e:	2234      	movs	r2, #52	; 0x34
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f006 f892 	bl	800836c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002248:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	2290      	movs	r2, #144	; 0x90
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f006 f883 	bl	800836c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002266:	f001 fb0f 	bl	8003888 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <SystemClock_Config+0x128>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <SystemClock_Config+0x128>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <SystemClock_Config+0x128>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <SystemClock_Config+0x12c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <SystemClock_Config+0x12c>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <SystemClock_Config+0x12c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800229e:	2301      	movs	r3, #1
 80022a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80022ba:	2304      	movs	r3, #4
 80022bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80022c0:	2360      	movs	r3, #96	; 0x60
 80022c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fb33 	bl	8003948 <HAL_RCC_OscConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80022e8:	f000 f83e 	bl	8002368 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022ec:	f001 fadc 	bl	80038a8 <HAL_PWREx_EnableOverDrive>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80022f6:	f000 f837 	bl	8002368 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fa:	230f      	movs	r3, #15
 80022fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800231a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800231e:	2103      	movs	r1, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fdbf 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 800232c:	f000 f81c 	bl	8002368 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <SystemClock_Config+0x130>)
 8002332:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002334:	2300      	movs	r3, #0
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4618      	mov	r0, r3
 8002344:	f001 ffb0 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 800234e:	f000 f80b 	bl	8002368 <Error_Handler>
	}
}
 8002352:	bf00      	nop
 8002354:	37e0      	adds	r7, #224	; 0xe0
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	00200100 	.word	0x00200100

08002368 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236c:	b672      	cpsid	i
}
 800236e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002370:	e7fe      	b.n	8002370 <Error_Handler+0x8>
	...

08002374 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_SPI4_Init+0x74>)
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <MX_SPI4_Init+0x78>)
 800237c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_SPI4_Init+0x74>)
 8002380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002384:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_SPI4_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_SPI4_Init+0x74>)
 800238e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002392:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_SPI4_Init+0x74>)
 8002396:	2202      	movs	r2, #2
 8002398:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_SPI4_Init+0x74>)
 800239c:	2201      	movs	r2, #1
 800239e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023aa:	2210      	movs	r2, #16
 80023ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023c2:	2207      	movs	r2, #7
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_SPI4_Init+0x74>)
 80023d4:	f002 fb90 	bl	8004af8 <HAL_SPI_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80023de:	f7ff ffc3 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200002a8 	.word	0x200002a8
 80023ec:	40013400 	.word	0x40013400

080023f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_SPI_MspInit+0x8c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d12f      	bne.n	8002472 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_SPI_MspInit+0x90>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_SPI_MspInit+0x90>)
 8002418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_SPI_MspInit+0x90>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_SPI_MspInit+0x90>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_SPI_MspInit+0x90>)
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_SPI_MspInit+0x90>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002442:	2364      	movs	r3, #100	; 0x64
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002452:	2305      	movs	r3, #5
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4809      	ldr	r0, [pc, #36]	; (8002484 <HAL_SPI_MspInit+0x94>)
 800245e:	f000 fee1 	bl	8003224 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2054      	movs	r0, #84	; 0x54
 8002468:	f000 fe13 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800246c:	2054      	movs	r0, #84	; 0x54
 800246e:	f000 fe2c 	bl	80030ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40013400 	.word	0x40013400
 8002480:	40023800 	.word	0x40023800
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_MspInit+0x44>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_MspInit+0x44>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_MspInit+0x44>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_MspInit+0x44>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_MspInit+0x44>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_MspInit+0x44>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <NMI_Handler+0x4>

080024d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <MemManage_Handler+0x4>

080024e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler+0x4>

080024ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f000 fc9a 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <TIM2_IRQHandler+0x10>)
 800252a:	f003 fbbd 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200003a4 	.word	0x200003a4

08002538 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM3_IRQHandler+0x10>)
 800253e:	f003 fbb3 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000358 	.word	0x20000358

0800254c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <USART3_IRQHandler+0x10>)
 8002552:	f004 fc4f 	bl	8006df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000043c 	.word	0x2000043c

08002560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002564:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002568:	f001 f822 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM5_IRQHandler+0x10>)
 8002576:	f003 fb97 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000030c 	.word	0x2000030c

08002584 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM7_IRQHandler+0x10>)
 800258a:	f003 fb8d 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200003f0 	.word	0x200003f0

08002598 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <SPI4_IRQHandler+0x10>)
 800259e:	f002 fed7 	bl	8005350 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200002a8 	.word	0x200002a8

080025ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	return 1;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_kill>:

int _kill(int pid, int sig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025c6:	f005 fe99 	bl	80082fc <__errno>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2216      	movs	r2, #22
 80025ce:	601a      	str	r2, [r3, #0]
	return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_exit>:

void _exit (int status)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ffe7 	bl	80025bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ee:	e7fe      	b.n	80025ee <_exit+0x12>

080025f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
	}

return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e009      	b.n	8002650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <_write+0x12>
	}
	return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_close>:

int _close(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268a:	605a      	str	r2, [r3, #4]
	return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f005 fdfe 	bl	80082fc <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20080000 	.word	0x20080000
 800272c:	00000400 	.word	0x00000400
 8002730:	20000248 	.word	0x20000248
 8002734:	200008d8 	.word	0x200008d8

08002738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_TIM2_Init+0x94>)
 800277c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_TIM2_Init+0x94>)
 8002784:	225f      	movs	r2, #95	; 0x5f
 8002786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_TIM2_Init+0x94>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_TIM2_Init+0x94>)
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <MX_TIM2_Init+0x98>)
 8002792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_TIM2_Init+0x94>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_TIM2_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027a0:	4813      	ldr	r0, [pc, #76]	; (80027f0 <MX_TIM2_Init+0x94>)
 80027a2:	f003 f855 	bl	8005850 <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027ac:	f7ff fddc 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_TIM2_Init+0x94>)
 80027be:	f003 fca3 	bl	8006108 <HAL_TIM_ConfigClockSource>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027c8:	f7ff fdce 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_TIM2_Init+0x94>)
 80027da:	f004 f941 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027e4:	f7ff fdc0 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200003a4 	.word	0x200003a4
 80027f4:	000f423f 	.word	0x000f423f

080027f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <MX_TIM3_Init+0x114>)
 800282c:	4a38      	ldr	r2, [pc, #224]	; (8002910 <MX_TIM3_Init+0x118>)
 800282e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <MX_TIM3_Init+0x114>)
 8002832:	225f      	movs	r2, #95	; 0x5f
 8002834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b35      	ldr	r3, [pc, #212]	; (800290c <MX_TIM3_Init+0x114>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <MX_TIM3_Init+0x114>)
 800283e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <MX_TIM3_Init+0x114>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <MX_TIM3_Init+0x114>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002850:	482e      	ldr	r0, [pc, #184]	; (800290c <MX_TIM3_Init+0x114>)
 8002852:	f002 fffd 	bl	8005850 <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800285c:	f7ff fd84 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800286a:	4619      	mov	r1, r3
 800286c:	4827      	ldr	r0, [pc, #156]	; (800290c <MX_TIM3_Init+0x114>)
 800286e:	f003 fc4b 	bl	8006108 <HAL_TIM_ConfigClockSource>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002878:	f7ff fd76 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800287c:	4823      	ldr	r0, [pc, #140]	; (800290c <MX_TIM3_Init+0x114>)
 800287e:	f003 f8b7 	bl	80059f0 <HAL_TIM_PWM_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002888:	f7ff fd6e 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	481c      	ldr	r0, [pc, #112]	; (800290c <MX_TIM3_Init+0x114>)
 800289c:	f004 f8e0 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80028a6:	f7ff fd5f 	bl	8002368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	; 0x60
 80028ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ba:	463b      	mov	r3, r7
 80028bc:	2200      	movs	r2, #0
 80028be:	4619      	mov	r1, r3
 80028c0:	4812      	ldr	r0, [pc, #72]	; (800290c <MX_TIM3_Init+0x114>)
 80028c2:	f003 fb11 	bl	8005ee8 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028cc:	f7ff fd4c 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	2204      	movs	r2, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	480d      	ldr	r0, [pc, #52]	; (800290c <MX_TIM3_Init+0x114>)
 80028d8:	f003 fb06 	bl	8005ee8 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80028e2:	f7ff fd41 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e6:	463b      	mov	r3, r7
 80028e8:	2208      	movs	r2, #8
 80028ea:	4619      	mov	r1, r3
 80028ec:	4807      	ldr	r0, [pc, #28]	; (800290c <MX_TIM3_Init+0x114>)
 80028ee:	f003 fafb 	bl	8005ee8 <HAL_TIM_PWM_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80028f8:	f7ff fd36 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <MX_TIM3_Init+0x114>)
 80028fe:	f000 f905 	bl	8002b0c <HAL_TIM_MspPostInit>

}
 8002902:	bf00      	nop
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000358 	.word	0x20000358
 8002910:	40000400 	.word	0x40000400

08002914 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <MX_TIM5_Init+0x98>)
 8002936:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_TIM5_Init+0x94>)
 800293a:	225f      	movs	r2, #95	; 0x5f
 800293c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800294a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_TIM5_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002958:	4813      	ldr	r0, [pc, #76]	; (80029a8 <MX_TIM5_Init+0x94>)
 800295a:	f002 ff79 	bl	8005850 <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002964:	f7ff fd00 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002976:	f003 fbc7 	bl	8006108 <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002980:	f7ff fcf2 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_TIM5_Init+0x94>)
 8002992:	f004 f865 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800299c:	f7ff fce4 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000030c 	.word	0x2000030c
 80029ac:	40000c00 	.word	0x40000c00

080029b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <MX_TIM7_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 95;
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029c8:	225f      	movs	r2, #95	; 0x5f
 80029ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029e2:	f002 ff35 	bl	8005850 <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80029ec:	f7ff fcbc 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_TIM7_Init+0x64>)
 80029fe:	f004 f82f 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a08:	f7ff fcae 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200003f0 	.word	0x200003f0
 8002a18:	40001400 	.word	0x40001400

08002a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d114      	bne.n	8002a58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	201c      	movs	r0, #28
 8002a4c:	f000 fb21 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a50:	201c      	movs	r0, #28
 8002a52:	f000 fb3a 	bl	80030ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002a56:	e04c      	b.n	8002af2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_TIM_Base_MspInit+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d114      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a25      	ldr	r2, [pc, #148]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	201d      	movs	r0, #29
 8002a80:	f000 fb07 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a84:	201d      	movs	r0, #29
 8002a86:	f000 fb20 	bl	80030ca <HAL_NVIC_EnableIRQ>
}
 8002a8a:	e032      	b.n	8002af2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_TIM_Base_MspInit+0xe8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d114      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2032      	movs	r0, #50	; 0x32
 8002ab4:	f000 faed 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ab8:	2032      	movs	r0, #50	; 0x32
 8002aba:	f000 fb06 	bl	80030ca <HAL_NVIC_EnableIRQ>
}
 8002abe:	e018      	b.n	8002af2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_TIM_Base_MspInit+0xec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002ad0:	f043 0320 	orr.w	r3, r3, #32
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_TIM_Base_MspInit+0xe0>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2037      	movs	r0, #55	; 0x37
 8002ae8:	f000 fad3 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002aec:	2037      	movs	r0, #55	; 0x37
 8002aee:	f000 faec 	bl	80030ca <HAL_NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40001400 	.word	0x40001400

08002b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_TIM_MspPostInit+0x64>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d11c      	bne.n	8002b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_TIM_MspPostInit+0x68>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_TIM_MspPostInit+0x68>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_TIM_MspPostInit+0x68>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002b46:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <HAL_TIM_MspPostInit+0x6c>)
 8002b64:	f000 fb5e 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800

08002b7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <MX_USART3_UART_Init+0x5c>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bc0:	f003 fffa 	bl	8006bb8 <HAL_UART_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bca:	f7ff fbcd 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000043c 	.word	0x2000043c
 8002bd8:	40004800 	.word	0x40004800

08002bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0x8c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d130      	bne.n	8002c60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_UART_MspInit+0x90>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c40:	2307      	movs	r3, #7
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4809      	ldr	r0, [pc, #36]	; (8002c70 <HAL_UART_MspInit+0x94>)
 8002c4c:	f000 faea 	bl	8003224 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	2027      	movs	r0, #39	; 0x27
 8002c56:	f000 fa1c 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c5a:	2027      	movs	r0, #39	; 0x27
 8002c5c:	f000 fa35 	bl	80030ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c60:	bf00      	nop
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020c00 	.word	0x40020c00

08002c74 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c82:	2206      	movs	r2, #6
 8002c84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c88:	2202      	movs	r2, #2
 8002c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c94:	2202      	movs	r2, #2
 8002c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cb8:	f000 fc9d 	bl	80035f6 <HAL_PCD_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002cc2:	f7ff fb51 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200004c0 	.word	0x200004c0

08002cd0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf0:	d141      	bne.n	8002d76 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4817      	ldr	r0, [pc, #92]	; (8002d84 <HAL_PCD_MspInit+0xb4>)
 8002d28:	f000 fa7c 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4810      	ldr	r0, [pc, #64]	; (8002d84 <HAL_PCD_MspInit+0xb4>)
 8002d42:	f000 fa6f 	bl	8003224 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	6353      	str	r3, [r2, #52]	; 0x34
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_PCD_MspInit+0xb0>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d8c:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d8e:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d90:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002da4:	4c0b      	ldr	r4, [pc, #44]	; (8002dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002db2:	f7ff fcc1 	bl	8002738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f005 faa7 	bl	8008308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7ff f919 	bl	8001ff0 <main>
  bx  lr    
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc8:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8002dcc:	0800d864 	.word	0x0800d864
  ldr r2, =_sbss
 8002dd0:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002dd4:	200008d8 	.word	0x200008d8

08002dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC_IRQHandler>

08002dda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dde:	2003      	movs	r0, #3
 8002de0:	f000 f94c 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f000 f805 	bl	8002df4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002dea:	f7ff fb4d 	bl	8002488 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f967 	bl	80030e6 <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 f92f 	bl	8003092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	2000004c 	.word	0x2000004c
 8002e4c:	20000054 	.word	0x20000054
 8002e50:	20000050 	.word	0x20000050

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000054 	.word	0x20000054
 8002e78:	200008c4 	.word	0x200008c4

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200008c4 	.word	0x200008c4

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000054 	.word	0x20000054

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <__NVIC_SetPriorityGrouping+0x40>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <__NVIC_SetPriorityGrouping+0x40>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00
 8002f20:	05fa0000 	.word	0x05fa0000

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	; (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff29 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff3e 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff8e 	bl	8002fd0 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5d 	bl	8002f7c <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff31 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff feb6 	bl	8002e7c <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d008      	beq.n	8003130 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e052      	b.n	80031d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0216 	bic.w	r2, r2, #22
 800313e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_DMA_Abort+0x62>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0208 	bic.w	r2, r2, #8
 800316e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003180:	e013      	b.n	80031aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003182:	f7ff fe7b 	bl	8002e7c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d90c      	bls.n	80031aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e015      	b.n	80031d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e4      	bne.n	8003182 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	223f      	movs	r2, #63	; 0x3f
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e00c      	b.n	8003216 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e175      	b.n	8003530 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	f040 8164 	bne.w	800352a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d00b      	beq.n	8003282 <HAL_GPIO_Init+0x5e>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003276:	2b11      	cmp	r3, #17
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b12      	cmp	r3, #18
 8003280:	d130      	bne.n	80032e4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b8:	2201      	movs	r2, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 0201 	and.w	r2, r3, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x100>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b12      	cmp	r3, #18
 8003322:	d123      	bne.n	800336c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80be 	beq.w	800352a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_GPIO_Init+0x324>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_GPIO_Init+0x324>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_GPIO_Init+0x324>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033c6:	4a61      	ldr	r2, [pc, #388]	; (800354c <HAL_GPIO_Init+0x328>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_GPIO_Init+0x32c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d037      	beq.n	8003462 <HAL_GPIO_Init+0x23e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a57      	ldr	r2, [pc, #348]	; (8003554 <HAL_GPIO_Init+0x330>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_GPIO_Init+0x23a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_GPIO_Init+0x334>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02b      	beq.n	800345a <HAL_GPIO_Init+0x236>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a55      	ldr	r2, [pc, #340]	; (800355c <HAL_GPIO_Init+0x338>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d025      	beq.n	8003456 <HAL_GPIO_Init+0x232>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a54      	ldr	r2, [pc, #336]	; (8003560 <HAL_GPIO_Init+0x33c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <HAL_GPIO_Init+0x22e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a53      	ldr	r2, [pc, #332]	; (8003564 <HAL_GPIO_Init+0x340>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d019      	beq.n	800344e <HAL_GPIO_Init+0x22a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_GPIO_Init+0x344>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x226>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a51      	ldr	r2, [pc, #324]	; (800356c <HAL_GPIO_Init+0x348>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x222>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a50      	ldr	r2, [pc, #320]	; (8003570 <HAL_GPIO_Init+0x34c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x21e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4f      	ldr	r2, [pc, #316]	; (8003574 <HAL_GPIO_Init+0x350>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x21a>
 800343a:	2309      	movs	r3, #9
 800343c:	e012      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800343e:	230a      	movs	r3, #10
 8003440:	e010      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003442:	2308      	movs	r3, #8
 8003444:	e00e      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003446:	2307      	movs	r3, #7
 8003448:	e00c      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344a:	2306      	movs	r3, #6
 800344c:	e00a      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344e:	2305      	movs	r3, #5
 8003450:	e008      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003452:	2304      	movs	r3, #4
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003456:	2303      	movs	r3, #3
 8003458:	e004      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345a:	2302      	movs	r3, #2
 800345c:	e002      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003462:	2300      	movs	r3, #0
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f002 0203 	and.w	r2, r2, #3
 800346a:	0092      	lsls	r2, r2, #2
 800346c:	4093      	lsls	r3, r2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003474:	4935      	ldr	r1, [pc, #212]	; (800354c <HAL_GPIO_Init+0x328>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_GPIO_Init+0x354>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a6:	4a34      	ldr	r2, [pc, #208]	; (8003578 <HAL_GPIO_Init+0x354>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_GPIO_Init+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_GPIO_Init+0x354>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_GPIO_Init+0x354>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_GPIO_Init+0x354>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_GPIO_Init+0x354>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_GPIO_Init+0x354>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	f67f ae86 	bls.w	8003244 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800
 800356c:	40021c00 	.word	0x40021c00
 8003570:	40022000 	.word	0x40022000
 8003574:	40022400 	.word	0x40022400
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f806 	bl	80035e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f8:	b08f      	sub	sp, #60	; 0x3c
 80035fa:	af0a      	add	r7, sp, #40	; 0x28
 80035fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e116      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fb54 	bl	8002cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fbda 	bl	8007e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	687e      	ldr	r6, [r7, #4]
 8003654:	466d      	mov	r5, sp
 8003656:	f106 0410 	add.w	r4, r6, #16
 800365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003666:	e885 0003 	stmia.w	r5, {r0, r1}
 800366a:	1d33      	adds	r3, r6, #4
 800366c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800366e:	6838      	ldr	r0, [r7, #0]
 8003670:	f004 fb6e 	bl	8007d50 <USB_CoreInit>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0d7      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f004 fbc8 	bl	8007e22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e04a      	b.n	800372e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	333d      	adds	r3, #61	; 0x3d
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	333c      	adds	r3, #60	; 0x3c
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	b298      	uxth	r0, r3
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3342      	adds	r3, #66	; 0x42
 80036d4:	4602      	mov	r2, r0
 80036d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	333f      	adds	r3, #63	; 0x3f
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3344      	adds	r3, #68	; 0x44
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3348      	adds	r3, #72	; 0x48
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3350      	adds	r3, #80	; 0x50
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3af      	bcc.n	8003698 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e044      	b.n	80037c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3301      	adds	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3b5      	bcc.n	800373e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	687e      	ldr	r6, [r7, #4]
 80037da:	466d      	mov	r5, sp
 80037dc:	f106 0410 	add.w	r4, r6, #16
 80037e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f0:	1d33      	adds	r3, r6, #4
 80037f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f004 fb3f 	bl	8007e78 <USB_DevInit>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e014      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f80b 	bl	8003840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fcf1 	bl	8008216 <USB_DevDisconnect>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_PCDEx_ActivateLPM+0x44>)
 8003870:	4313      	orrs	r3, r2
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	10000003 	.word	0x10000003

08003888 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000

080038a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a22      	ldr	r2, [pc, #136]	; (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d6:	f7ff fad1 	bl	8002e7c <HAL_GetTick>
 80038da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038dc:	e009      	b.n	80038f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038de:	f7ff facd 	bl	8002e7c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ec:	d901      	bls.n	80038f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e022      	b.n	8003938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d1ee      	bne.n	80038de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800390c:	f7ff fab6 	bl	8002e7c <HAL_GetTick>
 8003910:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003912:	e009      	b.n	8003928 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003914:	f7ff fab2 	bl	8002e7c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003922:	d901      	bls.n	8003928 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e007      	b.n	8003938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003934:	d1ee      	bne.n	8003914 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	40007000 	.word	0x40007000

08003948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e29b      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8087 	beq.w	8003a7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800396c:	4b96      	ldr	r3, [pc, #600]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00c      	beq.n	8003992 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003978:	4b93      	ldr	r3, [pc, #588]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d112      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
 8003984:	4b90      	ldr	r3, [pc, #576]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	4b8d      	ldr	r3, [pc, #564]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d06c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x130>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d168      	bne.n	8003a78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e275      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x7a>
 80039b4:	4b84      	ldr	r3, [pc, #528]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a83      	ldr	r2, [pc, #524]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e02e      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x9c>
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7b      	ldr	r2, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a72      	ldr	r2, [pc, #456]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 8003a08:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6b      	ldr	r2, [pc, #428]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7ff fa28 	bl	8002e7c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7ff fa24 	bl	8002e7c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e229      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7ff fa14 	bl	8002e7c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7ff fa10 	bl	8002e7c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e215      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x110>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d069      	beq.n	8003b5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a86:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x190>
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1e9      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	493d      	ldr	r1, [pc, #244]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e040      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7ff f9c6 	bl	8002e7c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7ff f9c2 	bl	8002e7c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1c7      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4929      	ldr	r1, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
 8003b26:	e018      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7ff f9a2 	bl	8002e7c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7ff f99e 	bl	8002e7c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1a3      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d038      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7ff f97f 	bl	8002e7c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7ff f97b 	bl	8002e7c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e180      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x23a>
 8003ba0:	e01a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7ff f965 	bl	8002e7c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7ff f961 	bl	8002e7c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d903      	bls.n	8003bcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e166      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
 8003bc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a4 	beq.w	8003d2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b89      	ldr	r3, [pc, #548]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a88      	ldr	r2, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b86      	ldr	r3, [pc, #536]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0e:	4b83      	ldr	r3, [pc, #524]	; (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c1a:	4b80      	ldr	r3, [pc, #512]	; (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7ff f929 	bl	8002e7c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7ff f925 	bl	8002e7c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e12a      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c40:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x31a>
 8003c54:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c60:	e02d      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x33c>
 8003c6a:	4b6b      	ldr	r3, [pc, #428]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a6a      	ldr	r2, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
 8003c82:	e01c      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
 8003c8c:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a5e      	ldr	r2, [pc, #376]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb2:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7ff f8d9 	bl	8002e7c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7ff f8d5 	bl	8002e7c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0d8      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCC_OscConfig+0x386>
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7ff f8c3 	bl	8002e7c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7ff f8bf 	bl	8002e7c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0c2      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80ae 	beq.w	8003e94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d06d      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d14b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a31      	ldr	r2, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7ff f890 	bl	8002e7c <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7ff f88c 	bl	8002e7c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e091      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	491b      	ldr	r1, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7ff f85e 	bl	8002e7c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7ff f85a 	bl	8002e7c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e05f      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
 8003de2:	e057      	b.n	8003e94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7ff f844 	bl	8002e7c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7ff f840 	bl	8002e7c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e045      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4b0>
 8003e16:	e03d      	b.n	8003e94 <HAL_RCC_OscConfig+0x54c>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <HAL_RCC_OscConfig+0x558>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d030      	beq.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d129      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d119      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10f      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d0      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4965      	ldr	r1, [pc, #404]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d040      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e073      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4936      	ldr	r1, [pc, #216]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fe ff70 	bl	8002e7c <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe ff6c 	bl	8002e7c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e053      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d210      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4922      	ldr	r1, [pc, #136]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	490a      	ldr	r1, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1cc>)
 8004048:	5ccb      	ldrb	r3, [r1, r3]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1d0>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1d4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fecc 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	0800d370 	.word	0x0800d370
 8004074:	2000004c 	.word	0x2000004c
 8004078:	20000050 	.word	0x20000050

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	2300      	movs	r3, #0
 800408e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004094:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d00d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x40>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	f200 80bd 	bhi.w	8004220 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x34>
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ae:	e0b7      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b61      	ldr	r3, [pc, #388]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040b2:	60bb      	str	r3, [r7, #8]
      break;
 80040b4:	e0b7      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b61      	ldr	r3, [pc, #388]	; (800423c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040b8:	60bb      	str	r3, [r7, #8]
      break;
 80040ba:	e0b4      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b5d      	ldr	r3, [pc, #372]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040c6:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04d      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	461a      	mov	r2, r3
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	ea02 0800 	and.w	r8, r2, r0
 80040ea:	ea03 0901 	and.w	r9, r3, r1
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	014b      	lsls	r3, r1, #5
 80040fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004100:	0142      	lsls	r2, r0, #5
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	ebb0 0008 	subs.w	r0, r0, r8
 800410a:	eb61 0109 	sbc.w	r1, r1, r9
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	018b      	lsls	r3, r1, #6
 8004118:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800411c:	0182      	lsls	r2, r0, #6
 800411e:	1a12      	subs	r2, r2, r0
 8004120:	eb63 0301 	sbc.w	r3, r3, r1
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	00d9      	lsls	r1, r3, #3
 800412e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004132:	00d0      	lsls	r0, r2, #3
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	eb12 0208 	adds.w	r2, r2, r8
 800413c:	eb43 0309 	adc.w	r3, r3, r9
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	0259      	lsls	r1, r3, #9
 800414a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800414e:	0250      	lsls	r0, r2, #9
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	f7fc fa82 	bl	8000668 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e04a      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	461a      	mov	r2, r3
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	ea02 0400 	and.w	r4, r2, r0
 8004186:	ea03 0501 	and.w	r5, r3, r1
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	014b      	lsls	r3, r1, #5
 8004198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800419c:	0142      	lsls	r2, r0, #5
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	1b00      	subs	r0, r0, r4
 80041a4:	eb61 0105 	sbc.w	r1, r1, r5
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	018b      	lsls	r3, r1, #6
 80041b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041b6:	0182      	lsls	r2, r0, #6
 80041b8:	1a12      	subs	r2, r2, r0
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	00d9      	lsls	r1, r3, #3
 80041c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041cc:	00d0      	lsls	r0, r2, #3
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	1912      	adds	r2, r2, r4
 80041d4:	eb45 0303 	adc.w	r3, r5, r3
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	0299      	lsls	r1, r3, #10
 80041e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041e6:	0290      	lsls	r0, r2, #10
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	f7fc fa36 	bl	8000668 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004222:	60bb      	str	r3, [r7, #8]
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	68bb      	ldr	r3, [r7, #8]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200

08004240 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000004c 	.word	0x2000004c

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a9b      	lsrs	r3, r3, #10
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	0800d380 	.word	0x0800d380

08004280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004284:	f7ff ffdc 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0b5b      	lsrs	r3, r3, #13
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800d380 	.word	0x0800d380

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042d0:	4b69      	ldr	r3, [pc, #420]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a68      	ldr	r2, [pc, #416]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042da:	6093      	str	r3, [r2, #8]
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	4964      	ldr	r1, [pc, #400]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d017      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004302:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	4959      	ldr	r1, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800433e:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	494a      	ldr	r1, [pc, #296]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d101      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 808b 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a39      	ldr	r2, [pc, #228]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b37      	ldr	r3, [pc, #220]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a34      	ldr	r2, [pc, #208]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b0:	f7fe fd64 	bl	8002e7c <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fe fd60 	bl	8002e7c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e38f      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d6:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d035      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d02e      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004416:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d114      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe fd28 	bl	8002e7c <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fe fd24 	bl	8002e7c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e351      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ee      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445e:	d111      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800446e:	400b      	ands	r3, r1
 8004470:	4901      	ldr	r1, [pc, #4]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
 8004476:	e00b      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000
 8004480:	0ffffcff 	.word	0x0ffffcff
 8004484:	4bb3      	ldr	r3, [pc, #716]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4ab2      	ldr	r2, [pc, #712]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	4bb0      	ldr	r3, [pc, #704]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	49ad      	ldr	r1, [pc, #692]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ae:	4ba9      	ldr	r3, [pc, #676]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b4:	4aa7      	ldr	r2, [pc, #668]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044be:	4ba5      	ldr	r3, [pc, #660]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	49a2      	ldr	r1, [pc, #648]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044dc:	4b9d      	ldr	r3, [pc, #628]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ea:	499a      	ldr	r1, [pc, #616]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044fe:	4b95      	ldr	r3, [pc, #596]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800450c:	4991      	ldr	r1, [pc, #580]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004520:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452e:	4989      	ldr	r1, [pc, #548]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004542:	4b84      	ldr	r3, [pc, #528]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4980      	ldr	r1, [pc, #512]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004564:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f023 0203 	bic.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4978      	ldr	r1, [pc, #480]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004586:	4b73      	ldr	r3, [pc, #460]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f023 020c 	bic.w	r2, r3, #12
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	496f      	ldr	r1, [pc, #444]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045a8:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	4967      	ldr	r1, [pc, #412]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	495e      	ldr	r1, [pc, #376]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ec:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	4956      	ldr	r1, [pc, #344]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	494d      	ldr	r1, [pc, #308]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004630:	4b48      	ldr	r3, [pc, #288]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	4945      	ldr	r1, [pc, #276]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004652:	4b40      	ldr	r3, [pc, #256]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	493c      	ldr	r1, [pc, #240]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004674:	4b37      	ldr	r3, [pc, #220]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004682:	4934      	ldr	r1, [pc, #208]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d011      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a4:	492b      	ldr	r1, [pc, #172]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b4:	d101      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	491b      	ldr	r1, [pc, #108]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004708:	4912      	ldr	r1, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800471c:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	4909      	ldr	r1, [pc, #36]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004746:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	4986      	ldr	r1, [pc, #536]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800476c:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477c:	497d      	ldr	r1, [pc, #500]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d006      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80d6 	beq.w	8004944 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004798:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a75      	ldr	r2, [pc, #468]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fe fb6a 	bl	8002e7c <HAL_GetTick>
 80047a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ac:	f7fe fb66 	bl	8002e7c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e195      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047be:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d021      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11d      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	4958      	ldr	r1, [pc, #352]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02e      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004844:	d129      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004846:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004854:	4b47      	ldr	r3, [pc, #284]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	019a      	lsls	r2, r3, #6
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	493e      	ldr	r1, [pc, #248]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004888:	f023 021f 	bic.w	r2, r3, #31
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	3b01      	subs	r3, #1
 8004892:	4938      	ldr	r1, [pc, #224]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01d      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	0e1b      	lsrs	r3, r3, #24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048b4:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	4926      	ldr	r1, [pc, #152]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d011      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	019a      	lsls	r2, r3, #6
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	491a      	ldr	r1, [pc, #104]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800491c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491e:	f7fe faad 	bl	8002e7c <HAL_GetTick>
 8004922:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004926:	f7fe faa9 	bl	8002e7c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b64      	cmp	r3, #100	; 0x64
 8004932:	d901      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0d8      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b01      	cmp	r3, #1
 8004948:	f040 80ce 	bne.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fe fa90 	bl	8002e7c <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004960:	f7fe fa8c 	bl	8002e7c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d904      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0bb      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004978:	4b5e      	ldr	r3, [pc, #376]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004984:	d0ec      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d12a      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049bc:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	0f1b      	lsrs	r3, r3, #28
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	019a      	lsls	r2, r3, #6
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	061b      	lsls	r3, r3, #24
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	4944      	ldr	r1, [pc, #272]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049ea:	4b42      	ldr	r3, [pc, #264]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	493d      	ldr	r1, [pc, #244]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d022      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a18:	d11d      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	0e1b      	lsrs	r3, r3, #24
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a28:	4b32      	ldr	r3, [pc, #200]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	0f1b      	lsrs	r3, r3, #28
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	019a      	lsls	r2, r3, #6
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	431a      	orrs	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	071b      	lsls	r3, r3, #28
 8004a4e:	4929      	ldr	r1, [pc, #164]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a70:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	4911      	ldr	r1, [pc, #68]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fe f9dc 	bl	8002e7c <HAL_GetTick>
 8004ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ac8:	f7fe f9d8 	bl	8002e7c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e007      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae6:	d1ef      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800

08004af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e09d      	b.n	8004c46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e005      	b.n	8004b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd fc50 	bl	80023f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b70:	d902      	bls.n	8004b78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e002      	b.n	8004b7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_Init+0xa0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	ea42 0103 	orr.w	r1, r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 0204 	and.w	r2, r3, #4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c14:	ea42 0103 	orr.w	r1, r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_SPI_Transmit+0x22>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e158      	b.n	8004f22 <HAL_SPI_Transmit+0x2d4>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c78:	f7fe f900 	bl	8002e7c <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c92:	e13d      	b.n	8004f10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0x52>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca4:	e134      	b.n	8004f10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2203      	movs	r2, #3
 8004caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d10f      	bne.n	8004d12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d007      	beq.n	8004d30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d38:	d94b      	bls.n	8004dd2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0xfa>
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d13e      	bne.n	8004dc6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d6c:	e02b      	b.n	8004dc6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d112      	bne.n	8004da2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da0:	e011      	b.n	8004dc6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da2:	f7fe f86b 	bl	8002e7c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d803      	bhi.n	8004dba <HAL_SPI_Transmit+0x16c>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Transmit+0x172>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc4:	e0a4      	b.n	8004f10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ce      	bne.n	8004d6e <HAL_SPI_Transmit+0x120>
 8004dd0:	e07c      	b.n	8004ecc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0x192>
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d170      	bne.n	8004ec2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d912      	bls.n	8004e10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b02      	subs	r3, #2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0e:	e058      	b.n	8004ec2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e36:	e044      	b.n	8004ec2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d12b      	bne.n	8004e9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d912      	bls.n	8004e76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b02      	subs	r3, #2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e74:	e025      	b.n	8004ec2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e9c:	e011      	b.n	8004ec2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9e:	f7fd ffed 	bl	8002e7c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_Transmit+0x268>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_Transmit+0x26e>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ec0:	e026      	b.n	8004f10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1b5      	bne.n	8004e38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fc77 	bl	80057c4 <SPI_EndRxTxTransaction>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e000      	b.n	8004f10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08a      	sub	sp, #40	; 0x28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e1fb      	b.n	8005348 <HAL_SPI_TransmitReceive+0x41e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f58:	f7fd ff90 	bl	8002e7c <HAL_GetTick>
 8004f5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f74:	7efb      	ldrb	r3, [r7, #27]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d00e      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x6e>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x66>
 8004f8a:	7efb      	ldrb	r3, [r7, #27]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d003      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f96:	e1cd      	b.n	8005334 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x80>
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fb0:	e1c0      	b.n	8005334 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d003      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	887a      	ldrh	r2, [r7, #2]
 8004fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	887a      	ldrh	r2, [r7, #2]
 8004ff2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005008:	d802      	bhi.n	8005010 <HAL_SPI_TransmitReceive+0xe6>
 800500a:	8a3b      	ldrh	r3, [r7, #16]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d908      	bls.n	8005022 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	e007      	b.n	8005032 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d007      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005058:	d97c      	bls.n	8005154 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x13e>
 8005062:	8a7b      	ldrh	r3, [r7, #18]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d169      	bne.n	800513c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	881a      	ldrh	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508c:	e056      	b.n	800513c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d11b      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x1aa>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x1aa>
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d113      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d11c      	bne.n	800511c <HAL_SPI_TransmitReceive+0x1f2>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	b292      	uxth	r2, r2
 80050fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	1c9a      	adds	r2, r3, #2
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800511c:	f7fd feae 	bl	8002e7c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	429a      	cmp	r2, r3
 800512a:	d807      	bhi.n	800513c <HAL_SPI_TransmitReceive+0x212>
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d003      	beq.n	800513c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800513a:	e0fb      	b.n	8005334 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1a3      	bne.n	800508e <HAL_SPI_TransmitReceive+0x164>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d19d      	bne.n	800508e <HAL_SPI_TransmitReceive+0x164>
 8005152:	e0df      	b.n	8005314 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x23a>
 800515c:	8a7b      	ldrh	r3, [r7, #18]
 800515e:	2b01      	cmp	r3, #1
 8005160:	f040 80cb 	bne.w	80052fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d912      	bls.n	8005194 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b02      	subs	r3, #2
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005192:	e0b2      	b.n	80052fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ba:	e09e      	b.n	80052fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d134      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x30a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x30a>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d12c      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d912      	bls.n	800520a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b02      	subs	r3, #2
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005208:	e012      	b.n	8005230 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d148      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x3aa>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d042      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d923      	bls.n	80052a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	b292      	uxth	r2, r2
 8005266:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b02      	subs	r3, #2
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d81f      	bhi.n	80052d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	e016      	b.n	80052d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f103 020c 	add.w	r2, r3, #12
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052d4:	f7fd fdd2 	bl	8002e7c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d803      	bhi.n	80052ec <HAL_SPI_TransmitReceive+0x3c2>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d102      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x3c8>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052f8:	e01c      	b.n	8005334 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f af5b 	bne.w	80051bc <HAL_SPI_TransmitReceive+0x292>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	f47f af54 	bne.w	80051bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fa53 	bl	80057c4 <SPI_EndRxTxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	661a      	str	r2, [r3, #96]	; 0x60
 8005330:	e000      	b.n	8005334 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	; 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10f      	bne.n	8005394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
    return;
 8005392:	e0d7      	b.n	8005544 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_SPI_IRQHandler+0x66>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	09db      	lsrs	r3, r3, #7
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
    return;
 80053b4:	e0c6      	b.n	8005544 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <HAL_SPI_IRQHandler+0x8c>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80b4 	beq.w	8005544 <HAL_SPI_IRQHandler+0x1f4>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80ad 	beq.w	8005544 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d023      	beq.n	800543e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d011      	beq.n	8005426 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005406:	f043 0204 	orr.w	r2, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	e00b      	b.n	800543e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
        return;
 800543c:	e082      	b.n	8005544 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d014      	beq.n	8005474 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005484:	f043 0208 	orr.w	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d04f      	beq.n	8005542 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_SPI_IRQHandler+0x17e>
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d034      	beq.n	8005538 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0203 	bic.w	r2, r2, #3
 80054dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_SPI_IRQHandler+0x1fc>)
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fd fe73 	bl	80031de <HAL_DMA_Abort_IT>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_SPI_IRQHandler+0x1fc>)
 8005518:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd fe5d 	bl	80031de <HAL_DMA_Abort_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005536:	e003      	b.n	8005540 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f809 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800553e:	e000      	b.n	8005542 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005540:	bf00      	nop
    return;
 8005542:	bf00      	nop
  }
}
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	08005565 	.word	0x08005565

08005550 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff ffe5 	bl	8005550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055a0:	f7fd fc6c 	bl	8002e7c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055b0:	f7fd fc64 	bl	8002e7c <HAL_GetTick>
 80055b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055b6:	4b39      	ldr	r3, [pc, #228]	; (800569c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	0d1b      	lsrs	r3, r3, #20
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c6:	e054      	b.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d050      	beq.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055d0:	f7fd fc54 	bl	8002e7c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d902      	bls.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d13d      	bne.n	8005662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fe:	d111      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005608:	d004      	beq.n	8005614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005612:	d107      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562c:	d10f      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800564c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e017      	b.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3b01      	subs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d19b      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000004c 	.word	0x2000004c

080056a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056ae:	f7fd fbe5 	bl	8002e7c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056be:	f7fd fbdd 	bl	8002e7c <HAL_GetTick>
 80056c2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	00da      	lsls	r2, r3, #3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	0d1b      	lsrs	r3, r3, #20
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80056dc:	e062      	b.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056e4:	d109      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x5a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80056f8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d050      	beq.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005702:	f7fd fbbb 	bl	8002e7c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	429a      	cmp	r2, r3
 8005710:	d902      	bls.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13d      	bne.n	8005794 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005726:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005730:	d111      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	d004      	beq.n	8005746 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d107      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575e:	d10f      	bne.n	8005780 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800577e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e010      	b.n	80057b6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d194      	bne.n	80056de <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000004c 	.word	0x2000004c

080057c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff5f 	bl	80056a0 <SPI_WaitFifoStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e027      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fec4 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e014      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ff38 	bl	80056a0 <SPI_WaitFifoStateUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e000      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd f8d0 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fd28 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e054      	b.n	80059c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d01d      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <HAL_TIM_Base_Start_IT+0xdc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d115      	bne.n	80059ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_TIM_Base_Start_IT+0xec>)
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d015      	beq.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005998:	d011      	beq.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059aa:	e008      	b.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800
 80059ec:	00010007 	.word	0x00010007

080059f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e049      	b.n	8005a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f841 	bl	8005a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 fc58 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x24>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e03c      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x3e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e02f      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x58>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e022      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x72>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e015      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x8c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e008      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e092      	b.n	8005c80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start+0xb6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b68:	e023      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0xc6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b78:	e01b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	e013      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0xe6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b98:	e00b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xf6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	e003      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 ff2a 	bl	8006a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <HAL_TIM_PWM_Start+0x1d4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x120>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <HAL_TIM_PWM_Start+0x1d8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_PWM_Start+0x124>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_PWM_Start+0x126>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <HAL_TIM_PWM_Start+0x1d4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <HAL_TIM_PWM_Start+0x1dc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a20      	ldr	r2, [pc, #128]	; (8005c94 <HAL_TIM_PWM_Start+0x1e0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_TIM_PWM_Start+0x1e4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIM_PWM_Start+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_TIM_PWM_Start+0x1e8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_TIM_PWM_Start+0x1ec>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d115      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_TIM_PWM_Start+0x1f0>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d015      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d011      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	e008      	b.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e000      	b.n	8005c7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800
 8005ca4:	00010007 	.word	0x00010007

08005ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0202 	mvn.w	r2, #2
 8005cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fadc 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 face 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fadf 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0204 	mvn.w	r2, #4
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fab2 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faa4 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fab5 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0208 	mvn.w	r2, #8
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa88 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa7a 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa8b 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d122      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d11b      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0210 	mvn.w	r2, #16
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa5e 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa50 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa61 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d10e      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0201 	mvn.w	r2, #1
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc f89c 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b80      	cmp	r3, #128	; 0x80
 8005e38:	d10e      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b80      	cmp	r3, #128	; 0x80
 8005e46:	d107      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fe9c 	bl	8006b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d10e      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d107      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fe8f 	bl	8006ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d10e      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa0f 	bl	80062d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d10e      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d107      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0220 	mvn.w	r2, #32
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fe4f 	bl	8006b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e0fd      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b14      	cmp	r3, #20
 8005f0e:	f200 80f0 	bhi.w	80060f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	080060f3 	.word	0x080060f3
 8005f20:	080060f3 	.word	0x080060f3
 8005f24:	080060f3 	.word	0x080060f3
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	080060f3 	.word	0x080060f3
 8005f30:	080060f3 	.word	0x080060f3
 8005f34:	080060f3 	.word	0x080060f3
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	080060f3 	.word	0x080060f3
 8005f40:	080060f3 	.word	0x080060f3
 8005f44:	080060f3 	.word	0x080060f3
 8005f48:	0800602f 	.word	0x0800602f
 8005f4c:	080060f3 	.word	0x080060f3
 8005f50:	080060f3 	.word	0x080060f3
 8005f54:	080060f3 	.word	0x080060f3
 8005f58:	08006071 	.word	0x08006071
 8005f5c:	080060f3 	.word	0x080060f3
 8005f60:	080060f3 	.word	0x080060f3
 8005f64:	080060f3 	.word	0x080060f3
 8005f68:	080060b1 	.word	0x080060b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa56 	bl	8006424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
      break;
 8005faa:	e0a3      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 faa8 	bl	8006508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
      break;
 8005fec:	e082      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 faff 	bl	80065f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0204 	bic.w	r2, r2, #4
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
      break;
 800602c:	e062      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fb55 	bl	80066e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	021a      	lsls	r2, r3, #8
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	61da      	str	r2, [r3, #28]
      break;
 800606e:	e041      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fb8c 	bl	8006794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060ae:	e021      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fbbe 	bl	8006838 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80060f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIM_ConfigClockSource+0x18>
 800611c:	2302      	movs	r3, #2
 800611e:	e0b3      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x180>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <HAL_TIM_ConfigClockSource+0x188>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006146:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006158:	d03e      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0xd0>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615e:	f200 8087 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	f000 8085 	beq.w	8006274 <HAL_TIM_ConfigClockSource+0x16c>
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d87f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d01a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xa2>
 8006174:	2b70      	cmp	r3, #112	; 0x70
 8006176:	d87b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006178:	2b60      	cmp	r3, #96	; 0x60
 800617a:	d050      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x116>
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d877      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006180:	2b50      	cmp	r3, #80	; 0x50
 8006182:	d03c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0xf6>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d873      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d058      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x136>
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d86f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d064      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x156>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d86b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d060      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x156>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d867      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x156>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d05a      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061a8:	e062      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6899      	ldr	r1, [r3, #8]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f000 fc0b 	bl	80069d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	609a      	str	r2, [r3, #8]
      break;
 80061d6:	e04e      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f000 fbf4 	bl	80069d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fa:	609a      	str	r2, [r3, #8]
      break;
 80061fc:	e03b      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	461a      	mov	r2, r3
 800620c:	f000 fb68 	bl	80068e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2150      	movs	r1, #80	; 0x50
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fbc1 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 800621c:	e02b      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	461a      	mov	r2, r3
 800622c:	f000 fb87 	bl	800693e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2160      	movs	r1, #96	; 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fbb1 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 800623c:	e01b      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f000 fb48 	bl	80068e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fba1 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 800625c:	e00b      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f000 fb98 	bl	800699e <TIM_ITRx_SetConfig>
        break;
 800626e:	e002      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	fffeff88 	.word	0xfffeff88

08006294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a40      	ldr	r2, [pc, #256]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <TIM_Base_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <TIM_Base_SetConfig+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d02b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d027      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <TIM_Base_SetConfig+0x118>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d023      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <TIM_Base_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a29      	ldr	r2, [pc, #164]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <TIM_Base_SetConfig+0x128>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <TIM_Base_SetConfig+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a25      	ldr	r2, [pc, #148]	; (8006418 <TIM_Base_SetConfig+0x134>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a24      	ldr	r2, [pc, #144]	; (800641c <TIM_Base_SetConfig+0x138>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a23      	ldr	r2, [pc, #140]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	615a      	str	r2, [r3, #20]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40010400 	.word	0x40010400
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	40001800 	.word	0x40001800
 800641c:	40001c00 	.word	0x40001c00
 8006420:	40002000 	.word	0x40002000

08006424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <TIM_OC1_SetConfig+0xd8>)
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0302 	bic.w	r3, r3, #2
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a21      	ldr	r2, [pc, #132]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC1_SetConfig+0x64>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <TIM_OC1_SetConfig+0xe0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10c      	bne.n	80064a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0308 	bic.w	r3, r3, #8
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0304 	bic.w	r3, r3, #4
 80064a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a16      	ldr	r2, [pc, #88]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC1_SetConfig+0x8e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a15      	ldr	r2, [pc, #84]	; (8006504 <TIM_OC1_SetConfig+0xe0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	fffeff8f 	.word	0xfffeff8f
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <TIM_OC2_SetConfig+0xe4>)
 8006534:	4013      	ands	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <TIM_OC2_SetConfig+0xe8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC2_SetConfig+0x68>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <TIM_OC2_SetConfig+0xec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10d      	bne.n	800658c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <TIM_OC2_SetConfig+0xe8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC2_SetConfig+0x94>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <TIM_OC2_SetConfig+0xec>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d113      	bne.n	80065c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	feff8fff 	.word	0xfeff8fff
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400

080065f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4b2d      	ldr	r3, [pc, #180]	; (80066d8 <TIM_OC3_SetConfig+0xe0>)
 8006624:	4013      	ands	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a22      	ldr	r2, [pc, #136]	; (80066dc <TIM_OC3_SetConfig+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_OC3_SetConfig+0x66>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <TIM_OC3_SetConfig+0xe8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10d      	bne.n	800667a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <TIM_OC3_SetConfig+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0x92>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <TIM_OC3_SetConfig+0xe8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	fffeff8f 	.word	0xfffeff8f
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400

080066e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <TIM_OC4_SetConfig+0xa4>)
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a13      	ldr	r2, [pc, #76]	; (800678c <TIM_OC4_SetConfig+0xa8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC4_SetConfig+0x68>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a12      	ldr	r2, [pc, #72]	; (8006790 <TIM_OC4_SetConfig+0xac>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d109      	bne.n	8006760 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	019b      	lsls	r3, r3, #6
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	feff8fff 	.word	0xfeff8fff
 800678c:	40010000 	.word	0x40010000
 8006790:	40010400 	.word	0x40010400

08006794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4b1b      	ldr	r3, [pc, #108]	; (800682c <TIM_OC5_SetConfig+0x98>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a12      	ldr	r2, [pc, #72]	; (8006830 <TIM_OC5_SetConfig+0x9c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC5_SetConfig+0x5e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a11      	ldr	r2, [pc, #68]	; (8006834 <TIM_OC5_SetConfig+0xa0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d109      	bne.n	8006806 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	fffeff8f 	.word	0xfffeff8f
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <TIM_OC6_SetConfig+0x9c>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800687a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	051b      	lsls	r3, r3, #20
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <TIM_OC6_SetConfig+0xa0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC6_SetConfig+0x60>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <TIM_OC6_SetConfig+0xa4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d109      	bne.n	80068ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	feff8fff 	.word	0xfeff8fff
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400

080068e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f023 030a 	bic.w	r3, r3, #10
 800691c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0210 	bic.w	r2, r3, #16
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800697a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f043 0307 	orr.w	r3, r3, #7
 80069c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	609a      	str	r2, [r3, #8]
}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	2201      	movs	r2, #1
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1a      	ldr	r2, [r3, #32]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e06d      	b.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a30      	ldr	r2, [pc, #192]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2f      	ldr	r2, [pc, #188]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d01d      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10c      	bne.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e040      	b.n	8006c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fb fffe 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2224      	movs	r2, #36	; 0x24
 8006be4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fb26 	bl	8007248 <UART_SetConfig>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e022      	b.n	8006c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd7c 	bl	800770c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fe03 	bl	8007850 <UART_CheckIdleState>
 8006c4a:	4603      	mov	r3, r0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	f040 8081 	bne.w	8006d70 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <HAL_UART_Transmit+0x26>
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e079      	b.n	8006d72 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_UART_Transmit+0x38>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e072      	b.n	8006d72 <HAL_UART_Transmit+0x11e>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2221      	movs	r2, #33	; 0x21
 8006ca0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca2:	f7fc f8eb 	bl	8002e7c <HAL_GetTick>
 8006ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_UART_Transmit+0x80>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e003      	b.n	8006cdc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006ce4:	e02c      	b.n	8006d40 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fdf6 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e038      	b.n	8006d72 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	3302      	adds	r3, #2
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	e007      	b.n	8006d2e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1cc      	bne.n	8006ce6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2140      	movs	r1, #64	; 0x40
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fdc3 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e005      	b.n	8006d72 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	4613      	mov	r3, r2
 8006d86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d12c      	bne.n	8006dea <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Receive_IT+0x22>
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e025      	b.n	8006dec <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Receive_IT+0x34>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e01e      	b.n	8006dec <HAL_UART_Receive_IT+0x72>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006dd8:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fdfb 	bl	80079dc <UART_Start_Receive_IT>
 8006de6:	4603      	mov	r3, r0
 8006de8:	e000      	b.n	8006dec <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d113      	bne.n	8006e4c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00e      	beq.n	8006e4c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 81cc 	beq.w	80071da <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
      }
      return;
 8006e4a:	e1c6      	b.n	80071da <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80e3 	beq.w	800701a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4ba5      	ldr	r3, [pc, #660]	; (80070f8 <HAL_UART_IRQHandler+0x304>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80d8 	beq.w	800701a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d010      	beq.n	8006e96 <HAL_UART_IRQHandler+0xa2>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2201      	movs	r2, #1
 8006e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8c:	f043 0201 	orr.w	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xce>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb8:	f043 0204 	orr.w	r2, r3, #4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <HAL_UART_IRQHandler+0xfa>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee4:	f043 0202 	orr.w	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2208      	movs	r2, #8
 8006f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1a:	f043 0208 	orr.w	r2, r3, #8
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <HAL_UART_IRQHandler+0x15e>
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00c      	beq.n	8006f52 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8140 	beq.w	80071de <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00c      	beq.n	8006f82 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f88:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d004      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d031      	beq.n	8007006 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fda2 	bl	8007aec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d123      	bne.n	8006ffe <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d013      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	4a4a      	ldr	r2, [pc, #296]	; (80070fc <HAL_UART_IRQHandler+0x308>)
 8006fd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc f8ff 	bl	80031de <HAL_DMA_Abort_IT>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d017      	beq.n	8007016 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	e00f      	b.n	8007016 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f906 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	e00b      	b.n	8007016 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f902 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007004:	e007      	b.n	8007016 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8fe 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007014:	e0e3      	b.n	80071de <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007016:	bf00      	nop
    return;
 8007018:	e0e1      	b.n	80071de <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701e:	2b01      	cmp	r3, #1
 8007020:	f040 80a7 	bne.w	8007172 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80a1 	beq.w	8007172 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 809b 	beq.w	8007172 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2210      	movs	r2, #16
 8007042:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d156      	bne.n	8007100 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800705c:	893b      	ldrh	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80bf 	beq.w	80071e2 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800706a:	893a      	ldrh	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	f080 80b8 	bcs.w	80071e2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	893a      	ldrh	r2, [r7, #8]
 8007076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007084:	d02a      	beq.n	80070dc <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007094:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0210 	bic.w	r2, r2, #16
 80070d0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fc f811 	bl	80030fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f893 	bl	800721c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070f6:	e074      	b.n	80071e2 <HAL_UART_IRQHandler+0x3ee>
 80070f8:	04000120 	.word	0x04000120
 80070fc:	08007b4b 	.word	0x08007b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800710c:	b29b      	uxth	r3, r3
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d063      	beq.n	80071e6 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800711e:	897b      	ldrh	r3, [r7, #10]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d060      	beq.n	80071e6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007132:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0210 	bic.w	r2, r2, #16
 8007164:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007166:	897b      	ldrh	r3, [r7, #10]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f856 	bl	800721c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007170:	e039      	b.n	80071e6 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <HAL_UART_IRQHandler+0x3a4>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800718e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f84f 	bl	8007234 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007196:	e029      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01a      	beq.n	80071ea <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4798      	blx	r3
    }
    return;
 80071bc:	e015      	b.n	80071ea <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d011      	beq.n	80071ec <HAL_UART_IRQHandler+0x3f8>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00c      	beq.n	80071ec <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fccf 	bl	8007b76 <UART_EndTransmit_IT>
    return;
 80071d8:	e008      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
      return;
 80071da:	bf00      	nop
 80071dc:	e006      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
    return;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
      return;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
      return;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_UART_IRQHandler+0x3f8>
    return;
 80071ea:	bf00      	nop
  }

}
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4ba7      	ldr	r3, [pc, #668]	; (8007510 <UART_SetConfig+0x2c8>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	430b      	orrs	r3, r1
 800727e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a95      	ldr	r2, [pc, #596]	; (8007514 <UART_SetConfig+0x2cc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d120      	bne.n	8007306 <UART_SetConfig+0xbe>
 80072c4:	4b94      	ldr	r3, [pc, #592]	; (8007518 <UART_SetConfig+0x2d0>)
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d816      	bhi.n	8007300 <UART_SetConfig+0xb8>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x90>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072f5 	.word	0x080072f5
 80072e0:	080072ef 	.word	0x080072ef
 80072e4:	080072fb 	.word	0x080072fb
 80072e8:	2301      	movs	r3, #1
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e14f      	b.n	800758e <UART_SetConfig+0x346>
 80072ee:	2302      	movs	r3, #2
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e14c      	b.n	800758e <UART_SetConfig+0x346>
 80072f4:	2304      	movs	r3, #4
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e149      	b.n	800758e <UART_SetConfig+0x346>
 80072fa:	2308      	movs	r3, #8
 80072fc:	77fb      	strb	r3, [r7, #31]
 80072fe:	e146      	b.n	800758e <UART_SetConfig+0x346>
 8007300:	2310      	movs	r3, #16
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e143      	b.n	800758e <UART_SetConfig+0x346>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a84      	ldr	r2, [pc, #528]	; (800751c <UART_SetConfig+0x2d4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d132      	bne.n	8007376 <UART_SetConfig+0x12e>
 8007310:	4b81      	ldr	r3, [pc, #516]	; (8007518 <UART_SetConfig+0x2d0>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007316:	f003 030c 	and.w	r3, r3, #12
 800731a:	2b0c      	cmp	r3, #12
 800731c:	d828      	bhi.n	8007370 <UART_SetConfig+0x128>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <UART_SetConfig+0xdc>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007359 	.word	0x08007359
 8007328:	08007371 	.word	0x08007371
 800732c:	08007371 	.word	0x08007371
 8007330:	08007371 	.word	0x08007371
 8007334:	08007365 	.word	0x08007365
 8007338:	08007371 	.word	0x08007371
 800733c:	08007371 	.word	0x08007371
 8007340:	08007371 	.word	0x08007371
 8007344:	0800735f 	.word	0x0800735f
 8007348:	08007371 	.word	0x08007371
 800734c:	08007371 	.word	0x08007371
 8007350:	08007371 	.word	0x08007371
 8007354:	0800736b 	.word	0x0800736b
 8007358:	2300      	movs	r3, #0
 800735a:	77fb      	strb	r3, [r7, #31]
 800735c:	e117      	b.n	800758e <UART_SetConfig+0x346>
 800735e:	2302      	movs	r3, #2
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e114      	b.n	800758e <UART_SetConfig+0x346>
 8007364:	2304      	movs	r3, #4
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e111      	b.n	800758e <UART_SetConfig+0x346>
 800736a:	2308      	movs	r3, #8
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	e10e      	b.n	800758e <UART_SetConfig+0x346>
 8007370:	2310      	movs	r3, #16
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e10b      	b.n	800758e <UART_SetConfig+0x346>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a69      	ldr	r2, [pc, #420]	; (8007520 <UART_SetConfig+0x2d8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d120      	bne.n	80073c2 <UART_SetConfig+0x17a>
 8007380:	4b65      	ldr	r3, [pc, #404]	; (8007518 <UART_SetConfig+0x2d0>)
 8007382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738a:	2b30      	cmp	r3, #48	; 0x30
 800738c:	d013      	beq.n	80073b6 <UART_SetConfig+0x16e>
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d814      	bhi.n	80073bc <UART_SetConfig+0x174>
 8007392:	2b20      	cmp	r3, #32
 8007394:	d009      	beq.n	80073aa <UART_SetConfig+0x162>
 8007396:	2b20      	cmp	r3, #32
 8007398:	d810      	bhi.n	80073bc <UART_SetConfig+0x174>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <UART_SetConfig+0x15c>
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d006      	beq.n	80073b0 <UART_SetConfig+0x168>
 80073a2:	e00b      	b.n	80073bc <UART_SetConfig+0x174>
 80073a4:	2300      	movs	r3, #0
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e0f1      	b.n	800758e <UART_SetConfig+0x346>
 80073aa:	2302      	movs	r3, #2
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e0ee      	b.n	800758e <UART_SetConfig+0x346>
 80073b0:	2304      	movs	r3, #4
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e0eb      	b.n	800758e <UART_SetConfig+0x346>
 80073b6:	2308      	movs	r3, #8
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e0e8      	b.n	800758e <UART_SetConfig+0x346>
 80073bc:	2310      	movs	r3, #16
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e0e5      	b.n	800758e <UART_SetConfig+0x346>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a57      	ldr	r2, [pc, #348]	; (8007524 <UART_SetConfig+0x2dc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d120      	bne.n	800740e <UART_SetConfig+0x1c6>
 80073cc:	4b52      	ldr	r3, [pc, #328]	; (8007518 <UART_SetConfig+0x2d0>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073d6:	2bc0      	cmp	r3, #192	; 0xc0
 80073d8:	d013      	beq.n	8007402 <UART_SetConfig+0x1ba>
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d814      	bhi.n	8007408 <UART_SetConfig+0x1c0>
 80073de:	2b80      	cmp	r3, #128	; 0x80
 80073e0:	d009      	beq.n	80073f6 <UART_SetConfig+0x1ae>
 80073e2:	2b80      	cmp	r3, #128	; 0x80
 80073e4:	d810      	bhi.n	8007408 <UART_SetConfig+0x1c0>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <UART_SetConfig+0x1a8>
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d006      	beq.n	80073fc <UART_SetConfig+0x1b4>
 80073ee:	e00b      	b.n	8007408 <UART_SetConfig+0x1c0>
 80073f0:	2300      	movs	r3, #0
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e0cb      	b.n	800758e <UART_SetConfig+0x346>
 80073f6:	2302      	movs	r3, #2
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e0c8      	b.n	800758e <UART_SetConfig+0x346>
 80073fc:	2304      	movs	r3, #4
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e0c5      	b.n	800758e <UART_SetConfig+0x346>
 8007402:	2308      	movs	r3, #8
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e0c2      	b.n	800758e <UART_SetConfig+0x346>
 8007408:	2310      	movs	r3, #16
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e0bf      	b.n	800758e <UART_SetConfig+0x346>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a45      	ldr	r2, [pc, #276]	; (8007528 <UART_SetConfig+0x2e0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d125      	bne.n	8007464 <UART_SetConfig+0x21c>
 8007418:	4b3f      	ldr	r3, [pc, #252]	; (8007518 <UART_SetConfig+0x2d0>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007426:	d017      	beq.n	8007458 <UART_SetConfig+0x210>
 8007428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800742c:	d817      	bhi.n	800745e <UART_SetConfig+0x216>
 800742e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007432:	d00b      	beq.n	800744c <UART_SetConfig+0x204>
 8007434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007438:	d811      	bhi.n	800745e <UART_SetConfig+0x216>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <UART_SetConfig+0x1fe>
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d006      	beq.n	8007452 <UART_SetConfig+0x20a>
 8007444:	e00b      	b.n	800745e <UART_SetConfig+0x216>
 8007446:	2300      	movs	r3, #0
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e0a0      	b.n	800758e <UART_SetConfig+0x346>
 800744c:	2302      	movs	r3, #2
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e09d      	b.n	800758e <UART_SetConfig+0x346>
 8007452:	2304      	movs	r3, #4
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e09a      	b.n	800758e <UART_SetConfig+0x346>
 8007458:	2308      	movs	r3, #8
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e097      	b.n	800758e <UART_SetConfig+0x346>
 800745e:	2310      	movs	r3, #16
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e094      	b.n	800758e <UART_SetConfig+0x346>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a30      	ldr	r2, [pc, #192]	; (800752c <UART_SetConfig+0x2e4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d125      	bne.n	80074ba <UART_SetConfig+0x272>
 800746e:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <UART_SetConfig+0x2d0>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800747c:	d017      	beq.n	80074ae <UART_SetConfig+0x266>
 800747e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007482:	d817      	bhi.n	80074b4 <UART_SetConfig+0x26c>
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007488:	d00b      	beq.n	80074a2 <UART_SetConfig+0x25a>
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748e:	d811      	bhi.n	80074b4 <UART_SetConfig+0x26c>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <UART_SetConfig+0x254>
 8007494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007498:	d006      	beq.n	80074a8 <UART_SetConfig+0x260>
 800749a:	e00b      	b.n	80074b4 <UART_SetConfig+0x26c>
 800749c:	2301      	movs	r3, #1
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e075      	b.n	800758e <UART_SetConfig+0x346>
 80074a2:	2302      	movs	r3, #2
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e072      	b.n	800758e <UART_SetConfig+0x346>
 80074a8:	2304      	movs	r3, #4
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e06f      	b.n	800758e <UART_SetConfig+0x346>
 80074ae:	2308      	movs	r3, #8
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e06c      	b.n	800758e <UART_SetConfig+0x346>
 80074b4:	2310      	movs	r3, #16
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e069      	b.n	800758e <UART_SetConfig+0x346>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <UART_SetConfig+0x2e8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d137      	bne.n	8007534 <UART_SetConfig+0x2ec>
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <UART_SetConfig+0x2d0>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80074ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074d2:	d017      	beq.n	8007504 <UART_SetConfig+0x2bc>
 80074d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074d8:	d817      	bhi.n	800750a <UART_SetConfig+0x2c2>
 80074da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074de:	d00b      	beq.n	80074f8 <UART_SetConfig+0x2b0>
 80074e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e4:	d811      	bhi.n	800750a <UART_SetConfig+0x2c2>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <UART_SetConfig+0x2aa>
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d006      	beq.n	80074fe <UART_SetConfig+0x2b6>
 80074f0:	e00b      	b.n	800750a <UART_SetConfig+0x2c2>
 80074f2:	2300      	movs	r3, #0
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e04a      	b.n	800758e <UART_SetConfig+0x346>
 80074f8:	2302      	movs	r3, #2
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e047      	b.n	800758e <UART_SetConfig+0x346>
 80074fe:	2304      	movs	r3, #4
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e044      	b.n	800758e <UART_SetConfig+0x346>
 8007504:	2308      	movs	r3, #8
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e041      	b.n	800758e <UART_SetConfig+0x346>
 800750a:	2310      	movs	r3, #16
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e03e      	b.n	800758e <UART_SetConfig+0x346>
 8007510:	efff69f3 	.word	0xefff69f3
 8007514:	40011000 	.word	0x40011000
 8007518:	40023800 	.word	0x40023800
 800751c:	40004400 	.word	0x40004400
 8007520:	40004800 	.word	0x40004800
 8007524:	40004c00 	.word	0x40004c00
 8007528:	40005000 	.word	0x40005000
 800752c:	40011400 	.word	0x40011400
 8007530:	40007800 	.word	0x40007800
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a71      	ldr	r2, [pc, #452]	; (8007700 <UART_SetConfig+0x4b8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d125      	bne.n	800758a <UART_SetConfig+0x342>
 800753e:	4b71      	ldr	r3, [pc, #452]	; (8007704 <UART_SetConfig+0x4bc>)
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007548:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800754c:	d017      	beq.n	800757e <UART_SetConfig+0x336>
 800754e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007552:	d817      	bhi.n	8007584 <UART_SetConfig+0x33c>
 8007554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007558:	d00b      	beq.n	8007572 <UART_SetConfig+0x32a>
 800755a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755e:	d811      	bhi.n	8007584 <UART_SetConfig+0x33c>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <UART_SetConfig+0x324>
 8007564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007568:	d006      	beq.n	8007578 <UART_SetConfig+0x330>
 800756a:	e00b      	b.n	8007584 <UART_SetConfig+0x33c>
 800756c:	2300      	movs	r3, #0
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e00d      	b.n	800758e <UART_SetConfig+0x346>
 8007572:	2302      	movs	r3, #2
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e00a      	b.n	800758e <UART_SetConfig+0x346>
 8007578:	2304      	movs	r3, #4
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e007      	b.n	800758e <UART_SetConfig+0x346>
 800757e:	2308      	movs	r3, #8
 8007580:	77fb      	strb	r3, [r7, #31]
 8007582:	e004      	b.n	800758e <UART_SetConfig+0x346>
 8007584:	2310      	movs	r3, #16
 8007586:	77fb      	strb	r3, [r7, #31]
 8007588:	e001      	b.n	800758e <UART_SetConfig+0x346>
 800758a:	2310      	movs	r3, #16
 800758c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007596:	d15b      	bne.n	8007650 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007598:	7ffb      	ldrb	r3, [r7, #31]
 800759a:	2b08      	cmp	r3, #8
 800759c:	d827      	bhi.n	80075ee <UART_SetConfig+0x3a6>
 800759e:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <UART_SetConfig+0x35c>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075c9 	.word	0x080075c9
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075d9 	.word	0x080075d9
 80075b0:	080075ef 	.word	0x080075ef
 80075b4:	080075df 	.word	0x080075df
 80075b8:	080075ef 	.word	0x080075ef
 80075bc:	080075ef 	.word	0x080075ef
 80075c0:	080075ef 	.word	0x080075ef
 80075c4:	080075e7 	.word	0x080075e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c8:	f7fc fe46 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 80075cc:	61b8      	str	r0, [r7, #24]
        break;
 80075ce:	e013      	b.n	80075f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075d0:	f7fc fe56 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 80075d4:	61b8      	str	r0, [r7, #24]
        break;
 80075d6:	e00f      	b.n	80075f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d8:	4b4b      	ldr	r3, [pc, #300]	; (8007708 <UART_SetConfig+0x4c0>)
 80075da:	61bb      	str	r3, [r7, #24]
        break;
 80075dc:	e00c      	b.n	80075f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075de:	f7fc fd4d 	bl	800407c <HAL_RCC_GetSysClockFreq>
 80075e2:	61b8      	str	r0, [r7, #24]
        break;
 80075e4:	e008      	b.n	80075f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ea:	61bb      	str	r3, [r7, #24]
        break;
 80075ec:	e004      	b.n	80075f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	77bb      	strb	r3, [r7, #30]
        break;
 80075f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d074      	beq.n	80076e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	005a      	lsls	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	441a      	add	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	b29b      	uxth	r3, r3
 8007614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b0f      	cmp	r3, #15
 800761a:	d916      	bls.n	800764a <UART_SetConfig+0x402>
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007622:	d212      	bcs.n	800764a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f023 030f 	bic.w	r3, r3, #15
 800762c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	b29a      	uxth	r2, r3
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	4313      	orrs	r3, r2
 800763e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	89fa      	ldrh	r2, [r7, #14]
 8007646:	60da      	str	r2, [r3, #12]
 8007648:	e04e      	b.n	80076e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	77bb      	strb	r3, [r7, #30]
 800764e:	e04b      	b.n	80076e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	2b08      	cmp	r3, #8
 8007654:	d827      	bhi.n	80076a6 <UART_SetConfig+0x45e>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0x414>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007681 	.word	0x08007681
 8007660:	08007689 	.word	0x08007689
 8007664:	08007691 	.word	0x08007691
 8007668:	080076a7 	.word	0x080076a7
 800766c:	08007697 	.word	0x08007697
 8007670:	080076a7 	.word	0x080076a7
 8007674:	080076a7 	.word	0x080076a7
 8007678:	080076a7 	.word	0x080076a7
 800767c:	0800769f 	.word	0x0800769f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fc fdea 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8007684:	61b8      	str	r0, [r7, #24]
        break;
 8007686:	e013      	b.n	80076b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007688:	f7fc fdfa 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 800768c:	61b8      	str	r0, [r7, #24]
        break;
 800768e:	e00f      	b.n	80076b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007690:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <UART_SetConfig+0x4c0>)
 8007692:	61bb      	str	r3, [r7, #24]
        break;
 8007694:	e00c      	b.n	80076b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007696:	f7fc fcf1 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800769a:	61b8      	str	r0, [r7, #24]
        break;
 800769c:	e008      	b.n	80076b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a2:	61bb      	str	r3, [r7, #24]
        break;
 80076a4:	e004      	b.n	80076b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	77bb      	strb	r3, [r7, #30]
        break;
 80076ae:	bf00      	nop
    }

    if (pclk != 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d018      	beq.n	80076e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	085a      	lsrs	r2, r3, #1
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	441a      	add	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b0f      	cmp	r3, #15
 80076d0:	d908      	bls.n	80076e4 <UART_SetConfig+0x49c>
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d8:	d204      	bcs.n	80076e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	e001      	b.n	80076e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40007c00 	.word	0x40007c00
 8007704:	40023800 	.word	0x40023800
 8007708:	00f42400 	.word	0x00f42400

0800770c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01a      	beq.n	8007822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780a:	d10a      	bne.n	8007822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
  }
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af02      	add	r7, sp, #8
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007860:	f7fb fb0c 	bl	8002e7c <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d10e      	bne.n	8007892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f82d 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e023      	b.n	80078da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b04      	cmp	r3, #4
 800789e:	d10e      	bne.n	80078be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f817 	bl	80078e2 <UART_WaitOnFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e00d      	b.n	80078da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f2:	e05e      	b.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d05a      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fc:	f7fb fabe 	bl	8002e7c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <UART_WaitOnFlagUntilTimeout+0x30>
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d11b      	bne.n	800794a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007920:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e043      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d02c      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007966:	d124      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007980:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0201 	bic.w	r2, r2, #1
 8007990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e00f      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	429a      	cmp	r2, r3
 80079c0:	bf0c      	ite	eq
 80079c2:	2301      	moveq	r3, #1
 80079c4:	2300      	movne	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d091      	beq.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	88fa      	ldrh	r2, [r7, #6]
 80079fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	d10e      	bne.n	8007a2e <UART_Start_Receive_IT+0x52>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <UART_Start_Receive_IT+0x48>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a22:	e02d      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	22ff      	movs	r2, #255	; 0xff
 8007a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a2c:	e028      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10d      	bne.n	8007a52 <UART_Start_Receive_IT+0x76>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <UART_Start_Receive_IT+0x6c>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	; 0xff
 8007a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a46:	e01b      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	227f      	movs	r2, #127	; 0x7f
 8007a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a50:	e016      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a5a:	d10d      	bne.n	8007a78 <UART_Start_Receive_IT+0x9c>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <UART_Start_Receive_IT+0x92>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	227f      	movs	r2, #127	; 0x7f
 8007a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6c:	e008      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	223f      	movs	r2, #63	; 0x3f
 8007a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a76:	e003      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2222      	movs	r2, #34	; 0x22
 8007a8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	d107      	bne.n	8007ab8 <UART_Start_Receive_IT+0xdc>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a0c      	ldr	r2, [pc, #48]	; (8007ae4 <UART_Start_Receive_IT+0x108>)
 8007ab4:	665a      	str	r2, [r3, #100]	; 0x64
 8007ab6:	e002      	b.n	8007abe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a0b      	ldr	r2, [pc, #44]	; (8007ae8 <UART_Start_Receive_IT+0x10c>)
 8007abc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007ad4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	08007c7d 	.word	0x08007c7d
 8007ae8:	08007ba9 	.word	0x08007ba9

08007aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d107      	bne.n	8007b2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0210 	bic.w	r2, r2, #16
 8007b2a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fb4d 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fb2a 	bl	80071f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bb6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bbc:	2b22      	cmp	r3, #34	; 0x22
 8007bbe:	d151      	bne.n	8007c64 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	b2d9      	uxtb	r1, r3
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd4:	400a      	ands	r2, r1
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d138      	bne.n	8007c74 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c10:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10f      	bne.n	8007c56 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0210 	bic.w	r2, r2, #16
 8007c44:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fae4 	bl	800721c <HAL_UARTEx_RxEventCallback>
 8007c54:	e002      	b.n	8007c5c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa f878 	bl	8001d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c62:	e007      	b.n	8007c74 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0208 	orr.w	r2, r2, #8
 8007c72:	619a      	str	r2, [r3, #24]
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c8a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c90:	2b22      	cmp	r3, #34	; 0x22
 8007c92:	d151      	bne.n	8007d38 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ca2:	89ba      	ldrh	r2, [r7, #12]
 8007ca4:	89fb      	ldrh	r3, [r7, #14]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	1c9a      	adds	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d138      	bne.n	8007d48 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ce4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0201 	bic.w	r2, r2, #1
 8007cf4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10f      	bne.n	8007d2a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0210 	bic.w	r2, r2, #16
 8007d18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fa7a 	bl	800721c <HAL_UARTEx_RxEventCallback>
 8007d28:	e002      	b.n	8007d30 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fa f80e 	bl	8001d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d36:	e007      	b.n	8007d48 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0208 	orr.w	r2, r2, #8
 8007d46:	619a      	str	r2, [r3, #24]
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d50:	b084      	sub	sp, #16
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	f107 001c 	add.w	r0, r7, #28
 8007d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d120      	bne.n	8007daa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	4b20      	ldr	r3, [pc, #128]	; (8007dfc <USB_CoreInit+0xac>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d105      	bne.n	8007d9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa5a 	bl	8008258 <USB_CoreReset>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	e010      	b.n	8007dcc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa4e 	bl	8008258 <USB_CoreReset>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10b      	bne.n	8007dea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f043 0206 	orr.w	r2, r3, #6
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df6:	b004      	add	sp, #16
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	ffbdffbf 	.word	0xffbdffbf

08007e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f023 0201 	bic.w	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d106      	bne.n	8007e4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e00b      	b.n	8007e66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60da      	str	r2, [r3, #12]
 8007e60:	e001      	b.n	8007e66 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e003      	b.n	8007e6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e66:	2032      	movs	r0, #50	; 0x32
 8007e68:	f7fb f814 	bl	8002e94 <HAL_Delay>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e78:	b084      	sub	sp, #16
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	e009      	b.n	8007eac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3340      	adds	r3, #64	; 0x40
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2b0e      	cmp	r3, #14
 8007eb0:	d9f2      	bls.n	8007e98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11c      	bne.n	8007ef2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	e005      	b.n	8007efe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f04:	461a      	mov	r2, r3
 8007f06:	2300      	movs	r3, #0
 8007f08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f10:	4619      	mov	r1, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	461a      	mov	r2, r3
 8007f1a:	680b      	ldr	r3, [r1, #0]
 8007f1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d10c      	bne.n	8007f3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f959 	bl	80081e4 <USB_SetDevSpeed>
 8007f32:	e018      	b.n	8007f66 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f34:	2101      	movs	r1, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f954 	bl	80081e4 <USB_SetDevSpeed>
 8007f3c:	e013      	b.n	8007f66 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d10c      	bne.n	8007f5e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f949 	bl	80081e4 <USB_SetDevSpeed>
 8007f52:	e008      	b.n	8007f66 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f944 	bl	80081e4 <USB_SetDevSpeed>
 8007f5c:	e003      	b.n	8007f66 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f5e:	2103      	movs	r1, #3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f93f 	bl	80081e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f66:	2110      	movs	r1, #16
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f8f3 	bl	8008154 <USB_FlushTxFifo>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f911 	bl	80081a0 <USB_FlushRxFifo>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	e043      	b.n	800803a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc8:	d118      	bne.n	8007ffc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e013      	b.n	800800e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e008      	b.n	800800e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	461a      	mov	r2, r3
 800800a:	2300      	movs	r3, #0
 800800c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	461a      	mov	r2, r3
 800801c:	2300      	movs	r3, #0
 800801e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	461a      	mov	r2, r3
 800802e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008032:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	3301      	adds	r3, #1
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	d3b7      	bcc.n	8007fb2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008042:	2300      	movs	r3, #0
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	e043      	b.n	80080d0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800805a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800805e:	d118      	bne.n	8008092 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	461a      	mov	r2, r3
 8008074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e013      	b.n	80080a4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	461a      	mov	r2, r3
 800808a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e008      	b.n	80080a4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	461a      	mov	r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b0:	461a      	mov	r2, r3
 80080b2:	2300      	movs	r3, #0
 80080b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	461a      	mov	r2, r3
 80080c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3301      	adds	r3, #1
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3b7      	bcc.n	8008048 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f043 0210 	orr.w	r2, r3, #16
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <USB_DevInit+0x2d4>)
 8008112:	4313      	orrs	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f043 0208 	orr.w	r2, r3, #8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800812a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d105      	bne.n	800813c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <USB_DevInit+0x2d8>)
 8008136:	4313      	orrs	r3, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008148:	b004      	add	sp, #16
 800814a:	4770      	bx	lr
 800814c:	803c3800 	.word	0x803c3800
 8008150:	40000004 	.word	0x40000004

08008154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	019b      	lsls	r3, r3, #6
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <USB_FlushTxFifo+0x48>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d901      	bls.n	8008180 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e006      	b.n	800818e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b20      	cmp	r3, #32
 800818a:	d0f0      	beq.n	800816e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	00030d40 	.word	0x00030d40

080081a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2210      	movs	r2, #16
 80081b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <USB_FlushRxFifo+0x40>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e006      	b.n	80081d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d0f0      	beq.n	80081b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	00030d40 	.word	0x00030d40

080081e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008204:	4313      	orrs	r3, r2
 8008206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008230:	f023 0303 	bic.w	r3, r3, #3
 8008234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008244:	f043 0302 	orr.w	r3, r3, #2
 8008248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <USB_CoreReset+0x64>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d901      	bls.n	8008276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e01b      	b.n	80082ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	daf2      	bge.n	8008264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f043 0201 	orr.w	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a09      	ldr	r2, [pc, #36]	; (80082bc <USB_CoreReset+0x64>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d901      	bls.n	80082a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e006      	b.n	80082ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d0f0      	beq.n	800828e <USB_CoreReset+0x36>

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	00030d40 	.word	0x00030d40

080082c0 <arm_pid_init_f32>:
 80082c0:	ed90 7a08 	vldr	s14, [r0, #32]
 80082c4:	edd0 7a06 	vldr	s15, [r0, #24]
 80082c8:	ed90 6a07 	vldr	s12, [r0, #28]
 80082cc:	eef1 6a67 	vneg.f32	s13, s15
 80082d0:	ed80 7a02 	vstr	s14, [r0, #8]
 80082d4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80082d8:	ee37 6a07 	vadd.f32	s12, s14, s14
 80082dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082e0:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80082e4:	edc0 7a00 	vstr	s15, [r0]
 80082e8:	ed80 7a01 	vstr	s14, [r0, #4]
 80082ec:	b901      	cbnz	r1, 80082f0 <arm_pid_init_f32+0x30>
 80082ee:	4770      	bx	lr
 80082f0:	2300      	movs	r3, #0
 80082f2:	60c3      	str	r3, [r0, #12]
 80082f4:	6103      	str	r3, [r0, #16]
 80082f6:	6143      	str	r3, [r0, #20]
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop

080082fc <__errno>:
 80082fc:	4b01      	ldr	r3, [pc, #4]	; (8008304 <__errno+0x8>)
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000058 	.word	0x20000058

08008308 <__libc_init_array>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4d0d      	ldr	r5, [pc, #52]	; (8008340 <__libc_init_array+0x38>)
 800830c:	4c0d      	ldr	r4, [pc, #52]	; (8008344 <__libc_init_array+0x3c>)
 800830e:	1b64      	subs	r4, r4, r5
 8008310:	10a4      	asrs	r4, r4, #2
 8008312:	2600      	movs	r6, #0
 8008314:	42a6      	cmp	r6, r4
 8008316:	d109      	bne.n	800832c <__libc_init_array+0x24>
 8008318:	4d0b      	ldr	r5, [pc, #44]	; (8008348 <__libc_init_array+0x40>)
 800831a:	4c0c      	ldr	r4, [pc, #48]	; (800834c <__libc_init_array+0x44>)
 800831c:	f004 ffb0 	bl	800d280 <_init>
 8008320:	1b64      	subs	r4, r4, r5
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	2600      	movs	r6, #0
 8008326:	42a6      	cmp	r6, r4
 8008328:	d105      	bne.n	8008336 <__libc_init_array+0x2e>
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008330:	4798      	blx	r3
 8008332:	3601      	adds	r6, #1
 8008334:	e7ee      	b.n	8008314 <__libc_init_array+0xc>
 8008336:	f855 3b04 	ldr.w	r3, [r5], #4
 800833a:	4798      	blx	r3
 800833c:	3601      	adds	r6, #1
 800833e:	e7f2      	b.n	8008326 <__libc_init_array+0x1e>
 8008340:	0800d85c 	.word	0x0800d85c
 8008344:	0800d85c 	.word	0x0800d85c
 8008348:	0800d85c 	.word	0x0800d85c
 800834c:	0800d860 	.word	0x0800d860

08008350 <memcpy>:
 8008350:	440a      	add	r2, r1
 8008352:	4291      	cmp	r1, r2
 8008354:	f100 33ff 	add.w	r3, r0, #4294967295
 8008358:	d100      	bne.n	800835c <memcpy+0xc>
 800835a:	4770      	bx	lr
 800835c:	b510      	push	{r4, lr}
 800835e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008366:	4291      	cmp	r1, r2
 8008368:	d1f9      	bne.n	800835e <memcpy+0xe>
 800836a:	bd10      	pop	{r4, pc}

0800836c <memset>:
 800836c:	4402      	add	r2, r0
 800836e:	4603      	mov	r3, r0
 8008370:	4293      	cmp	r3, r2
 8008372:	d100      	bne.n	8008376 <memset+0xa>
 8008374:	4770      	bx	lr
 8008376:	f803 1b01 	strb.w	r1, [r3], #1
 800837a:	e7f9      	b.n	8008370 <memset+0x4>

0800837c <__cvt>:
 800837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837e:	ed2d 8b02 	vpush	{d8}
 8008382:	eeb0 8b40 	vmov.f64	d8, d0
 8008386:	b085      	sub	sp, #20
 8008388:	4617      	mov	r7, r2
 800838a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800838c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800838e:	ee18 2a90 	vmov	r2, s17
 8008392:	f025 0520 	bic.w	r5, r5, #32
 8008396:	2a00      	cmp	r2, #0
 8008398:	bfb6      	itet	lt
 800839a:	222d      	movlt	r2, #45	; 0x2d
 800839c:	2200      	movge	r2, #0
 800839e:	eeb1 8b40 	vneglt.f64	d8, d0
 80083a2:	2d46      	cmp	r5, #70	; 0x46
 80083a4:	460c      	mov	r4, r1
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	d004      	beq.n	80083b4 <__cvt+0x38>
 80083aa:	2d45      	cmp	r5, #69	; 0x45
 80083ac:	d100      	bne.n	80083b0 <__cvt+0x34>
 80083ae:	3401      	adds	r4, #1
 80083b0:	2102      	movs	r1, #2
 80083b2:	e000      	b.n	80083b6 <__cvt+0x3a>
 80083b4:	2103      	movs	r1, #3
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	ab02      	add	r3, sp, #8
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4622      	mov	r2, r4
 80083c0:	4633      	mov	r3, r6
 80083c2:	eeb0 0b48 	vmov.f64	d0, d8
 80083c6:	f001 fde3 	bl	8009f90 <_dtoa_r>
 80083ca:	2d47      	cmp	r5, #71	; 0x47
 80083cc:	d109      	bne.n	80083e2 <__cvt+0x66>
 80083ce:	07fb      	lsls	r3, r7, #31
 80083d0:	d407      	bmi.n	80083e2 <__cvt+0x66>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d6:	1a1b      	subs	r3, r3, r0
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	b005      	add	sp, #20
 80083dc:	ecbd 8b02 	vpop	{d8}
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e2:	2d46      	cmp	r5, #70	; 0x46
 80083e4:	eb00 0204 	add.w	r2, r0, r4
 80083e8:	d10c      	bne.n	8008404 <__cvt+0x88>
 80083ea:	7803      	ldrb	r3, [r0, #0]
 80083ec:	2b30      	cmp	r3, #48	; 0x30
 80083ee:	d107      	bne.n	8008400 <__cvt+0x84>
 80083f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80083f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f8:	bf1c      	itt	ne
 80083fa:	f1c4 0401 	rsbne	r4, r4, #1
 80083fe:	6034      	strne	r4, [r6, #0]
 8008400:	6833      	ldr	r3, [r6, #0]
 8008402:	441a      	add	r2, r3
 8008404:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840c:	bf08      	it	eq
 800840e:	9203      	streq	r2, [sp, #12]
 8008410:	2130      	movs	r1, #48	; 0x30
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	4293      	cmp	r3, r2
 8008416:	d2dc      	bcs.n	80083d2 <__cvt+0x56>
 8008418:	1c5c      	adds	r4, r3, #1
 800841a:	9403      	str	r4, [sp, #12]
 800841c:	7019      	strb	r1, [r3, #0]
 800841e:	e7f8      	b.n	8008412 <__cvt+0x96>

08008420 <__exponent>:
 8008420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008422:	4603      	mov	r3, r0
 8008424:	2900      	cmp	r1, #0
 8008426:	bfb8      	it	lt
 8008428:	4249      	neglt	r1, r1
 800842a:	f803 2b02 	strb.w	r2, [r3], #2
 800842e:	bfb4      	ite	lt
 8008430:	222d      	movlt	r2, #45	; 0x2d
 8008432:	222b      	movge	r2, #43	; 0x2b
 8008434:	2909      	cmp	r1, #9
 8008436:	7042      	strb	r2, [r0, #1]
 8008438:	dd2a      	ble.n	8008490 <__exponent+0x70>
 800843a:	f10d 0407 	add.w	r4, sp, #7
 800843e:	46a4      	mov	ip, r4
 8008440:	270a      	movs	r7, #10
 8008442:	46a6      	mov	lr, r4
 8008444:	460a      	mov	r2, r1
 8008446:	fb91 f6f7 	sdiv	r6, r1, r7
 800844a:	fb07 1516 	mls	r5, r7, r6, r1
 800844e:	3530      	adds	r5, #48	; 0x30
 8008450:	2a63      	cmp	r2, #99	; 0x63
 8008452:	f104 34ff 	add.w	r4, r4, #4294967295
 8008456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800845a:	4631      	mov	r1, r6
 800845c:	dcf1      	bgt.n	8008442 <__exponent+0x22>
 800845e:	3130      	adds	r1, #48	; 0x30
 8008460:	f1ae 0502 	sub.w	r5, lr, #2
 8008464:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008468:	1c44      	adds	r4, r0, #1
 800846a:	4629      	mov	r1, r5
 800846c:	4561      	cmp	r1, ip
 800846e:	d30a      	bcc.n	8008486 <__exponent+0x66>
 8008470:	f10d 0209 	add.w	r2, sp, #9
 8008474:	eba2 020e 	sub.w	r2, r2, lr
 8008478:	4565      	cmp	r5, ip
 800847a:	bf88      	it	hi
 800847c:	2200      	movhi	r2, #0
 800847e:	4413      	add	r3, r2
 8008480:	1a18      	subs	r0, r3, r0
 8008482:	b003      	add	sp, #12
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800848a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800848e:	e7ed      	b.n	800846c <__exponent+0x4c>
 8008490:	2330      	movs	r3, #48	; 0x30
 8008492:	3130      	adds	r1, #48	; 0x30
 8008494:	7083      	strb	r3, [r0, #2]
 8008496:	70c1      	strb	r1, [r0, #3]
 8008498:	1d03      	adds	r3, r0, #4
 800849a:	e7f1      	b.n	8008480 <__exponent+0x60>
 800849c:	0000      	movs	r0, r0
	...

080084a0 <_printf_float>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	b08b      	sub	sp, #44	; 0x2c
 80084a6:	460c      	mov	r4, r1
 80084a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80084ac:	4616      	mov	r6, r2
 80084ae:	461f      	mov	r7, r3
 80084b0:	4605      	mov	r5, r0
 80084b2:	f002 fe5f 	bl	800b174 <_localeconv_r>
 80084b6:	f8d0 b000 	ldr.w	fp, [r0]
 80084ba:	4658      	mov	r0, fp
 80084bc:	f7f7 fec0 	bl	8000240 <strlen>
 80084c0:	2300      	movs	r3, #0
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	f8d8 3000 	ldr.w	r3, [r8]
 80084c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80084cc:	6822      	ldr	r2, [r4, #0]
 80084ce:	3307      	adds	r3, #7
 80084d0:	f023 0307 	bic.w	r3, r3, #7
 80084d4:	f103 0108 	add.w	r1, r3, #8
 80084d8:	f8c8 1000 	str.w	r1, [r8]
 80084dc:	4682      	mov	sl, r0
 80084de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80084e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008748 <_printf_float+0x2a8>
 80084ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80084ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80084f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80084f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fa:	dd24      	ble.n	8008546 <_printf_float+0xa6>
 80084fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008504:	d502      	bpl.n	800850c <_printf_float+0x6c>
 8008506:	232d      	movs	r3, #45	; 0x2d
 8008508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800850c:	4b90      	ldr	r3, [pc, #576]	; (8008750 <_printf_float+0x2b0>)
 800850e:	4891      	ldr	r0, [pc, #580]	; (8008754 <_printf_float+0x2b4>)
 8008510:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008514:	bf94      	ite	ls
 8008516:	4698      	movls	r8, r3
 8008518:	4680      	movhi	r8, r0
 800851a:	2303      	movs	r3, #3
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	f022 0204 	bic.w	r2, r2, #4
 8008522:	2300      	movs	r3, #0
 8008524:	6022      	str	r2, [r4, #0]
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	9700      	str	r7, [sp, #0]
 800852a:	4633      	mov	r3, r6
 800852c:	aa09      	add	r2, sp, #36	; 0x24
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 f9d3 	bl	80088dc <_printf_common>
 8008536:	3001      	adds	r0, #1
 8008538:	f040 808a 	bne.w	8008650 <_printf_float+0x1b0>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b00b      	add	sp, #44	; 0x2c
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	eeb4 0b40 	vcmp.f64	d0, d0
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	d709      	bvc.n	8008564 <_printf_float+0xc4>
 8008550:	ee10 3a90 	vmov	r3, s1
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfbc      	itt	lt
 8008558:	232d      	movlt	r3, #45	; 0x2d
 800855a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800855e:	487e      	ldr	r0, [pc, #504]	; (8008758 <_printf_float+0x2b8>)
 8008560:	4b7e      	ldr	r3, [pc, #504]	; (800875c <_printf_float+0x2bc>)
 8008562:	e7d5      	b.n	8008510 <_printf_float+0x70>
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800856a:	9104      	str	r1, [sp, #16]
 800856c:	1c59      	adds	r1, r3, #1
 800856e:	d13c      	bne.n	80085ea <_printf_float+0x14a>
 8008570:	2306      	movs	r3, #6
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	2300      	movs	r3, #0
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	ab08      	add	r3, sp, #32
 800857a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800857e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008582:	ab07      	add	r3, sp, #28
 8008584:	6861      	ldr	r1, [r4, #4]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	6022      	str	r2, [r4, #0]
 800858a:	f10d 031b 	add.w	r3, sp, #27
 800858e:	4628      	mov	r0, r5
 8008590:	f7ff fef4 	bl	800837c <__cvt>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	9907      	ldr	r1, [sp, #28]
 8008598:	2b47      	cmp	r3, #71	; 0x47
 800859a:	4680      	mov	r8, r0
 800859c:	d108      	bne.n	80085b0 <_printf_float+0x110>
 800859e:	1cc8      	adds	r0, r1, #3
 80085a0:	db02      	blt.n	80085a8 <_printf_float+0x108>
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	4299      	cmp	r1, r3
 80085a6:	dd41      	ble.n	800862c <_printf_float+0x18c>
 80085a8:	f1a9 0902 	sub.w	r9, r9, #2
 80085ac:	fa5f f989 	uxtb.w	r9, r9
 80085b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085b4:	d820      	bhi.n	80085f8 <_printf_float+0x158>
 80085b6:	3901      	subs	r1, #1
 80085b8:	464a      	mov	r2, r9
 80085ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085be:	9107      	str	r1, [sp, #28]
 80085c0:	f7ff ff2e 	bl	8008420 <__exponent>
 80085c4:	9a08      	ldr	r2, [sp, #32]
 80085c6:	9004      	str	r0, [sp, #16]
 80085c8:	1813      	adds	r3, r2, r0
 80085ca:	2a01      	cmp	r2, #1
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	dc02      	bgt.n	80085d6 <_printf_float+0x136>
 80085d0:	6822      	ldr	r2, [r4, #0]
 80085d2:	07d2      	lsls	r2, r2, #31
 80085d4:	d501      	bpl.n	80085da <_printf_float+0x13a>
 80085d6:	3301      	adds	r3, #1
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0a2      	beq.n	8008528 <_printf_float+0x88>
 80085e2:	232d      	movs	r3, #45	; 0x2d
 80085e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e8:	e79e      	b.n	8008528 <_printf_float+0x88>
 80085ea:	9904      	ldr	r1, [sp, #16]
 80085ec:	2947      	cmp	r1, #71	; 0x47
 80085ee:	d1c1      	bne.n	8008574 <_printf_float+0xd4>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1bf      	bne.n	8008574 <_printf_float+0xd4>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e7bc      	b.n	8008572 <_printf_float+0xd2>
 80085f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80085fc:	d118      	bne.n	8008630 <_printf_float+0x190>
 80085fe:	2900      	cmp	r1, #0
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	dd0b      	ble.n	800861c <_printf_float+0x17c>
 8008604:	6121      	str	r1, [r4, #16]
 8008606:	b913      	cbnz	r3, 800860e <_printf_float+0x16e>
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	07d0      	lsls	r0, r2, #31
 800860c:	d502      	bpl.n	8008614 <_printf_float+0x174>
 800860e:	3301      	adds	r3, #1
 8008610:	440b      	add	r3, r1
 8008612:	6123      	str	r3, [r4, #16]
 8008614:	2300      	movs	r3, #0
 8008616:	65a1      	str	r1, [r4, #88]	; 0x58
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	e7de      	b.n	80085da <_printf_float+0x13a>
 800861c:	b913      	cbnz	r3, 8008624 <_printf_float+0x184>
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	07d2      	lsls	r2, r2, #31
 8008622:	d501      	bpl.n	8008628 <_printf_float+0x188>
 8008624:	3302      	adds	r3, #2
 8008626:	e7f4      	b.n	8008612 <_printf_float+0x172>
 8008628:	2301      	movs	r3, #1
 800862a:	e7f2      	b.n	8008612 <_printf_float+0x172>
 800862c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008630:	9b08      	ldr	r3, [sp, #32]
 8008632:	4299      	cmp	r1, r3
 8008634:	db05      	blt.n	8008642 <_printf_float+0x1a2>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	6121      	str	r1, [r4, #16]
 800863a:	07d8      	lsls	r0, r3, #31
 800863c:	d5ea      	bpl.n	8008614 <_printf_float+0x174>
 800863e:	1c4b      	adds	r3, r1, #1
 8008640:	e7e7      	b.n	8008612 <_printf_float+0x172>
 8008642:	2900      	cmp	r1, #0
 8008644:	bfd4      	ite	le
 8008646:	f1c1 0202 	rsble	r2, r1, #2
 800864a:	2201      	movgt	r2, #1
 800864c:	4413      	add	r3, r2
 800864e:	e7e0      	b.n	8008612 <_printf_float+0x172>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	055a      	lsls	r2, r3, #21
 8008654:	d407      	bmi.n	8008666 <_printf_float+0x1c6>
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	4642      	mov	r2, r8
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	d12a      	bne.n	80086ba <_printf_float+0x21a>
 8008664:	e76a      	b.n	800853c <_printf_float+0x9c>
 8008666:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800866a:	f240 80e2 	bls.w	8008832 <_printf_float+0x392>
 800866e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008672:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	d133      	bne.n	80086e4 <_printf_float+0x244>
 800867c:	4a38      	ldr	r2, [pc, #224]	; (8008760 <_printf_float+0x2c0>)
 800867e:	2301      	movs	r3, #1
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f af58 	beq.w	800853c <_printf_float+0x9c>
 800868c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008690:	429a      	cmp	r2, r3
 8008692:	db02      	blt.n	800869a <_printf_float+0x1fa>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	07d8      	lsls	r0, r3, #31
 8008698:	d50f      	bpl.n	80086ba <_printf_float+0x21a>
 800869a:	4653      	mov	r3, sl
 800869c:	465a      	mov	r2, fp
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f af49 	beq.w	800853c <_printf_float+0x9c>
 80086aa:	f04f 0800 	mov.w	r8, #0
 80086ae:	f104 091a 	add.w	r9, r4, #26
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4543      	cmp	r3, r8
 80086b8:	dc09      	bgt.n	80086ce <_printf_float+0x22e>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	079b      	lsls	r3, r3, #30
 80086be:	f100 8108 	bmi.w	80088d2 <_printf_float+0x432>
 80086c2:	68e0      	ldr	r0, [r4, #12]
 80086c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c6:	4298      	cmp	r0, r3
 80086c8:	bfb8      	it	lt
 80086ca:	4618      	movlt	r0, r3
 80086cc:	e738      	b.n	8008540 <_printf_float+0xa0>
 80086ce:	2301      	movs	r3, #1
 80086d0:	464a      	mov	r2, r9
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f af2f 	beq.w	800853c <_printf_float+0x9c>
 80086de:	f108 0801 	add.w	r8, r8, #1
 80086e2:	e7e6      	b.n	80086b2 <_printf_float+0x212>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dc3c      	bgt.n	8008764 <_printf_float+0x2c4>
 80086ea:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <_printf_float+0x2c0>)
 80086ec:	2301      	movs	r3, #1
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f af21 	beq.w	800853c <_printf_float+0x9c>
 80086fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086fe:	4313      	orrs	r3, r2
 8008700:	d102      	bne.n	8008708 <_printf_float+0x268>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	07d9      	lsls	r1, r3, #31
 8008706:	d5d8      	bpl.n	80086ba <_printf_float+0x21a>
 8008708:	4653      	mov	r3, sl
 800870a:	465a      	mov	r2, fp
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f af12 	beq.w	800853c <_printf_float+0x9c>
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	f104 0a1a 	add.w	sl, r4, #26
 8008720:	9b07      	ldr	r3, [sp, #28]
 8008722:	425b      	negs	r3, r3
 8008724:	454b      	cmp	r3, r9
 8008726:	dc01      	bgt.n	800872c <_printf_float+0x28c>
 8008728:	9b08      	ldr	r3, [sp, #32]
 800872a:	e795      	b.n	8008658 <_printf_float+0x1b8>
 800872c:	2301      	movs	r3, #1
 800872e:	4652      	mov	r2, sl
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f af00 	beq.w	800853c <_printf_float+0x9c>
 800873c:	f109 0901 	add.w	r9, r9, #1
 8008740:	e7ee      	b.n	8008720 <_printf_float+0x280>
 8008742:	bf00      	nop
 8008744:	f3af 8000 	nop.w
 8008748:	ffffffff 	.word	0xffffffff
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	0800d38c 	.word	0x0800d38c
 8008754:	0800d390 	.word	0x0800d390
 8008758:	0800d398 	.word	0x0800d398
 800875c:	0800d394 	.word	0x0800d394
 8008760:	0800d7a1 	.word	0x0800d7a1
 8008764:	9a08      	ldr	r2, [sp, #32]
 8008766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008768:	429a      	cmp	r2, r3
 800876a:	bfa8      	it	ge
 800876c:	461a      	movge	r2, r3
 800876e:	2a00      	cmp	r2, #0
 8008770:	4691      	mov	r9, r2
 8008772:	dc38      	bgt.n	80087e6 <_printf_float+0x346>
 8008774:	2300      	movs	r3, #0
 8008776:	9305      	str	r3, [sp, #20]
 8008778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800877c:	f104 021a 	add.w	r2, r4, #26
 8008780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008782:	9905      	ldr	r1, [sp, #20]
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	eba3 0309 	sub.w	r3, r3, r9
 800878a:	428b      	cmp	r3, r1
 800878c:	dc33      	bgt.n	80087f6 <_printf_float+0x356>
 800878e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008792:	429a      	cmp	r2, r3
 8008794:	db3c      	blt.n	8008810 <_printf_float+0x370>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	d439      	bmi.n	8008810 <_printf_float+0x370>
 800879c:	9a08      	ldr	r2, [sp, #32]
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	9907      	ldr	r1, [sp, #28]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	eba2 0901 	sub.w	r9, r2, r1
 80087a8:	4599      	cmp	r9, r3
 80087aa:	bfa8      	it	ge
 80087ac:	4699      	movge	r9, r3
 80087ae:	f1b9 0f00 	cmp.w	r9, #0
 80087b2:	dc35      	bgt.n	8008820 <_printf_float+0x380>
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087bc:	f104 0a1a 	add.w	sl, r4, #26
 80087c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	eba3 0309 	sub.w	r3, r3, r9
 80087ca:	4543      	cmp	r3, r8
 80087cc:	f77f af75 	ble.w	80086ba <_printf_float+0x21a>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4652      	mov	r2, sl
 80087d4:	4631      	mov	r1, r6
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b8      	blx	r7
 80087da:	3001      	adds	r0, #1
 80087dc:	f43f aeae 	beq.w	800853c <_printf_float+0x9c>
 80087e0:	f108 0801 	add.w	r8, r8, #1
 80087e4:	e7ec      	b.n	80087c0 <_printf_float+0x320>
 80087e6:	4613      	mov	r3, r2
 80087e8:	4631      	mov	r1, r6
 80087ea:	4642      	mov	r2, r8
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	d1bf      	bne.n	8008774 <_printf_float+0x2d4>
 80087f4:	e6a2      	b.n	800853c <_printf_float+0x9c>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4631      	mov	r1, r6
 80087fa:	4628      	mov	r0, r5
 80087fc:	9204      	str	r2, [sp, #16]
 80087fe:	47b8      	blx	r7
 8008800:	3001      	adds	r0, #1
 8008802:	f43f ae9b 	beq.w	800853c <_printf_float+0x9c>
 8008806:	9b05      	ldr	r3, [sp, #20]
 8008808:	9a04      	ldr	r2, [sp, #16]
 800880a:	3301      	adds	r3, #1
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	e7b7      	b.n	8008780 <_printf_float+0x2e0>
 8008810:	4653      	mov	r3, sl
 8008812:	465a      	mov	r2, fp
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	d1be      	bne.n	800879c <_printf_float+0x2fc>
 800881e:	e68d      	b.n	800853c <_printf_float+0x9c>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	464b      	mov	r3, r9
 8008824:	4442      	add	r2, r8
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	d1c1      	bne.n	80087b4 <_printf_float+0x314>
 8008830:	e684      	b.n	800853c <_printf_float+0x9c>
 8008832:	9a08      	ldr	r2, [sp, #32]
 8008834:	2a01      	cmp	r2, #1
 8008836:	dc01      	bgt.n	800883c <_printf_float+0x39c>
 8008838:	07db      	lsls	r3, r3, #31
 800883a:	d537      	bpl.n	80088ac <_printf_float+0x40c>
 800883c:	2301      	movs	r3, #1
 800883e:	4642      	mov	r2, r8
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f ae78 	beq.w	800853c <_printf_float+0x9c>
 800884c:	4653      	mov	r3, sl
 800884e:	465a      	mov	r2, fp
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	f43f ae70 	beq.w	800853c <_printf_float+0x9c>
 800885c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008868:	d01b      	beq.n	80088a2 <_printf_float+0x402>
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	f108 0201 	add.w	r2, r8, #1
 8008870:	3b01      	subs	r3, #1
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47b8      	blx	r7
 8008878:	3001      	adds	r0, #1
 800887a:	d10e      	bne.n	800889a <_printf_float+0x3fa>
 800887c:	e65e      	b.n	800853c <_printf_float+0x9c>
 800887e:	2301      	movs	r3, #1
 8008880:	464a      	mov	r2, r9
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	f43f ae57 	beq.w	800853c <_printf_float+0x9c>
 800888e:	f108 0801 	add.w	r8, r8, #1
 8008892:	9b08      	ldr	r3, [sp, #32]
 8008894:	3b01      	subs	r3, #1
 8008896:	4543      	cmp	r3, r8
 8008898:	dcf1      	bgt.n	800887e <_printf_float+0x3de>
 800889a:	9b04      	ldr	r3, [sp, #16]
 800889c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088a0:	e6db      	b.n	800865a <_printf_float+0x1ba>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	f104 091a 	add.w	r9, r4, #26
 80088aa:	e7f2      	b.n	8008892 <_printf_float+0x3f2>
 80088ac:	2301      	movs	r3, #1
 80088ae:	4642      	mov	r2, r8
 80088b0:	e7df      	b.n	8008872 <_printf_float+0x3d2>
 80088b2:	2301      	movs	r3, #1
 80088b4:	464a      	mov	r2, r9
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f ae3d 	beq.w	800853c <_printf_float+0x9c>
 80088c2:	f108 0801 	add.w	r8, r8, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	4543      	cmp	r3, r8
 80088ce:	dcf0      	bgt.n	80088b2 <_printf_float+0x412>
 80088d0:	e6f7      	b.n	80086c2 <_printf_float+0x222>
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	f104 0919 	add.w	r9, r4, #25
 80088da:	e7f4      	b.n	80088c6 <_printf_float+0x426>

080088dc <_printf_common>:
 80088dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	4616      	mov	r6, r2
 80088e2:	4699      	mov	r9, r3
 80088e4:	688a      	ldr	r2, [r1, #8]
 80088e6:	690b      	ldr	r3, [r1, #16]
 80088e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	bfb8      	it	lt
 80088f0:	4613      	movlt	r3, r2
 80088f2:	6033      	str	r3, [r6, #0]
 80088f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088f8:	4607      	mov	r7, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b10a      	cbz	r2, 8008902 <_printf_common+0x26>
 80088fe:	3301      	adds	r3, #1
 8008900:	6033      	str	r3, [r6, #0]
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	0699      	lsls	r1, r3, #26
 8008906:	bf42      	ittt	mi
 8008908:	6833      	ldrmi	r3, [r6, #0]
 800890a:	3302      	addmi	r3, #2
 800890c:	6033      	strmi	r3, [r6, #0]
 800890e:	6825      	ldr	r5, [r4, #0]
 8008910:	f015 0506 	ands.w	r5, r5, #6
 8008914:	d106      	bne.n	8008924 <_printf_common+0x48>
 8008916:	f104 0a19 	add.w	sl, r4, #25
 800891a:	68e3      	ldr	r3, [r4, #12]
 800891c:	6832      	ldr	r2, [r6, #0]
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	42ab      	cmp	r3, r5
 8008922:	dc26      	bgt.n	8008972 <_printf_common+0x96>
 8008924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008928:	1e13      	subs	r3, r2, #0
 800892a:	6822      	ldr	r2, [r4, #0]
 800892c:	bf18      	it	ne
 800892e:	2301      	movne	r3, #1
 8008930:	0692      	lsls	r2, r2, #26
 8008932:	d42b      	bmi.n	800898c <_printf_common+0xb0>
 8008934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008938:	4649      	mov	r1, r9
 800893a:	4638      	mov	r0, r7
 800893c:	47c0      	blx	r8
 800893e:	3001      	adds	r0, #1
 8008940:	d01e      	beq.n	8008980 <_printf_common+0xa4>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	68e5      	ldr	r5, [r4, #12]
 8008946:	6832      	ldr	r2, [r6, #0]
 8008948:	f003 0306 	and.w	r3, r3, #6
 800894c:	2b04      	cmp	r3, #4
 800894e:	bf08      	it	eq
 8008950:	1aad      	subeq	r5, r5, r2
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	6922      	ldr	r2, [r4, #16]
 8008956:	bf0c      	ite	eq
 8008958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800895c:	2500      	movne	r5, #0
 800895e:	4293      	cmp	r3, r2
 8008960:	bfc4      	itt	gt
 8008962:	1a9b      	subgt	r3, r3, r2
 8008964:	18ed      	addgt	r5, r5, r3
 8008966:	2600      	movs	r6, #0
 8008968:	341a      	adds	r4, #26
 800896a:	42b5      	cmp	r5, r6
 800896c:	d11a      	bne.n	80089a4 <_printf_common+0xc8>
 800896e:	2000      	movs	r0, #0
 8008970:	e008      	b.n	8008984 <_printf_common+0xa8>
 8008972:	2301      	movs	r3, #1
 8008974:	4652      	mov	r2, sl
 8008976:	4649      	mov	r1, r9
 8008978:	4638      	mov	r0, r7
 800897a:	47c0      	blx	r8
 800897c:	3001      	adds	r0, #1
 800897e:	d103      	bne.n	8008988 <_printf_common+0xac>
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	3501      	adds	r5, #1
 800898a:	e7c6      	b.n	800891a <_printf_common+0x3e>
 800898c:	18e1      	adds	r1, r4, r3
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	2030      	movs	r0, #48	; 0x30
 8008992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008996:	4422      	add	r2, r4
 8008998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800899c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089a0:	3302      	adds	r3, #2
 80089a2:	e7c7      	b.n	8008934 <_printf_common+0x58>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4622      	mov	r2, r4
 80089a8:	4649      	mov	r1, r9
 80089aa:	4638      	mov	r0, r7
 80089ac:	47c0      	blx	r8
 80089ae:	3001      	adds	r0, #1
 80089b0:	d0e6      	beq.n	8008980 <_printf_common+0xa4>
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7d9      	b.n	800896a <_printf_common+0x8e>
	...

080089b8 <_printf_i>:
 80089b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	460c      	mov	r4, r1
 80089be:	4691      	mov	r9, r2
 80089c0:	7e27      	ldrb	r7, [r4, #24]
 80089c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089c4:	2f78      	cmp	r7, #120	; 0x78
 80089c6:	4680      	mov	r8, r0
 80089c8:	469a      	mov	sl, r3
 80089ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ce:	d807      	bhi.n	80089e0 <_printf_i+0x28>
 80089d0:	2f62      	cmp	r7, #98	; 0x62
 80089d2:	d80a      	bhi.n	80089ea <_printf_i+0x32>
 80089d4:	2f00      	cmp	r7, #0
 80089d6:	f000 80d8 	beq.w	8008b8a <_printf_i+0x1d2>
 80089da:	2f58      	cmp	r7, #88	; 0x58
 80089dc:	f000 80a3 	beq.w	8008b26 <_printf_i+0x16e>
 80089e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089e8:	e03a      	b.n	8008a60 <_printf_i+0xa8>
 80089ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ee:	2b15      	cmp	r3, #21
 80089f0:	d8f6      	bhi.n	80089e0 <_printf_i+0x28>
 80089f2:	a001      	add	r0, pc, #4	; (adr r0, 80089f8 <_printf_i+0x40>)
 80089f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089f8:	08008a51 	.word	0x08008a51
 80089fc:	08008a65 	.word	0x08008a65
 8008a00:	080089e1 	.word	0x080089e1
 8008a04:	080089e1 	.word	0x080089e1
 8008a08:	080089e1 	.word	0x080089e1
 8008a0c:	080089e1 	.word	0x080089e1
 8008a10:	08008a65 	.word	0x08008a65
 8008a14:	080089e1 	.word	0x080089e1
 8008a18:	080089e1 	.word	0x080089e1
 8008a1c:	080089e1 	.word	0x080089e1
 8008a20:	080089e1 	.word	0x080089e1
 8008a24:	08008b71 	.word	0x08008b71
 8008a28:	08008a95 	.word	0x08008a95
 8008a2c:	08008b53 	.word	0x08008b53
 8008a30:	080089e1 	.word	0x080089e1
 8008a34:	080089e1 	.word	0x080089e1
 8008a38:	08008b93 	.word	0x08008b93
 8008a3c:	080089e1 	.word	0x080089e1
 8008a40:	08008a95 	.word	0x08008a95
 8008a44:	080089e1 	.word	0x080089e1
 8008a48:	080089e1 	.word	0x080089e1
 8008a4c:	08008b5b 	.word	0x08008b5b
 8008a50:	680b      	ldr	r3, [r1, #0]
 8008a52:	1d1a      	adds	r2, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	600a      	str	r2, [r1, #0]
 8008a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0a3      	b.n	8008bac <_printf_i+0x1f4>
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	6808      	ldr	r0, [r1, #0]
 8008a68:	062e      	lsls	r6, r5, #24
 8008a6a:	f100 0304 	add.w	r3, r0, #4
 8008a6e:	d50a      	bpl.n	8008a86 <_printf_i+0xce>
 8008a70:	6805      	ldr	r5, [r0, #0]
 8008a72:	600b      	str	r3, [r1, #0]
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	da03      	bge.n	8008a80 <_printf_i+0xc8>
 8008a78:	232d      	movs	r3, #45	; 0x2d
 8008a7a:	426d      	negs	r5, r5
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a80:	485e      	ldr	r0, [pc, #376]	; (8008bfc <_printf_i+0x244>)
 8008a82:	230a      	movs	r3, #10
 8008a84:	e019      	b.n	8008aba <_printf_i+0x102>
 8008a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a8a:	6805      	ldr	r5, [r0, #0]
 8008a8c:	600b      	str	r3, [r1, #0]
 8008a8e:	bf18      	it	ne
 8008a90:	b22d      	sxthne	r5, r5
 8008a92:	e7ef      	b.n	8008a74 <_printf_i+0xbc>
 8008a94:	680b      	ldr	r3, [r1, #0]
 8008a96:	6825      	ldr	r5, [r4, #0]
 8008a98:	1d18      	adds	r0, r3, #4
 8008a9a:	6008      	str	r0, [r1, #0]
 8008a9c:	0628      	lsls	r0, r5, #24
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_i+0xec>
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	e002      	b.n	8008aaa <_printf_i+0xf2>
 8008aa4:	0669      	lsls	r1, r5, #25
 8008aa6:	d5fb      	bpl.n	8008aa0 <_printf_i+0xe8>
 8008aa8:	881d      	ldrh	r5, [r3, #0]
 8008aaa:	4854      	ldr	r0, [pc, #336]	; (8008bfc <_printf_i+0x244>)
 8008aac:	2f6f      	cmp	r7, #111	; 0x6f
 8008aae:	bf0c      	ite	eq
 8008ab0:	2308      	moveq	r3, #8
 8008ab2:	230a      	movne	r3, #10
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aba:	6866      	ldr	r6, [r4, #4]
 8008abc:	60a6      	str	r6, [r4, #8]
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	bfa2      	ittt	ge
 8008ac2:	6821      	ldrge	r1, [r4, #0]
 8008ac4:	f021 0104 	bicge.w	r1, r1, #4
 8008ac8:	6021      	strge	r1, [r4, #0]
 8008aca:	b90d      	cbnz	r5, 8008ad0 <_printf_i+0x118>
 8008acc:	2e00      	cmp	r6, #0
 8008ace:	d04d      	beq.n	8008b6c <_printf_i+0x1b4>
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8008ada:	5dc7      	ldrb	r7, [r0, r7]
 8008adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ae0:	462f      	mov	r7, r5
 8008ae2:	42bb      	cmp	r3, r7
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	d9f4      	bls.n	8008ad2 <_printf_i+0x11a>
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d10b      	bne.n	8008b04 <_printf_i+0x14c>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	07df      	lsls	r7, r3, #31
 8008af0:	d508      	bpl.n	8008b04 <_printf_i+0x14c>
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	6861      	ldr	r1, [r4, #4]
 8008af6:	4299      	cmp	r1, r3
 8008af8:	bfde      	ittt	le
 8008afa:	2330      	movle	r3, #48	; 0x30
 8008afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b04:	1b92      	subs	r2, r2, r6
 8008b06:	6122      	str	r2, [r4, #16]
 8008b08:	f8cd a000 	str.w	sl, [sp]
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	aa03      	add	r2, sp, #12
 8008b10:	4621      	mov	r1, r4
 8008b12:	4640      	mov	r0, r8
 8008b14:	f7ff fee2 	bl	80088dc <_printf_common>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d14c      	bne.n	8008bb6 <_printf_i+0x1fe>
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	b004      	add	sp, #16
 8008b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b26:	4835      	ldr	r0, [pc, #212]	; (8008bfc <_printf_i+0x244>)
 8008b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	680e      	ldr	r6, [r1, #0]
 8008b30:	061f      	lsls	r7, r3, #24
 8008b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b36:	600e      	str	r6, [r1, #0]
 8008b38:	d514      	bpl.n	8008b64 <_printf_i+0x1ac>
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	bf44      	itt	mi
 8008b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b42:	6023      	strmi	r3, [r4, #0]
 8008b44:	b91d      	cbnz	r5, 8008b4e <_printf_i+0x196>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	f023 0320 	bic.w	r3, r3, #32
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	2310      	movs	r3, #16
 8008b50:	e7b0      	b.n	8008ab4 <_printf_i+0xfc>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f043 0320 	orr.w	r3, r3, #32
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	2378      	movs	r3, #120	; 0x78
 8008b5c:	4828      	ldr	r0, [pc, #160]	; (8008c00 <_printf_i+0x248>)
 8008b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b62:	e7e3      	b.n	8008b2c <_printf_i+0x174>
 8008b64:	065e      	lsls	r6, r3, #25
 8008b66:	bf48      	it	mi
 8008b68:	b2ad      	uxthmi	r5, r5
 8008b6a:	e7e6      	b.n	8008b3a <_printf_i+0x182>
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	e7bb      	b.n	8008ae8 <_printf_i+0x130>
 8008b70:	680b      	ldr	r3, [r1, #0]
 8008b72:	6826      	ldr	r6, [r4, #0]
 8008b74:	6960      	ldr	r0, [r4, #20]
 8008b76:	1d1d      	adds	r5, r3, #4
 8008b78:	600d      	str	r5, [r1, #0]
 8008b7a:	0635      	lsls	r5, r6, #24
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	d501      	bpl.n	8008b84 <_printf_i+0x1cc>
 8008b80:	6018      	str	r0, [r3, #0]
 8008b82:	e002      	b.n	8008b8a <_printf_i+0x1d2>
 8008b84:	0671      	lsls	r1, r6, #25
 8008b86:	d5fb      	bpl.n	8008b80 <_printf_i+0x1c8>
 8008b88:	8018      	strh	r0, [r3, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	4616      	mov	r6, r2
 8008b90:	e7ba      	b.n	8008b08 <_printf_i+0x150>
 8008b92:	680b      	ldr	r3, [r1, #0]
 8008b94:	1d1a      	adds	r2, r3, #4
 8008b96:	600a      	str	r2, [r1, #0]
 8008b98:	681e      	ldr	r6, [r3, #0]
 8008b9a:	6862      	ldr	r2, [r4, #4]
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7f7 fb56 	bl	8000250 <memchr>
 8008ba4:	b108      	cbz	r0, 8008baa <_printf_i+0x1f2>
 8008ba6:	1b80      	subs	r0, r0, r6
 8008ba8:	6060      	str	r0, [r4, #4]
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bb4:	e7a8      	b.n	8008b08 <_printf_i+0x150>
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	4649      	mov	r1, r9
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	47d0      	blx	sl
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d0ab      	beq.n	8008b1c <_printf_i+0x164>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	079b      	lsls	r3, r3, #30
 8008bc8:	d413      	bmi.n	8008bf2 <_printf_i+0x23a>
 8008bca:	68e0      	ldr	r0, [r4, #12]
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	4298      	cmp	r0, r3
 8008bd0:	bfb8      	it	lt
 8008bd2:	4618      	movlt	r0, r3
 8008bd4:	e7a4      	b.n	8008b20 <_printf_i+0x168>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4632      	mov	r2, r6
 8008bda:	4649      	mov	r1, r9
 8008bdc:	4640      	mov	r0, r8
 8008bde:	47d0      	blx	sl
 8008be0:	3001      	adds	r0, #1
 8008be2:	d09b      	beq.n	8008b1c <_printf_i+0x164>
 8008be4:	3501      	adds	r5, #1
 8008be6:	68e3      	ldr	r3, [r4, #12]
 8008be8:	9903      	ldr	r1, [sp, #12]
 8008bea:	1a5b      	subs	r3, r3, r1
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dcf2      	bgt.n	8008bd6 <_printf_i+0x21e>
 8008bf0:	e7eb      	b.n	8008bca <_printf_i+0x212>
 8008bf2:	2500      	movs	r5, #0
 8008bf4:	f104 0619 	add.w	r6, r4, #25
 8008bf8:	e7f5      	b.n	8008be6 <_printf_i+0x22e>
 8008bfa:	bf00      	nop
 8008bfc:	0800d39c 	.word	0x0800d39c
 8008c00:	0800d3ad 	.word	0x0800d3ad

08008c04 <_scanf_float>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	4617      	mov	r7, r2
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	688b      	ldr	r3, [r1, #8]
 8008c10:	1e5a      	subs	r2, r3, #1
 8008c12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c16:	bf83      	ittte	hi
 8008c18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c1c:	195b      	addhi	r3, r3, r5
 8008c1e:	9302      	strhi	r3, [sp, #8]
 8008c20:	2300      	movls	r3, #0
 8008c22:	bf86      	itte	hi
 8008c24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c28:	608b      	strhi	r3, [r1, #8]
 8008c2a:	9302      	strls	r3, [sp, #8]
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	468b      	mov	fp, r1
 8008c30:	2500      	movs	r5, #0
 8008c32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c36:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c3e:	4680      	mov	r8, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	465e      	mov	r6, fp
 8008c44:	46aa      	mov	sl, r5
 8008c46:	46a9      	mov	r9, r5
 8008c48:	9501      	str	r5, [sp, #4]
 8008c4a:	68a2      	ldr	r2, [r4, #8]
 8008c4c:	b152      	cbz	r2, 8008c64 <_scanf_float+0x60>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b4e      	cmp	r3, #78	; 0x4e
 8008c54:	d864      	bhi.n	8008d20 <_scanf_float+0x11c>
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d83c      	bhi.n	8008cd4 <_scanf_float+0xd0>
 8008c5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c5e:	b2c8      	uxtb	r0, r1
 8008c60:	280e      	cmp	r0, #14
 8008c62:	d93a      	bls.n	8008cda <_scanf_float+0xd6>
 8008c64:	f1b9 0f00 	cmp.w	r9, #0
 8008c68:	d003      	beq.n	8008c72 <_scanf_float+0x6e>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c76:	f1ba 0f01 	cmp.w	sl, #1
 8008c7a:	f200 8113 	bhi.w	8008ea4 <_scanf_float+0x2a0>
 8008c7e:	455e      	cmp	r6, fp
 8008c80:	f200 8105 	bhi.w	8008e8e <_scanf_float+0x28a>
 8008c84:	2501      	movs	r5, #1
 8008c86:	4628      	mov	r0, r5
 8008c88:	b007      	add	sp, #28
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c92:	2a0d      	cmp	r2, #13
 8008c94:	d8e6      	bhi.n	8008c64 <_scanf_float+0x60>
 8008c96:	a101      	add	r1, pc, #4	; (adr r1, 8008c9c <_scanf_float+0x98>)
 8008c98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c9c:	08008ddb 	.word	0x08008ddb
 8008ca0:	08008c65 	.word	0x08008c65
 8008ca4:	08008c65 	.word	0x08008c65
 8008ca8:	08008c65 	.word	0x08008c65
 8008cac:	08008e3b 	.word	0x08008e3b
 8008cb0:	08008e13 	.word	0x08008e13
 8008cb4:	08008c65 	.word	0x08008c65
 8008cb8:	08008c65 	.word	0x08008c65
 8008cbc:	08008de9 	.word	0x08008de9
 8008cc0:	08008c65 	.word	0x08008c65
 8008cc4:	08008c65 	.word	0x08008c65
 8008cc8:	08008c65 	.word	0x08008c65
 8008ccc:	08008c65 	.word	0x08008c65
 8008cd0:	08008da1 	.word	0x08008da1
 8008cd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008cd8:	e7db      	b.n	8008c92 <_scanf_float+0x8e>
 8008cda:	290e      	cmp	r1, #14
 8008cdc:	d8c2      	bhi.n	8008c64 <_scanf_float+0x60>
 8008cde:	a001      	add	r0, pc, #4	; (adr r0, 8008ce4 <_scanf_float+0xe0>)
 8008ce0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ce4:	08008d93 	.word	0x08008d93
 8008ce8:	08008c65 	.word	0x08008c65
 8008cec:	08008d93 	.word	0x08008d93
 8008cf0:	08008e27 	.word	0x08008e27
 8008cf4:	08008c65 	.word	0x08008c65
 8008cf8:	08008d41 	.word	0x08008d41
 8008cfc:	08008d7d 	.word	0x08008d7d
 8008d00:	08008d7d 	.word	0x08008d7d
 8008d04:	08008d7d 	.word	0x08008d7d
 8008d08:	08008d7d 	.word	0x08008d7d
 8008d0c:	08008d7d 	.word	0x08008d7d
 8008d10:	08008d7d 	.word	0x08008d7d
 8008d14:	08008d7d 	.word	0x08008d7d
 8008d18:	08008d7d 	.word	0x08008d7d
 8008d1c:	08008d7d 	.word	0x08008d7d
 8008d20:	2b6e      	cmp	r3, #110	; 0x6e
 8008d22:	d809      	bhi.n	8008d38 <_scanf_float+0x134>
 8008d24:	2b60      	cmp	r3, #96	; 0x60
 8008d26:	d8b2      	bhi.n	8008c8e <_scanf_float+0x8a>
 8008d28:	2b54      	cmp	r3, #84	; 0x54
 8008d2a:	d077      	beq.n	8008e1c <_scanf_float+0x218>
 8008d2c:	2b59      	cmp	r3, #89	; 0x59
 8008d2e:	d199      	bne.n	8008c64 <_scanf_float+0x60>
 8008d30:	2d07      	cmp	r5, #7
 8008d32:	d197      	bne.n	8008c64 <_scanf_float+0x60>
 8008d34:	2508      	movs	r5, #8
 8008d36:	e029      	b.n	8008d8c <_scanf_float+0x188>
 8008d38:	2b74      	cmp	r3, #116	; 0x74
 8008d3a:	d06f      	beq.n	8008e1c <_scanf_float+0x218>
 8008d3c:	2b79      	cmp	r3, #121	; 0x79
 8008d3e:	e7f6      	b.n	8008d2e <_scanf_float+0x12a>
 8008d40:	6821      	ldr	r1, [r4, #0]
 8008d42:	05c8      	lsls	r0, r1, #23
 8008d44:	d51a      	bpl.n	8008d7c <_scanf_float+0x178>
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d4c:	6021      	str	r1, [r4, #0]
 8008d4e:	f109 0901 	add.w	r9, r9, #1
 8008d52:	b11b      	cbz	r3, 8008d5c <_scanf_float+0x158>
 8008d54:	3b01      	subs	r3, #1
 8008d56:	3201      	adds	r2, #1
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	60a2      	str	r2, [r4, #8]
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	60a3      	str	r3, [r4, #8]
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	3301      	adds	r3, #1
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	607b      	str	r3, [r7, #4]
 8008d70:	f340 8084 	ble.w	8008e7c <_scanf_float+0x278>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	3301      	adds	r3, #1
 8008d78:	603b      	str	r3, [r7, #0]
 8008d7a:	e766      	b.n	8008c4a <_scanf_float+0x46>
 8008d7c:	eb1a 0f05 	cmn.w	sl, r5
 8008d80:	f47f af70 	bne.w	8008c64 <_scanf_float+0x60>
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d90:	e7e4      	b.n	8008d5c <_scanf_float+0x158>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	0610      	lsls	r0, r2, #24
 8008d96:	f57f af65 	bpl.w	8008c64 <_scanf_float+0x60>
 8008d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d9e:	e7f4      	b.n	8008d8a <_scanf_float+0x186>
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	d10e      	bne.n	8008dc4 <_scanf_float+0x1c0>
 8008da6:	f1b9 0f00 	cmp.w	r9, #0
 8008daa:	d10e      	bne.n	8008dca <_scanf_float+0x1c6>
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008db2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008db6:	d108      	bne.n	8008dca <_scanf_float+0x1c6>
 8008db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	f04f 0a01 	mov.w	sl, #1
 8008dc2:	e7e3      	b.n	8008d8c <_scanf_float+0x188>
 8008dc4:	f1ba 0f02 	cmp.w	sl, #2
 8008dc8:	d055      	beq.n	8008e76 <_scanf_float+0x272>
 8008dca:	2d01      	cmp	r5, #1
 8008dcc:	d002      	beq.n	8008dd4 <_scanf_float+0x1d0>
 8008dce:	2d04      	cmp	r5, #4
 8008dd0:	f47f af48 	bne.w	8008c64 <_scanf_float+0x60>
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	b2ed      	uxtb	r5, r5
 8008dd8:	e7d8      	b.n	8008d8c <_scanf_float+0x188>
 8008dda:	f1ba 0f01 	cmp.w	sl, #1
 8008dde:	f47f af41 	bne.w	8008c64 <_scanf_float+0x60>
 8008de2:	f04f 0a02 	mov.w	sl, #2
 8008de6:	e7d1      	b.n	8008d8c <_scanf_float+0x188>
 8008de8:	b97d      	cbnz	r5, 8008e0a <_scanf_float+0x206>
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	f47f af3c 	bne.w	8008c6a <_scanf_float+0x66>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008df8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dfc:	f47f af39 	bne.w	8008c72 <_scanf_float+0x6e>
 8008e00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e04:	6022      	str	r2, [r4, #0]
 8008e06:	2501      	movs	r5, #1
 8008e08:	e7c0      	b.n	8008d8c <_scanf_float+0x188>
 8008e0a:	2d03      	cmp	r5, #3
 8008e0c:	d0e2      	beq.n	8008dd4 <_scanf_float+0x1d0>
 8008e0e:	2d05      	cmp	r5, #5
 8008e10:	e7de      	b.n	8008dd0 <_scanf_float+0x1cc>
 8008e12:	2d02      	cmp	r5, #2
 8008e14:	f47f af26 	bne.w	8008c64 <_scanf_float+0x60>
 8008e18:	2503      	movs	r5, #3
 8008e1a:	e7b7      	b.n	8008d8c <_scanf_float+0x188>
 8008e1c:	2d06      	cmp	r5, #6
 8008e1e:	f47f af21 	bne.w	8008c64 <_scanf_float+0x60>
 8008e22:	2507      	movs	r5, #7
 8008e24:	e7b2      	b.n	8008d8c <_scanf_float+0x188>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	0591      	lsls	r1, r2, #22
 8008e2a:	f57f af1b 	bpl.w	8008c64 <_scanf_float+0x60>
 8008e2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e38:	e7a8      	b.n	8008d8c <_scanf_float+0x188>
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e44:	d006      	beq.n	8008e54 <_scanf_float+0x250>
 8008e46:	0550      	lsls	r0, r2, #21
 8008e48:	f57f af0c 	bpl.w	8008c64 <_scanf_float+0x60>
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	f43f af0f 	beq.w	8008c72 <_scanf_float+0x6e>
 8008e54:	0591      	lsls	r1, r2, #22
 8008e56:	bf58      	it	pl
 8008e58:	9901      	ldrpl	r1, [sp, #4]
 8008e5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e5e:	bf58      	it	pl
 8008e60:	eba9 0101 	subpl.w	r1, r9, r1
 8008e64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e68:	bf58      	it	pl
 8008e6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	f04f 0900 	mov.w	r9, #0
 8008e74:	e78a      	b.n	8008d8c <_scanf_float+0x188>
 8008e76:	f04f 0a03 	mov.w	sl, #3
 8008e7a:	e787      	b.n	8008d8c <_scanf_float+0x188>
 8008e7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e80:	4639      	mov	r1, r7
 8008e82:	4640      	mov	r0, r8
 8008e84:	4798      	blx	r3
 8008e86:	2800      	cmp	r0, #0
 8008e88:	f43f aedf 	beq.w	8008c4a <_scanf_float+0x46>
 8008e8c:	e6ea      	b.n	8008c64 <_scanf_float+0x60>
 8008e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e96:	463a      	mov	r2, r7
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4798      	blx	r3
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	6123      	str	r3, [r4, #16]
 8008ea2:	e6ec      	b.n	8008c7e <_scanf_float+0x7a>
 8008ea4:	1e6b      	subs	r3, r5, #1
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d825      	bhi.n	8008ef6 <_scanf_float+0x2f2>
 8008eaa:	2d02      	cmp	r5, #2
 8008eac:	d836      	bhi.n	8008f1c <_scanf_float+0x318>
 8008eae:	455e      	cmp	r6, fp
 8008eb0:	f67f aee8 	bls.w	8008c84 <_scanf_float+0x80>
 8008eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	4798      	blx	r3
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	6123      	str	r3, [r4, #16]
 8008ec8:	e7f1      	b.n	8008eae <_scanf_float+0x2aa>
 8008eca:	9802      	ldr	r0, [sp, #8]
 8008ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ed0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ed4:	9002      	str	r0, [sp, #8]
 8008ed6:	463a      	mov	r2, r7
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4798      	blx	r3
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ee6:	fa5f fa8a 	uxtb.w	sl, sl
 8008eea:	f1ba 0f02 	cmp.w	sl, #2
 8008eee:	d1ec      	bne.n	8008eca <_scanf_float+0x2c6>
 8008ef0:	3d03      	subs	r5, #3
 8008ef2:	b2ed      	uxtb	r5, r5
 8008ef4:	1b76      	subs	r6, r6, r5
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	05da      	lsls	r2, r3, #23
 8008efa:	d52f      	bpl.n	8008f5c <_scanf_float+0x358>
 8008efc:	055b      	lsls	r3, r3, #21
 8008efe:	d510      	bpl.n	8008f22 <_scanf_float+0x31e>
 8008f00:	455e      	cmp	r6, fp
 8008f02:	f67f aebf 	bls.w	8008c84 <_scanf_float+0x80>
 8008f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f0e:	463a      	mov	r2, r7
 8008f10:	4640      	mov	r0, r8
 8008f12:	4798      	blx	r3
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	e7f1      	b.n	8008f00 <_scanf_float+0x2fc>
 8008f1c:	46aa      	mov	sl, r5
 8008f1e:	9602      	str	r6, [sp, #8]
 8008f20:	e7df      	b.n	8008ee2 <_scanf_float+0x2de>
 8008f22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	2965      	cmp	r1, #101	; 0x65
 8008f2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	d00c      	beq.n	8008f50 <_scanf_float+0x34c>
 8008f36:	2945      	cmp	r1, #69	; 0x45
 8008f38:	d00a      	beq.n	8008f50 <_scanf_float+0x34c>
 8008f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4640      	mov	r0, r8
 8008f42:	4798      	blx	r3
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	1eb5      	subs	r5, r6, #2
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f54:	463a      	mov	r2, r7
 8008f56:	4640      	mov	r0, r8
 8008f58:	4798      	blx	r3
 8008f5a:	462e      	mov	r6, r5
 8008f5c:	6825      	ldr	r5, [r4, #0]
 8008f5e:	f015 0510 	ands.w	r5, r5, #16
 8008f62:	d14d      	bne.n	8009000 <_scanf_float+0x3fc>
 8008f64:	7035      	strb	r5, [r6, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f70:	d11a      	bne.n	8008fa8 <_scanf_float+0x3a4>
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	454b      	cmp	r3, r9
 8008f76:	eba3 0209 	sub.w	r2, r3, r9
 8008f7a:	d122      	bne.n	8008fc2 <_scanf_float+0x3be>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4659      	mov	r1, fp
 8008f80:	4640      	mov	r0, r8
 8008f82:	f000 fecb 	bl	8009d1c <_strtod_r>
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	6821      	ldr	r1, [r4, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f011 0f02 	tst.w	r1, #2
 8008f90:	f103 0204 	add.w	r2, r3, #4
 8008f94:	d020      	beq.n	8008fd8 <_scanf_float+0x3d4>
 8008f96:	9903      	ldr	r1, [sp, #12]
 8008f98:	600a      	str	r2, [r1, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	ed83 0b00 	vstr	d0, [r3]
 8008fa0:	68e3      	ldr	r3, [r4, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60e3      	str	r3, [r4, #12]
 8008fa6:	e66e      	b.n	8008c86 <_scanf_float+0x82>
 8008fa8:	9b04      	ldr	r3, [sp, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0e6      	beq.n	8008f7c <_scanf_float+0x378>
 8008fae:	9905      	ldr	r1, [sp, #20]
 8008fb0:	230a      	movs	r3, #10
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	3101      	adds	r1, #1
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f000 ff3a 	bl	8009e30 <_strtol_r>
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	9e05      	ldr	r6, [sp, #20]
 8008fc0:	1ac2      	subs	r2, r0, r3
 8008fc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008fc6:	429e      	cmp	r6, r3
 8008fc8:	bf28      	it	cs
 8008fca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008fce:	490d      	ldr	r1, [pc, #52]	; (8009004 <_scanf_float+0x400>)
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 f821 	bl	8009018 <siprintf>
 8008fd6:	e7d1      	b.n	8008f7c <_scanf_float+0x378>
 8008fd8:	f011 0f04 	tst.w	r1, #4
 8008fdc:	9903      	ldr	r1, [sp, #12]
 8008fde:	600a      	str	r2, [r1, #0]
 8008fe0:	d1db      	bne.n	8008f9a <_scanf_float+0x396>
 8008fe2:	eeb4 0b40 	vcmp.f64	d0, d0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	681e      	ldr	r6, [r3, #0]
 8008fec:	d705      	bvc.n	8008ffa <_scanf_float+0x3f6>
 8008fee:	4806      	ldr	r0, [pc, #24]	; (8009008 <_scanf_float+0x404>)
 8008ff0:	f000 f80c 	bl	800900c <nanf>
 8008ff4:	ed86 0a00 	vstr	s0, [r6]
 8008ff8:	e7d2      	b.n	8008fa0 <_scanf_float+0x39c>
 8008ffa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008ffe:	e7f9      	b.n	8008ff4 <_scanf_float+0x3f0>
 8009000:	2500      	movs	r5, #0
 8009002:	e640      	b.n	8008c86 <_scanf_float+0x82>
 8009004:	0800d3be 	.word	0x0800d3be
 8009008:	0800d7f3 	.word	0x0800d7f3

0800900c <nanf>:
 800900c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009014 <nanf+0x8>
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	7fc00000 	.word	0x7fc00000

08009018 <siprintf>:
 8009018:	b40e      	push	{r1, r2, r3}
 800901a:	b500      	push	{lr}
 800901c:	b09c      	sub	sp, #112	; 0x70
 800901e:	ab1d      	add	r3, sp, #116	; 0x74
 8009020:	9002      	str	r0, [sp, #8]
 8009022:	9006      	str	r0, [sp, #24]
 8009024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009028:	4809      	ldr	r0, [pc, #36]	; (8009050 <siprintf+0x38>)
 800902a:	9107      	str	r1, [sp, #28]
 800902c:	9104      	str	r1, [sp, #16]
 800902e:	4909      	ldr	r1, [pc, #36]	; (8009054 <siprintf+0x3c>)
 8009030:	f853 2b04 	ldr.w	r2, [r3], #4
 8009034:	9105      	str	r1, [sp, #20]
 8009036:	6800      	ldr	r0, [r0, #0]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	a902      	add	r1, sp, #8
 800903c:	f002 fe9c 	bl	800bd78 <_svfiprintf_r>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	b01c      	add	sp, #112	; 0x70
 8009048:	f85d eb04 	ldr.w	lr, [sp], #4
 800904c:	b003      	add	sp, #12
 800904e:	4770      	bx	lr
 8009050:	20000058 	.word	0x20000058
 8009054:	ffff0208 	.word	0xffff0208

08009058 <siscanf>:
 8009058:	b40e      	push	{r1, r2, r3}
 800905a:	b510      	push	{r4, lr}
 800905c:	b09f      	sub	sp, #124	; 0x7c
 800905e:	ac21      	add	r4, sp, #132	; 0x84
 8009060:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009064:	f854 2b04 	ldr.w	r2, [r4], #4
 8009068:	9201      	str	r2, [sp, #4]
 800906a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800906e:	9004      	str	r0, [sp, #16]
 8009070:	9008      	str	r0, [sp, #32]
 8009072:	f7f7 f8e5 	bl	8000240 <strlen>
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <siscanf+0x50>)
 8009078:	9005      	str	r0, [sp, #20]
 800907a:	9009      	str	r0, [sp, #36]	; 0x24
 800907c:	930d      	str	r3, [sp, #52]	; 0x34
 800907e:	480b      	ldr	r0, [pc, #44]	; (80090ac <siscanf+0x54>)
 8009080:	9a01      	ldr	r2, [sp, #4]
 8009082:	6800      	ldr	r0, [r0, #0]
 8009084:	9403      	str	r4, [sp, #12]
 8009086:	2300      	movs	r3, #0
 8009088:	9311      	str	r3, [sp, #68]	; 0x44
 800908a:	9316      	str	r3, [sp, #88]	; 0x58
 800908c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009090:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009094:	a904      	add	r1, sp, #16
 8009096:	4623      	mov	r3, r4
 8009098:	f002 ffc8 	bl	800c02c <__ssvfiscanf_r>
 800909c:	b01f      	add	sp, #124	; 0x7c
 800909e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a2:	b003      	add	sp, #12
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	080090d3 	.word	0x080090d3
 80090ac:	20000058 	.word	0x20000058

080090b0 <__sread>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	460c      	mov	r4, r1
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	f003 fa7c 	bl	800c5b4 <_read_r>
 80090bc:	2800      	cmp	r0, #0
 80090be:	bfab      	itete	ge
 80090c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090c2:	89a3      	ldrhlt	r3, [r4, #12]
 80090c4:	181b      	addge	r3, r3, r0
 80090c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090ca:	bfac      	ite	ge
 80090cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80090ce:	81a3      	strhlt	r3, [r4, #12]
 80090d0:	bd10      	pop	{r4, pc}

080090d2 <__seofread>:
 80090d2:	2000      	movs	r0, #0
 80090d4:	4770      	bx	lr

080090d6 <__swrite>:
 80090d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090da:	461f      	mov	r7, r3
 80090dc:	898b      	ldrh	r3, [r1, #12]
 80090de:	05db      	lsls	r3, r3, #23
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4616      	mov	r6, r2
 80090e6:	d505      	bpl.n	80090f4 <__swrite+0x1e>
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2302      	movs	r3, #2
 80090ee:	2200      	movs	r2, #0
 80090f0:	f002 f844 	bl	800b17c <_lseek_r>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	4632      	mov	r2, r6
 8009102:	463b      	mov	r3, r7
 8009104:	4628      	mov	r0, r5
 8009106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910a:	f000 be93 	b.w	8009e34 <_write_r>

0800910e <__sseek>:
 800910e:	b510      	push	{r4, lr}
 8009110:	460c      	mov	r4, r1
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f002 f831 	bl	800b17c <_lseek_r>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	bf15      	itete	ne
 8009120:	6560      	strne	r0, [r4, #84]	; 0x54
 8009122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800912a:	81a3      	strheq	r3, [r4, #12]
 800912c:	bf18      	it	ne
 800912e:	81a3      	strhne	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__sclose>:
 8009132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009136:	f000 be8f 	b.w	8009e58 <_close_r>

0800913a <sulp>:
 800913a:	b570      	push	{r4, r5, r6, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	460d      	mov	r5, r1
 8009140:	4616      	mov	r6, r2
 8009142:	ec45 4b10 	vmov	d0, r4, r5
 8009146:	f002 fbb1 	bl	800b8ac <__ulp>
 800914a:	b17e      	cbz	r6, 800916c <sulp+0x32>
 800914c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009154:	2b00      	cmp	r3, #0
 8009156:	dd09      	ble.n	800916c <sulp+0x32>
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800915e:	2000      	movs	r0, #0
 8009160:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009164:	ec41 0b17 	vmov	d7, r0, r1
 8009168:	ee20 0b07 	vmul.f64	d0, d0, d7
 800916c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009170 <_strtod_l>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	ed2d 8b0c 	vpush	{d8-d13}
 8009178:	b09d      	sub	sp, #116	; 0x74
 800917a:	461f      	mov	r7, r3
 800917c:	2300      	movs	r3, #0
 800917e:	9318      	str	r3, [sp, #96]	; 0x60
 8009180:	4ba6      	ldr	r3, [pc, #664]	; (800941c <_strtod_l+0x2ac>)
 8009182:	9213      	str	r2, [sp, #76]	; 0x4c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	9308      	str	r3, [sp, #32]
 8009188:	4604      	mov	r4, r0
 800918a:	4618      	mov	r0, r3
 800918c:	468a      	mov	sl, r1
 800918e:	f7f7 f857 	bl	8000240 <strlen>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	4605      	mov	r5, r0
 8009198:	f04f 0900 	mov.w	r9, #0
 800919c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80091a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	2a2b      	cmp	r2, #43	; 0x2b
 80091a6:	d04d      	beq.n	8009244 <_strtod_l+0xd4>
 80091a8:	d83a      	bhi.n	8009220 <_strtod_l+0xb0>
 80091aa:	2a0d      	cmp	r2, #13
 80091ac:	d833      	bhi.n	8009216 <_strtod_l+0xa6>
 80091ae:	2a08      	cmp	r2, #8
 80091b0:	d833      	bhi.n	800921a <_strtod_l+0xaa>
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d03d      	beq.n	8009232 <_strtod_l+0xc2>
 80091b6:	2300      	movs	r3, #0
 80091b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80091bc:	7833      	ldrb	r3, [r6, #0]
 80091be:	2b30      	cmp	r3, #48	; 0x30
 80091c0:	f040 80b6 	bne.w	8009330 <_strtod_l+0x1c0>
 80091c4:	7873      	ldrb	r3, [r6, #1]
 80091c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091ca:	2b58      	cmp	r3, #88	; 0x58
 80091cc:	d16d      	bne.n	80092aa <_strtod_l+0x13a>
 80091ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	ab18      	add	r3, sp, #96	; 0x60
 80091d4:	9702      	str	r7, [sp, #8]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4a91      	ldr	r2, [pc, #580]	; (8009420 <_strtod_l+0x2b0>)
 80091da:	ab19      	add	r3, sp, #100	; 0x64
 80091dc:	a917      	add	r1, sp, #92	; 0x5c
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 fcc0 	bl	800ab64 <__gethex>
 80091e4:	f010 0507 	ands.w	r5, r0, #7
 80091e8:	4607      	mov	r7, r0
 80091ea:	d005      	beq.n	80091f8 <_strtod_l+0x88>
 80091ec:	2d06      	cmp	r5, #6
 80091ee:	d12b      	bne.n	8009248 <_strtod_l+0xd8>
 80091f0:	3601      	adds	r6, #1
 80091f2:	2300      	movs	r3, #0
 80091f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80091f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f040 856e 	bne.w	8009cdc <_strtod_l+0xb6c>
 8009200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009202:	b1e3      	cbz	r3, 800923e <_strtod_l+0xce>
 8009204:	ec49 8b17 	vmov	d7, r8, r9
 8009208:	eeb1 0b47 	vneg.f64	d0, d7
 800920c:	b01d      	add	sp, #116	; 0x74
 800920e:	ecbd 8b0c 	vpop	{d8-d13}
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	2a20      	cmp	r2, #32
 8009218:	d1cd      	bne.n	80091b6 <_strtod_l+0x46>
 800921a:	3301      	adds	r3, #1
 800921c:	9317      	str	r3, [sp, #92]	; 0x5c
 800921e:	e7bf      	b.n	80091a0 <_strtod_l+0x30>
 8009220:	2a2d      	cmp	r2, #45	; 0x2d
 8009222:	d1c8      	bne.n	80091b6 <_strtod_l+0x46>
 8009224:	2201      	movs	r2, #1
 8009226:	920b      	str	r2, [sp, #44]	; 0x2c
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	9217      	str	r2, [sp, #92]	; 0x5c
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1c3      	bne.n	80091ba <_strtod_l+0x4a>
 8009232:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009234:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 854d 	bne.w	8009cd8 <_strtod_l+0xb68>
 800923e:	ec49 8b10 	vmov	d0, r8, r9
 8009242:	e7e3      	b.n	800920c <_strtod_l+0x9c>
 8009244:	2200      	movs	r2, #0
 8009246:	e7ee      	b.n	8009226 <_strtod_l+0xb6>
 8009248:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800924a:	b13a      	cbz	r2, 800925c <_strtod_l+0xec>
 800924c:	2135      	movs	r1, #53	; 0x35
 800924e:	a81a      	add	r0, sp, #104	; 0x68
 8009250:	f002 fc38 	bl	800bac4 <__copybits>
 8009254:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009256:	4620      	mov	r0, r4
 8009258:	f001 fffc 	bl	800b254 <_Bfree>
 800925c:	3d01      	subs	r5, #1
 800925e:	2d05      	cmp	r5, #5
 8009260:	d807      	bhi.n	8009272 <_strtod_l+0x102>
 8009262:	e8df f005 	tbb	[pc, r5]
 8009266:	0b0e      	.short	0x0b0e
 8009268:	030e1d18 	.word	0x030e1d18
 800926c:	f04f 0900 	mov.w	r9, #0
 8009270:	46c8      	mov	r8, r9
 8009272:	073b      	lsls	r3, r7, #28
 8009274:	d5c0      	bpl.n	80091f8 <_strtod_l+0x88>
 8009276:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800927a:	e7bd      	b.n	80091f8 <_strtod_l+0x88>
 800927c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8009280:	e7f7      	b.n	8009272 <_strtod_l+0x102>
 8009282:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8009286:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009288:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800928c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009290:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009294:	e7ed      	b.n	8009272 <_strtod_l+0x102>
 8009296:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009424 <_strtod_l+0x2b4>
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	e7e8      	b.n	8009272 <_strtod_l+0x102>
 80092a0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80092a4:	f04f 38ff 	mov.w	r8, #4294967295
 80092a8:	e7e3      	b.n	8009272 <_strtod_l+0x102>
 80092aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b30      	cmp	r3, #48	; 0x30
 80092b4:	d0f9      	beq.n	80092aa <_strtod_l+0x13a>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d09e      	beq.n	80091f8 <_strtod_l+0x88>
 80092ba:	2301      	movs	r3, #1
 80092bc:	9306      	str	r3, [sp, #24]
 80092be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092c0:	930c      	str	r3, [sp, #48]	; 0x30
 80092c2:	2300      	movs	r3, #0
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	930a      	str	r3, [sp, #40]	; 0x28
 80092c8:	461e      	mov	r6, r3
 80092ca:	220a      	movs	r2, #10
 80092cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092ce:	f890 b000 	ldrb.w	fp, [r0]
 80092d2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80092d6:	b2d9      	uxtb	r1, r3
 80092d8:	2909      	cmp	r1, #9
 80092da:	d92b      	bls.n	8009334 <_strtod_l+0x1c4>
 80092dc:	9908      	ldr	r1, [sp, #32]
 80092de:	462a      	mov	r2, r5
 80092e0:	f003 f9cc 	bl	800c67c <strncmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d035      	beq.n	8009354 <_strtod_l+0x1e4>
 80092e8:	2000      	movs	r0, #0
 80092ea:	465a      	mov	r2, fp
 80092ec:	4633      	mov	r3, r6
 80092ee:	4683      	mov	fp, r0
 80092f0:	4601      	mov	r1, r0
 80092f2:	2a65      	cmp	r2, #101	; 0x65
 80092f4:	d001      	beq.n	80092fa <_strtod_l+0x18a>
 80092f6:	2a45      	cmp	r2, #69	; 0x45
 80092f8:	d118      	bne.n	800932c <_strtod_l+0x1bc>
 80092fa:	b91b      	cbnz	r3, 8009304 <_strtod_l+0x194>
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	4303      	orrs	r3, r0
 8009300:	d097      	beq.n	8009232 <_strtod_l+0xc2>
 8009302:	2300      	movs	r3, #0
 8009304:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009308:	f10a 0201 	add.w	r2, sl, #1
 800930c:	9217      	str	r2, [sp, #92]	; 0x5c
 800930e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009312:	2a2b      	cmp	r2, #43	; 0x2b
 8009314:	d077      	beq.n	8009406 <_strtod_l+0x296>
 8009316:	2a2d      	cmp	r2, #45	; 0x2d
 8009318:	d07d      	beq.n	8009416 <_strtod_l+0x2a6>
 800931a:	f04f 0e00 	mov.w	lr, #0
 800931e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009322:	2d09      	cmp	r5, #9
 8009324:	f240 8084 	bls.w	8009430 <_strtod_l+0x2c0>
 8009328:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800932c:	2500      	movs	r5, #0
 800932e:	e09f      	b.n	8009470 <_strtod_l+0x300>
 8009330:	2300      	movs	r3, #0
 8009332:	e7c3      	b.n	80092bc <_strtod_l+0x14c>
 8009334:	2e08      	cmp	r6, #8
 8009336:	bfd5      	itete	le
 8009338:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800933a:	9904      	ldrgt	r1, [sp, #16]
 800933c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009340:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009344:	f100 0001 	add.w	r0, r0, #1
 8009348:	bfd4      	ite	le
 800934a:	930a      	strle	r3, [sp, #40]	; 0x28
 800934c:	9304      	strgt	r3, [sp, #16]
 800934e:	3601      	adds	r6, #1
 8009350:	9017      	str	r0, [sp, #92]	; 0x5c
 8009352:	e7bb      	b.n	80092cc <_strtod_l+0x15c>
 8009354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009356:	195a      	adds	r2, r3, r5
 8009358:	9217      	str	r2, [sp, #92]	; 0x5c
 800935a:	5d5a      	ldrb	r2, [r3, r5]
 800935c:	b3ae      	cbz	r6, 80093ca <_strtod_l+0x25a>
 800935e:	4683      	mov	fp, r0
 8009360:	4633      	mov	r3, r6
 8009362:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009366:	2909      	cmp	r1, #9
 8009368:	d912      	bls.n	8009390 <_strtod_l+0x220>
 800936a:	2101      	movs	r1, #1
 800936c:	e7c1      	b.n	80092f2 <_strtod_l+0x182>
 800936e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	9217      	str	r2, [sp, #92]	; 0x5c
 8009374:	785a      	ldrb	r2, [r3, #1]
 8009376:	3001      	adds	r0, #1
 8009378:	2a30      	cmp	r2, #48	; 0x30
 800937a:	d0f8      	beq.n	800936e <_strtod_l+0x1fe>
 800937c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009380:	2b08      	cmp	r3, #8
 8009382:	f200 84b0 	bhi.w	8009ce6 <_strtod_l+0xb76>
 8009386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009388:	930c      	str	r3, [sp, #48]	; 0x30
 800938a:	4683      	mov	fp, r0
 800938c:	2000      	movs	r0, #0
 800938e:	4603      	mov	r3, r0
 8009390:	3a30      	subs	r2, #48	; 0x30
 8009392:	f100 0101 	add.w	r1, r0, #1
 8009396:	d012      	beq.n	80093be <_strtod_l+0x24e>
 8009398:	448b      	add	fp, r1
 800939a:	eb00 0c03 	add.w	ip, r0, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	250a      	movs	r5, #10
 80093a2:	4561      	cmp	r1, ip
 80093a4:	d113      	bne.n	80093ce <_strtod_l+0x25e>
 80093a6:	1819      	adds	r1, r3, r0
 80093a8:	2908      	cmp	r1, #8
 80093aa:	f103 0301 	add.w	r3, r3, #1
 80093ae:	4403      	add	r3, r0
 80093b0:	dc1d      	bgt.n	80093ee <_strtod_l+0x27e>
 80093b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093b4:	210a      	movs	r1, #10
 80093b6:	fb01 2200 	mla	r2, r1, r0, r2
 80093ba:	920a      	str	r2, [sp, #40]	; 0x28
 80093bc:	2100      	movs	r1, #0
 80093be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093c0:	1c50      	adds	r0, r2, #1
 80093c2:	9017      	str	r0, [sp, #92]	; 0x5c
 80093c4:	7852      	ldrb	r2, [r2, #1]
 80093c6:	4608      	mov	r0, r1
 80093c8:	e7cb      	b.n	8009362 <_strtod_l+0x1f2>
 80093ca:	4630      	mov	r0, r6
 80093cc:	e7d4      	b.n	8009378 <_strtod_l+0x208>
 80093ce:	2908      	cmp	r1, #8
 80093d0:	dc04      	bgt.n	80093dc <_strtod_l+0x26c>
 80093d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80093d4:	436f      	muls	r7, r5
 80093d6:	970a      	str	r7, [sp, #40]	; 0x28
 80093d8:	3101      	adds	r1, #1
 80093da:	e7e2      	b.n	80093a2 <_strtod_l+0x232>
 80093dc:	f101 0e01 	add.w	lr, r1, #1
 80093e0:	f1be 0f10 	cmp.w	lr, #16
 80093e4:	bfde      	ittt	le
 80093e6:	9f04      	ldrle	r7, [sp, #16]
 80093e8:	436f      	mulle	r7, r5
 80093ea:	9704      	strle	r7, [sp, #16]
 80093ec:	e7f4      	b.n	80093d8 <_strtod_l+0x268>
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	bfdf      	itttt	le
 80093f2:	9804      	ldrle	r0, [sp, #16]
 80093f4:	210a      	movle	r1, #10
 80093f6:	fb01 2200 	mlale	r2, r1, r0, r2
 80093fa:	9204      	strle	r2, [sp, #16]
 80093fc:	e7de      	b.n	80093bc <_strtod_l+0x24c>
 80093fe:	f04f 0b00 	mov.w	fp, #0
 8009402:	2101      	movs	r1, #1
 8009404:	e77a      	b.n	80092fc <_strtod_l+0x18c>
 8009406:	f04f 0e00 	mov.w	lr, #0
 800940a:	f10a 0202 	add.w	r2, sl, #2
 800940e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009410:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009414:	e783      	b.n	800931e <_strtod_l+0x1ae>
 8009416:	f04f 0e01 	mov.w	lr, #1
 800941a:	e7f6      	b.n	800940a <_strtod_l+0x29a>
 800941c:	0800d618 	.word	0x0800d618
 8009420:	0800d3c4 	.word	0x0800d3c4
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800942a:	1c55      	adds	r5, r2, #1
 800942c:	9517      	str	r5, [sp, #92]	; 0x5c
 800942e:	7852      	ldrb	r2, [r2, #1]
 8009430:	2a30      	cmp	r2, #48	; 0x30
 8009432:	d0f9      	beq.n	8009428 <_strtod_l+0x2b8>
 8009434:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009438:	2d08      	cmp	r5, #8
 800943a:	f63f af77 	bhi.w	800932c <_strtod_l+0x1bc>
 800943e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009442:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009444:	9208      	str	r2, [sp, #32]
 8009446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009448:	1c55      	adds	r5, r2, #1
 800944a:	9517      	str	r5, [sp, #92]	; 0x5c
 800944c:	7852      	ldrb	r2, [r2, #1]
 800944e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009452:	2f09      	cmp	r7, #9
 8009454:	d937      	bls.n	80094c6 <_strtod_l+0x356>
 8009456:	9f08      	ldr	r7, [sp, #32]
 8009458:	1bed      	subs	r5, r5, r7
 800945a:	2d08      	cmp	r5, #8
 800945c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009460:	dc02      	bgt.n	8009468 <_strtod_l+0x2f8>
 8009462:	4565      	cmp	r5, ip
 8009464:	bfa8      	it	ge
 8009466:	4665      	movge	r5, ip
 8009468:	f1be 0f00 	cmp.w	lr, #0
 800946c:	d000      	beq.n	8009470 <_strtod_l+0x300>
 800946e:	426d      	negs	r5, r5
 8009470:	2b00      	cmp	r3, #0
 8009472:	d14f      	bne.n	8009514 <_strtod_l+0x3a4>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	4303      	orrs	r3, r0
 8009478:	f47f aebe 	bne.w	80091f8 <_strtod_l+0x88>
 800947c:	2900      	cmp	r1, #0
 800947e:	f47f aed8 	bne.w	8009232 <_strtod_l+0xc2>
 8009482:	2a69      	cmp	r2, #105	; 0x69
 8009484:	d027      	beq.n	80094d6 <_strtod_l+0x366>
 8009486:	dc24      	bgt.n	80094d2 <_strtod_l+0x362>
 8009488:	2a49      	cmp	r2, #73	; 0x49
 800948a:	d024      	beq.n	80094d6 <_strtod_l+0x366>
 800948c:	2a4e      	cmp	r2, #78	; 0x4e
 800948e:	f47f aed0 	bne.w	8009232 <_strtod_l+0xc2>
 8009492:	499b      	ldr	r1, [pc, #620]	; (8009700 <_strtod_l+0x590>)
 8009494:	a817      	add	r0, sp, #92	; 0x5c
 8009496:	f001 fdbd 	bl	800b014 <__match>
 800949a:	2800      	cmp	r0, #0
 800949c:	f43f aec9 	beq.w	8009232 <_strtod_l+0xc2>
 80094a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b28      	cmp	r3, #40	; 0x28
 80094a6:	d12d      	bne.n	8009504 <_strtod_l+0x394>
 80094a8:	4996      	ldr	r1, [pc, #600]	; (8009704 <_strtod_l+0x594>)
 80094aa:	aa1a      	add	r2, sp, #104	; 0x68
 80094ac:	a817      	add	r0, sp, #92	; 0x5c
 80094ae:	f001 fdc5 	bl	800b03c <__hexnan>
 80094b2:	2805      	cmp	r0, #5
 80094b4:	d126      	bne.n	8009504 <_strtod_l+0x394>
 80094b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80094bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80094c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80094c4:	e698      	b.n	80091f8 <_strtod_l+0x88>
 80094c6:	250a      	movs	r5, #10
 80094c8:	fb05 250c 	mla	r5, r5, ip, r2
 80094cc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80094d0:	e7b9      	b.n	8009446 <_strtod_l+0x2d6>
 80094d2:	2a6e      	cmp	r2, #110	; 0x6e
 80094d4:	e7db      	b.n	800948e <_strtod_l+0x31e>
 80094d6:	498c      	ldr	r1, [pc, #560]	; (8009708 <_strtod_l+0x598>)
 80094d8:	a817      	add	r0, sp, #92	; 0x5c
 80094da:	f001 fd9b 	bl	800b014 <__match>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aea7 	beq.w	8009232 <_strtod_l+0xc2>
 80094e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e6:	4989      	ldr	r1, [pc, #548]	; (800970c <_strtod_l+0x59c>)
 80094e8:	3b01      	subs	r3, #1
 80094ea:	a817      	add	r0, sp, #92	; 0x5c
 80094ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ee:	f001 fd91 	bl	800b014 <__match>
 80094f2:	b910      	cbnz	r0, 80094fa <_strtod_l+0x38a>
 80094f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f6:	3301      	adds	r3, #1
 80094f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80094fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009720 <_strtod_l+0x5b0>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	e679      	b.n	80091f8 <_strtod_l+0x88>
 8009504:	4882      	ldr	r0, [pc, #520]	; (8009710 <_strtod_l+0x5a0>)
 8009506:	f003 f867 	bl	800c5d8 <nan>
 800950a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800950e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009512:	e671      	b.n	80091f8 <_strtod_l+0x88>
 8009514:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009518:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800951c:	eba5 020b 	sub.w	r2, r5, fp
 8009520:	2e00      	cmp	r6, #0
 8009522:	bf08      	it	eq
 8009524:	461e      	moveq	r6, r3
 8009526:	2b10      	cmp	r3, #16
 8009528:	ed8d 7b08 	vstr	d7, [sp, #32]
 800952c:	9206      	str	r2, [sp, #24]
 800952e:	461a      	mov	r2, r3
 8009530:	bfa8      	it	ge
 8009532:	2210      	movge	r2, #16
 8009534:	2b09      	cmp	r3, #9
 8009536:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800953a:	dd0e      	ble.n	800955a <_strtod_l+0x3ea>
 800953c:	4975      	ldr	r1, [pc, #468]	; (8009714 <_strtod_l+0x5a4>)
 800953e:	eddd 7a04 	vldr	s15, [sp, #16]
 8009542:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009546:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800954a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800954e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009552:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009556:	ec59 8b17 	vmov	r8, r9, d7
 800955a:	2b0f      	cmp	r3, #15
 800955c:	dc37      	bgt.n	80095ce <_strtod_l+0x45e>
 800955e:	9906      	ldr	r1, [sp, #24]
 8009560:	2900      	cmp	r1, #0
 8009562:	f43f ae49 	beq.w	80091f8 <_strtod_l+0x88>
 8009566:	dd23      	ble.n	80095b0 <_strtod_l+0x440>
 8009568:	2916      	cmp	r1, #22
 800956a:	dc0b      	bgt.n	8009584 <_strtod_l+0x414>
 800956c:	4b69      	ldr	r3, [pc, #420]	; (8009714 <_strtod_l+0x5a4>)
 800956e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009572:	ed93 7b00 	vldr	d7, [r3]
 8009576:	ec49 8b16 	vmov	d6, r8, r9
 800957a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800957e:	ec59 8b17 	vmov	r8, r9, d7
 8009582:	e639      	b.n	80091f8 <_strtod_l+0x88>
 8009584:	9806      	ldr	r0, [sp, #24]
 8009586:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800958a:	4281      	cmp	r1, r0
 800958c:	db1f      	blt.n	80095ce <_strtod_l+0x45e>
 800958e:	4a61      	ldr	r2, [pc, #388]	; (8009714 <_strtod_l+0x5a4>)
 8009590:	f1c3 030f 	rsb	r3, r3, #15
 8009594:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009598:	ed91 7b00 	vldr	d7, [r1]
 800959c:	ec49 8b16 	vmov	d6, r8, r9
 80095a0:	1ac3      	subs	r3, r0, r3
 80095a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80095a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095aa:	ed92 6b00 	vldr	d6, [r2]
 80095ae:	e7e4      	b.n	800957a <_strtod_l+0x40a>
 80095b0:	9906      	ldr	r1, [sp, #24]
 80095b2:	3116      	adds	r1, #22
 80095b4:	db0b      	blt.n	80095ce <_strtod_l+0x45e>
 80095b6:	4b57      	ldr	r3, [pc, #348]	; (8009714 <_strtod_l+0x5a4>)
 80095b8:	ebab 0505 	sub.w	r5, fp, r5
 80095bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80095c0:	ed95 7b00 	vldr	d7, [r5]
 80095c4:	ec49 8b16 	vmov	d6, r8, r9
 80095c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80095cc:	e7d7      	b.n	800957e <_strtod_l+0x40e>
 80095ce:	9906      	ldr	r1, [sp, #24]
 80095d0:	1a9a      	subs	r2, r3, r2
 80095d2:	440a      	add	r2, r1
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	dd74      	ble.n	80096c2 <_strtod_l+0x552>
 80095d8:	f012 000f 	ands.w	r0, r2, #15
 80095dc:	d00a      	beq.n	80095f4 <_strtod_l+0x484>
 80095de:	494d      	ldr	r1, [pc, #308]	; (8009714 <_strtod_l+0x5a4>)
 80095e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80095e4:	ed91 7b00 	vldr	d7, [r1]
 80095e8:	ec49 8b16 	vmov	d6, r8, r9
 80095ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095f0:	ec59 8b17 	vmov	r8, r9, d7
 80095f4:	f032 020f 	bics.w	r2, r2, #15
 80095f8:	d04f      	beq.n	800969a <_strtod_l+0x52a>
 80095fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80095fe:	dd22      	ble.n	8009646 <_strtod_l+0x4d6>
 8009600:	2500      	movs	r5, #0
 8009602:	462e      	mov	r6, r5
 8009604:	950a      	str	r5, [sp, #40]	; 0x28
 8009606:	462f      	mov	r7, r5
 8009608:	2322      	movs	r3, #34	; 0x22
 800960a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009720 <_strtod_l+0x5b0>
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	f04f 0800 	mov.w	r8, #0
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	f43f adee 	beq.w	80091f8 <_strtod_l+0x88>
 800961c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800961e:	4620      	mov	r0, r4
 8009620:	f001 fe18 	bl	800b254 <_Bfree>
 8009624:	4639      	mov	r1, r7
 8009626:	4620      	mov	r0, r4
 8009628:	f001 fe14 	bl	800b254 <_Bfree>
 800962c:	4631      	mov	r1, r6
 800962e:	4620      	mov	r0, r4
 8009630:	f001 fe10 	bl	800b254 <_Bfree>
 8009634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009636:	4620      	mov	r0, r4
 8009638:	f001 fe0c 	bl	800b254 <_Bfree>
 800963c:	4629      	mov	r1, r5
 800963e:	4620      	mov	r0, r4
 8009640:	f001 fe08 	bl	800b254 <_Bfree>
 8009644:	e5d8      	b.n	80091f8 <_strtod_l+0x88>
 8009646:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800964a:	2000      	movs	r0, #0
 800964c:	4f32      	ldr	r7, [pc, #200]	; (8009718 <_strtod_l+0x5a8>)
 800964e:	1112      	asrs	r2, r2, #4
 8009650:	4601      	mov	r1, r0
 8009652:	2a01      	cmp	r2, #1
 8009654:	dc24      	bgt.n	80096a0 <_strtod_l+0x530>
 8009656:	b108      	cbz	r0, 800965c <_strtod_l+0x4ec>
 8009658:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800965c:	4a2e      	ldr	r2, [pc, #184]	; (8009718 <_strtod_l+0x5a8>)
 800965e:	482f      	ldr	r0, [pc, #188]	; (800971c <_strtod_l+0x5ac>)
 8009660:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009664:	ed91 7b00 	vldr	d7, [r1]
 8009668:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800966c:	ec49 8b16 	vmov	d6, r8, r9
 8009670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009674:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009678:	9905      	ldr	r1, [sp, #20]
 800967a:	4a29      	ldr	r2, [pc, #164]	; (8009720 <_strtod_l+0x5b0>)
 800967c:	400a      	ands	r2, r1
 800967e:	4282      	cmp	r2, r0
 8009680:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009684:	d8bc      	bhi.n	8009600 <_strtod_l+0x490>
 8009686:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800968a:	4282      	cmp	r2, r0
 800968c:	bf86      	itte	hi
 800968e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009724 <_strtod_l+0x5b4>
 8009692:	f04f 38ff 	movhi.w	r8, #4294967295
 8009696:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800969a:	2200      	movs	r2, #0
 800969c:	9204      	str	r2, [sp, #16]
 800969e:	e07f      	b.n	80097a0 <_strtod_l+0x630>
 80096a0:	f012 0f01 	tst.w	r2, #1
 80096a4:	d00a      	beq.n	80096bc <_strtod_l+0x54c>
 80096a6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80096aa:	ed90 7b00 	vldr	d7, [r0]
 80096ae:	ed9d 6b04 	vldr	d6, [sp, #16]
 80096b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80096b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80096ba:	2001      	movs	r0, #1
 80096bc:	3101      	adds	r1, #1
 80096be:	1052      	asrs	r2, r2, #1
 80096c0:	e7c7      	b.n	8009652 <_strtod_l+0x4e2>
 80096c2:	d0ea      	beq.n	800969a <_strtod_l+0x52a>
 80096c4:	4252      	negs	r2, r2
 80096c6:	f012 000f 	ands.w	r0, r2, #15
 80096ca:	d00a      	beq.n	80096e2 <_strtod_l+0x572>
 80096cc:	4911      	ldr	r1, [pc, #68]	; (8009714 <_strtod_l+0x5a4>)
 80096ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80096d2:	ed91 7b00 	vldr	d7, [r1]
 80096d6:	ec49 8b16 	vmov	d6, r8, r9
 80096da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80096de:	ec59 8b17 	vmov	r8, r9, d7
 80096e2:	1112      	asrs	r2, r2, #4
 80096e4:	d0d9      	beq.n	800969a <_strtod_l+0x52a>
 80096e6:	2a1f      	cmp	r2, #31
 80096e8:	dd1e      	ble.n	8009728 <_strtod_l+0x5b8>
 80096ea:	2500      	movs	r5, #0
 80096ec:	462e      	mov	r6, r5
 80096ee:	950a      	str	r5, [sp, #40]	; 0x28
 80096f0:	462f      	mov	r7, r5
 80096f2:	2322      	movs	r3, #34	; 0x22
 80096f4:	f04f 0800 	mov.w	r8, #0
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	e789      	b.n	8009614 <_strtod_l+0x4a4>
 8009700:	0800d399 	.word	0x0800d399
 8009704:	0800d3d8 	.word	0x0800d3d8
 8009708:	0800d391 	.word	0x0800d391
 800970c:	0800d51c 	.word	0x0800d51c
 8009710:	0800d7f3 	.word	0x0800d7f3
 8009714:	0800d6b8 	.word	0x0800d6b8
 8009718:	0800d690 	.word	0x0800d690
 800971c:	7ca00000 	.word	0x7ca00000
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	7fefffff 	.word	0x7fefffff
 8009728:	f012 0110 	ands.w	r1, r2, #16
 800972c:	bf18      	it	ne
 800972e:	216a      	movne	r1, #106	; 0x6a
 8009730:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009734:	9104      	str	r1, [sp, #16]
 8009736:	49c0      	ldr	r1, [pc, #768]	; (8009a38 <_strtod_l+0x8c8>)
 8009738:	2000      	movs	r0, #0
 800973a:	07d7      	lsls	r7, r2, #31
 800973c:	d508      	bpl.n	8009750 <_strtod_l+0x5e0>
 800973e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8009742:	ed91 7b00 	vldr	d7, [r1]
 8009746:	ee26 7b07 	vmul.f64	d7, d6, d7
 800974a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800974e:	2001      	movs	r0, #1
 8009750:	1052      	asrs	r2, r2, #1
 8009752:	f101 0108 	add.w	r1, r1, #8
 8009756:	d1f0      	bne.n	800973a <_strtod_l+0x5ca>
 8009758:	b108      	cbz	r0, 800975e <_strtod_l+0x5ee>
 800975a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800975e:	9a04      	ldr	r2, [sp, #16]
 8009760:	b1ba      	cbz	r2, 8009792 <_strtod_l+0x622>
 8009762:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009766:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800976a:	2a00      	cmp	r2, #0
 800976c:	4649      	mov	r1, r9
 800976e:	dd10      	ble.n	8009792 <_strtod_l+0x622>
 8009770:	2a1f      	cmp	r2, #31
 8009772:	f340 8132 	ble.w	80099da <_strtod_l+0x86a>
 8009776:	2a34      	cmp	r2, #52	; 0x34
 8009778:	bfde      	ittt	le
 800977a:	3a20      	suble	r2, #32
 800977c:	f04f 30ff 	movle.w	r0, #4294967295
 8009780:	fa00 f202 	lslle.w	r2, r0, r2
 8009784:	f04f 0800 	mov.w	r8, #0
 8009788:	bfcc      	ite	gt
 800978a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800978e:	ea02 0901 	andle.w	r9, r2, r1
 8009792:	ec49 8b17 	vmov	d7, r8, r9
 8009796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979e:	d0a4      	beq.n	80096ea <_strtod_l+0x57a>
 80097a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a2:	9200      	str	r2, [sp, #0]
 80097a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097a6:	4632      	mov	r2, r6
 80097a8:	4620      	mov	r0, r4
 80097aa:	f001 fdbf 	bl	800b32c <__s2b>
 80097ae:	900a      	str	r0, [sp, #40]	; 0x28
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f43f af25 	beq.w	8009600 <_strtod_l+0x490>
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	ebab 0505 	sub.w	r5, fp, r5
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfb4      	ite	lt
 80097c0:	462b      	movlt	r3, r5
 80097c2:	2300      	movge	r3, #0
 80097c4:	930c      	str	r3, [sp, #48]	; 0x30
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009a20 <_strtod_l+0x8b0>
 80097cc:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009a28 <_strtod_l+0x8b8>
 80097d0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009a30 <_strtod_l+0x8c0>
 80097d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097d8:	2500      	movs	r5, #0
 80097da:	9312      	str	r3, [sp, #72]	; 0x48
 80097dc:	462e      	mov	r6, r5
 80097de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e0:	4620      	mov	r0, r4
 80097e2:	6859      	ldr	r1, [r3, #4]
 80097e4:	f001 fcf6 	bl	800b1d4 <_Balloc>
 80097e8:	4607      	mov	r7, r0
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f43f af0c 	beq.w	8009608 <_strtod_l+0x498>
 80097f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	3202      	adds	r2, #2
 80097f6:	f103 010c 	add.w	r1, r3, #12
 80097fa:	0092      	lsls	r2, r2, #2
 80097fc:	300c      	adds	r0, #12
 80097fe:	f7fe fda7 	bl	8008350 <memcpy>
 8009802:	ec49 8b10 	vmov	d0, r8, r9
 8009806:	aa1a      	add	r2, sp, #104	; 0x68
 8009808:	a919      	add	r1, sp, #100	; 0x64
 800980a:	4620      	mov	r0, r4
 800980c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009810:	f002 f8c8 	bl	800b9a4 <__d2b>
 8009814:	9018      	str	r0, [sp, #96]	; 0x60
 8009816:	2800      	cmp	r0, #0
 8009818:	f43f aef6 	beq.w	8009608 <_strtod_l+0x498>
 800981c:	2101      	movs	r1, #1
 800981e:	4620      	mov	r0, r4
 8009820:	f001 fe1e 	bl	800b460 <__i2b>
 8009824:	4606      	mov	r6, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	f43f aeee 	beq.w	8009608 <_strtod_l+0x498>
 800982c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800982e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfab      	itete	ge
 8009834:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009836:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009838:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800983c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009840:	bfac      	ite	ge
 8009842:	eb03 0b02 	addge.w	fp, r3, r2
 8009846:	eba2 0a03 	sublt.w	sl, r2, r3
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	1a9b      	subs	r3, r3, r2
 800984e:	440b      	add	r3, r1
 8009850:	4a7a      	ldr	r2, [pc, #488]	; (8009a3c <_strtod_l+0x8cc>)
 8009852:	3b01      	subs	r3, #1
 8009854:	4293      	cmp	r3, r2
 8009856:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800985a:	f280 80d1 	bge.w	8009a00 <_strtod_l+0x890>
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2a1f      	cmp	r2, #31
 8009862:	eba1 0102 	sub.w	r1, r1, r2
 8009866:	f04f 0001 	mov.w	r0, #1
 800986a:	f300 80bd 	bgt.w	80099e8 <_strtod_l+0x878>
 800986e:	fa00 f302 	lsl.w	r3, r0, r2
 8009872:	930e      	str	r3, [sp, #56]	; 0x38
 8009874:	2300      	movs	r3, #0
 8009876:	930d      	str	r3, [sp, #52]	; 0x34
 8009878:	eb0b 0301 	add.w	r3, fp, r1
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	459b      	cmp	fp, r3
 8009880:	448a      	add	sl, r1
 8009882:	4492      	add	sl, r2
 8009884:	465a      	mov	r2, fp
 8009886:	bfa8      	it	ge
 8009888:	461a      	movge	r2, r3
 800988a:	4552      	cmp	r2, sl
 800988c:	bfa8      	it	ge
 800988e:	4652      	movge	r2, sl
 8009890:	2a00      	cmp	r2, #0
 8009892:	bfc2      	ittt	gt
 8009894:	1a9b      	subgt	r3, r3, r2
 8009896:	ebaa 0a02 	subgt.w	sl, sl, r2
 800989a:	ebab 0b02 	subgt.w	fp, fp, r2
 800989e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	dd18      	ble.n	80098d6 <_strtod_l+0x766>
 80098a4:	4631      	mov	r1, r6
 80098a6:	4620      	mov	r0, r4
 80098a8:	9315      	str	r3, [sp, #84]	; 0x54
 80098aa:	f001 fe95 	bl	800b5d8 <__pow5mult>
 80098ae:	4606      	mov	r6, r0
 80098b0:	2800      	cmp	r0, #0
 80098b2:	f43f aea9 	beq.w	8009608 <_strtod_l+0x498>
 80098b6:	4601      	mov	r1, r0
 80098b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098ba:	4620      	mov	r0, r4
 80098bc:	f001 fde6 	bl	800b48c <__multiply>
 80098c0:	9014      	str	r0, [sp, #80]	; 0x50
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f43f aea0 	beq.w	8009608 <_strtod_l+0x498>
 80098c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098ca:	4620      	mov	r0, r4
 80098cc:	f001 fcc2 	bl	800b254 <_Bfree>
 80098d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098d4:	9218      	str	r2, [sp, #96]	; 0x60
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f300 8097 	bgt.w	8009a0a <_strtod_l+0x89a>
 80098dc:	9b06      	ldr	r3, [sp, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dd08      	ble.n	80098f4 <_strtod_l+0x784>
 80098e2:	4639      	mov	r1, r7
 80098e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098e6:	4620      	mov	r0, r4
 80098e8:	f001 fe76 	bl	800b5d8 <__pow5mult>
 80098ec:	4607      	mov	r7, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae8a 	beq.w	8009608 <_strtod_l+0x498>
 80098f4:	f1ba 0f00 	cmp.w	sl, #0
 80098f8:	dd08      	ble.n	800990c <_strtod_l+0x79c>
 80098fa:	4639      	mov	r1, r7
 80098fc:	4652      	mov	r2, sl
 80098fe:	4620      	mov	r0, r4
 8009900:	f001 fec4 	bl	800b68c <__lshift>
 8009904:	4607      	mov	r7, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f ae7e 	beq.w	8009608 <_strtod_l+0x498>
 800990c:	f1bb 0f00 	cmp.w	fp, #0
 8009910:	dd08      	ble.n	8009924 <_strtod_l+0x7b4>
 8009912:	4631      	mov	r1, r6
 8009914:	465a      	mov	r2, fp
 8009916:	4620      	mov	r0, r4
 8009918:	f001 feb8 	bl	800b68c <__lshift>
 800991c:	4606      	mov	r6, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f ae72 	beq.w	8009608 <_strtod_l+0x498>
 8009924:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009926:	463a      	mov	r2, r7
 8009928:	4620      	mov	r0, r4
 800992a:	f001 ff37 	bl	800b79c <__mdiff>
 800992e:	4605      	mov	r5, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	f43f ae69 	beq.w	8009608 <_strtod_l+0x498>
 8009936:	2300      	movs	r3, #0
 8009938:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800993c:	60c3      	str	r3, [r0, #12]
 800993e:	4631      	mov	r1, r6
 8009940:	f001 ff10 	bl	800b764 <__mcmp>
 8009944:	2800      	cmp	r0, #0
 8009946:	da7f      	bge.n	8009a48 <_strtod_l+0x8d8>
 8009948:	ea5a 0308 	orrs.w	r3, sl, r8
 800994c:	f040 80a5 	bne.w	8009a9a <_strtod_l+0x92a>
 8009950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009954:	2b00      	cmp	r3, #0
 8009956:	f040 80a0 	bne.w	8009a9a <_strtod_l+0x92a>
 800995a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800995e:	0d1b      	lsrs	r3, r3, #20
 8009960:	051b      	lsls	r3, r3, #20
 8009962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009966:	f240 8098 	bls.w	8009a9a <_strtod_l+0x92a>
 800996a:	696b      	ldr	r3, [r5, #20]
 800996c:	b91b      	cbnz	r3, 8009976 <_strtod_l+0x806>
 800996e:	692b      	ldr	r3, [r5, #16]
 8009970:	2b01      	cmp	r3, #1
 8009972:	f340 8092 	ble.w	8009a9a <_strtod_l+0x92a>
 8009976:	4629      	mov	r1, r5
 8009978:	2201      	movs	r2, #1
 800997a:	4620      	mov	r0, r4
 800997c:	f001 fe86 	bl	800b68c <__lshift>
 8009980:	4631      	mov	r1, r6
 8009982:	4605      	mov	r5, r0
 8009984:	f001 feee 	bl	800b764 <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	f340 8086 	ble.w	8009a9a <_strtod_l+0x92a>
 800998e:	9904      	ldr	r1, [sp, #16]
 8009990:	4a2b      	ldr	r2, [pc, #172]	; (8009a40 <_strtod_l+0x8d0>)
 8009992:	464b      	mov	r3, r9
 8009994:	2900      	cmp	r1, #0
 8009996:	f000 80a1 	beq.w	8009adc <_strtod_l+0x96c>
 800999a:	ea02 0109 	and.w	r1, r2, r9
 800999e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099a2:	f300 809b 	bgt.w	8009adc <_strtod_l+0x96c>
 80099a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099aa:	f77f aea2 	ble.w	80096f2 <_strtod_l+0x582>
 80099ae:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <_strtod_l+0x8d4>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80099b6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80099ba:	ec49 8b17 	vmov	d7, r8, r9
 80099be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099c6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	bf08      	it	eq
 80099ce:	2322      	moveq	r3, #34	; 0x22
 80099d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80099d4:	bf08      	it	eq
 80099d6:	6023      	streq	r3, [r4, #0]
 80099d8:	e620      	b.n	800961c <_strtod_l+0x4ac>
 80099da:	f04f 31ff 	mov.w	r1, #4294967295
 80099de:	fa01 f202 	lsl.w	r2, r1, r2
 80099e2:	ea02 0808 	and.w	r8, r2, r8
 80099e6:	e6d4      	b.n	8009792 <_strtod_l+0x622>
 80099e8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80099ec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80099f0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80099f4:	33e2      	adds	r3, #226	; 0xe2
 80099f6:	fa00 f303 	lsl.w	r3, r0, r3
 80099fa:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80099fe:	e73b      	b.n	8009878 <_strtod_l+0x708>
 8009a00:	2000      	movs	r0, #0
 8009a02:	2301      	movs	r3, #1
 8009a04:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009a08:	e736      	b.n	8009878 <_strtod_l+0x708>
 8009a0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f001 fe3c 	bl	800b68c <__lshift>
 8009a14:	9018      	str	r0, [sp, #96]	; 0x60
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f47f af60 	bne.w	80098dc <_strtod_l+0x76c>
 8009a1c:	e5f4      	b.n	8009608 <_strtod_l+0x498>
 8009a1e:	bf00      	nop
 8009a20:	94a03595 	.word	0x94a03595
 8009a24:	3fcfffff 	.word	0x3fcfffff
 8009a28:	94a03595 	.word	0x94a03595
 8009a2c:	3fdfffff 	.word	0x3fdfffff
 8009a30:	35afe535 	.word	0x35afe535
 8009a34:	3fe00000 	.word	0x3fe00000
 8009a38:	0800d3f0 	.word	0x0800d3f0
 8009a3c:	fffffc02 	.word	0xfffffc02
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	39500000 	.word	0x39500000
 8009a48:	46cb      	mov	fp, r9
 8009a4a:	d165      	bne.n	8009b18 <_strtod_l+0x9a8>
 8009a4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a50:	f1ba 0f00 	cmp.w	sl, #0
 8009a54:	d02a      	beq.n	8009aac <_strtod_l+0x93c>
 8009a56:	4aaa      	ldr	r2, [pc, #680]	; (8009d00 <_strtod_l+0xb90>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d12b      	bne.n	8009ab4 <_strtod_l+0x944>
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	4641      	mov	r1, r8
 8009a60:	b1fb      	cbz	r3, 8009aa2 <_strtod_l+0x932>
 8009a62:	4aa8      	ldr	r2, [pc, #672]	; (8009d04 <_strtod_l+0xb94>)
 8009a64:	ea09 0202 	and.w	r2, r9, r2
 8009a68:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	d81a      	bhi.n	8009aa8 <_strtod_l+0x938>
 8009a72:	0d12      	lsrs	r2, r2, #20
 8009a74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a78:	fa00 f303 	lsl.w	r3, r0, r3
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	d119      	bne.n	8009ab4 <_strtod_l+0x944>
 8009a80:	4ba1      	ldr	r3, [pc, #644]	; (8009d08 <_strtod_l+0xb98>)
 8009a82:	459b      	cmp	fp, r3
 8009a84:	d102      	bne.n	8009a8c <_strtod_l+0x91c>
 8009a86:	3101      	adds	r1, #1
 8009a88:	f43f adbe 	beq.w	8009608 <_strtod_l+0x498>
 8009a8c:	4b9d      	ldr	r3, [pc, #628]	; (8009d04 <_strtod_l+0xb94>)
 8009a8e:	ea0b 0303 	and.w	r3, fp, r3
 8009a92:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009a96:	f04f 0800 	mov.w	r8, #0
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d186      	bne.n	80099ae <_strtod_l+0x83e>
 8009aa0:	e5bc      	b.n	800961c <_strtod_l+0x4ac>
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa6:	e7e9      	b.n	8009a7c <_strtod_l+0x90c>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	e7e7      	b.n	8009a7c <_strtod_l+0x90c>
 8009aac:	ea53 0308 	orrs.w	r3, r3, r8
 8009ab0:	f43f af6d 	beq.w	800998e <_strtod_l+0x81e>
 8009ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab6:	b1db      	cbz	r3, 8009af0 <_strtod_l+0x980>
 8009ab8:	ea13 0f0b 	tst.w	r3, fp
 8009abc:	d0ed      	beq.n	8009a9a <_strtod_l+0x92a>
 8009abe:	9a04      	ldr	r2, [sp, #16]
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f1ba 0f00 	cmp.w	sl, #0
 8009ac8:	d016      	beq.n	8009af8 <_strtod_l+0x988>
 8009aca:	f7ff fb36 	bl	800913a <sulp>
 8009ace:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009ad2:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009ad6:	ec59 8b17 	vmov	r8, r9, d7
 8009ada:	e7de      	b.n	8009a9a <_strtod_l+0x92a>
 8009adc:	4013      	ands	r3, r2
 8009ade:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ae2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ae6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009aea:	f04f 38ff 	mov.w	r8, #4294967295
 8009aee:	e7d4      	b.n	8009a9a <_strtod_l+0x92a>
 8009af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009af2:	ea13 0f08 	tst.w	r3, r8
 8009af6:	e7e1      	b.n	8009abc <_strtod_l+0x94c>
 8009af8:	f7ff fb1f 	bl	800913a <sulp>
 8009afc:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009b00:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b10:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009b14:	d1c1      	bne.n	8009a9a <_strtod_l+0x92a>
 8009b16:	e5ec      	b.n	80096f2 <_strtod_l+0x582>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f001 ff9e 	bl	800ba5c <__ratio>
 8009b20:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009b24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2c:	d867      	bhi.n	8009bfe <_strtod_l+0xa8e>
 8009b2e:	f1ba 0f00 	cmp.w	sl, #0
 8009b32:	d044      	beq.n	8009bbe <_strtod_l+0xa4e>
 8009b34:	4b75      	ldr	r3, [pc, #468]	; (8009d0c <_strtod_l+0xb9c>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009b3c:	4971      	ldr	r1, [pc, #452]	; (8009d04 <_strtod_l+0xb94>)
 8009b3e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009d18 <_strtod_l+0xba8>
 8009b42:	ea0b 0001 	and.w	r0, fp, r1
 8009b46:	4560      	cmp	r0, ip
 8009b48:	900d      	str	r0, [sp, #52]	; 0x34
 8009b4a:	f040 808b 	bne.w	8009c64 <_strtod_l+0xaf4>
 8009b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b52:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009b56:	ec49 8b10 	vmov	d0, r8, r9
 8009b5a:	ec43 2b1c 	vmov	d12, r2, r3
 8009b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b62:	f001 fea3 	bl	800b8ac <__ulp>
 8009b66:	ec49 8b1d 	vmov	d13, r8, r9
 8009b6a:	eeac db00 	vfma.f64	d13, d12, d0
 8009b6e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b74:	4963      	ldr	r1, [pc, #396]	; (8009d04 <_strtod_l+0xb94>)
 8009b76:	4a66      	ldr	r2, [pc, #408]	; (8009d10 <_strtod_l+0xba0>)
 8009b78:	4019      	ands	r1, r3
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009b80:	d947      	bls.n	8009c12 <_strtod_l+0xaa2>
 8009b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d103      	bne.n	8009b94 <_strtod_l+0xa24>
 8009b8c:	9b08      	ldr	r3, [sp, #32]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f43f ad3a 	beq.w	8009608 <_strtod_l+0x498>
 8009b94:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009d08 <_strtod_l+0xb98>
 8009b98:	f04f 38ff 	mov.w	r8, #4294967295
 8009b9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f001 fb58 	bl	800b254 <_Bfree>
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f001 fb54 	bl	800b254 <_Bfree>
 8009bac:	4631      	mov	r1, r6
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f001 fb50 	bl	800b254 <_Bfree>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f001 fb4c 	bl	800b254 <_Bfree>
 8009bbc:	e60f      	b.n	80097de <_strtod_l+0x66e>
 8009bbe:	f1b8 0f00 	cmp.w	r8, #0
 8009bc2:	d112      	bne.n	8009bea <_strtod_l+0xa7a>
 8009bc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bc8:	b9b3      	cbnz	r3, 8009bf8 <_strtod_l+0xa88>
 8009bca:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009bce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009bda:	d401      	bmi.n	8009be0 <_strtod_l+0xa70>
 8009bdc:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009be0:	eeb1 7b48 	vneg.f64	d7, d8
 8009be4:	ec53 2b17 	vmov	r2, r3, d7
 8009be8:	e7a8      	b.n	8009b3c <_strtod_l+0x9cc>
 8009bea:	f1b8 0f01 	cmp.w	r8, #1
 8009bee:	d103      	bne.n	8009bf8 <_strtod_l+0xa88>
 8009bf0:	f1b9 0f00 	cmp.w	r9, #0
 8009bf4:	f43f ad7d 	beq.w	80096f2 <_strtod_l+0x582>
 8009bf8:	4b46      	ldr	r3, [pc, #280]	; (8009d14 <_strtod_l+0xba4>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	e79c      	b.n	8009b38 <_strtod_l+0x9c8>
 8009bfe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009c02:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009c06:	f1ba 0f00 	cmp.w	sl, #0
 8009c0a:	d0e9      	beq.n	8009be0 <_strtod_l+0xa70>
 8009c0c:	ec53 2b18 	vmov	r2, r3, d8
 8009c10:	e794      	b.n	8009b3c <_strtod_l+0x9cc>
 8009c12:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1bf      	bne.n	8009b9c <_strtod_l+0xa2c>
 8009c1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c22:	0d1b      	lsrs	r3, r3, #20
 8009c24:	051b      	lsls	r3, r3, #20
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d1b8      	bne.n	8009b9c <_strtod_l+0xa2c>
 8009c2a:	ec51 0b18 	vmov	r0, r1, d8
 8009c2e:	f7f6 fd33 	bl	8000698 <__aeabi_d2lz>
 8009c32:	f7f6 fceb 	bl	800060c <__aeabi_l2d>
 8009c36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c3a:	ec41 0b17 	vmov	d7, r0, r1
 8009c3e:	ea43 0308 	orr.w	r3, r3, r8
 8009c42:	ea53 030a 	orrs.w	r3, r3, sl
 8009c46:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009c4a:	d03e      	beq.n	8009cca <_strtod_l+0xb5a>
 8009c4c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	f53f ace2 	bmi.w	800961c <_strtod_l+0x4ac>
 8009c58:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c60:	dd9c      	ble.n	8009b9c <_strtod_l+0xa2c>
 8009c62:	e4db      	b.n	800961c <_strtod_l+0x4ac>
 8009c64:	9904      	ldr	r1, [sp, #16]
 8009c66:	b301      	cbz	r1, 8009caa <_strtod_l+0xb3a>
 8009c68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c6a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009c6e:	d81c      	bhi.n	8009caa <_strtod_l+0xb3a>
 8009c70:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009cf8 <_strtod_l+0xb88>
 8009c74:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7c:	d811      	bhi.n	8009ca2 <_strtod_l+0xb32>
 8009c7e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009c82:	ee18 3a10 	vmov	r3, s16
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	bf38      	it	cc
 8009c8a:	2301      	movcc	r3, #1
 8009c8c:	ee08 3a10 	vmov	s16, r3
 8009c90:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009c94:	f1ba 0f00 	cmp.w	sl, #0
 8009c98:	d114      	bne.n	8009cc4 <_strtod_l+0xb54>
 8009c9a:	eeb1 7b48 	vneg.f64	d7, d8
 8009c9e:	ec53 2b17 	vmov	r2, r3, d7
 8009ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ca4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009ca8:	1a0b      	subs	r3, r1, r0
 8009caa:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009cae:	ec43 2b1c 	vmov	d12, r2, r3
 8009cb2:	f001 fdfb 	bl	800b8ac <__ulp>
 8009cb6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009cba:	eeac 7b00 	vfma.f64	d7, d12, d0
 8009cbe:	ec59 8b17 	vmov	r8, r9, d7
 8009cc2:	e7a8      	b.n	8009c16 <_strtod_l+0xaa6>
 8009cc4:	ec53 2b18 	vmov	r2, r3, d8
 8009cc8:	e7eb      	b.n	8009ca2 <_strtod_l+0xb32>
 8009cca:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd2:	f57f af63 	bpl.w	8009b9c <_strtod_l+0xa2c>
 8009cd6:	e4a1      	b.n	800961c <_strtod_l+0x4ac>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	f7ff ba8d 	b.w	8009200 <_strtod_l+0x90>
 8009ce6:	2a65      	cmp	r2, #101	; 0x65
 8009ce8:	f43f ab89 	beq.w	80093fe <_strtod_l+0x28e>
 8009cec:	2a45      	cmp	r2, #69	; 0x45
 8009cee:	f43f ab86 	beq.w	80093fe <_strtod_l+0x28e>
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	f7ff bbbe 	b.w	8009474 <_strtod_l+0x304>
 8009cf8:	ffc00000 	.word	0xffc00000
 8009cfc:	41dfffff 	.word	0x41dfffff
 8009d00:	000fffff 	.word	0x000fffff
 8009d04:	7ff00000 	.word	0x7ff00000
 8009d08:	7fefffff 	.word	0x7fefffff
 8009d0c:	3ff00000 	.word	0x3ff00000
 8009d10:	7c9fffff 	.word	0x7c9fffff
 8009d14:	bff00000 	.word	0xbff00000
 8009d18:	7fe00000 	.word	0x7fe00000

08009d1c <_strtod_r>:
 8009d1c:	4b01      	ldr	r3, [pc, #4]	; (8009d24 <_strtod_r+0x8>)
 8009d1e:	f7ff ba27 	b.w	8009170 <_strtod_l>
 8009d22:	bf00      	nop
 8009d24:	200000c0 	.word	0x200000c0

08009d28 <_strtol_l.isra.0>:
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2e:	d001      	beq.n	8009d34 <_strtol_l.isra.0+0xc>
 8009d30:	2b24      	cmp	r3, #36	; 0x24
 8009d32:	d906      	bls.n	8009d42 <_strtol_l.isra.0+0x1a>
 8009d34:	f7fe fae2 	bl	80082fc <__errno>
 8009d38:	2316      	movs	r3, #22
 8009d3a:	6003      	str	r3, [r0, #0]
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d42:	4f3a      	ldr	r7, [pc, #232]	; (8009e2c <_strtol_l.isra.0+0x104>)
 8009d44:	468e      	mov	lr, r1
 8009d46:	4676      	mov	r6, lr
 8009d48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009d4c:	5de5      	ldrb	r5, [r4, r7]
 8009d4e:	f015 0508 	ands.w	r5, r5, #8
 8009d52:	d1f8      	bne.n	8009d46 <_strtol_l.isra.0+0x1e>
 8009d54:	2c2d      	cmp	r4, #45	; 0x2d
 8009d56:	d134      	bne.n	8009dc2 <_strtol_l.isra.0+0x9a>
 8009d58:	f89e 4000 	ldrb.w	r4, [lr]
 8009d5c:	f04f 0801 	mov.w	r8, #1
 8009d60:	f106 0e02 	add.w	lr, r6, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05c      	beq.n	8009e22 <_strtol_l.isra.0+0xfa>
 8009d68:	2b10      	cmp	r3, #16
 8009d6a:	d10c      	bne.n	8009d86 <_strtol_l.isra.0+0x5e>
 8009d6c:	2c30      	cmp	r4, #48	; 0x30
 8009d6e:	d10a      	bne.n	8009d86 <_strtol_l.isra.0+0x5e>
 8009d70:	f89e 4000 	ldrb.w	r4, [lr]
 8009d74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009d78:	2c58      	cmp	r4, #88	; 0x58
 8009d7a:	d14d      	bne.n	8009e18 <_strtol_l.isra.0+0xf0>
 8009d7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009d80:	2310      	movs	r3, #16
 8009d82:	f10e 0e02 	add.w	lr, lr, #2
 8009d86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009d8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d8e:	2600      	movs	r6, #0
 8009d90:	fbbc f9f3 	udiv	r9, ip, r3
 8009d94:	4635      	mov	r5, r6
 8009d96:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009d9e:	2f09      	cmp	r7, #9
 8009da0:	d818      	bhi.n	8009dd4 <_strtol_l.isra.0+0xac>
 8009da2:	463c      	mov	r4, r7
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	dd24      	ble.n	8009df2 <_strtol_l.isra.0+0xca>
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	db1f      	blt.n	8009dec <_strtol_l.isra.0+0xc4>
 8009dac:	45a9      	cmp	r9, r5
 8009dae:	d31d      	bcc.n	8009dec <_strtol_l.isra.0+0xc4>
 8009db0:	d101      	bne.n	8009db6 <_strtol_l.isra.0+0x8e>
 8009db2:	45a2      	cmp	sl, r4
 8009db4:	db1a      	blt.n	8009dec <_strtol_l.isra.0+0xc4>
 8009db6:	fb05 4503 	mla	r5, r5, r3, r4
 8009dba:	2601      	movs	r6, #1
 8009dbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009dc0:	e7eb      	b.n	8009d9a <_strtol_l.isra.0+0x72>
 8009dc2:	2c2b      	cmp	r4, #43	; 0x2b
 8009dc4:	bf08      	it	eq
 8009dc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009dca:	46a8      	mov	r8, r5
 8009dcc:	bf08      	it	eq
 8009dce:	f106 0e02 	addeq.w	lr, r6, #2
 8009dd2:	e7c7      	b.n	8009d64 <_strtol_l.isra.0+0x3c>
 8009dd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009dd8:	2f19      	cmp	r7, #25
 8009dda:	d801      	bhi.n	8009de0 <_strtol_l.isra.0+0xb8>
 8009ddc:	3c37      	subs	r4, #55	; 0x37
 8009dde:	e7e1      	b.n	8009da4 <_strtol_l.isra.0+0x7c>
 8009de0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009de4:	2f19      	cmp	r7, #25
 8009de6:	d804      	bhi.n	8009df2 <_strtol_l.isra.0+0xca>
 8009de8:	3c57      	subs	r4, #87	; 0x57
 8009dea:	e7db      	b.n	8009da4 <_strtol_l.isra.0+0x7c>
 8009dec:	f04f 36ff 	mov.w	r6, #4294967295
 8009df0:	e7e4      	b.n	8009dbc <_strtol_l.isra.0+0x94>
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	da05      	bge.n	8009e02 <_strtol_l.isra.0+0xda>
 8009df6:	2322      	movs	r3, #34	; 0x22
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	4665      	mov	r5, ip
 8009dfc:	b942      	cbnz	r2, 8009e10 <_strtol_l.isra.0+0xe8>
 8009dfe:	4628      	mov	r0, r5
 8009e00:	e79d      	b.n	8009d3e <_strtol_l.isra.0+0x16>
 8009e02:	f1b8 0f00 	cmp.w	r8, #0
 8009e06:	d000      	beq.n	8009e0a <_strtol_l.isra.0+0xe2>
 8009e08:	426d      	negs	r5, r5
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d0f7      	beq.n	8009dfe <_strtol_l.isra.0+0xd6>
 8009e0e:	b10e      	cbz	r6, 8009e14 <_strtol_l.isra.0+0xec>
 8009e10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	e7f2      	b.n	8009dfe <_strtol_l.isra.0+0xd6>
 8009e18:	2430      	movs	r4, #48	; 0x30
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1b3      	bne.n	8009d86 <_strtol_l.isra.0+0x5e>
 8009e1e:	2308      	movs	r3, #8
 8009e20:	e7b1      	b.n	8009d86 <_strtol_l.isra.0+0x5e>
 8009e22:	2c30      	cmp	r4, #48	; 0x30
 8009e24:	d0a4      	beq.n	8009d70 <_strtol_l.isra.0+0x48>
 8009e26:	230a      	movs	r3, #10
 8009e28:	e7ad      	b.n	8009d86 <_strtol_l.isra.0+0x5e>
 8009e2a:	bf00      	nop
 8009e2c:	0800d419 	.word	0x0800d419

08009e30 <_strtol_r>:
 8009e30:	f7ff bf7a 	b.w	8009d28 <_strtol_l.isra.0>

08009e34 <_write_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_write_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f8 fbf1 	bl	800262a <_write>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_write_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_write_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200008c8 	.word	0x200008c8

08009e58 <_close_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_close_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f8 fbfd 	bl	8002662 <_close>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_close_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_close_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	200008c8 	.word	0x200008c8

08009e78 <quorem>:
 8009e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	6903      	ldr	r3, [r0, #16]
 8009e7e:	690c      	ldr	r4, [r1, #16]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	4607      	mov	r7, r0
 8009e84:	f2c0 8081 	blt.w	8009f8a <quorem+0x112>
 8009e88:	3c01      	subs	r4, #1
 8009e8a:	f101 0814 	add.w	r8, r1, #20
 8009e8e:	f100 0514 	add.w	r5, r0, #20
 8009e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8009eb0:	d331      	bcc.n	8009f16 <quorem+0x9e>
 8009eb2:	f04f 0e00 	mov.w	lr, #0
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	46ac      	mov	ip, r5
 8009eba:	46f2      	mov	sl, lr
 8009ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ec0:	b293      	uxth	r3, r2
 8009ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ec6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8009ed0:	0c12      	lsrs	r2, r2, #16
 8009ed2:	f8dc a000 	ldr.w	sl, [ip]
 8009ed6:	fb06 e202 	mla	r2, r6, r2, lr
 8009eda:	fa13 f38a 	uxtah	r3, r3, sl
 8009ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ee2:	fa1f fa82 	uxth.w	sl, r2
 8009ee6:	f8dc 2000 	ldr.w	r2, [ip]
 8009eea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009eee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ef8:	4581      	cmp	r9, r0
 8009efa:	f84c 3b04 	str.w	r3, [ip], #4
 8009efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f02:	d2db      	bcs.n	8009ebc <quorem+0x44>
 8009f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f08:	b92b      	cbnz	r3, 8009f16 <quorem+0x9e>
 8009f0a:	9b01      	ldr	r3, [sp, #4]
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	d32e      	bcc.n	8009f72 <quorem+0xfa>
 8009f14:	613c      	str	r4, [r7, #16]
 8009f16:	4638      	mov	r0, r7
 8009f18:	f001 fc24 	bl	800b764 <__mcmp>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	db24      	blt.n	8009f6a <quorem+0xf2>
 8009f20:	3601      	adds	r6, #1
 8009f22:	4628      	mov	r0, r5
 8009f24:	f04f 0c00 	mov.w	ip, #0
 8009f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f2c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f30:	b293      	uxth	r3, r2
 8009f32:	ebac 0303 	sub.w	r3, ip, r3
 8009f36:	0c12      	lsrs	r2, r2, #16
 8009f38:	fa13 f38e 	uxtah	r3, r3, lr
 8009f3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f4a:	45c1      	cmp	r9, r8
 8009f4c:	f840 3b04 	str.w	r3, [r0], #4
 8009f50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f54:	d2e8      	bcs.n	8009f28 <quorem+0xb0>
 8009f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f5e:	b922      	cbnz	r2, 8009f6a <quorem+0xf2>
 8009f60:	3b04      	subs	r3, #4
 8009f62:	429d      	cmp	r5, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	d30a      	bcc.n	8009f7e <quorem+0x106>
 8009f68:	613c      	str	r4, [r7, #16]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	b003      	add	sp, #12
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	6812      	ldr	r2, [r2, #0]
 8009f74:	3b04      	subs	r3, #4
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d1cc      	bne.n	8009f14 <quorem+0x9c>
 8009f7a:	3c01      	subs	r4, #1
 8009f7c:	e7c7      	b.n	8009f0e <quorem+0x96>
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d1f0      	bne.n	8009f68 <quorem+0xf0>
 8009f86:	3c01      	subs	r4, #1
 8009f88:	e7eb      	b.n	8009f62 <quorem+0xea>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7ee      	b.n	8009f6c <quorem+0xf4>
	...

08009f90 <_dtoa_r>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	ec59 8b10 	vmov	r8, r9, d0
 8009f98:	b095      	sub	sp, #84	; 0x54
 8009f9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f9c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009f9e:	9107      	str	r1, [sp, #28]
 8009fa0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8009faa:	b975      	cbnz	r5, 8009fca <_dtoa_r+0x3a>
 8009fac:	2010      	movs	r0, #16
 8009fae:	f001 f8f7 	bl	800b1a0 <malloc>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	6270      	str	r0, [r6, #36]	; 0x24
 8009fb6:	b920      	cbnz	r0, 8009fc2 <_dtoa_r+0x32>
 8009fb8:	4bab      	ldr	r3, [pc, #684]	; (800a268 <_dtoa_r+0x2d8>)
 8009fba:	21ea      	movs	r1, #234	; 0xea
 8009fbc:	48ab      	ldr	r0, [pc, #684]	; (800a26c <_dtoa_r+0x2dc>)
 8009fbe:	f002 fc35 	bl	800c82c <__assert_func>
 8009fc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fc6:	6005      	str	r5, [r0, #0]
 8009fc8:	60c5      	str	r5, [r0, #12]
 8009fca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fcc:	6819      	ldr	r1, [r3, #0]
 8009fce:	b151      	cbz	r1, 8009fe6 <_dtoa_r+0x56>
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	604a      	str	r2, [r1, #4]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4093      	lsls	r3, r2
 8009fd8:	608b      	str	r3, [r1, #8]
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f001 f93a 	bl	800b254 <_Bfree>
 8009fe0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	f1b9 0300 	subs.w	r3, r9, #0
 8009fea:	bfbb      	ittet	lt
 8009fec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ff0:	9303      	strlt	r3, [sp, #12]
 8009ff2:	2300      	movge	r3, #0
 8009ff4:	2201      	movlt	r2, #1
 8009ff6:	bfac      	ite	ge
 8009ff8:	6023      	strge	r3, [r4, #0]
 8009ffa:	6022      	strlt	r2, [r4, #0]
 8009ffc:	4b9c      	ldr	r3, [pc, #624]	; (800a270 <_dtoa_r+0x2e0>)
 8009ffe:	9c03      	ldr	r4, [sp, #12]
 800a000:	43a3      	bics	r3, r4
 800a002:	d11a      	bne.n	800a03a <_dtoa_r+0xaa>
 800a004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a006:	f242 730f 	movw	r3, #9999	; 0x270f
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a010:	ea53 0308 	orrs.w	r3, r3, r8
 800a014:	f000 8512 	beq.w	800aa3c <_dtoa_r+0xaac>
 800a018:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a01a:	b953      	cbnz	r3, 800a032 <_dtoa_r+0xa2>
 800a01c:	4b95      	ldr	r3, [pc, #596]	; (800a274 <_dtoa_r+0x2e4>)
 800a01e:	e01f      	b.n	800a060 <_dtoa_r+0xd0>
 800a020:	4b95      	ldr	r3, [pc, #596]	; (800a278 <_dtoa_r+0x2e8>)
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	3308      	adds	r3, #8
 800a026:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	9800      	ldr	r0, [sp, #0]
 800a02c:	b015      	add	sp, #84	; 0x54
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	4b90      	ldr	r3, [pc, #576]	; (800a274 <_dtoa_r+0x2e4>)
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	3303      	adds	r3, #3
 800a038:	e7f5      	b.n	800a026 <_dtoa_r+0x96>
 800a03a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a03e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a046:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a04a:	d10b      	bne.n	800a064 <_dtoa_r+0xd4>
 800a04c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a04e:	2301      	movs	r3, #1
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 84ee 	beq.w	800aa36 <_dtoa_r+0xaa6>
 800a05a:	4888      	ldr	r0, [pc, #544]	; (800a27c <_dtoa_r+0x2ec>)
 800a05c:	6018      	str	r0, [r3, #0]
 800a05e:	1e43      	subs	r3, r0, #1
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	e7e2      	b.n	800a02a <_dtoa_r+0x9a>
 800a064:	a913      	add	r1, sp, #76	; 0x4c
 800a066:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a06a:	aa12      	add	r2, sp, #72	; 0x48
 800a06c:	4630      	mov	r0, r6
 800a06e:	f001 fc99 	bl	800b9a4 <__d2b>
 800a072:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a076:	4605      	mov	r5, r0
 800a078:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a07a:	2900      	cmp	r1, #0
 800a07c:	d047      	beq.n	800a10e <_dtoa_r+0x17e>
 800a07e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a080:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a088:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a08c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a090:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a094:	2400      	movs	r4, #0
 800a096:	ec43 2b16 	vmov	d6, r2, r3
 800a09a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a09e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a250 <_dtoa_r+0x2c0>
 800a0a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a0a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a258 <_dtoa_r+0x2c8>
 800a0aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a0ae:	eeb0 7b46 	vmov.f64	d7, d6
 800a0b2:	ee06 1a90 	vmov	s13, r1
 800a0b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a0ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a260 <_dtoa_r+0x2d0>
 800a0be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a0c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a0c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ce:	ee16 ba90 	vmov	fp, s13
 800a0d2:	9411      	str	r4, [sp, #68]	; 0x44
 800a0d4:	d508      	bpl.n	800a0e8 <_dtoa_r+0x158>
 800a0d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a0da:	eeb4 6b47 	vcmp.f64	d6, d7
 800a0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e2:	bf18      	it	ne
 800a0e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a0e8:	f1bb 0f16 	cmp.w	fp, #22
 800a0ec:	d832      	bhi.n	800a154 <_dtoa_r+0x1c4>
 800a0ee:	4b64      	ldr	r3, [pc, #400]	; (800a280 <_dtoa_r+0x2f0>)
 800a0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0f4:	ed93 7b00 	vldr	d7, [r3]
 800a0f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a0fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	d501      	bpl.n	800a10a <_dtoa_r+0x17a>
 800a106:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a10a:	2300      	movs	r3, #0
 800a10c:	e023      	b.n	800a156 <_dtoa_r+0x1c6>
 800a10e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a110:	4401      	add	r1, r0
 800a112:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a116:	2b20      	cmp	r3, #32
 800a118:	bfc3      	ittte	gt
 800a11a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a11e:	fa04 f303 	lslgt.w	r3, r4, r3
 800a122:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a126:	f1c3 0320 	rsble	r3, r3, #32
 800a12a:	bfc6      	itte	gt
 800a12c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a130:	ea43 0308 	orrgt.w	r3, r3, r8
 800a134:	fa08 f303 	lslle.w	r3, r8, r3
 800a138:	ee07 3a90 	vmov	s15, r3
 800a13c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a140:	3901      	subs	r1, #1
 800a142:	ed8d 7b00 	vstr	d7, [sp]
 800a146:	9c01      	ldr	r4, [sp, #4]
 800a148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a14c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a150:	2401      	movs	r4, #1
 800a152:	e7a0      	b.n	800a096 <_dtoa_r+0x106>
 800a154:	2301      	movs	r3, #1
 800a156:	930f      	str	r3, [sp, #60]	; 0x3c
 800a158:	1a43      	subs	r3, r0, r1
 800a15a:	1e5a      	subs	r2, r3, #1
 800a15c:	bf45      	ittet	mi
 800a15e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a162:	9305      	strmi	r3, [sp, #20]
 800a164:	2300      	movpl	r3, #0
 800a166:	2300      	movmi	r3, #0
 800a168:	9206      	str	r2, [sp, #24]
 800a16a:	bf54      	ite	pl
 800a16c:	9305      	strpl	r3, [sp, #20]
 800a16e:	9306      	strmi	r3, [sp, #24]
 800a170:	f1bb 0f00 	cmp.w	fp, #0
 800a174:	db18      	blt.n	800a1a8 <_dtoa_r+0x218>
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a17c:	445b      	add	r3, fp
 800a17e:	9306      	str	r3, [sp, #24]
 800a180:	2300      	movs	r3, #0
 800a182:	9a07      	ldr	r2, [sp, #28]
 800a184:	2a09      	cmp	r2, #9
 800a186:	d849      	bhi.n	800a21c <_dtoa_r+0x28c>
 800a188:	2a05      	cmp	r2, #5
 800a18a:	bfc4      	itt	gt
 800a18c:	3a04      	subgt	r2, #4
 800a18e:	9207      	strgt	r2, [sp, #28]
 800a190:	9a07      	ldr	r2, [sp, #28]
 800a192:	f1a2 0202 	sub.w	r2, r2, #2
 800a196:	bfcc      	ite	gt
 800a198:	2400      	movgt	r4, #0
 800a19a:	2401      	movle	r4, #1
 800a19c:	2a03      	cmp	r2, #3
 800a19e:	d848      	bhi.n	800a232 <_dtoa_r+0x2a2>
 800a1a0:	e8df f002 	tbb	[pc, r2]
 800a1a4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a1a8:	9b05      	ldr	r3, [sp, #20]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	eba3 030b 	sub.w	r3, r3, fp
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a1b4:	f1cb 0300 	rsb	r3, fp, #0
 800a1b8:	e7e3      	b.n	800a182 <_dtoa_r+0x1f2>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	9208      	str	r2, [sp, #32]
 800a1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	dc39      	bgt.n	800a238 <_dtoa_r+0x2a8>
 800a1c4:	f04f 0a01 	mov.w	sl, #1
 800a1c8:	46d1      	mov	r9, sl
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a1d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6079      	str	r1, [r7, #4]
 800a1d6:	2004      	movs	r0, #4
 800a1d8:	f100 0c14 	add.w	ip, r0, #20
 800a1dc:	4594      	cmp	ip, r2
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	d92f      	bls.n	800a242 <_dtoa_r+0x2b2>
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a1e6:	f000 fff5 	bl	800b1d4 <_Balloc>
 800a1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ec:	9000      	str	r0, [sp, #0]
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d149      	bne.n	800a288 <_dtoa_r+0x2f8>
 800a1f4:	4b23      	ldr	r3, [pc, #140]	; (800a284 <_dtoa_r+0x2f4>)
 800a1f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1fa:	e6df      	b.n	8009fbc <_dtoa_r+0x2c>
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	e7dd      	b.n	800a1bc <_dtoa_r+0x22c>
 800a200:	2200      	movs	r2, #0
 800a202:	9208      	str	r2, [sp, #32]
 800a204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a206:	eb0b 0a02 	add.w	sl, fp, r2
 800a20a:	f10a 0901 	add.w	r9, sl, #1
 800a20e:	464a      	mov	r2, r9
 800a210:	2a01      	cmp	r2, #1
 800a212:	bfb8      	it	lt
 800a214:	2201      	movlt	r2, #1
 800a216:	e7db      	b.n	800a1d0 <_dtoa_r+0x240>
 800a218:	2201      	movs	r2, #1
 800a21a:	e7f2      	b.n	800a202 <_dtoa_r+0x272>
 800a21c:	2401      	movs	r4, #1
 800a21e:	2200      	movs	r2, #0
 800a220:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a224:	f04f 3aff 	mov.w	sl, #4294967295
 800a228:	2100      	movs	r1, #0
 800a22a:	46d1      	mov	r9, sl
 800a22c:	2212      	movs	r2, #18
 800a22e:	9109      	str	r1, [sp, #36]	; 0x24
 800a230:	e7ce      	b.n	800a1d0 <_dtoa_r+0x240>
 800a232:	2201      	movs	r2, #1
 800a234:	9208      	str	r2, [sp, #32]
 800a236:	e7f5      	b.n	800a224 <_dtoa_r+0x294>
 800a238:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a23c:	46d1      	mov	r9, sl
 800a23e:	4652      	mov	r2, sl
 800a240:	e7c6      	b.n	800a1d0 <_dtoa_r+0x240>
 800a242:	3101      	adds	r1, #1
 800a244:	6079      	str	r1, [r7, #4]
 800a246:	0040      	lsls	r0, r0, #1
 800a248:	e7c6      	b.n	800a1d8 <_dtoa_r+0x248>
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	636f4361 	.word	0x636f4361
 800a254:	3fd287a7 	.word	0x3fd287a7
 800a258:	8b60c8b3 	.word	0x8b60c8b3
 800a25c:	3fc68a28 	.word	0x3fc68a28
 800a260:	509f79fb 	.word	0x509f79fb
 800a264:	3fd34413 	.word	0x3fd34413
 800a268:	0800d526 	.word	0x0800d526
 800a26c:	0800d53d 	.word	0x0800d53d
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	0800d522 	.word	0x0800d522
 800a278:	0800d519 	.word	0x0800d519
 800a27c:	0800d7a2 	.word	0x0800d7a2
 800a280:	0800d6b8 	.word	0x0800d6b8
 800a284:	0800d59c 	.word	0x0800d59c
 800a288:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a28a:	9900      	ldr	r1, [sp, #0]
 800a28c:	6011      	str	r1, [r2, #0]
 800a28e:	f1b9 0f0e 	cmp.w	r9, #14
 800a292:	d872      	bhi.n	800a37a <_dtoa_r+0x3ea>
 800a294:	2c00      	cmp	r4, #0
 800a296:	d070      	beq.n	800a37a <_dtoa_r+0x3ea>
 800a298:	f1bb 0f00 	cmp.w	fp, #0
 800a29c:	f340 80a6 	ble.w	800a3ec <_dtoa_r+0x45c>
 800a2a0:	49ca      	ldr	r1, [pc, #808]	; (800a5cc <_dtoa_r+0x63c>)
 800a2a2:	f00b 020f 	and.w	r2, fp, #15
 800a2a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a2aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a2ae:	ed92 7b00 	vldr	d7, [r2]
 800a2b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a2b6:	f000 808d 	beq.w	800a3d4 <_dtoa_r+0x444>
 800a2ba:	4ac5      	ldr	r2, [pc, #788]	; (800a5d0 <_dtoa_r+0x640>)
 800a2bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a2c0:	ed92 6b08 	vldr	d6, [r2, #32]
 800a2c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a2c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a2cc:	f001 010f 	and.w	r1, r1, #15
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	48bf      	ldr	r0, [pc, #764]	; (800a5d0 <_dtoa_r+0x640>)
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	d17f      	bne.n	800a3d8 <_dtoa_r+0x448>
 800a2d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a2dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a2e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	f000 80b2 	beq.w	800a450 <_dtoa_r+0x4c0>
 800a2ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a2f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fc:	f140 80a8 	bpl.w	800a450 <_dtoa_r+0x4c0>
 800a300:	f1b9 0f00 	cmp.w	r9, #0
 800a304:	f000 80a4 	beq.w	800a450 <_dtoa_r+0x4c0>
 800a308:	f1ba 0f00 	cmp.w	sl, #0
 800a30c:	dd31      	ble.n	800a372 <_dtoa_r+0x3e2>
 800a30e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a312:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a316:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a31a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a31e:	3201      	adds	r2, #1
 800a320:	4650      	mov	r0, sl
 800a322:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a326:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a32a:	ee07 2a90 	vmov	s15, r2
 800a32e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a332:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a336:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a33a:	9c03      	ldr	r4, [sp, #12]
 800a33c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a340:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 8086 	bne.w	800a456 <_dtoa_r+0x4c6>
 800a34a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a34e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a352:	ec42 1b17 	vmov	d7, r1, r2
 800a356:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35e:	f300 8272 	bgt.w	800a846 <_dtoa_r+0x8b6>
 800a362:	eeb1 7b47 	vneg.f64	d7, d7
 800a366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	f100 8267 	bmi.w	800a840 <_dtoa_r+0x8b0>
 800a372:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a376:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a37a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	f2c0 8129 	blt.w	800a5d4 <_dtoa_r+0x644>
 800a382:	f1bb 0f0e 	cmp.w	fp, #14
 800a386:	f300 8125 	bgt.w	800a5d4 <_dtoa_r+0x644>
 800a38a:	4b90      	ldr	r3, [pc, #576]	; (800a5cc <_dtoa_r+0x63c>)
 800a38c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a390:	ed93 6b00 	vldr	d6, [r3]
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	f280 80c3 	bge.w	800a522 <_dtoa_r+0x592>
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	f300 80bf 	bgt.w	800a522 <_dtoa_r+0x592>
 800a3a4:	f040 824c 	bne.w	800a840 <_dtoa_r+0x8b0>
 800a3a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a3ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3bc:	464c      	mov	r4, r9
 800a3be:	464f      	mov	r7, r9
 800a3c0:	f280 8222 	bge.w	800a808 <_dtoa_r+0x878>
 800a3c4:	f8dd 8000 	ldr.w	r8, [sp]
 800a3c8:	2331      	movs	r3, #49	; 0x31
 800a3ca:	f808 3b01 	strb.w	r3, [r8], #1
 800a3ce:	f10b 0b01 	add.w	fp, fp, #1
 800a3d2:	e21e      	b.n	800a812 <_dtoa_r+0x882>
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	e77c      	b.n	800a2d2 <_dtoa_r+0x342>
 800a3d8:	07cc      	lsls	r4, r1, #31
 800a3da:	d504      	bpl.n	800a3e6 <_dtoa_r+0x456>
 800a3dc:	ed90 6b00 	vldr	d6, [r0]
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3e6:	1049      	asrs	r1, r1, #1
 800a3e8:	3008      	adds	r0, #8
 800a3ea:	e773      	b.n	800a2d4 <_dtoa_r+0x344>
 800a3ec:	d02e      	beq.n	800a44c <_dtoa_r+0x4bc>
 800a3ee:	f1cb 0100 	rsb	r1, fp, #0
 800a3f2:	4a76      	ldr	r2, [pc, #472]	; (800a5cc <_dtoa_r+0x63c>)
 800a3f4:	f001 000f 	and.w	r0, r1, #15
 800a3f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a3fc:	ed92 7b00 	vldr	d7, [r2]
 800a400:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a404:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a408:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a40c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a410:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a414:	486e      	ldr	r0, [pc, #440]	; (800a5d0 <_dtoa_r+0x640>)
 800a416:	1109      	asrs	r1, r1, #4
 800a418:	2400      	movs	r4, #0
 800a41a:	2202      	movs	r2, #2
 800a41c:	b939      	cbnz	r1, 800a42e <_dtoa_r+0x49e>
 800a41e:	2c00      	cmp	r4, #0
 800a420:	f43f af60 	beq.w	800a2e4 <_dtoa_r+0x354>
 800a424:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a42c:	e75a      	b.n	800a2e4 <_dtoa_r+0x354>
 800a42e:	07cf      	lsls	r7, r1, #31
 800a430:	d509      	bpl.n	800a446 <_dtoa_r+0x4b6>
 800a432:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a436:	ed90 7b00 	vldr	d7, [r0]
 800a43a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a43e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a442:	3201      	adds	r2, #1
 800a444:	2401      	movs	r4, #1
 800a446:	1049      	asrs	r1, r1, #1
 800a448:	3008      	adds	r0, #8
 800a44a:	e7e7      	b.n	800a41c <_dtoa_r+0x48c>
 800a44c:	2202      	movs	r2, #2
 800a44e:	e749      	b.n	800a2e4 <_dtoa_r+0x354>
 800a450:	465f      	mov	r7, fp
 800a452:	4648      	mov	r0, r9
 800a454:	e765      	b.n	800a322 <_dtoa_r+0x392>
 800a456:	ec42 1b17 	vmov	d7, r1, r2
 800a45a:	4a5c      	ldr	r2, [pc, #368]	; (800a5cc <_dtoa_r+0x63c>)
 800a45c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a460:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a464:	9a00      	ldr	r2, [sp, #0]
 800a466:	1814      	adds	r4, r2, r0
 800a468:	9a08      	ldr	r2, [sp, #32]
 800a46a:	b352      	cbz	r2, 800a4c2 <_dtoa_r+0x532>
 800a46c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a470:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a474:	f8dd 8000 	ldr.w	r8, [sp]
 800a478:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a47c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a480:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a484:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a488:	ee14 2a90 	vmov	r2, s9
 800a48c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a490:	3230      	adds	r2, #48	; 0x30
 800a492:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49e:	f808 2b01 	strb.w	r2, [r8], #1
 800a4a2:	d439      	bmi.n	800a518 <_dtoa_r+0x588>
 800a4a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a4a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b0:	d472      	bmi.n	800a598 <_dtoa_r+0x608>
 800a4b2:	45a0      	cmp	r8, r4
 800a4b4:	f43f af5d 	beq.w	800a372 <_dtoa_r+0x3e2>
 800a4b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a4bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a4c0:	e7e0      	b.n	800a484 <_dtoa_r+0x4f4>
 800a4c2:	f8dd 8000 	ldr.w	r8, [sp]
 800a4c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a4d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a4d4:	ee14 2a90 	vmov	r2, s9
 800a4d8:	3230      	adds	r2, #48	; 0x30
 800a4da:	f808 2b01 	strb.w	r2, [r8], #1
 800a4de:	45a0      	cmp	r8, r4
 800a4e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a4e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a4e8:	d118      	bne.n	800a51c <_dtoa_r+0x58c>
 800a4ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a4ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a4f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	dc4d      	bgt.n	800a598 <_dtoa_r+0x608>
 800a4fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a500:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	f57f af33 	bpl.w	800a372 <_dtoa_r+0x3e2>
 800a50c:	4688      	mov	r8, r1
 800a50e:	3901      	subs	r1, #1
 800a510:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a514:	2b30      	cmp	r3, #48	; 0x30
 800a516:	d0f9      	beq.n	800a50c <_dtoa_r+0x57c>
 800a518:	46bb      	mov	fp, r7
 800a51a:	e02a      	b.n	800a572 <_dtoa_r+0x5e2>
 800a51c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a520:	e7d6      	b.n	800a4d0 <_dtoa_r+0x540>
 800a522:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a526:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a52a:	f8dd 8000 	ldr.w	r8, [sp]
 800a52e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a532:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a536:	ee15 3a10 	vmov	r3, s10
 800a53a:	3330      	adds	r3, #48	; 0x30
 800a53c:	f808 3b01 	strb.w	r3, [r8], #1
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	eba8 0303 	sub.w	r3, r8, r3
 800a546:	4599      	cmp	r9, r3
 800a548:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a54c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a550:	d133      	bne.n	800a5ba <_dtoa_r+0x62a>
 800a552:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a556:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	dc1a      	bgt.n	800a596 <_dtoa_r+0x606>
 800a560:	eeb4 7b46 	vcmp.f64	d7, d6
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	d103      	bne.n	800a572 <_dtoa_r+0x5e2>
 800a56a:	ee15 3a10 	vmov	r3, s10
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d411      	bmi.n	800a596 <_dtoa_r+0x606>
 800a572:	4629      	mov	r1, r5
 800a574:	4630      	mov	r0, r6
 800a576:	f000 fe6d 	bl	800b254 <_Bfree>
 800a57a:	2300      	movs	r3, #0
 800a57c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a57e:	f888 3000 	strb.w	r3, [r8]
 800a582:	f10b 0301 	add.w	r3, fp, #1
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f43f ad4d 	beq.w	800a02a <_dtoa_r+0x9a>
 800a590:	f8c3 8000 	str.w	r8, [r3]
 800a594:	e549      	b.n	800a02a <_dtoa_r+0x9a>
 800a596:	465f      	mov	r7, fp
 800a598:	4643      	mov	r3, r8
 800a59a:	4698      	mov	r8, r3
 800a59c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5a0:	2a39      	cmp	r2, #57	; 0x39
 800a5a2:	d106      	bne.n	800a5b2 <_dtoa_r+0x622>
 800a5a4:	9a00      	ldr	r2, [sp, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d1f7      	bne.n	800a59a <_dtoa_r+0x60a>
 800a5aa:	9900      	ldr	r1, [sp, #0]
 800a5ac:	2230      	movs	r2, #48	; 0x30
 800a5ae:	3701      	adds	r7, #1
 800a5b0:	700a      	strb	r2, [r1, #0]
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	701a      	strb	r2, [r3, #0]
 800a5b8:	e7ae      	b.n	800a518 <_dtoa_r+0x588>
 800a5ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c6:	d1b2      	bne.n	800a52e <_dtoa_r+0x59e>
 800a5c8:	e7d3      	b.n	800a572 <_dtoa_r+0x5e2>
 800a5ca:	bf00      	nop
 800a5cc:	0800d6b8 	.word	0x0800d6b8
 800a5d0:	0800d690 	.word	0x0800d690
 800a5d4:	9908      	ldr	r1, [sp, #32]
 800a5d6:	2900      	cmp	r1, #0
 800a5d8:	f000 80d1 	beq.w	800a77e <_dtoa_r+0x7ee>
 800a5dc:	9907      	ldr	r1, [sp, #28]
 800a5de:	2901      	cmp	r1, #1
 800a5e0:	f300 80b4 	bgt.w	800a74c <_dtoa_r+0x7bc>
 800a5e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	f000 80ac 	beq.w	800a744 <_dtoa_r+0x7b4>
 800a5ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a5f4:	461c      	mov	r4, r3
 800a5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f8:	9b05      	ldr	r3, [sp, #20]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	9b06      	ldr	r3, [sp, #24]
 800a600:	2101      	movs	r1, #1
 800a602:	4413      	add	r3, r2
 800a604:	4630      	mov	r0, r6
 800a606:	9306      	str	r3, [sp, #24]
 800a608:	f000 ff2a 	bl	800b460 <__i2b>
 800a60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60e:	4607      	mov	r7, r0
 800a610:	f1b8 0f00 	cmp.w	r8, #0
 800a614:	dd0d      	ble.n	800a632 <_dtoa_r+0x6a2>
 800a616:	9a06      	ldr	r2, [sp, #24]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	dd0a      	ble.n	800a632 <_dtoa_r+0x6a2>
 800a61c:	4542      	cmp	r2, r8
 800a61e:	9905      	ldr	r1, [sp, #20]
 800a620:	bfa8      	it	ge
 800a622:	4642      	movge	r2, r8
 800a624:	1a89      	subs	r1, r1, r2
 800a626:	9105      	str	r1, [sp, #20]
 800a628:	9906      	ldr	r1, [sp, #24]
 800a62a:	eba8 0802 	sub.w	r8, r8, r2
 800a62e:	1a8a      	subs	r2, r1, r2
 800a630:	9206      	str	r2, [sp, #24]
 800a632:	b303      	cbz	r3, 800a676 <_dtoa_r+0x6e6>
 800a634:	9a08      	ldr	r2, [sp, #32]
 800a636:	2a00      	cmp	r2, #0
 800a638:	f000 80a6 	beq.w	800a788 <_dtoa_r+0x7f8>
 800a63c:	2c00      	cmp	r4, #0
 800a63e:	dd13      	ble.n	800a668 <_dtoa_r+0x6d8>
 800a640:	4639      	mov	r1, r7
 800a642:	4622      	mov	r2, r4
 800a644:	4630      	mov	r0, r6
 800a646:	930c      	str	r3, [sp, #48]	; 0x30
 800a648:	f000 ffc6 	bl	800b5d8 <__pow5mult>
 800a64c:	462a      	mov	r2, r5
 800a64e:	4601      	mov	r1, r0
 800a650:	4607      	mov	r7, r0
 800a652:	4630      	mov	r0, r6
 800a654:	f000 ff1a 	bl	800b48c <__multiply>
 800a658:	4629      	mov	r1, r5
 800a65a:	900a      	str	r0, [sp, #40]	; 0x28
 800a65c:	4630      	mov	r0, r6
 800a65e:	f000 fdf9 	bl	800b254 <_Bfree>
 800a662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a666:	4615      	mov	r5, r2
 800a668:	1b1a      	subs	r2, r3, r4
 800a66a:	d004      	beq.n	800a676 <_dtoa_r+0x6e6>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	f000 ffb2 	bl	800b5d8 <__pow5mult>
 800a674:	4605      	mov	r5, r0
 800a676:	2101      	movs	r1, #1
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 fef1 	bl	800b460 <__i2b>
 800a67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a680:	2b00      	cmp	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	f340 8082 	ble.w	800a78c <_dtoa_r+0x7fc>
 800a688:	461a      	mov	r2, r3
 800a68a:	4601      	mov	r1, r0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 ffa3 	bl	800b5d8 <__pow5mult>
 800a692:	9b07      	ldr	r3, [sp, #28]
 800a694:	2b01      	cmp	r3, #1
 800a696:	4604      	mov	r4, r0
 800a698:	dd7b      	ble.n	800a792 <_dtoa_r+0x802>
 800a69a:	2300      	movs	r3, #0
 800a69c:	930a      	str	r3, [sp, #40]	; 0x28
 800a69e:	6922      	ldr	r2, [r4, #16]
 800a6a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a6a4:	6910      	ldr	r0, [r2, #16]
 800a6a6:	f000 fe8b 	bl	800b3c0 <__hi0bits>
 800a6aa:	f1c0 0020 	rsb	r0, r0, #32
 800a6ae:	9b06      	ldr	r3, [sp, #24]
 800a6b0:	4418      	add	r0, r3
 800a6b2:	f010 001f 	ands.w	r0, r0, #31
 800a6b6:	f000 808d 	beq.w	800a7d4 <_dtoa_r+0x844>
 800a6ba:	f1c0 0220 	rsb	r2, r0, #32
 800a6be:	2a04      	cmp	r2, #4
 800a6c0:	f340 8086 	ble.w	800a7d0 <_dtoa_r+0x840>
 800a6c4:	f1c0 001c 	rsb	r0, r0, #28
 800a6c8:	9b05      	ldr	r3, [sp, #20]
 800a6ca:	4403      	add	r3, r0
 800a6cc:	9305      	str	r3, [sp, #20]
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	4403      	add	r3, r0
 800a6d2:	4480      	add	r8, r0
 800a6d4:	9306      	str	r3, [sp, #24]
 800a6d6:	9b05      	ldr	r3, [sp, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dd05      	ble.n	800a6e8 <_dtoa_r+0x758>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 ffd3 	bl	800b68c <__lshift>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	9b06      	ldr	r3, [sp, #24]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dd05      	ble.n	800a6fa <_dtoa_r+0x76a>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f000 ffca 	bl	800b68c <__lshift>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06b      	beq.n	800a7d8 <_dtoa_r+0x848>
 800a700:	4621      	mov	r1, r4
 800a702:	4628      	mov	r0, r5
 800a704:	f001 f82e 	bl	800b764 <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	da65      	bge.n	800a7d8 <_dtoa_r+0x848>
 800a70c:	2300      	movs	r3, #0
 800a70e:	4629      	mov	r1, r5
 800a710:	220a      	movs	r2, #10
 800a712:	4630      	mov	r0, r6
 800a714:	f000 fdc0 	bl	800b298 <__multadd>
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a71e:	4605      	mov	r5, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8192 	beq.w	800aa4a <_dtoa_r+0xaba>
 800a726:	4639      	mov	r1, r7
 800a728:	2300      	movs	r3, #0
 800a72a:	220a      	movs	r2, #10
 800a72c:	4630      	mov	r0, r6
 800a72e:	f000 fdb3 	bl	800b298 <__multadd>
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	4607      	mov	r7, r0
 800a738:	f300 808e 	bgt.w	800a858 <_dtoa_r+0x8c8>
 800a73c:	9b07      	ldr	r3, [sp, #28]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	dc51      	bgt.n	800a7e6 <_dtoa_r+0x856>
 800a742:	e089      	b.n	800a858 <_dtoa_r+0x8c8>
 800a744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a746:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a74a:	e751      	b.n	800a5f0 <_dtoa_r+0x660>
 800a74c:	f109 34ff 	add.w	r4, r9, #4294967295
 800a750:	42a3      	cmp	r3, r4
 800a752:	bfbf      	itttt	lt
 800a754:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a756:	1ae3      	sublt	r3, r4, r3
 800a758:	18d2      	addlt	r2, r2, r3
 800a75a:	4613      	movlt	r3, r2
 800a75c:	bfb7      	itett	lt
 800a75e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a760:	1b1c      	subge	r4, r3, r4
 800a762:	4623      	movlt	r3, r4
 800a764:	2400      	movlt	r4, #0
 800a766:	f1b9 0f00 	cmp.w	r9, #0
 800a76a:	bfb5      	itete	lt
 800a76c:	9a05      	ldrlt	r2, [sp, #20]
 800a76e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a772:	eba2 0809 	sublt.w	r8, r2, r9
 800a776:	464a      	movge	r2, r9
 800a778:	bfb8      	it	lt
 800a77a:	2200      	movlt	r2, #0
 800a77c:	e73b      	b.n	800a5f6 <_dtoa_r+0x666>
 800a77e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a782:	9f08      	ldr	r7, [sp, #32]
 800a784:	461c      	mov	r4, r3
 800a786:	e743      	b.n	800a610 <_dtoa_r+0x680>
 800a788:	461a      	mov	r2, r3
 800a78a:	e76f      	b.n	800a66c <_dtoa_r+0x6dc>
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	dc18      	bgt.n	800a7c4 <_dtoa_r+0x834>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	b9b3      	cbnz	r3, 800a7c4 <_dtoa_r+0x834>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a79c:	b9a2      	cbnz	r2, 800a7c8 <_dtoa_r+0x838>
 800a79e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a7a2:	0d12      	lsrs	r2, r2, #20
 800a7a4:	0512      	lsls	r2, r2, #20
 800a7a6:	b18a      	cbz	r2, 800a7cc <_dtoa_r+0x83c>
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	9b06      	ldr	r3, [sp, #24]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f47f af6f 	bne.w	800a69e <_dtoa_r+0x70e>
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	e774      	b.n	800a6ae <_dtoa_r+0x71e>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e7f6      	b.n	800a7b6 <_dtoa_r+0x826>
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	e7f4      	b.n	800a7b6 <_dtoa_r+0x826>
 800a7cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a7ce:	e7f3      	b.n	800a7b8 <_dtoa_r+0x828>
 800a7d0:	d081      	beq.n	800a6d6 <_dtoa_r+0x746>
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	301c      	adds	r0, #28
 800a7d6:	e777      	b.n	800a6c8 <_dtoa_r+0x738>
 800a7d8:	f1b9 0f00 	cmp.w	r9, #0
 800a7dc:	dc37      	bgt.n	800a84e <_dtoa_r+0x8be>
 800a7de:	9b07      	ldr	r3, [sp, #28]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	dd34      	ble.n	800a84e <_dtoa_r+0x8be>
 800a7e4:	46ca      	mov	sl, r9
 800a7e6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ea:	d10d      	bne.n	800a808 <_dtoa_r+0x878>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4653      	mov	r3, sl
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 fd50 	bl	800b298 <__multadd>
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 ffb1 	bl	800b764 <__mcmp>
 800a802:	2800      	cmp	r0, #0
 800a804:	f73f adde 	bgt.w	800a3c4 <_dtoa_r+0x434>
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	f8dd 8000 	ldr.w	r8, [sp]
 800a80e:	ea6f 0b03 	mvn.w	fp, r3
 800a812:	f04f 0900 	mov.w	r9, #0
 800a816:	4621      	mov	r1, r4
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 fd1b 	bl	800b254 <_Bfree>
 800a81e:	2f00      	cmp	r7, #0
 800a820:	f43f aea7 	beq.w	800a572 <_dtoa_r+0x5e2>
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d005      	beq.n	800a836 <_dtoa_r+0x8a6>
 800a82a:	45b9      	cmp	r9, r7
 800a82c:	d003      	beq.n	800a836 <_dtoa_r+0x8a6>
 800a82e:	4649      	mov	r1, r9
 800a830:	4630      	mov	r0, r6
 800a832:	f000 fd0f 	bl	800b254 <_Bfree>
 800a836:	4639      	mov	r1, r7
 800a838:	4630      	mov	r0, r6
 800a83a:	f000 fd0b 	bl	800b254 <_Bfree>
 800a83e:	e698      	b.n	800a572 <_dtoa_r+0x5e2>
 800a840:	2400      	movs	r4, #0
 800a842:	4627      	mov	r7, r4
 800a844:	e7e0      	b.n	800a808 <_dtoa_r+0x878>
 800a846:	46bb      	mov	fp, r7
 800a848:	4604      	mov	r4, r0
 800a84a:	4607      	mov	r7, r0
 800a84c:	e5ba      	b.n	800a3c4 <_dtoa_r+0x434>
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	46ca      	mov	sl, r9
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 8100 	beq.w	800aa58 <_dtoa_r+0xac8>
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	dd05      	ble.n	800a86a <_dtoa_r+0x8da>
 800a85e:	4639      	mov	r1, r7
 800a860:	4642      	mov	r2, r8
 800a862:	4630      	mov	r0, r6
 800a864:	f000 ff12 	bl	800b68c <__lshift>
 800a868:	4607      	mov	r7, r0
 800a86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d05d      	beq.n	800a92c <_dtoa_r+0x99c>
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4630      	mov	r0, r6
 800a874:	f000 fcae 	bl	800b1d4 <_Balloc>
 800a878:	4680      	mov	r8, r0
 800a87a:	b928      	cbnz	r0, 800a888 <_dtoa_r+0x8f8>
 800a87c:	4b82      	ldr	r3, [pc, #520]	; (800aa88 <_dtoa_r+0xaf8>)
 800a87e:	4602      	mov	r2, r0
 800a880:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a884:	f7ff bb9a 	b.w	8009fbc <_dtoa_r+0x2c>
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	3202      	adds	r2, #2
 800a88c:	0092      	lsls	r2, r2, #2
 800a88e:	f107 010c 	add.w	r1, r7, #12
 800a892:	300c      	adds	r0, #12
 800a894:	f7fd fd5c 	bl	8008350 <memcpy>
 800a898:	2201      	movs	r2, #1
 800a89a:	4641      	mov	r1, r8
 800a89c:	4630      	mov	r0, r6
 800a89e:	f000 fef5 	bl	800b68c <__lshift>
 800a8a2:	9b00      	ldr	r3, [sp, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	4453      	add	r3, sl
 800a8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	46b9      	mov	r9, r7
 800a8b6:	9308      	str	r3, [sp, #32]
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	9b05      	ldr	r3, [sp, #20]
 800a8bc:	4621      	mov	r1, r4
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	9302      	str	r3, [sp, #8]
 800a8c4:	f7ff fad8 	bl	8009e78 <quorem>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	3330      	adds	r3, #48	; 0x30
 800a8cc:	9006      	str	r0, [sp, #24]
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d4:	f000 ff46 	bl	800b764 <__mcmp>
 800a8d8:	463a      	mov	r2, r7
 800a8da:	4682      	mov	sl, r0
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 ff5c 	bl	800b79c <__mdiff>
 800a8e4:	68c2      	ldr	r2, [r0, #12]
 800a8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	bb0a      	cbnz	r2, 800a930 <_dtoa_r+0x9a0>
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f000 ff38 	bl	800b764 <__mcmp>
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	920e      	str	r2, [sp, #56]	; 0x38
 800a8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a900:	f000 fca8 	bl	800b254 <_Bfree>
 800a904:	9b07      	ldr	r3, [sp, #28]
 800a906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a908:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a90c:	ea43 0102 	orr.w	r1, r3, r2
 800a910:	9b08      	ldr	r3, [sp, #32]
 800a912:	430b      	orrs	r3, r1
 800a914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a916:	d10d      	bne.n	800a934 <_dtoa_r+0x9a4>
 800a918:	2b39      	cmp	r3, #57	; 0x39
 800a91a:	d029      	beq.n	800a970 <_dtoa_r+0x9e0>
 800a91c:	f1ba 0f00 	cmp.w	sl, #0
 800a920:	dd01      	ble.n	800a926 <_dtoa_r+0x996>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	3331      	adds	r3, #49	; 0x31
 800a926:	9a02      	ldr	r2, [sp, #8]
 800a928:	7013      	strb	r3, [r2, #0]
 800a92a:	e774      	b.n	800a816 <_dtoa_r+0x886>
 800a92c:	4638      	mov	r0, r7
 800a92e:	e7b8      	b.n	800a8a2 <_dtoa_r+0x912>
 800a930:	2201      	movs	r2, #1
 800a932:	e7e1      	b.n	800a8f8 <_dtoa_r+0x968>
 800a934:	f1ba 0f00 	cmp.w	sl, #0
 800a938:	db06      	blt.n	800a948 <_dtoa_r+0x9b8>
 800a93a:	9907      	ldr	r1, [sp, #28]
 800a93c:	ea41 0a0a 	orr.w	sl, r1, sl
 800a940:	9908      	ldr	r1, [sp, #32]
 800a942:	ea5a 0101 	orrs.w	r1, sl, r1
 800a946:	d120      	bne.n	800a98a <_dtoa_r+0x9fa>
 800a948:	2a00      	cmp	r2, #0
 800a94a:	ddec      	ble.n	800a926 <_dtoa_r+0x996>
 800a94c:	4629      	mov	r1, r5
 800a94e:	2201      	movs	r2, #1
 800a950:	4630      	mov	r0, r6
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	f000 fe9a 	bl	800b68c <__lshift>
 800a958:	4621      	mov	r1, r4
 800a95a:	4605      	mov	r5, r0
 800a95c:	f000 ff02 	bl	800b764 <__mcmp>
 800a960:	2800      	cmp	r0, #0
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	dc02      	bgt.n	800a96c <_dtoa_r+0x9dc>
 800a966:	d1de      	bne.n	800a926 <_dtoa_r+0x996>
 800a968:	07da      	lsls	r2, r3, #31
 800a96a:	d5dc      	bpl.n	800a926 <_dtoa_r+0x996>
 800a96c:	2b39      	cmp	r3, #57	; 0x39
 800a96e:	d1d8      	bne.n	800a922 <_dtoa_r+0x992>
 800a970:	9a02      	ldr	r2, [sp, #8]
 800a972:	2339      	movs	r3, #57	; 0x39
 800a974:	7013      	strb	r3, [r2, #0]
 800a976:	4643      	mov	r3, r8
 800a978:	4698      	mov	r8, r3
 800a97a:	3b01      	subs	r3, #1
 800a97c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a980:	2a39      	cmp	r2, #57	; 0x39
 800a982:	d051      	beq.n	800aa28 <_dtoa_r+0xa98>
 800a984:	3201      	adds	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e745      	b.n	800a816 <_dtoa_r+0x886>
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	dd03      	ble.n	800a996 <_dtoa_r+0xa06>
 800a98e:	2b39      	cmp	r3, #57	; 0x39
 800a990:	d0ee      	beq.n	800a970 <_dtoa_r+0x9e0>
 800a992:	3301      	adds	r3, #1
 800a994:	e7c7      	b.n	800a926 <_dtoa_r+0x996>
 800a996:	9a05      	ldr	r2, [sp, #20]
 800a998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a99a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a99e:	428a      	cmp	r2, r1
 800a9a0:	d02b      	beq.n	800a9fa <_dtoa_r+0xa6a>
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	220a      	movs	r2, #10
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 fc75 	bl	800b298 <__multadd>
 800a9ae:	45b9      	cmp	r9, r7
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	f04f 020a 	mov.w	r2, #10
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	4630      	mov	r0, r6
 800a9be:	d107      	bne.n	800a9d0 <_dtoa_r+0xa40>
 800a9c0:	f000 fc6a 	bl	800b298 <__multadd>
 800a9c4:	4681      	mov	r9, r0
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	e774      	b.n	800a8ba <_dtoa_r+0x92a>
 800a9d0:	f000 fc62 	bl	800b298 <__multadd>
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4681      	mov	r9, r0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	220a      	movs	r2, #10
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f000 fc5b 	bl	800b298 <__multadd>
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	e7f0      	b.n	800a9c8 <_dtoa_r+0xa38>
 800a9e6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ea:	9a00      	ldr	r2, [sp, #0]
 800a9ec:	bfcc      	ite	gt
 800a9ee:	46d0      	movgt	r8, sl
 800a9f0:	f04f 0801 	movle.w	r8, #1
 800a9f4:	4490      	add	r8, r2
 800a9f6:	f04f 0900 	mov.w	r9, #0
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4630      	mov	r0, r6
 800aa00:	9302      	str	r3, [sp, #8]
 800aa02:	f000 fe43 	bl	800b68c <__lshift>
 800aa06:	4621      	mov	r1, r4
 800aa08:	4605      	mov	r5, r0
 800aa0a:	f000 feab 	bl	800b764 <__mcmp>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	dcb1      	bgt.n	800a976 <_dtoa_r+0x9e6>
 800aa12:	d102      	bne.n	800aa1a <_dtoa_r+0xa8a>
 800aa14:	9b02      	ldr	r3, [sp, #8]
 800aa16:	07db      	lsls	r3, r3, #31
 800aa18:	d4ad      	bmi.n	800a976 <_dtoa_r+0x9e6>
 800aa1a:	4643      	mov	r3, r8
 800aa1c:	4698      	mov	r8, r3
 800aa1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa22:	2a30      	cmp	r2, #48	; 0x30
 800aa24:	d0fa      	beq.n	800aa1c <_dtoa_r+0xa8c>
 800aa26:	e6f6      	b.n	800a816 <_dtoa_r+0x886>
 800aa28:	9a00      	ldr	r2, [sp, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d1a4      	bne.n	800a978 <_dtoa_r+0x9e8>
 800aa2e:	f10b 0b01 	add.w	fp, fp, #1
 800aa32:	2331      	movs	r3, #49	; 0x31
 800aa34:	e778      	b.n	800a928 <_dtoa_r+0x998>
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <_dtoa_r+0xafc>)
 800aa38:	f7ff bb12 	b.w	800a060 <_dtoa_r+0xd0>
 800aa3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f47f aaee 	bne.w	800a020 <_dtoa_r+0x90>
 800aa44:	4b12      	ldr	r3, [pc, #72]	; (800aa90 <_dtoa_r+0xb00>)
 800aa46:	f7ff bb0b 	b.w	800a060 <_dtoa_r+0xd0>
 800aa4a:	f1ba 0f00 	cmp.w	sl, #0
 800aa4e:	dc03      	bgt.n	800aa58 <_dtoa_r+0xac8>
 800aa50:	9b07      	ldr	r3, [sp, #28]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	f73f aec7 	bgt.w	800a7e6 <_dtoa_r+0x856>
 800aa58:	f8dd 8000 	ldr.w	r8, [sp]
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7ff fa0a 	bl	8009e78 <quorem>
 800aa64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa68:	f808 3b01 	strb.w	r3, [r8], #1
 800aa6c:	9a00      	ldr	r2, [sp, #0]
 800aa6e:	eba8 0202 	sub.w	r2, r8, r2
 800aa72:	4592      	cmp	sl, r2
 800aa74:	ddb7      	ble.n	800a9e6 <_dtoa_r+0xa56>
 800aa76:	4629      	mov	r1, r5
 800aa78:	2300      	movs	r3, #0
 800aa7a:	220a      	movs	r2, #10
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f000 fc0b 	bl	800b298 <__multadd>
 800aa82:	4605      	mov	r5, r0
 800aa84:	e7ea      	b.n	800aa5c <_dtoa_r+0xacc>
 800aa86:	bf00      	nop
 800aa88:	0800d59c 	.word	0x0800d59c
 800aa8c:	0800d7a1 	.word	0x0800d7a1
 800aa90:	0800d519 	.word	0x0800d519

0800aa94 <rshift>:
 800aa94:	6903      	ldr	r3, [r0, #16]
 800aa96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaa2:	f100 0414 	add.w	r4, r0, #20
 800aaa6:	dd45      	ble.n	800ab34 <rshift+0xa0>
 800aaa8:	f011 011f 	ands.w	r1, r1, #31
 800aaac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aab4:	d10c      	bne.n	800aad0 <rshift+0x3c>
 800aab6:	f100 0710 	add.w	r7, r0, #16
 800aaba:	4629      	mov	r1, r5
 800aabc:	42b1      	cmp	r1, r6
 800aabe:	d334      	bcc.n	800ab2a <rshift+0x96>
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	1eea      	subs	r2, r5, #3
 800aac6:	4296      	cmp	r6, r2
 800aac8:	bf38      	it	cc
 800aaca:	2300      	movcc	r3, #0
 800aacc:	4423      	add	r3, r4
 800aace:	e015      	b.n	800aafc <rshift+0x68>
 800aad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aad4:	f1c1 0820 	rsb	r8, r1, #32
 800aad8:	40cf      	lsrs	r7, r1
 800aada:	f105 0e04 	add.w	lr, r5, #4
 800aade:	46a1      	mov	r9, r4
 800aae0:	4576      	cmp	r6, lr
 800aae2:	46f4      	mov	ip, lr
 800aae4:	d815      	bhi.n	800ab12 <rshift+0x7e>
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	009a      	lsls	r2, r3, #2
 800aaea:	3a04      	subs	r2, #4
 800aaec:	3501      	adds	r5, #1
 800aaee:	42ae      	cmp	r6, r5
 800aaf0:	bf38      	it	cc
 800aaf2:	2200      	movcc	r2, #0
 800aaf4:	18a3      	adds	r3, r4, r2
 800aaf6:	50a7      	str	r7, [r4, r2]
 800aaf8:	b107      	cbz	r7, 800aafc <rshift+0x68>
 800aafa:	3304      	adds	r3, #4
 800aafc:	1b1a      	subs	r2, r3, r4
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab04:	bf08      	it	eq
 800ab06:	2300      	moveq	r3, #0
 800ab08:	6102      	str	r2, [r0, #16]
 800ab0a:	bf08      	it	eq
 800ab0c:	6143      	streq	r3, [r0, #20]
 800ab0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab12:	f8dc c000 	ldr.w	ip, [ip]
 800ab16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ab1e:	f849 7b04 	str.w	r7, [r9], #4
 800ab22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab26:	40cf      	lsrs	r7, r1
 800ab28:	e7da      	b.n	800aae0 <rshift+0x4c>
 800ab2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab32:	e7c3      	b.n	800aabc <rshift+0x28>
 800ab34:	4623      	mov	r3, r4
 800ab36:	e7e1      	b.n	800aafc <rshift+0x68>

0800ab38 <__hexdig_fun>:
 800ab38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d802      	bhi.n	800ab46 <__hexdig_fun+0xe>
 800ab40:	3820      	subs	r0, #32
 800ab42:	b2c0      	uxtb	r0, r0
 800ab44:	4770      	bx	lr
 800ab46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	d801      	bhi.n	800ab52 <__hexdig_fun+0x1a>
 800ab4e:	3847      	subs	r0, #71	; 0x47
 800ab50:	e7f7      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d801      	bhi.n	800ab5e <__hexdig_fun+0x26>
 800ab5a:	3827      	subs	r0, #39	; 0x27
 800ab5c:	e7f1      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	4770      	bx	lr
	...

0800ab64 <__gethex>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	ed2d 8b02 	vpush	{d8}
 800ab6c:	b089      	sub	sp, #36	; 0x24
 800ab6e:	ee08 0a10 	vmov	s16, r0
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	4bbc      	ldr	r3, [pc, #752]	; (800ae68 <__gethex+0x304>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	468b      	mov	fp, r1
 800ab7e:	4690      	mov	r8, r2
 800ab80:	f7f5 fb5e 	bl	8000240 <strlen>
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	f8db 2000 	ldr.w	r2, [fp]
 800ab8a:	4403      	add	r3, r0
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	1c93      	adds	r3, r2, #2
 800ab96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab9e:	32fe      	adds	r2, #254	; 0xfe
 800aba0:	18d1      	adds	r1, r2, r3
 800aba2:	461f      	mov	r7, r3
 800aba4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aba8:	9100      	str	r1, [sp, #0]
 800abaa:	2830      	cmp	r0, #48	; 0x30
 800abac:	d0f8      	beq.n	800aba0 <__gethex+0x3c>
 800abae:	f7ff ffc3 	bl	800ab38 <__hexdig_fun>
 800abb2:	4604      	mov	r4, r0
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d13a      	bne.n	800ac2e <__gethex+0xca>
 800abb8:	9901      	ldr	r1, [sp, #4]
 800abba:	4652      	mov	r2, sl
 800abbc:	4638      	mov	r0, r7
 800abbe:	f001 fd5d 	bl	800c67c <strncmp>
 800abc2:	4605      	mov	r5, r0
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d168      	bne.n	800ac9a <__gethex+0x136>
 800abc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800abcc:	eb07 060a 	add.w	r6, r7, sl
 800abd0:	f7ff ffb2 	bl	800ab38 <__hexdig_fun>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d062      	beq.n	800ac9e <__gethex+0x13a>
 800abd8:	4633      	mov	r3, r6
 800abda:	7818      	ldrb	r0, [r3, #0]
 800abdc:	2830      	cmp	r0, #48	; 0x30
 800abde:	461f      	mov	r7, r3
 800abe0:	f103 0301 	add.w	r3, r3, #1
 800abe4:	d0f9      	beq.n	800abda <__gethex+0x76>
 800abe6:	f7ff ffa7 	bl	800ab38 <__hexdig_fun>
 800abea:	2301      	movs	r3, #1
 800abec:	fab0 f480 	clz	r4, r0
 800abf0:	0964      	lsrs	r4, r4, #5
 800abf2:	4635      	mov	r5, r6
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	463a      	mov	r2, r7
 800abf8:	4616      	mov	r6, r2
 800abfa:	3201      	adds	r2, #1
 800abfc:	7830      	ldrb	r0, [r6, #0]
 800abfe:	f7ff ff9b 	bl	800ab38 <__hexdig_fun>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1f8      	bne.n	800abf8 <__gethex+0x94>
 800ac06:	9901      	ldr	r1, [sp, #4]
 800ac08:	4652      	mov	r2, sl
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f001 fd36 	bl	800c67c <strncmp>
 800ac10:	b980      	cbnz	r0, 800ac34 <__gethex+0xd0>
 800ac12:	b94d      	cbnz	r5, 800ac28 <__gethex+0xc4>
 800ac14:	eb06 050a 	add.w	r5, r6, sl
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4616      	mov	r6, r2
 800ac1c:	3201      	adds	r2, #1
 800ac1e:	7830      	ldrb	r0, [r6, #0]
 800ac20:	f7ff ff8a 	bl	800ab38 <__hexdig_fun>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d1f8      	bne.n	800ac1a <__gethex+0xb6>
 800ac28:	1bad      	subs	r5, r5, r6
 800ac2a:	00ad      	lsls	r5, r5, #2
 800ac2c:	e004      	b.n	800ac38 <__gethex+0xd4>
 800ac2e:	2400      	movs	r4, #0
 800ac30:	4625      	mov	r5, r4
 800ac32:	e7e0      	b.n	800abf6 <__gethex+0x92>
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	d1f7      	bne.n	800ac28 <__gethex+0xc4>
 800ac38:	7833      	ldrb	r3, [r6, #0]
 800ac3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac3e:	2b50      	cmp	r3, #80	; 0x50
 800ac40:	d13b      	bne.n	800acba <__gethex+0x156>
 800ac42:	7873      	ldrb	r3, [r6, #1]
 800ac44:	2b2b      	cmp	r3, #43	; 0x2b
 800ac46:	d02c      	beq.n	800aca2 <__gethex+0x13e>
 800ac48:	2b2d      	cmp	r3, #45	; 0x2d
 800ac4a:	d02e      	beq.n	800acaa <__gethex+0x146>
 800ac4c:	1c71      	adds	r1, r6, #1
 800ac4e:	f04f 0900 	mov.w	r9, #0
 800ac52:	7808      	ldrb	r0, [r1, #0]
 800ac54:	f7ff ff70 	bl	800ab38 <__hexdig_fun>
 800ac58:	1e43      	subs	r3, r0, #1
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b18      	cmp	r3, #24
 800ac5e:	d82c      	bhi.n	800acba <__gethex+0x156>
 800ac60:	f1a0 0210 	sub.w	r2, r0, #16
 800ac64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac68:	f7ff ff66 	bl	800ab38 <__hexdig_fun>
 800ac6c:	1e43      	subs	r3, r0, #1
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b18      	cmp	r3, #24
 800ac72:	d91d      	bls.n	800acb0 <__gethex+0x14c>
 800ac74:	f1b9 0f00 	cmp.w	r9, #0
 800ac78:	d000      	beq.n	800ac7c <__gethex+0x118>
 800ac7a:	4252      	negs	r2, r2
 800ac7c:	4415      	add	r5, r2
 800ac7e:	f8cb 1000 	str.w	r1, [fp]
 800ac82:	b1e4      	cbz	r4, 800acbe <__gethex+0x15a>
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bf14      	ite	ne
 800ac8a:	2700      	movne	r7, #0
 800ac8c:	2706      	moveq	r7, #6
 800ac8e:	4638      	mov	r0, r7
 800ac90:	b009      	add	sp, #36	; 0x24
 800ac92:	ecbd 8b02 	vpop	{d8}
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	463e      	mov	r6, r7
 800ac9c:	4625      	mov	r5, r4
 800ac9e:	2401      	movs	r4, #1
 800aca0:	e7ca      	b.n	800ac38 <__gethex+0xd4>
 800aca2:	f04f 0900 	mov.w	r9, #0
 800aca6:	1cb1      	adds	r1, r6, #2
 800aca8:	e7d3      	b.n	800ac52 <__gethex+0xee>
 800acaa:	f04f 0901 	mov.w	r9, #1
 800acae:	e7fa      	b.n	800aca6 <__gethex+0x142>
 800acb0:	230a      	movs	r3, #10
 800acb2:	fb03 0202 	mla	r2, r3, r2, r0
 800acb6:	3a10      	subs	r2, #16
 800acb8:	e7d4      	b.n	800ac64 <__gethex+0x100>
 800acba:	4631      	mov	r1, r6
 800acbc:	e7df      	b.n	800ac7e <__gethex+0x11a>
 800acbe:	1bf3      	subs	r3, r6, r7
 800acc0:	3b01      	subs	r3, #1
 800acc2:	4621      	mov	r1, r4
 800acc4:	2b07      	cmp	r3, #7
 800acc6:	dc0b      	bgt.n	800ace0 <__gethex+0x17c>
 800acc8:	ee18 0a10 	vmov	r0, s16
 800accc:	f000 fa82 	bl	800b1d4 <_Balloc>
 800acd0:	4604      	mov	r4, r0
 800acd2:	b940      	cbnz	r0, 800ace6 <__gethex+0x182>
 800acd4:	4b65      	ldr	r3, [pc, #404]	; (800ae6c <__gethex+0x308>)
 800acd6:	4602      	mov	r2, r0
 800acd8:	21de      	movs	r1, #222	; 0xde
 800acda:	4865      	ldr	r0, [pc, #404]	; (800ae70 <__gethex+0x30c>)
 800acdc:	f001 fda6 	bl	800c82c <__assert_func>
 800ace0:	3101      	adds	r1, #1
 800ace2:	105b      	asrs	r3, r3, #1
 800ace4:	e7ee      	b.n	800acc4 <__gethex+0x160>
 800ace6:	f100 0914 	add.w	r9, r0, #20
 800acea:	f04f 0b00 	mov.w	fp, #0
 800acee:	f1ca 0301 	rsb	r3, sl, #1
 800acf2:	f8cd 9008 	str.w	r9, [sp, #8]
 800acf6:	f8cd b000 	str.w	fp, [sp]
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	42b7      	cmp	r7, r6
 800acfe:	d340      	bcc.n	800ad82 <__gethex+0x21e>
 800ad00:	9802      	ldr	r0, [sp, #8]
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	f840 3b04 	str.w	r3, [r0], #4
 800ad08:	eba0 0009 	sub.w	r0, r0, r9
 800ad0c:	1080      	asrs	r0, r0, #2
 800ad0e:	0146      	lsls	r6, r0, #5
 800ad10:	6120      	str	r0, [r4, #16]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fb54 	bl	800b3c0 <__hi0bits>
 800ad18:	1a30      	subs	r0, r6, r0
 800ad1a:	f8d8 6000 	ldr.w	r6, [r8]
 800ad1e:	42b0      	cmp	r0, r6
 800ad20:	dd63      	ble.n	800adea <__gethex+0x286>
 800ad22:	1b87      	subs	r7, r0, r6
 800ad24:	4639      	mov	r1, r7
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 feef 	bl	800bb0a <__any_on>
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	b1a8      	cbz	r0, 800ad5c <__gethex+0x1f8>
 800ad30:	1e7b      	subs	r3, r7, #1
 800ad32:	1159      	asrs	r1, r3, #5
 800ad34:	f003 021f 	and.w	r2, r3, #31
 800ad38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad3c:	f04f 0a01 	mov.w	sl, #1
 800ad40:	fa0a f202 	lsl.w	r2, sl, r2
 800ad44:	420a      	tst	r2, r1
 800ad46:	d009      	beq.n	800ad5c <__gethex+0x1f8>
 800ad48:	4553      	cmp	r3, sl
 800ad4a:	dd05      	ble.n	800ad58 <__gethex+0x1f4>
 800ad4c:	1eb9      	subs	r1, r7, #2
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fedb 	bl	800bb0a <__any_on>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d145      	bne.n	800ade4 <__gethex+0x280>
 800ad58:	f04f 0a02 	mov.w	sl, #2
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff fe98 	bl	800aa94 <rshift>
 800ad64:	443d      	add	r5, r7
 800ad66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad6a:	42ab      	cmp	r3, r5
 800ad6c:	da4c      	bge.n	800ae08 <__gethex+0x2a4>
 800ad6e:	ee18 0a10 	vmov	r0, s16
 800ad72:	4621      	mov	r1, r4
 800ad74:	f000 fa6e 	bl	800b254 <_Bfree>
 800ad78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	27a3      	movs	r7, #163	; 0xa3
 800ad80:	e785      	b.n	800ac8e <__gethex+0x12a>
 800ad82:	1e73      	subs	r3, r6, #1
 800ad84:	9a05      	ldr	r2, [sp, #20]
 800ad86:	9303      	str	r3, [sp, #12]
 800ad88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d019      	beq.n	800adc4 <__gethex+0x260>
 800ad90:	f1bb 0f20 	cmp.w	fp, #32
 800ad94:	d107      	bne.n	800ada6 <__gethex+0x242>
 800ad96:	9b02      	ldr	r3, [sp, #8]
 800ad98:	9a00      	ldr	r2, [sp, #0]
 800ad9a:	f843 2b04 	str.w	r2, [r3], #4
 800ad9e:	9302      	str	r3, [sp, #8]
 800ada0:	2300      	movs	r3, #0
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	469b      	mov	fp, r3
 800ada6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800adaa:	f7ff fec5 	bl	800ab38 <__hexdig_fun>
 800adae:	9b00      	ldr	r3, [sp, #0]
 800adb0:	f000 000f 	and.w	r0, r0, #15
 800adb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800adb8:	4303      	orrs	r3, r0
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	f10b 0b04 	add.w	fp, fp, #4
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	e00d      	b.n	800ade0 <__gethex+0x27c>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	9a06      	ldr	r2, [sp, #24]
 800adc8:	4413      	add	r3, r2
 800adca:	42bb      	cmp	r3, r7
 800adcc:	d3e0      	bcc.n	800ad90 <__gethex+0x22c>
 800adce:	4618      	mov	r0, r3
 800add0:	9901      	ldr	r1, [sp, #4]
 800add2:	9307      	str	r3, [sp, #28]
 800add4:	4652      	mov	r2, sl
 800add6:	f001 fc51 	bl	800c67c <strncmp>
 800adda:	9b07      	ldr	r3, [sp, #28]
 800addc:	2800      	cmp	r0, #0
 800adde:	d1d7      	bne.n	800ad90 <__gethex+0x22c>
 800ade0:	461e      	mov	r6, r3
 800ade2:	e78b      	b.n	800acfc <__gethex+0x198>
 800ade4:	f04f 0a03 	mov.w	sl, #3
 800ade8:	e7b8      	b.n	800ad5c <__gethex+0x1f8>
 800adea:	da0a      	bge.n	800ae02 <__gethex+0x29e>
 800adec:	1a37      	subs	r7, r6, r0
 800adee:	4621      	mov	r1, r4
 800adf0:	ee18 0a10 	vmov	r0, s16
 800adf4:	463a      	mov	r2, r7
 800adf6:	f000 fc49 	bl	800b68c <__lshift>
 800adfa:	1bed      	subs	r5, r5, r7
 800adfc:	4604      	mov	r4, r0
 800adfe:	f100 0914 	add.w	r9, r0, #20
 800ae02:	f04f 0a00 	mov.w	sl, #0
 800ae06:	e7ae      	b.n	800ad66 <__gethex+0x202>
 800ae08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae0c:	42a8      	cmp	r0, r5
 800ae0e:	dd72      	ble.n	800aef6 <__gethex+0x392>
 800ae10:	1b45      	subs	r5, r0, r5
 800ae12:	42ae      	cmp	r6, r5
 800ae14:	dc36      	bgt.n	800ae84 <__gethex+0x320>
 800ae16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d02a      	beq.n	800ae74 <__gethex+0x310>
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d02c      	beq.n	800ae7c <__gethex+0x318>
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d115      	bne.n	800ae52 <__gethex+0x2ee>
 800ae26:	42ae      	cmp	r6, r5
 800ae28:	d113      	bne.n	800ae52 <__gethex+0x2ee>
 800ae2a:	2e01      	cmp	r6, #1
 800ae2c:	d10b      	bne.n	800ae46 <__gethex+0x2e2>
 800ae2e:	9a04      	ldr	r2, [sp, #16]
 800ae30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	2301      	movs	r3, #1
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	f8c9 3000 	str.w	r3, [r9]
 800ae3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae40:	2762      	movs	r7, #98	; 0x62
 800ae42:	601c      	str	r4, [r3, #0]
 800ae44:	e723      	b.n	800ac8e <__gethex+0x12a>
 800ae46:	1e71      	subs	r1, r6, #1
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 fe5e 	bl	800bb0a <__any_on>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1ed      	bne.n	800ae2e <__gethex+0x2ca>
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	4621      	mov	r1, r4
 800ae58:	f000 f9fc 	bl	800b254 <_Bfree>
 800ae5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	2750      	movs	r7, #80	; 0x50
 800ae64:	e713      	b.n	800ac8e <__gethex+0x12a>
 800ae66:	bf00      	nop
 800ae68:	0800d618 	.word	0x0800d618
 800ae6c:	0800d59c 	.word	0x0800d59c
 800ae70:	0800d5ad 	.word	0x0800d5ad
 800ae74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1eb      	bne.n	800ae52 <__gethex+0x2ee>
 800ae7a:	e7d8      	b.n	800ae2e <__gethex+0x2ca>
 800ae7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1d5      	bne.n	800ae2e <__gethex+0x2ca>
 800ae82:	e7e6      	b.n	800ae52 <__gethex+0x2ee>
 800ae84:	1e6f      	subs	r7, r5, #1
 800ae86:	f1ba 0f00 	cmp.w	sl, #0
 800ae8a:	d131      	bne.n	800aef0 <__gethex+0x38c>
 800ae8c:	b127      	cbz	r7, 800ae98 <__gethex+0x334>
 800ae8e:	4639      	mov	r1, r7
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fe3a 	bl	800bb0a <__any_on>
 800ae96:	4682      	mov	sl, r0
 800ae98:	117b      	asrs	r3, r7, #5
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aea0:	f007 071f 	and.w	r7, r7, #31
 800aea4:	fa01 f707 	lsl.w	r7, r1, r7
 800aea8:	421f      	tst	r7, r3
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	bf18      	it	ne
 800aeb0:	f04a 0a02 	orrne.w	sl, sl, #2
 800aeb4:	1b76      	subs	r6, r6, r5
 800aeb6:	f7ff fded 	bl	800aa94 <rshift>
 800aeba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aebe:	2702      	movs	r7, #2
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d048      	beq.n	800af58 <__gethex+0x3f4>
 800aec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d015      	beq.n	800aefa <__gethex+0x396>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d017      	beq.n	800af02 <__gethex+0x39e>
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d109      	bne.n	800aeea <__gethex+0x386>
 800aed6:	f01a 0f02 	tst.w	sl, #2
 800aeda:	d006      	beq.n	800aeea <__gethex+0x386>
 800aedc:	f8d9 0000 	ldr.w	r0, [r9]
 800aee0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aee4:	f01a 0f01 	tst.w	sl, #1
 800aee8:	d10e      	bne.n	800af08 <__gethex+0x3a4>
 800aeea:	f047 0710 	orr.w	r7, r7, #16
 800aeee:	e033      	b.n	800af58 <__gethex+0x3f4>
 800aef0:	f04f 0a01 	mov.w	sl, #1
 800aef4:	e7d0      	b.n	800ae98 <__gethex+0x334>
 800aef6:	2701      	movs	r7, #1
 800aef8:	e7e2      	b.n	800aec0 <__gethex+0x35c>
 800aefa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aefc:	f1c3 0301 	rsb	r3, r3, #1
 800af00:	9315      	str	r3, [sp, #84]	; 0x54
 800af02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0f0      	beq.n	800aeea <__gethex+0x386>
 800af08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af0c:	f104 0314 	add.w	r3, r4, #20
 800af10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af18:	f04f 0c00 	mov.w	ip, #0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af26:	d01c      	beq.n	800af62 <__gethex+0x3fe>
 800af28:	3201      	adds	r2, #1
 800af2a:	6002      	str	r2, [r0, #0]
 800af2c:	2f02      	cmp	r7, #2
 800af2e:	f104 0314 	add.w	r3, r4, #20
 800af32:	d13f      	bne.n	800afb4 <__gethex+0x450>
 800af34:	f8d8 2000 	ldr.w	r2, [r8]
 800af38:	3a01      	subs	r2, #1
 800af3a:	42b2      	cmp	r2, r6
 800af3c:	d10a      	bne.n	800af54 <__gethex+0x3f0>
 800af3e:	1171      	asrs	r1, r6, #5
 800af40:	2201      	movs	r2, #1
 800af42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af46:	f006 061f 	and.w	r6, r6, #31
 800af4a:	fa02 f606 	lsl.w	r6, r2, r6
 800af4e:	421e      	tst	r6, r3
 800af50:	bf18      	it	ne
 800af52:	4617      	movne	r7, r2
 800af54:	f047 0720 	orr.w	r7, r7, #32
 800af58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af5a:	601c      	str	r4, [r3, #0]
 800af5c:	9b04      	ldr	r3, [sp, #16]
 800af5e:	601d      	str	r5, [r3, #0]
 800af60:	e695      	b.n	800ac8e <__gethex+0x12a>
 800af62:	4299      	cmp	r1, r3
 800af64:	f843 cc04 	str.w	ip, [r3, #-4]
 800af68:	d8d8      	bhi.n	800af1c <__gethex+0x3b8>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	459b      	cmp	fp, r3
 800af6e:	db19      	blt.n	800afa4 <__gethex+0x440>
 800af70:	6861      	ldr	r1, [r4, #4]
 800af72:	ee18 0a10 	vmov	r0, s16
 800af76:	3101      	adds	r1, #1
 800af78:	f000 f92c 	bl	800b1d4 <_Balloc>
 800af7c:	4681      	mov	r9, r0
 800af7e:	b918      	cbnz	r0, 800af88 <__gethex+0x424>
 800af80:	4b1a      	ldr	r3, [pc, #104]	; (800afec <__gethex+0x488>)
 800af82:	4602      	mov	r2, r0
 800af84:	2184      	movs	r1, #132	; 0x84
 800af86:	e6a8      	b.n	800acda <__gethex+0x176>
 800af88:	6922      	ldr	r2, [r4, #16]
 800af8a:	3202      	adds	r2, #2
 800af8c:	f104 010c 	add.w	r1, r4, #12
 800af90:	0092      	lsls	r2, r2, #2
 800af92:	300c      	adds	r0, #12
 800af94:	f7fd f9dc 	bl	8008350 <memcpy>
 800af98:	4621      	mov	r1, r4
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f000 f959 	bl	800b254 <_Bfree>
 800afa2:	464c      	mov	r4, r9
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afac:	6122      	str	r2, [r4, #16]
 800afae:	2201      	movs	r2, #1
 800afb0:	615a      	str	r2, [r3, #20]
 800afb2:	e7bb      	b.n	800af2c <__gethex+0x3c8>
 800afb4:	6922      	ldr	r2, [r4, #16]
 800afb6:	455a      	cmp	r2, fp
 800afb8:	dd0b      	ble.n	800afd2 <__gethex+0x46e>
 800afba:	2101      	movs	r1, #1
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7ff fd69 	bl	800aa94 <rshift>
 800afc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afc6:	3501      	adds	r5, #1
 800afc8:	42ab      	cmp	r3, r5
 800afca:	f6ff aed0 	blt.w	800ad6e <__gethex+0x20a>
 800afce:	2701      	movs	r7, #1
 800afd0:	e7c0      	b.n	800af54 <__gethex+0x3f0>
 800afd2:	f016 061f 	ands.w	r6, r6, #31
 800afd6:	d0fa      	beq.n	800afce <__gethex+0x46a>
 800afd8:	449a      	add	sl, r3
 800afda:	f1c6 0620 	rsb	r6, r6, #32
 800afde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800afe2:	f000 f9ed 	bl	800b3c0 <__hi0bits>
 800afe6:	42b0      	cmp	r0, r6
 800afe8:	dbe7      	blt.n	800afba <__gethex+0x456>
 800afea:	e7f0      	b.n	800afce <__gethex+0x46a>
 800afec:	0800d59c 	.word	0x0800d59c

0800aff0 <L_shift>:
 800aff0:	f1c2 0208 	rsb	r2, r2, #8
 800aff4:	0092      	lsls	r2, r2, #2
 800aff6:	b570      	push	{r4, r5, r6, lr}
 800aff8:	f1c2 0620 	rsb	r6, r2, #32
 800affc:	6843      	ldr	r3, [r0, #4]
 800affe:	6804      	ldr	r4, [r0, #0]
 800b000:	fa03 f506 	lsl.w	r5, r3, r6
 800b004:	432c      	orrs	r4, r5
 800b006:	40d3      	lsrs	r3, r2
 800b008:	6004      	str	r4, [r0, #0]
 800b00a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b00e:	4288      	cmp	r0, r1
 800b010:	d3f4      	bcc.n	800affc <L_shift+0xc>
 800b012:	bd70      	pop	{r4, r5, r6, pc}

0800b014 <__match>:
 800b014:	b530      	push	{r4, r5, lr}
 800b016:	6803      	ldr	r3, [r0, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01e:	b914      	cbnz	r4, 800b026 <__match+0x12>
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	2001      	movs	r0, #1
 800b024:	bd30      	pop	{r4, r5, pc}
 800b026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b02a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b02e:	2d19      	cmp	r5, #25
 800b030:	bf98      	it	ls
 800b032:	3220      	addls	r2, #32
 800b034:	42a2      	cmp	r2, r4
 800b036:	d0f0      	beq.n	800b01a <__match+0x6>
 800b038:	2000      	movs	r0, #0
 800b03a:	e7f3      	b.n	800b024 <__match+0x10>

0800b03c <__hexnan>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	680b      	ldr	r3, [r1, #0]
 800b042:	6801      	ldr	r1, [r0, #0]
 800b044:	115e      	asrs	r6, r3, #5
 800b046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b04a:	f013 031f 	ands.w	r3, r3, #31
 800b04e:	b087      	sub	sp, #28
 800b050:	bf18      	it	ne
 800b052:	3604      	addne	r6, #4
 800b054:	2500      	movs	r5, #0
 800b056:	1f37      	subs	r7, r6, #4
 800b058:	4682      	mov	sl, r0
 800b05a:	4690      	mov	r8, r2
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b062:	46b9      	mov	r9, r7
 800b064:	463c      	mov	r4, r7
 800b066:	9502      	str	r5, [sp, #8]
 800b068:	46ab      	mov	fp, r5
 800b06a:	784a      	ldrb	r2, [r1, #1]
 800b06c:	1c4b      	adds	r3, r1, #1
 800b06e:	9303      	str	r3, [sp, #12]
 800b070:	b342      	cbz	r2, 800b0c4 <__hexnan+0x88>
 800b072:	4610      	mov	r0, r2
 800b074:	9105      	str	r1, [sp, #20]
 800b076:	9204      	str	r2, [sp, #16]
 800b078:	f7ff fd5e 	bl	800ab38 <__hexdig_fun>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d14f      	bne.n	800b120 <__hexnan+0xe4>
 800b080:	9a04      	ldr	r2, [sp, #16]
 800b082:	9905      	ldr	r1, [sp, #20]
 800b084:	2a20      	cmp	r2, #32
 800b086:	d818      	bhi.n	800b0ba <__hexnan+0x7e>
 800b088:	9b02      	ldr	r3, [sp, #8]
 800b08a:	459b      	cmp	fp, r3
 800b08c:	dd13      	ble.n	800b0b6 <__hexnan+0x7a>
 800b08e:	454c      	cmp	r4, r9
 800b090:	d206      	bcs.n	800b0a0 <__hexnan+0x64>
 800b092:	2d07      	cmp	r5, #7
 800b094:	dc04      	bgt.n	800b0a0 <__hexnan+0x64>
 800b096:	462a      	mov	r2, r5
 800b098:	4649      	mov	r1, r9
 800b09a:	4620      	mov	r0, r4
 800b09c:	f7ff ffa8 	bl	800aff0 <L_shift>
 800b0a0:	4544      	cmp	r4, r8
 800b0a2:	d950      	bls.n	800b146 <__hexnan+0x10a>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f1a4 0904 	sub.w	r9, r4, #4
 800b0aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0ae:	f8cd b008 	str.w	fp, [sp, #8]
 800b0b2:	464c      	mov	r4, r9
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	9903      	ldr	r1, [sp, #12]
 800b0b8:	e7d7      	b.n	800b06a <__hexnan+0x2e>
 800b0ba:	2a29      	cmp	r2, #41	; 0x29
 800b0bc:	d156      	bne.n	800b16c <__hexnan+0x130>
 800b0be:	3102      	adds	r1, #2
 800b0c0:	f8ca 1000 	str.w	r1, [sl]
 800b0c4:	f1bb 0f00 	cmp.w	fp, #0
 800b0c8:	d050      	beq.n	800b16c <__hexnan+0x130>
 800b0ca:	454c      	cmp	r4, r9
 800b0cc:	d206      	bcs.n	800b0dc <__hexnan+0xa0>
 800b0ce:	2d07      	cmp	r5, #7
 800b0d0:	dc04      	bgt.n	800b0dc <__hexnan+0xa0>
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	4649      	mov	r1, r9
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f7ff ff8a 	bl	800aff0 <L_shift>
 800b0dc:	4544      	cmp	r4, r8
 800b0de:	d934      	bls.n	800b14a <__hexnan+0x10e>
 800b0e0:	f1a8 0204 	sub.w	r2, r8, #4
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0ee:	429f      	cmp	r7, r3
 800b0f0:	d2f9      	bcs.n	800b0e6 <__hexnan+0xaa>
 800b0f2:	1b3b      	subs	r3, r7, r4
 800b0f4:	f023 0303 	bic.w	r3, r3, #3
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	3401      	adds	r4, #1
 800b0fc:	3e03      	subs	r6, #3
 800b0fe:	42b4      	cmp	r4, r6
 800b100:	bf88      	it	hi
 800b102:	2304      	movhi	r3, #4
 800b104:	4443      	add	r3, r8
 800b106:	2200      	movs	r2, #0
 800b108:	f843 2b04 	str.w	r2, [r3], #4
 800b10c:	429f      	cmp	r7, r3
 800b10e:	d2fb      	bcs.n	800b108 <__hexnan+0xcc>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	b91b      	cbnz	r3, 800b11c <__hexnan+0xe0>
 800b114:	4547      	cmp	r7, r8
 800b116:	d127      	bne.n	800b168 <__hexnan+0x12c>
 800b118:	2301      	movs	r3, #1
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	2005      	movs	r0, #5
 800b11e:	e026      	b.n	800b16e <__hexnan+0x132>
 800b120:	3501      	adds	r5, #1
 800b122:	2d08      	cmp	r5, #8
 800b124:	f10b 0b01 	add.w	fp, fp, #1
 800b128:	dd06      	ble.n	800b138 <__hexnan+0xfc>
 800b12a:	4544      	cmp	r4, r8
 800b12c:	d9c3      	bls.n	800b0b6 <__hexnan+0x7a>
 800b12e:	2300      	movs	r3, #0
 800b130:	f844 3c04 	str.w	r3, [r4, #-4]
 800b134:	2501      	movs	r5, #1
 800b136:	3c04      	subs	r4, #4
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	f000 000f 	and.w	r0, r0, #15
 800b13e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b142:	6022      	str	r2, [r4, #0]
 800b144:	e7b7      	b.n	800b0b6 <__hexnan+0x7a>
 800b146:	2508      	movs	r5, #8
 800b148:	e7b5      	b.n	800b0b6 <__hexnan+0x7a>
 800b14a:	9b01      	ldr	r3, [sp, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0df      	beq.n	800b110 <__hexnan+0xd4>
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	f1c3 0320 	rsb	r3, r3, #32
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
 800b15c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b160:	401a      	ands	r2, r3
 800b162:	f846 2c04 	str.w	r2, [r6, #-4]
 800b166:	e7d3      	b.n	800b110 <__hexnan+0xd4>
 800b168:	3f04      	subs	r7, #4
 800b16a:	e7d1      	b.n	800b110 <__hexnan+0xd4>
 800b16c:	2004      	movs	r0, #4
 800b16e:	b007      	add	sp, #28
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b174 <_localeconv_r>:
 800b174:	4800      	ldr	r0, [pc, #0]	; (800b178 <_localeconv_r+0x4>)
 800b176:	4770      	bx	lr
 800b178:	200001b0 	.word	0x200001b0

0800b17c <_lseek_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	; (800b19c <_lseek_r+0x20>)
 800b180:	4604      	mov	r4, r0
 800b182:	4608      	mov	r0, r1
 800b184:	4611      	mov	r1, r2
 800b186:	2200      	movs	r2, #0
 800b188:	602a      	str	r2, [r5, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	f7f7 fa90 	bl	80026b0 <_lseek>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_lseek_r+0x1e>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_lseek_r+0x1e>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	200008c8 	.word	0x200008c8

0800b1a0 <malloc>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <malloc+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f000 bd31 	b.w	800bc0c <_malloc_r>
 800b1aa:	bf00      	nop
 800b1ac:	20000058 	.word	0x20000058

0800b1b0 <__ascii_mbtowc>:
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	b901      	cbnz	r1, 800b1b6 <__ascii_mbtowc+0x6>
 800b1b4:	a901      	add	r1, sp, #4
 800b1b6:	b142      	cbz	r2, 800b1ca <__ascii_mbtowc+0x1a>
 800b1b8:	b14b      	cbz	r3, 800b1ce <__ascii_mbtowc+0x1e>
 800b1ba:	7813      	ldrb	r3, [r2, #0]
 800b1bc:	600b      	str	r3, [r1, #0]
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	1e10      	subs	r0, r2, #0
 800b1c2:	bf18      	it	ne
 800b1c4:	2001      	movne	r0, #1
 800b1c6:	b002      	add	sp, #8
 800b1c8:	4770      	bx	lr
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	e7fb      	b.n	800b1c6 <__ascii_mbtowc+0x16>
 800b1ce:	f06f 0001 	mvn.w	r0, #1
 800b1d2:	e7f8      	b.n	800b1c6 <__ascii_mbtowc+0x16>

0800b1d4 <_Balloc>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	b976      	cbnz	r6, 800b1fc <_Balloc+0x28>
 800b1de:	2010      	movs	r0, #16
 800b1e0:	f7ff ffde 	bl	800b1a0 <malloc>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1e8:	b920      	cbnz	r0, 800b1f4 <_Balloc+0x20>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	; (800b24c <_Balloc+0x78>)
 800b1ec:	4818      	ldr	r0, [pc, #96]	; (800b250 <_Balloc+0x7c>)
 800b1ee:	2166      	movs	r1, #102	; 0x66
 800b1f0:	f001 fb1c 	bl	800c82c <__assert_func>
 800b1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f8:	6006      	str	r6, [r0, #0]
 800b1fa:	60c6      	str	r6, [r0, #12]
 800b1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1fe:	68f3      	ldr	r3, [r6, #12]
 800b200:	b183      	cbz	r3, 800b224 <_Balloc+0x50>
 800b202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b20a:	b9b8      	cbnz	r0, 800b23c <_Balloc+0x68>
 800b20c:	2101      	movs	r1, #1
 800b20e:	fa01 f605 	lsl.w	r6, r1, r5
 800b212:	1d72      	adds	r2, r6, #5
 800b214:	0092      	lsls	r2, r2, #2
 800b216:	4620      	mov	r0, r4
 800b218:	f000 fc98 	bl	800bb4c <_calloc_r>
 800b21c:	b160      	cbz	r0, 800b238 <_Balloc+0x64>
 800b21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b222:	e00e      	b.n	800b242 <_Balloc+0x6e>
 800b224:	2221      	movs	r2, #33	; 0x21
 800b226:	2104      	movs	r1, #4
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fc8f 	bl	800bb4c <_calloc_r>
 800b22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b230:	60f0      	str	r0, [r6, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e4      	bne.n	800b202 <_Balloc+0x2e>
 800b238:	2000      	movs	r0, #0
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	6802      	ldr	r2, [r0, #0]
 800b23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b242:	2300      	movs	r3, #0
 800b244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b248:	e7f7      	b.n	800b23a <_Balloc+0x66>
 800b24a:	bf00      	nop
 800b24c:	0800d526 	.word	0x0800d526
 800b250:	0800d62c 	.word	0x0800d62c

0800b254 <_Bfree>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b258:	4605      	mov	r5, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	b976      	cbnz	r6, 800b27c <_Bfree+0x28>
 800b25e:	2010      	movs	r0, #16
 800b260:	f7ff ff9e 	bl	800b1a0 <malloc>
 800b264:	4602      	mov	r2, r0
 800b266:	6268      	str	r0, [r5, #36]	; 0x24
 800b268:	b920      	cbnz	r0, 800b274 <_Bfree+0x20>
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <_Bfree+0x3c>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <_Bfree+0x40>)
 800b26e:	218a      	movs	r1, #138	; 0x8a
 800b270:	f001 fadc 	bl	800c82c <__assert_func>
 800b274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b278:	6006      	str	r6, [r0, #0]
 800b27a:	60c6      	str	r6, [r0, #12]
 800b27c:	b13c      	cbz	r4, 800b28e <_Bfree+0x3a>
 800b27e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b280:	6862      	ldr	r2, [r4, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b288:	6021      	str	r1, [r4, #0]
 800b28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	0800d526 	.word	0x0800d526
 800b294:	0800d62c 	.word	0x0800d62c

0800b298 <__multadd>:
 800b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	690e      	ldr	r6, [r1, #16]
 800b29e:	4607      	mov	r7, r0
 800b2a0:	4698      	mov	r8, r3
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	f101 0014 	add.w	r0, r1, #20
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6805      	ldr	r5, [r0, #0]
 800b2ac:	b2a9      	uxth	r1, r5
 800b2ae:	fb02 8101 	mla	r1, r2, r1, r8
 800b2b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b2b6:	0c2d      	lsrs	r5, r5, #16
 800b2b8:	fb02 c505 	mla	r5, r2, r5, ip
 800b2bc:	b289      	uxth	r1, r1
 800b2be:	3301      	adds	r3, #1
 800b2c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b2c4:	429e      	cmp	r6, r3
 800b2c6:	f840 1b04 	str.w	r1, [r0], #4
 800b2ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b2ce:	dcec      	bgt.n	800b2aa <__multadd+0x12>
 800b2d0:	f1b8 0f00 	cmp.w	r8, #0
 800b2d4:	d022      	beq.n	800b31c <__multadd+0x84>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	42b3      	cmp	r3, r6
 800b2da:	dc19      	bgt.n	800b310 <__multadd+0x78>
 800b2dc:	6861      	ldr	r1, [r4, #4]
 800b2de:	4638      	mov	r0, r7
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	f7ff ff77 	bl	800b1d4 <_Balloc>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	b928      	cbnz	r0, 800b2f6 <__multadd+0x5e>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <__multadd+0x8c>)
 800b2ee:	480e      	ldr	r0, [pc, #56]	; (800b328 <__multadd+0x90>)
 800b2f0:	21b5      	movs	r1, #181	; 0xb5
 800b2f2:	f001 fa9b 	bl	800c82c <__assert_func>
 800b2f6:	6922      	ldr	r2, [r4, #16]
 800b2f8:	3202      	adds	r2, #2
 800b2fa:	f104 010c 	add.w	r1, r4, #12
 800b2fe:	0092      	lsls	r2, r2, #2
 800b300:	300c      	adds	r0, #12
 800b302:	f7fd f825 	bl	8008350 <memcpy>
 800b306:	4621      	mov	r1, r4
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff ffa3 	bl	800b254 <_Bfree>
 800b30e:	462c      	mov	r4, r5
 800b310:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b314:	3601      	adds	r6, #1
 800b316:	f8c3 8014 	str.w	r8, [r3, #20]
 800b31a:	6126      	str	r6, [r4, #16]
 800b31c:	4620      	mov	r0, r4
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b322:	bf00      	nop
 800b324:	0800d59c 	.word	0x0800d59c
 800b328:	0800d62c 	.word	0x0800d62c

0800b32c <__s2b>:
 800b32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b330:	460c      	mov	r4, r1
 800b332:	4615      	mov	r5, r2
 800b334:	461f      	mov	r7, r3
 800b336:	2209      	movs	r2, #9
 800b338:	3308      	adds	r3, #8
 800b33a:	4606      	mov	r6, r0
 800b33c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b340:	2100      	movs	r1, #0
 800b342:	2201      	movs	r2, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	db09      	blt.n	800b35c <__s2b+0x30>
 800b348:	4630      	mov	r0, r6
 800b34a:	f7ff ff43 	bl	800b1d4 <_Balloc>
 800b34e:	b940      	cbnz	r0, 800b362 <__s2b+0x36>
 800b350:	4602      	mov	r2, r0
 800b352:	4b19      	ldr	r3, [pc, #100]	; (800b3b8 <__s2b+0x8c>)
 800b354:	4819      	ldr	r0, [pc, #100]	; (800b3bc <__s2b+0x90>)
 800b356:	21ce      	movs	r1, #206	; 0xce
 800b358:	f001 fa68 	bl	800c82c <__assert_func>
 800b35c:	0052      	lsls	r2, r2, #1
 800b35e:	3101      	adds	r1, #1
 800b360:	e7f0      	b.n	800b344 <__s2b+0x18>
 800b362:	9b08      	ldr	r3, [sp, #32]
 800b364:	6143      	str	r3, [r0, #20]
 800b366:	2d09      	cmp	r5, #9
 800b368:	f04f 0301 	mov.w	r3, #1
 800b36c:	6103      	str	r3, [r0, #16]
 800b36e:	dd16      	ble.n	800b39e <__s2b+0x72>
 800b370:	f104 0909 	add.w	r9, r4, #9
 800b374:	46c8      	mov	r8, r9
 800b376:	442c      	add	r4, r5
 800b378:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b37c:	4601      	mov	r1, r0
 800b37e:	3b30      	subs	r3, #48	; 0x30
 800b380:	220a      	movs	r2, #10
 800b382:	4630      	mov	r0, r6
 800b384:	f7ff ff88 	bl	800b298 <__multadd>
 800b388:	45a0      	cmp	r8, r4
 800b38a:	d1f5      	bne.n	800b378 <__s2b+0x4c>
 800b38c:	f1a5 0408 	sub.w	r4, r5, #8
 800b390:	444c      	add	r4, r9
 800b392:	1b2d      	subs	r5, r5, r4
 800b394:	1963      	adds	r3, r4, r5
 800b396:	42bb      	cmp	r3, r7
 800b398:	db04      	blt.n	800b3a4 <__s2b+0x78>
 800b39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39e:	340a      	adds	r4, #10
 800b3a0:	2509      	movs	r5, #9
 800b3a2:	e7f6      	b.n	800b392 <__s2b+0x66>
 800b3a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3a8:	4601      	mov	r1, r0
 800b3aa:	3b30      	subs	r3, #48	; 0x30
 800b3ac:	220a      	movs	r2, #10
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ff72 	bl	800b298 <__multadd>
 800b3b4:	e7ee      	b.n	800b394 <__s2b+0x68>
 800b3b6:	bf00      	nop
 800b3b8:	0800d59c 	.word	0x0800d59c
 800b3bc:	0800d62c 	.word	0x0800d62c

0800b3c0 <__hi0bits>:
 800b3c0:	0c03      	lsrs	r3, r0, #16
 800b3c2:	041b      	lsls	r3, r3, #16
 800b3c4:	b9d3      	cbnz	r3, 800b3fc <__hi0bits+0x3c>
 800b3c6:	0400      	lsls	r0, r0, #16
 800b3c8:	2310      	movs	r3, #16
 800b3ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3ce:	bf04      	itt	eq
 800b3d0:	0200      	lsleq	r0, r0, #8
 800b3d2:	3308      	addeq	r3, #8
 800b3d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3d8:	bf04      	itt	eq
 800b3da:	0100      	lsleq	r0, r0, #4
 800b3dc:	3304      	addeq	r3, #4
 800b3de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3e2:	bf04      	itt	eq
 800b3e4:	0080      	lsleq	r0, r0, #2
 800b3e6:	3302      	addeq	r3, #2
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	db05      	blt.n	800b3f8 <__hi0bits+0x38>
 800b3ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3f0:	f103 0301 	add.w	r3, r3, #1
 800b3f4:	bf08      	it	eq
 800b3f6:	2320      	moveq	r3, #32
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	4770      	bx	lr
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e7e4      	b.n	800b3ca <__hi0bits+0xa>

0800b400 <__lo0bits>:
 800b400:	6803      	ldr	r3, [r0, #0]
 800b402:	f013 0207 	ands.w	r2, r3, #7
 800b406:	4601      	mov	r1, r0
 800b408:	d00b      	beq.n	800b422 <__lo0bits+0x22>
 800b40a:	07da      	lsls	r2, r3, #31
 800b40c:	d424      	bmi.n	800b458 <__lo0bits+0x58>
 800b40e:	0798      	lsls	r0, r3, #30
 800b410:	bf49      	itett	mi
 800b412:	085b      	lsrmi	r3, r3, #1
 800b414:	089b      	lsrpl	r3, r3, #2
 800b416:	2001      	movmi	r0, #1
 800b418:	600b      	strmi	r3, [r1, #0]
 800b41a:	bf5c      	itt	pl
 800b41c:	600b      	strpl	r3, [r1, #0]
 800b41e:	2002      	movpl	r0, #2
 800b420:	4770      	bx	lr
 800b422:	b298      	uxth	r0, r3
 800b424:	b9b0      	cbnz	r0, 800b454 <__lo0bits+0x54>
 800b426:	0c1b      	lsrs	r3, r3, #16
 800b428:	2010      	movs	r0, #16
 800b42a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b42e:	bf04      	itt	eq
 800b430:	0a1b      	lsreq	r3, r3, #8
 800b432:	3008      	addeq	r0, #8
 800b434:	071a      	lsls	r2, r3, #28
 800b436:	bf04      	itt	eq
 800b438:	091b      	lsreq	r3, r3, #4
 800b43a:	3004      	addeq	r0, #4
 800b43c:	079a      	lsls	r2, r3, #30
 800b43e:	bf04      	itt	eq
 800b440:	089b      	lsreq	r3, r3, #2
 800b442:	3002      	addeq	r0, #2
 800b444:	07da      	lsls	r2, r3, #31
 800b446:	d403      	bmi.n	800b450 <__lo0bits+0x50>
 800b448:	085b      	lsrs	r3, r3, #1
 800b44a:	f100 0001 	add.w	r0, r0, #1
 800b44e:	d005      	beq.n	800b45c <__lo0bits+0x5c>
 800b450:	600b      	str	r3, [r1, #0]
 800b452:	4770      	bx	lr
 800b454:	4610      	mov	r0, r2
 800b456:	e7e8      	b.n	800b42a <__lo0bits+0x2a>
 800b458:	2000      	movs	r0, #0
 800b45a:	4770      	bx	lr
 800b45c:	2020      	movs	r0, #32
 800b45e:	4770      	bx	lr

0800b460 <__i2b>:
 800b460:	b510      	push	{r4, lr}
 800b462:	460c      	mov	r4, r1
 800b464:	2101      	movs	r1, #1
 800b466:	f7ff feb5 	bl	800b1d4 <_Balloc>
 800b46a:	4602      	mov	r2, r0
 800b46c:	b928      	cbnz	r0, 800b47a <__i2b+0x1a>
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <__i2b+0x24>)
 800b470:	4805      	ldr	r0, [pc, #20]	; (800b488 <__i2b+0x28>)
 800b472:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b476:	f001 f9d9 	bl	800c82c <__assert_func>
 800b47a:	2301      	movs	r3, #1
 800b47c:	6144      	str	r4, [r0, #20]
 800b47e:	6103      	str	r3, [r0, #16]
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	0800d59c 	.word	0x0800d59c
 800b488:	0800d62c 	.word	0x0800d62c

0800b48c <__multiply>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	4614      	mov	r4, r2
 800b492:	690a      	ldr	r2, [r1, #16]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	429a      	cmp	r2, r3
 800b498:	bfb8      	it	lt
 800b49a:	460b      	movlt	r3, r1
 800b49c:	460d      	mov	r5, r1
 800b49e:	bfbc      	itt	lt
 800b4a0:	4625      	movlt	r5, r4
 800b4a2:	461c      	movlt	r4, r3
 800b4a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b4a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ac:	68ab      	ldr	r3, [r5, #8]
 800b4ae:	6869      	ldr	r1, [r5, #4]
 800b4b0:	eb0a 0709 	add.w	r7, sl, r9
 800b4b4:	42bb      	cmp	r3, r7
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	bfb8      	it	lt
 800b4ba:	3101      	addlt	r1, #1
 800b4bc:	f7ff fe8a 	bl	800b1d4 <_Balloc>
 800b4c0:	b930      	cbnz	r0, 800b4d0 <__multiply+0x44>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b42      	ldr	r3, [pc, #264]	; (800b5d0 <__multiply+0x144>)
 800b4c6:	4843      	ldr	r0, [pc, #268]	; (800b5d4 <__multiply+0x148>)
 800b4c8:	f240 115d 	movw	r1, #349	; 0x15d
 800b4cc:	f001 f9ae 	bl	800c82c <__assert_func>
 800b4d0:	f100 0614 	add.w	r6, r0, #20
 800b4d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4d8:	4633      	mov	r3, r6
 800b4da:	2200      	movs	r2, #0
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	d31e      	bcc.n	800b51e <__multiply+0x92>
 800b4e0:	f105 0c14 	add.w	ip, r5, #20
 800b4e4:	f104 0314 	add.w	r3, r4, #20
 800b4e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4f0:	9202      	str	r2, [sp, #8]
 800b4f2:	ebac 0205 	sub.w	r2, ip, r5
 800b4f6:	3a15      	subs	r2, #21
 800b4f8:	f022 0203 	bic.w	r2, r2, #3
 800b4fc:	3204      	adds	r2, #4
 800b4fe:	f105 0115 	add.w	r1, r5, #21
 800b502:	458c      	cmp	ip, r1
 800b504:	bf38      	it	cc
 800b506:	2204      	movcc	r2, #4
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	9a02      	ldr	r2, [sp, #8]
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d808      	bhi.n	800b524 <__multiply+0x98>
 800b512:	2f00      	cmp	r7, #0
 800b514:	dc55      	bgt.n	800b5c2 <__multiply+0x136>
 800b516:	6107      	str	r7, [r0, #16]
 800b518:	b005      	add	sp, #20
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	f843 2b04 	str.w	r2, [r3], #4
 800b522:	e7db      	b.n	800b4dc <__multiply+0x50>
 800b524:	f8b3 a000 	ldrh.w	sl, [r3]
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	d020      	beq.n	800b570 <__multiply+0xe4>
 800b52e:	f105 0e14 	add.w	lr, r5, #20
 800b532:	46b1      	mov	r9, r6
 800b534:	2200      	movs	r2, #0
 800b536:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b53a:	f8d9 b000 	ldr.w	fp, [r9]
 800b53e:	b2a1      	uxth	r1, r4
 800b540:	fa1f fb8b 	uxth.w	fp, fp
 800b544:	fb0a b101 	mla	r1, sl, r1, fp
 800b548:	4411      	add	r1, r2
 800b54a:	f8d9 2000 	ldr.w	r2, [r9]
 800b54e:	0c24      	lsrs	r4, r4, #16
 800b550:	0c12      	lsrs	r2, r2, #16
 800b552:	fb0a 2404 	mla	r4, sl, r4, r2
 800b556:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b55a:	b289      	uxth	r1, r1
 800b55c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b560:	45f4      	cmp	ip, lr
 800b562:	f849 1b04 	str.w	r1, [r9], #4
 800b566:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b56a:	d8e4      	bhi.n	800b536 <__multiply+0xaa>
 800b56c:	9901      	ldr	r1, [sp, #4]
 800b56e:	5072      	str	r2, [r6, r1]
 800b570:	9a03      	ldr	r2, [sp, #12]
 800b572:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b576:	3304      	adds	r3, #4
 800b578:	f1b9 0f00 	cmp.w	r9, #0
 800b57c:	d01f      	beq.n	800b5be <__multiply+0x132>
 800b57e:	6834      	ldr	r4, [r6, #0]
 800b580:	f105 0114 	add.w	r1, r5, #20
 800b584:	46b6      	mov	lr, r6
 800b586:	f04f 0a00 	mov.w	sl, #0
 800b58a:	880a      	ldrh	r2, [r1, #0]
 800b58c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b590:	fb09 b202 	mla	r2, r9, r2, fp
 800b594:	4492      	add	sl, r2
 800b596:	b2a4      	uxth	r4, r4
 800b598:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b59c:	f84e 4b04 	str.w	r4, [lr], #4
 800b5a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b5a4:	f8be 2000 	ldrh.w	r2, [lr]
 800b5a8:	0c24      	lsrs	r4, r4, #16
 800b5aa:	fb09 2404 	mla	r4, r9, r4, r2
 800b5ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b5b2:	458c      	cmp	ip, r1
 800b5b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5b8:	d8e7      	bhi.n	800b58a <__multiply+0xfe>
 800b5ba:	9a01      	ldr	r2, [sp, #4]
 800b5bc:	50b4      	str	r4, [r6, r2]
 800b5be:	3604      	adds	r6, #4
 800b5c0:	e7a3      	b.n	800b50a <__multiply+0x7e>
 800b5c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1a5      	bne.n	800b516 <__multiply+0x8a>
 800b5ca:	3f01      	subs	r7, #1
 800b5cc:	e7a1      	b.n	800b512 <__multiply+0x86>
 800b5ce:	bf00      	nop
 800b5d0:	0800d59c 	.word	0x0800d59c
 800b5d4:	0800d62c 	.word	0x0800d62c

0800b5d8 <__pow5mult>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4615      	mov	r5, r2
 800b5de:	f012 0203 	ands.w	r2, r2, #3
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	d007      	beq.n	800b5f8 <__pow5mult+0x20>
 800b5e8:	4c25      	ldr	r4, [pc, #148]	; (800b680 <__pow5mult+0xa8>)
 800b5ea:	3a01      	subs	r2, #1
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5f2:	f7ff fe51 	bl	800b298 <__multadd>
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	10ad      	asrs	r5, r5, #2
 800b5fa:	d03d      	beq.n	800b678 <__pow5mult+0xa0>
 800b5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5fe:	b97c      	cbnz	r4, 800b620 <__pow5mult+0x48>
 800b600:	2010      	movs	r0, #16
 800b602:	f7ff fdcd 	bl	800b1a0 <malloc>
 800b606:	4602      	mov	r2, r0
 800b608:	6270      	str	r0, [r6, #36]	; 0x24
 800b60a:	b928      	cbnz	r0, 800b618 <__pow5mult+0x40>
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <__pow5mult+0xac>)
 800b60e:	481e      	ldr	r0, [pc, #120]	; (800b688 <__pow5mult+0xb0>)
 800b610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b614:	f001 f90a 	bl	800c82c <__assert_func>
 800b618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b61c:	6004      	str	r4, [r0, #0]
 800b61e:	60c4      	str	r4, [r0, #12]
 800b620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b628:	b94c      	cbnz	r4, 800b63e <__pow5mult+0x66>
 800b62a:	f240 2171 	movw	r1, #625	; 0x271
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff16 	bl	800b460 <__i2b>
 800b634:	2300      	movs	r3, #0
 800b636:	f8c8 0008 	str.w	r0, [r8, #8]
 800b63a:	4604      	mov	r4, r0
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	f04f 0900 	mov.w	r9, #0
 800b642:	07eb      	lsls	r3, r5, #31
 800b644:	d50a      	bpl.n	800b65c <__pow5mult+0x84>
 800b646:	4639      	mov	r1, r7
 800b648:	4622      	mov	r2, r4
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff1e 	bl	800b48c <__multiply>
 800b650:	4639      	mov	r1, r7
 800b652:	4680      	mov	r8, r0
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fdfd 	bl	800b254 <_Bfree>
 800b65a:	4647      	mov	r7, r8
 800b65c:	106d      	asrs	r5, r5, #1
 800b65e:	d00b      	beq.n	800b678 <__pow5mult+0xa0>
 800b660:	6820      	ldr	r0, [r4, #0]
 800b662:	b938      	cbnz	r0, 800b674 <__pow5mult+0x9c>
 800b664:	4622      	mov	r2, r4
 800b666:	4621      	mov	r1, r4
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff ff0f 	bl	800b48c <__multiply>
 800b66e:	6020      	str	r0, [r4, #0]
 800b670:	f8c0 9000 	str.w	r9, [r0]
 800b674:	4604      	mov	r4, r0
 800b676:	e7e4      	b.n	800b642 <__pow5mult+0x6a>
 800b678:	4638      	mov	r0, r7
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67e:	bf00      	nop
 800b680:	0800d780 	.word	0x0800d780
 800b684:	0800d526 	.word	0x0800d526
 800b688:	0800d62c 	.word	0x0800d62c

0800b68c <__lshift>:
 800b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	6849      	ldr	r1, [r1, #4]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	4607      	mov	r7, r0
 800b69e:	4691      	mov	r9, r2
 800b6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6a4:	f108 0601 	add.w	r6, r8, #1
 800b6a8:	42b3      	cmp	r3, r6
 800b6aa:	db0b      	blt.n	800b6c4 <__lshift+0x38>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f7ff fd91 	bl	800b1d4 <_Balloc>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	b948      	cbnz	r0, 800b6ca <__lshift+0x3e>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b28      	ldr	r3, [pc, #160]	; (800b75c <__lshift+0xd0>)
 800b6ba:	4829      	ldr	r0, [pc, #164]	; (800b760 <__lshift+0xd4>)
 800b6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6c0:	f001 f8b4 	bl	800c82c <__assert_func>
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	e7ee      	b.n	800b6a8 <__lshift+0x1c>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f100 0114 	add.w	r1, r0, #20
 800b6d0:	f100 0210 	add.w	r2, r0, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4553      	cmp	r3, sl
 800b6d8:	db33      	blt.n	800b742 <__lshift+0xb6>
 800b6da:	6920      	ldr	r0, [r4, #16]
 800b6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6e0:	f104 0314 	add.w	r3, r4, #20
 800b6e4:	f019 091f 	ands.w	r9, r9, #31
 800b6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6f0:	d02b      	beq.n	800b74a <__lshift+0xbe>
 800b6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6f6:	468a      	mov	sl, r1
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b700:	4302      	orrs	r2, r0
 800b702:	f84a 2b04 	str.w	r2, [sl], #4
 800b706:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70a:	459c      	cmp	ip, r3
 800b70c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b710:	d8f3      	bhi.n	800b6fa <__lshift+0x6e>
 800b712:	ebac 0304 	sub.w	r3, ip, r4
 800b716:	3b15      	subs	r3, #21
 800b718:	f023 0303 	bic.w	r3, r3, #3
 800b71c:	3304      	adds	r3, #4
 800b71e:	f104 0015 	add.w	r0, r4, #21
 800b722:	4584      	cmp	ip, r0
 800b724:	bf38      	it	cc
 800b726:	2304      	movcc	r3, #4
 800b728:	50ca      	str	r2, [r1, r3]
 800b72a:	b10a      	cbz	r2, 800b730 <__lshift+0xa4>
 800b72c:	f108 0602 	add.w	r6, r8, #2
 800b730:	3e01      	subs	r6, #1
 800b732:	4638      	mov	r0, r7
 800b734:	612e      	str	r6, [r5, #16]
 800b736:	4621      	mov	r1, r4
 800b738:	f7ff fd8c 	bl	800b254 <_Bfree>
 800b73c:	4628      	mov	r0, r5
 800b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b742:	f842 0f04 	str.w	r0, [r2, #4]!
 800b746:	3301      	adds	r3, #1
 800b748:	e7c5      	b.n	800b6d6 <__lshift+0x4a>
 800b74a:	3904      	subs	r1, #4
 800b74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b750:	f841 2f04 	str.w	r2, [r1, #4]!
 800b754:	459c      	cmp	ip, r3
 800b756:	d8f9      	bhi.n	800b74c <__lshift+0xc0>
 800b758:	e7ea      	b.n	800b730 <__lshift+0xa4>
 800b75a:	bf00      	nop
 800b75c:	0800d59c 	.word	0x0800d59c
 800b760:	0800d62c 	.word	0x0800d62c

0800b764 <__mcmp>:
 800b764:	b530      	push	{r4, r5, lr}
 800b766:	6902      	ldr	r2, [r0, #16]
 800b768:	690c      	ldr	r4, [r1, #16]
 800b76a:	1b12      	subs	r2, r2, r4
 800b76c:	d10e      	bne.n	800b78c <__mcmp+0x28>
 800b76e:	f100 0314 	add.w	r3, r0, #20
 800b772:	3114      	adds	r1, #20
 800b774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b77c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b784:	42a5      	cmp	r5, r4
 800b786:	d003      	beq.n	800b790 <__mcmp+0x2c>
 800b788:	d305      	bcc.n	800b796 <__mcmp+0x32>
 800b78a:	2201      	movs	r2, #1
 800b78c:	4610      	mov	r0, r2
 800b78e:	bd30      	pop	{r4, r5, pc}
 800b790:	4283      	cmp	r3, r0
 800b792:	d3f3      	bcc.n	800b77c <__mcmp+0x18>
 800b794:	e7fa      	b.n	800b78c <__mcmp+0x28>
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	e7f7      	b.n	800b78c <__mcmp+0x28>

0800b79c <__mdiff>:
 800b79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4617      	mov	r7, r2
 800b7aa:	f7ff ffdb 	bl	800b764 <__mcmp>
 800b7ae:	1e05      	subs	r5, r0, #0
 800b7b0:	d110      	bne.n	800b7d4 <__mdiff+0x38>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff fd0d 	bl	800b1d4 <_Balloc>
 800b7ba:	b930      	cbnz	r0, 800b7ca <__mdiff+0x2e>
 800b7bc:	4b39      	ldr	r3, [pc, #228]	; (800b8a4 <__mdiff+0x108>)
 800b7be:	4602      	mov	r2, r0
 800b7c0:	f240 2132 	movw	r1, #562	; 0x232
 800b7c4:	4838      	ldr	r0, [pc, #224]	; (800b8a8 <__mdiff+0x10c>)
 800b7c6:	f001 f831 	bl	800c82c <__assert_func>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	bfa4      	itt	ge
 800b7d6:	463b      	movge	r3, r7
 800b7d8:	4627      	movge	r7, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	bfa6      	itte	ge
 800b7e0:	461c      	movge	r4, r3
 800b7e2:	2500      	movge	r5, #0
 800b7e4:	2501      	movlt	r5, #1
 800b7e6:	f7ff fcf5 	bl	800b1d4 <_Balloc>
 800b7ea:	b920      	cbnz	r0, 800b7f6 <__mdiff+0x5a>
 800b7ec:	4b2d      	ldr	r3, [pc, #180]	; (800b8a4 <__mdiff+0x108>)
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7f4:	e7e6      	b.n	800b7c4 <__mdiff+0x28>
 800b7f6:	693e      	ldr	r6, [r7, #16]
 800b7f8:	60c5      	str	r5, [r0, #12]
 800b7fa:	6925      	ldr	r5, [r4, #16]
 800b7fc:	f107 0114 	add.w	r1, r7, #20
 800b800:	f104 0914 	add.w	r9, r4, #20
 800b804:	f100 0e14 	add.w	lr, r0, #20
 800b808:	f107 0210 	add.w	r2, r7, #16
 800b80c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b810:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b814:	46f2      	mov	sl, lr
 800b816:	2700      	movs	r7, #0
 800b818:	f859 3b04 	ldr.w	r3, [r9], #4
 800b81c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b820:	fa1f f883 	uxth.w	r8, r3
 800b824:	fa17 f78b 	uxtah	r7, r7, fp
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	eba7 0808 	sub.w	r8, r7, r8
 800b82e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b832:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b836:	fa1f f888 	uxth.w	r8, r8
 800b83a:	141f      	asrs	r7, r3, #16
 800b83c:	454d      	cmp	r5, r9
 800b83e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b842:	f84a 3b04 	str.w	r3, [sl], #4
 800b846:	d8e7      	bhi.n	800b818 <__mdiff+0x7c>
 800b848:	1b2b      	subs	r3, r5, r4
 800b84a:	3b15      	subs	r3, #21
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	3304      	adds	r3, #4
 800b852:	3415      	adds	r4, #21
 800b854:	42a5      	cmp	r5, r4
 800b856:	bf38      	it	cc
 800b858:	2304      	movcc	r3, #4
 800b85a:	4419      	add	r1, r3
 800b85c:	4473      	add	r3, lr
 800b85e:	469e      	mov	lr, r3
 800b860:	460d      	mov	r5, r1
 800b862:	4565      	cmp	r5, ip
 800b864:	d30e      	bcc.n	800b884 <__mdiff+0xe8>
 800b866:	f10c 0203 	add.w	r2, ip, #3
 800b86a:	1a52      	subs	r2, r2, r1
 800b86c:	f022 0203 	bic.w	r2, r2, #3
 800b870:	3903      	subs	r1, #3
 800b872:	458c      	cmp	ip, r1
 800b874:	bf38      	it	cc
 800b876:	2200      	movcc	r2, #0
 800b878:	441a      	add	r2, r3
 800b87a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b87e:	b17b      	cbz	r3, 800b8a0 <__mdiff+0x104>
 800b880:	6106      	str	r6, [r0, #16]
 800b882:	e7a5      	b.n	800b7d0 <__mdiff+0x34>
 800b884:	f855 8b04 	ldr.w	r8, [r5], #4
 800b888:	fa17 f488 	uxtah	r4, r7, r8
 800b88c:	1422      	asrs	r2, r4, #16
 800b88e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b892:	b2a4      	uxth	r4, r4
 800b894:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b898:	f84e 4b04 	str.w	r4, [lr], #4
 800b89c:	1417      	asrs	r7, r2, #16
 800b89e:	e7e0      	b.n	800b862 <__mdiff+0xc6>
 800b8a0:	3e01      	subs	r6, #1
 800b8a2:	e7ea      	b.n	800b87a <__mdiff+0xde>
 800b8a4:	0800d59c 	.word	0x0800d59c
 800b8a8:	0800d62c 	.word	0x0800d62c

0800b8ac <__ulp>:
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	ed8d 0b00 	vstr	d0, [sp]
 800b8b2:	9b01      	ldr	r3, [sp, #4]
 800b8b4:	4912      	ldr	r1, [pc, #72]	; (800b900 <__ulp+0x54>)
 800b8b6:	4019      	ands	r1, r3
 800b8b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	dd05      	ble.n	800b8cc <__ulp+0x20>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	ec43 2b10 	vmov	d0, r2, r3
 800b8c8:	b002      	add	sp, #8
 800b8ca:	4770      	bx	lr
 800b8cc:	4249      	negs	r1, r1
 800b8ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8d6:	f04f 0200 	mov.w	r2, #0
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	da04      	bge.n	800b8ea <__ulp+0x3e>
 800b8e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8e4:	fa41 f300 	asr.w	r3, r1, r0
 800b8e8:	e7ec      	b.n	800b8c4 <__ulp+0x18>
 800b8ea:	f1a0 0114 	sub.w	r1, r0, #20
 800b8ee:	291e      	cmp	r1, #30
 800b8f0:	bfda      	itte	le
 800b8f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8f6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8fa:	2101      	movgt	r1, #1
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	e7e1      	b.n	800b8c4 <__ulp+0x18>
 800b900:	7ff00000 	.word	0x7ff00000

0800b904 <__b2d>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	6905      	ldr	r5, [r0, #16]
 800b908:	f100 0714 	add.w	r7, r0, #20
 800b90c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b910:	1f2e      	subs	r6, r5, #4
 800b912:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b916:	4620      	mov	r0, r4
 800b918:	f7ff fd52 	bl	800b3c0 <__hi0bits>
 800b91c:	f1c0 0320 	rsb	r3, r0, #32
 800b920:	280a      	cmp	r0, #10
 800b922:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b9a0 <__b2d+0x9c>
 800b926:	600b      	str	r3, [r1, #0]
 800b928:	dc14      	bgt.n	800b954 <__b2d+0x50>
 800b92a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b92e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b932:	42b7      	cmp	r7, r6
 800b934:	ea41 030c 	orr.w	r3, r1, ip
 800b938:	bf34      	ite	cc
 800b93a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b93e:	2100      	movcs	r1, #0
 800b940:	3015      	adds	r0, #21
 800b942:	fa04 f000 	lsl.w	r0, r4, r0
 800b946:	fa21 f10e 	lsr.w	r1, r1, lr
 800b94a:	ea40 0201 	orr.w	r2, r0, r1
 800b94e:	ec43 2b10 	vmov	d0, r2, r3
 800b952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b954:	42b7      	cmp	r7, r6
 800b956:	bf3a      	itte	cc
 800b958:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b95c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b960:	2100      	movcs	r1, #0
 800b962:	380b      	subs	r0, #11
 800b964:	d017      	beq.n	800b996 <__b2d+0x92>
 800b966:	f1c0 0c20 	rsb	ip, r0, #32
 800b96a:	fa04 f500 	lsl.w	r5, r4, r0
 800b96e:	42be      	cmp	r6, r7
 800b970:	fa21 f40c 	lsr.w	r4, r1, ip
 800b974:	ea45 0504 	orr.w	r5, r5, r4
 800b978:	bf8c      	ite	hi
 800b97a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b97e:	2400      	movls	r4, #0
 800b980:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b984:	fa01 f000 	lsl.w	r0, r1, r0
 800b988:	fa24 f40c 	lsr.w	r4, r4, ip
 800b98c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b990:	ea40 0204 	orr.w	r2, r0, r4
 800b994:	e7db      	b.n	800b94e <__b2d+0x4a>
 800b996:	ea44 030c 	orr.w	r3, r4, ip
 800b99a:	460a      	mov	r2, r1
 800b99c:	e7d7      	b.n	800b94e <__b2d+0x4a>
 800b99e:	bf00      	nop
 800b9a0:	3ff00000 	.word	0x3ff00000

0800b9a4 <__d2b>:
 800b9a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9a8:	4689      	mov	r9, r1
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	ec57 6b10 	vmov	r6, r7, d0
 800b9b0:	4690      	mov	r8, r2
 800b9b2:	f7ff fc0f 	bl	800b1d4 <_Balloc>
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	b930      	cbnz	r0, 800b9c8 <__d2b+0x24>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	4b25      	ldr	r3, [pc, #148]	; (800ba54 <__d2b+0xb0>)
 800b9be:	4826      	ldr	r0, [pc, #152]	; (800ba58 <__d2b+0xb4>)
 800b9c0:	f240 310a 	movw	r1, #778	; 0x30a
 800b9c4:	f000 ff32 	bl	800c82c <__assert_func>
 800b9c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9d0:	bb35      	cbnz	r5, 800ba20 <__d2b+0x7c>
 800b9d2:	2e00      	cmp	r6, #0
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	d028      	beq.n	800ba2a <__d2b+0x86>
 800b9d8:	4668      	mov	r0, sp
 800b9da:	9600      	str	r6, [sp, #0]
 800b9dc:	f7ff fd10 	bl	800b400 <__lo0bits>
 800b9e0:	9900      	ldr	r1, [sp, #0]
 800b9e2:	b300      	cbz	r0, 800ba26 <__d2b+0x82>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	f1c0 0320 	rsb	r3, r0, #32
 800b9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	40c2      	lsrs	r2, r0
 800b9f2:	6163      	str	r3, [r4, #20]
 800b9f4:	9201      	str	r2, [sp, #4]
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	61a3      	str	r3, [r4, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	bf14      	ite	ne
 800b9fe:	2202      	movne	r2, #2
 800ba00:	2201      	moveq	r2, #1
 800ba02:	6122      	str	r2, [r4, #16]
 800ba04:	b1d5      	cbz	r5, 800ba3c <__d2b+0x98>
 800ba06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba0a:	4405      	add	r5, r0
 800ba0c:	f8c9 5000 	str.w	r5, [r9]
 800ba10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba14:	f8c8 0000 	str.w	r0, [r8]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	b003      	add	sp, #12
 800ba1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba24:	e7d5      	b.n	800b9d2 <__d2b+0x2e>
 800ba26:	6161      	str	r1, [r4, #20]
 800ba28:	e7e5      	b.n	800b9f6 <__d2b+0x52>
 800ba2a:	a801      	add	r0, sp, #4
 800ba2c:	f7ff fce8 	bl	800b400 <__lo0bits>
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	6163      	str	r3, [r4, #20]
 800ba34:	2201      	movs	r2, #1
 800ba36:	6122      	str	r2, [r4, #16]
 800ba38:	3020      	adds	r0, #32
 800ba3a:	e7e3      	b.n	800ba04 <__d2b+0x60>
 800ba3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba44:	f8c9 0000 	str.w	r0, [r9]
 800ba48:	6918      	ldr	r0, [r3, #16]
 800ba4a:	f7ff fcb9 	bl	800b3c0 <__hi0bits>
 800ba4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba52:	e7df      	b.n	800ba14 <__d2b+0x70>
 800ba54:	0800d59c 	.word	0x0800d59c
 800ba58:	0800d62c 	.word	0x0800d62c

0800ba5c <__ratio>:
 800ba5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	468a      	mov	sl, r1
 800ba62:	4669      	mov	r1, sp
 800ba64:	4683      	mov	fp, r0
 800ba66:	f7ff ff4d 	bl	800b904 <__b2d>
 800ba6a:	a901      	add	r1, sp, #4
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	ec59 8b10 	vmov	r8, r9, d0
 800ba72:	ee10 6a10 	vmov	r6, s0
 800ba76:	f7ff ff45 	bl	800b904 <__b2d>
 800ba7a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ba7e:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ba82:	eba3 0c02 	sub.w	ip, r3, r2
 800ba86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba8a:	1a9b      	subs	r3, r3, r2
 800ba8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba90:	ec55 4b10 	vmov	r4, r5, d0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	ee10 0a10 	vmov	r0, s0
 800ba9a:	bfce      	itee	gt
 800ba9c:	464a      	movgt	r2, r9
 800ba9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800baa2:	462a      	movle	r2, r5
 800baa4:	464f      	mov	r7, r9
 800baa6:	4629      	mov	r1, r5
 800baa8:	bfcc      	ite	gt
 800baaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800baae:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bab2:	ec47 6b17 	vmov	d7, r6, r7
 800bab6:	ec41 0b16 	vmov	d6, r0, r1
 800baba:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bac4 <__copybits>:
 800bac4:	3901      	subs	r1, #1
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	1149      	asrs	r1, r1, #5
 800baca:	6914      	ldr	r4, [r2, #16]
 800bacc:	3101      	adds	r1, #1
 800bace:	f102 0314 	add.w	r3, r2, #20
 800bad2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bada:	1f05      	subs	r5, r0, #4
 800badc:	42a3      	cmp	r3, r4
 800bade:	d30c      	bcc.n	800bafa <__copybits+0x36>
 800bae0:	1aa3      	subs	r3, r4, r2
 800bae2:	3b11      	subs	r3, #17
 800bae4:	f023 0303 	bic.w	r3, r3, #3
 800bae8:	3211      	adds	r2, #17
 800baea:	42a2      	cmp	r2, r4
 800baec:	bf88      	it	hi
 800baee:	2300      	movhi	r3, #0
 800baf0:	4418      	add	r0, r3
 800baf2:	2300      	movs	r3, #0
 800baf4:	4288      	cmp	r0, r1
 800baf6:	d305      	bcc.n	800bb04 <__copybits+0x40>
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	f853 6b04 	ldr.w	r6, [r3], #4
 800bafe:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb02:	e7eb      	b.n	800badc <__copybits+0x18>
 800bb04:	f840 3b04 	str.w	r3, [r0], #4
 800bb08:	e7f4      	b.n	800baf4 <__copybits+0x30>

0800bb0a <__any_on>:
 800bb0a:	f100 0214 	add.w	r2, r0, #20
 800bb0e:	6900      	ldr	r0, [r0, #16]
 800bb10:	114b      	asrs	r3, r1, #5
 800bb12:	4298      	cmp	r0, r3
 800bb14:	b510      	push	{r4, lr}
 800bb16:	db11      	blt.n	800bb3c <__any_on+0x32>
 800bb18:	dd0a      	ble.n	800bb30 <__any_on+0x26>
 800bb1a:	f011 011f 	ands.w	r1, r1, #31
 800bb1e:	d007      	beq.n	800bb30 <__any_on+0x26>
 800bb20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb24:	fa24 f001 	lsr.w	r0, r4, r1
 800bb28:	fa00 f101 	lsl.w	r1, r0, r1
 800bb2c:	428c      	cmp	r4, r1
 800bb2e:	d10b      	bne.n	800bb48 <__any_on+0x3e>
 800bb30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d803      	bhi.n	800bb40 <__any_on+0x36>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	bd10      	pop	{r4, pc}
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	e7f7      	b.n	800bb30 <__any_on+0x26>
 800bb40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb44:	2900      	cmp	r1, #0
 800bb46:	d0f5      	beq.n	800bb34 <__any_on+0x2a>
 800bb48:	2001      	movs	r0, #1
 800bb4a:	e7f6      	b.n	800bb3a <__any_on+0x30>

0800bb4c <_calloc_r>:
 800bb4c:	b513      	push	{r0, r1, r4, lr}
 800bb4e:	434a      	muls	r2, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	9201      	str	r2, [sp, #4]
 800bb54:	f000 f85a 	bl	800bc0c <_malloc_r>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	b118      	cbz	r0, 800bb64 <_calloc_r+0x18>
 800bb5c:	9a01      	ldr	r2, [sp, #4]
 800bb5e:	2100      	movs	r1, #0
 800bb60:	f7fc fc04 	bl	800836c <memset>
 800bb64:	4620      	mov	r0, r4
 800bb66:	b002      	add	sp, #8
 800bb68:	bd10      	pop	{r4, pc}
	...

0800bb6c <_free_r>:
 800bb6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d048      	beq.n	800bc04 <_free_r+0x98>
 800bb72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb76:	9001      	str	r0, [sp, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb7e:	bfb8      	it	lt
 800bb80:	18e4      	addlt	r4, r4, r3
 800bb82:	f001 f857 	bl	800cc34 <__malloc_lock>
 800bb86:	4a20      	ldr	r2, [pc, #128]	; (800bc08 <_free_r+0x9c>)
 800bb88:	9801      	ldr	r0, [sp, #4]
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	4615      	mov	r5, r2
 800bb8e:	b933      	cbnz	r3, 800bb9e <_free_r+0x32>
 800bb90:	6063      	str	r3, [r4, #4]
 800bb92:	6014      	str	r4, [r2, #0]
 800bb94:	b003      	add	sp, #12
 800bb96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb9a:	f001 b851 	b.w	800cc40 <__malloc_unlock>
 800bb9e:	42a3      	cmp	r3, r4
 800bba0:	d90b      	bls.n	800bbba <_free_r+0x4e>
 800bba2:	6821      	ldr	r1, [r4, #0]
 800bba4:	1862      	adds	r2, r4, r1
 800bba6:	4293      	cmp	r3, r2
 800bba8:	bf04      	itt	eq
 800bbaa:	681a      	ldreq	r2, [r3, #0]
 800bbac:	685b      	ldreq	r3, [r3, #4]
 800bbae:	6063      	str	r3, [r4, #4]
 800bbb0:	bf04      	itt	eq
 800bbb2:	1852      	addeq	r2, r2, r1
 800bbb4:	6022      	streq	r2, [r4, #0]
 800bbb6:	602c      	str	r4, [r5, #0]
 800bbb8:	e7ec      	b.n	800bb94 <_free_r+0x28>
 800bbba:	461a      	mov	r2, r3
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	b10b      	cbz	r3, 800bbc4 <_free_r+0x58>
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d9fa      	bls.n	800bbba <_free_r+0x4e>
 800bbc4:	6811      	ldr	r1, [r2, #0]
 800bbc6:	1855      	adds	r5, r2, r1
 800bbc8:	42a5      	cmp	r5, r4
 800bbca:	d10b      	bne.n	800bbe4 <_free_r+0x78>
 800bbcc:	6824      	ldr	r4, [r4, #0]
 800bbce:	4421      	add	r1, r4
 800bbd0:	1854      	adds	r4, r2, r1
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	6011      	str	r1, [r2, #0]
 800bbd6:	d1dd      	bne.n	800bb94 <_free_r+0x28>
 800bbd8:	681c      	ldr	r4, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	6053      	str	r3, [r2, #4]
 800bbde:	4421      	add	r1, r4
 800bbe0:	6011      	str	r1, [r2, #0]
 800bbe2:	e7d7      	b.n	800bb94 <_free_r+0x28>
 800bbe4:	d902      	bls.n	800bbec <_free_r+0x80>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	e7d3      	b.n	800bb94 <_free_r+0x28>
 800bbec:	6825      	ldr	r5, [r4, #0]
 800bbee:	1961      	adds	r1, r4, r5
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf04      	itt	eq
 800bbf4:	6819      	ldreq	r1, [r3, #0]
 800bbf6:	685b      	ldreq	r3, [r3, #4]
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	bf04      	itt	eq
 800bbfc:	1949      	addeq	r1, r1, r5
 800bbfe:	6021      	streq	r1, [r4, #0]
 800bc00:	6054      	str	r4, [r2, #4]
 800bc02:	e7c7      	b.n	800bb94 <_free_r+0x28>
 800bc04:	b003      	add	sp, #12
 800bc06:	bd30      	pop	{r4, r5, pc}
 800bc08:	2000024c 	.word	0x2000024c

0800bc0c <_malloc_r>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	1ccd      	adds	r5, r1, #3
 800bc10:	f025 0503 	bic.w	r5, r5, #3
 800bc14:	3508      	adds	r5, #8
 800bc16:	2d0c      	cmp	r5, #12
 800bc18:	bf38      	it	cc
 800bc1a:	250c      	movcc	r5, #12
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	4606      	mov	r6, r0
 800bc20:	db01      	blt.n	800bc26 <_malloc_r+0x1a>
 800bc22:	42a9      	cmp	r1, r5
 800bc24:	d903      	bls.n	800bc2e <_malloc_r+0x22>
 800bc26:	230c      	movs	r3, #12
 800bc28:	6033      	str	r3, [r6, #0]
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc2e:	f001 f801 	bl	800cc34 <__malloc_lock>
 800bc32:	4921      	ldr	r1, [pc, #132]	; (800bcb8 <_malloc_r+0xac>)
 800bc34:	680a      	ldr	r2, [r1, #0]
 800bc36:	4614      	mov	r4, r2
 800bc38:	b99c      	cbnz	r4, 800bc62 <_malloc_r+0x56>
 800bc3a:	4f20      	ldr	r7, [pc, #128]	; (800bcbc <_malloc_r+0xb0>)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	b923      	cbnz	r3, 800bc4a <_malloc_r+0x3e>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	f000 fcd0 	bl	800c5e8 <_sbrk_r>
 800bc48:	6038      	str	r0, [r7, #0]
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f000 fccb 	bl	800c5e8 <_sbrk_r>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d123      	bne.n	800bc9e <_malloc_r+0x92>
 800bc56:	230c      	movs	r3, #12
 800bc58:	6033      	str	r3, [r6, #0]
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f000 fff0 	bl	800cc40 <__malloc_unlock>
 800bc60:	e7e3      	b.n	800bc2a <_malloc_r+0x1e>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	1b5b      	subs	r3, r3, r5
 800bc66:	d417      	bmi.n	800bc98 <_malloc_r+0x8c>
 800bc68:	2b0b      	cmp	r3, #11
 800bc6a:	d903      	bls.n	800bc74 <_malloc_r+0x68>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	441c      	add	r4, r3
 800bc70:	6025      	str	r5, [r4, #0]
 800bc72:	e004      	b.n	800bc7e <_malloc_r+0x72>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	42a2      	cmp	r2, r4
 800bc78:	bf0c      	ite	eq
 800bc7a:	600b      	streq	r3, [r1, #0]
 800bc7c:	6053      	strne	r3, [r2, #4]
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f000 ffde 	bl	800cc40 <__malloc_unlock>
 800bc84:	f104 000b 	add.w	r0, r4, #11
 800bc88:	1d23      	adds	r3, r4, #4
 800bc8a:	f020 0007 	bic.w	r0, r0, #7
 800bc8e:	1ac2      	subs	r2, r0, r3
 800bc90:	d0cc      	beq.n	800bc2c <_malloc_r+0x20>
 800bc92:	1a1b      	subs	r3, r3, r0
 800bc94:	50a3      	str	r3, [r4, r2]
 800bc96:	e7c9      	b.n	800bc2c <_malloc_r+0x20>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	6864      	ldr	r4, [r4, #4]
 800bc9c:	e7cc      	b.n	800bc38 <_malloc_r+0x2c>
 800bc9e:	1cc4      	adds	r4, r0, #3
 800bca0:	f024 0403 	bic.w	r4, r4, #3
 800bca4:	42a0      	cmp	r0, r4
 800bca6:	d0e3      	beq.n	800bc70 <_malloc_r+0x64>
 800bca8:	1a21      	subs	r1, r4, r0
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f000 fc9c 	bl	800c5e8 <_sbrk_r>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d1dd      	bne.n	800bc70 <_malloc_r+0x64>
 800bcb4:	e7cf      	b.n	800bc56 <_malloc_r+0x4a>
 800bcb6:	bf00      	nop
 800bcb8:	2000024c 	.word	0x2000024c
 800bcbc:	20000250 	.word	0x20000250

0800bcc0 <__ssputs_r>:
 800bcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc4:	688e      	ldr	r6, [r1, #8]
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	4682      	mov	sl, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4690      	mov	r8, r2
 800bcce:	461f      	mov	r7, r3
 800bcd0:	d838      	bhi.n	800bd44 <__ssputs_r+0x84>
 800bcd2:	898a      	ldrh	r2, [r1, #12]
 800bcd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcd8:	d032      	beq.n	800bd40 <__ssputs_r+0x80>
 800bcda:	6825      	ldr	r5, [r4, #0]
 800bcdc:	6909      	ldr	r1, [r1, #16]
 800bcde:	eba5 0901 	sub.w	r9, r5, r1
 800bce2:	6965      	ldr	r5, [r4, #20]
 800bce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcec:	3301      	adds	r3, #1
 800bcee:	444b      	add	r3, r9
 800bcf0:	106d      	asrs	r5, r5, #1
 800bcf2:	429d      	cmp	r5, r3
 800bcf4:	bf38      	it	cc
 800bcf6:	461d      	movcc	r5, r3
 800bcf8:	0553      	lsls	r3, r2, #21
 800bcfa:	d531      	bpl.n	800bd60 <__ssputs_r+0xa0>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7ff ff85 	bl	800bc0c <_malloc_r>
 800bd02:	4606      	mov	r6, r0
 800bd04:	b950      	cbnz	r0, 800bd1c <__ssputs_r+0x5c>
 800bd06:	230c      	movs	r3, #12
 800bd08:	f8ca 3000 	str.w	r3, [sl]
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1c:	6921      	ldr	r1, [r4, #16]
 800bd1e:	464a      	mov	r2, r9
 800bd20:	f7fc fb16 	bl	8008350 <memcpy>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	6126      	str	r6, [r4, #16]
 800bd32:	6165      	str	r5, [r4, #20]
 800bd34:	444e      	add	r6, r9
 800bd36:	eba5 0509 	sub.w	r5, r5, r9
 800bd3a:	6026      	str	r6, [r4, #0]
 800bd3c:	60a5      	str	r5, [r4, #8]
 800bd3e:	463e      	mov	r6, r7
 800bd40:	42be      	cmp	r6, r7
 800bd42:	d900      	bls.n	800bd46 <__ssputs_r+0x86>
 800bd44:	463e      	mov	r6, r7
 800bd46:	4632      	mov	r2, r6
 800bd48:	6820      	ldr	r0, [r4, #0]
 800bd4a:	4641      	mov	r1, r8
 800bd4c:	f000 ff58 	bl	800cc00 <memmove>
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	1b9b      	subs	r3, r3, r6
 800bd56:	4432      	add	r2, r6
 800bd58:	60a3      	str	r3, [r4, #8]
 800bd5a:	6022      	str	r2, [r4, #0]
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7db      	b.n	800bd18 <__ssputs_r+0x58>
 800bd60:	462a      	mov	r2, r5
 800bd62:	f000 ff73 	bl	800cc4c <_realloc_r>
 800bd66:	4606      	mov	r6, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1e1      	bne.n	800bd30 <__ssputs_r+0x70>
 800bd6c:	6921      	ldr	r1, [r4, #16]
 800bd6e:	4650      	mov	r0, sl
 800bd70:	f7ff fefc 	bl	800bb6c <_free_r>
 800bd74:	e7c7      	b.n	800bd06 <__ssputs_r+0x46>
	...

0800bd78 <_svfiprintf_r>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	4698      	mov	r8, r3
 800bd7e:	898b      	ldrh	r3, [r1, #12]
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	b09d      	sub	sp, #116	; 0x74
 800bd84:	4607      	mov	r7, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	4614      	mov	r4, r2
 800bd8a:	d50e      	bpl.n	800bdaa <_svfiprintf_r+0x32>
 800bd8c:	690b      	ldr	r3, [r1, #16]
 800bd8e:	b963      	cbnz	r3, 800bdaa <_svfiprintf_r+0x32>
 800bd90:	2140      	movs	r1, #64	; 0x40
 800bd92:	f7ff ff3b 	bl	800bc0c <_malloc_r>
 800bd96:	6028      	str	r0, [r5, #0]
 800bd98:	6128      	str	r0, [r5, #16]
 800bd9a:	b920      	cbnz	r0, 800bda6 <_svfiprintf_r+0x2e>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	e0d1      	b.n	800bf4a <_svfiprintf_r+0x1d2>
 800bda6:	2340      	movs	r3, #64	; 0x40
 800bda8:	616b      	str	r3, [r5, #20]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9309      	str	r3, [sp, #36]	; 0x24
 800bdae:	2320      	movs	r3, #32
 800bdb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb8:	2330      	movs	r3, #48	; 0x30
 800bdba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf64 <_svfiprintf_r+0x1ec>
 800bdbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdc2:	f04f 0901 	mov.w	r9, #1
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	469a      	mov	sl, r3
 800bdca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdce:	b10a      	cbz	r2, 800bdd4 <_svfiprintf_r+0x5c>
 800bdd0:	2a25      	cmp	r2, #37	; 0x25
 800bdd2:	d1f9      	bne.n	800bdc8 <_svfiprintf_r+0x50>
 800bdd4:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd8:	d00b      	beq.n	800bdf2 <_svfiprintf_r+0x7a>
 800bdda:	465b      	mov	r3, fp
 800bddc:	4622      	mov	r2, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff ff6d 	bl	800bcc0 <__ssputs_r>
 800bde6:	3001      	adds	r0, #1
 800bde8:	f000 80aa 	beq.w	800bf40 <_svfiprintf_r+0x1c8>
 800bdec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdee:	445a      	add	r2, fp
 800bdf0:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80a2 	beq.w	800bf40 <_svfiprintf_r+0x1c8>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800be02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be06:	f10a 0a01 	add.w	sl, sl, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be12:	931a      	str	r3, [sp, #104]	; 0x68
 800be14:	4654      	mov	r4, sl
 800be16:	2205      	movs	r2, #5
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	4851      	ldr	r0, [pc, #324]	; (800bf64 <_svfiprintf_r+0x1ec>)
 800be1e:	f7f4 fa17 	bl	8000250 <memchr>
 800be22:	9a04      	ldr	r2, [sp, #16]
 800be24:	b9d8      	cbnz	r0, 800be5e <_svfiprintf_r+0xe6>
 800be26:	06d0      	lsls	r0, r2, #27
 800be28:	bf44      	itt	mi
 800be2a:	2320      	movmi	r3, #32
 800be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be30:	0711      	lsls	r1, r2, #28
 800be32:	bf44      	itt	mi
 800be34:	232b      	movmi	r3, #43	; 0x2b
 800be36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be3a:	f89a 3000 	ldrb.w	r3, [sl]
 800be3e:	2b2a      	cmp	r3, #42	; 0x2a
 800be40:	d015      	beq.n	800be6e <_svfiprintf_r+0xf6>
 800be42:	9a07      	ldr	r2, [sp, #28]
 800be44:	4654      	mov	r4, sl
 800be46:	2000      	movs	r0, #0
 800be48:	f04f 0c0a 	mov.w	ip, #10
 800be4c:	4621      	mov	r1, r4
 800be4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be52:	3b30      	subs	r3, #48	; 0x30
 800be54:	2b09      	cmp	r3, #9
 800be56:	d94e      	bls.n	800bef6 <_svfiprintf_r+0x17e>
 800be58:	b1b0      	cbz	r0, 800be88 <_svfiprintf_r+0x110>
 800be5a:	9207      	str	r2, [sp, #28]
 800be5c:	e014      	b.n	800be88 <_svfiprintf_r+0x110>
 800be5e:	eba0 0308 	sub.w	r3, r0, r8
 800be62:	fa09 f303 	lsl.w	r3, r9, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	46a2      	mov	sl, r4
 800be6c:	e7d2      	b.n	800be14 <_svfiprintf_r+0x9c>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	1d19      	adds	r1, r3, #4
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	9103      	str	r1, [sp, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfbb      	ittet	lt
 800be7a:	425b      	neglt	r3, r3
 800be7c:	f042 0202 	orrlt.w	r2, r2, #2
 800be80:	9307      	strge	r3, [sp, #28]
 800be82:	9307      	strlt	r3, [sp, #28]
 800be84:	bfb8      	it	lt
 800be86:	9204      	strlt	r2, [sp, #16]
 800be88:	7823      	ldrb	r3, [r4, #0]
 800be8a:	2b2e      	cmp	r3, #46	; 0x2e
 800be8c:	d10c      	bne.n	800bea8 <_svfiprintf_r+0x130>
 800be8e:	7863      	ldrb	r3, [r4, #1]
 800be90:	2b2a      	cmp	r3, #42	; 0x2a
 800be92:	d135      	bne.n	800bf00 <_svfiprintf_r+0x188>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	9203      	str	r2, [sp, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bfb8      	it	lt
 800bea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bea4:	3402      	adds	r4, #2
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf74 <_svfiprintf_r+0x1fc>
 800beac:	7821      	ldrb	r1, [r4, #0]
 800beae:	2203      	movs	r2, #3
 800beb0:	4650      	mov	r0, sl
 800beb2:	f7f4 f9cd 	bl	8000250 <memchr>
 800beb6:	b140      	cbz	r0, 800beca <_svfiprintf_r+0x152>
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	eba0 000a 	sub.w	r0, r0, sl
 800bebe:	fa03 f000 	lsl.w	r0, r3, r0
 800bec2:	9b04      	ldr	r3, [sp, #16]
 800bec4:	4303      	orrs	r3, r0
 800bec6:	3401      	adds	r4, #1
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4826      	ldr	r0, [pc, #152]	; (800bf68 <_svfiprintf_r+0x1f0>)
 800bed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bed4:	2206      	movs	r2, #6
 800bed6:	f7f4 f9bb 	bl	8000250 <memchr>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d038      	beq.n	800bf50 <_svfiprintf_r+0x1d8>
 800bede:	4b23      	ldr	r3, [pc, #140]	; (800bf6c <_svfiprintf_r+0x1f4>)
 800bee0:	bb1b      	cbnz	r3, 800bf2a <_svfiprintf_r+0x1b2>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	3307      	adds	r3, #7
 800bee6:	f023 0307 	bic.w	r3, r3, #7
 800beea:	3308      	adds	r3, #8
 800beec:	9303      	str	r3, [sp, #12]
 800beee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef0:	4433      	add	r3, r6
 800bef2:	9309      	str	r3, [sp, #36]	; 0x24
 800bef4:	e767      	b.n	800bdc6 <_svfiprintf_r+0x4e>
 800bef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800befa:	460c      	mov	r4, r1
 800befc:	2001      	movs	r0, #1
 800befe:	e7a5      	b.n	800be4c <_svfiprintf_r+0xd4>
 800bf00:	2300      	movs	r3, #0
 800bf02:	3401      	adds	r4, #1
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	4619      	mov	r1, r3
 800bf08:	f04f 0c0a 	mov.w	ip, #10
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf12:	3a30      	subs	r2, #48	; 0x30
 800bf14:	2a09      	cmp	r2, #9
 800bf16:	d903      	bls.n	800bf20 <_svfiprintf_r+0x1a8>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d0c5      	beq.n	800bea8 <_svfiprintf_r+0x130>
 800bf1c:	9105      	str	r1, [sp, #20]
 800bf1e:	e7c3      	b.n	800bea8 <_svfiprintf_r+0x130>
 800bf20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf24:	4604      	mov	r4, r0
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7f0      	b.n	800bf0c <_svfiprintf_r+0x194>
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <_svfiprintf_r+0x1f8>)
 800bf32:	a904      	add	r1, sp, #16
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7fc fab3 	bl	80084a0 <_printf_float>
 800bf3a:	1c42      	adds	r2, r0, #1
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	d1d6      	bne.n	800beee <_svfiprintf_r+0x176>
 800bf40:	89ab      	ldrh	r3, [r5, #12]
 800bf42:	065b      	lsls	r3, r3, #25
 800bf44:	f53f af2c 	bmi.w	800bda0 <_svfiprintf_r+0x28>
 800bf48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf4a:	b01d      	add	sp, #116	; 0x74
 800bf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf50:	ab03      	add	r3, sp, #12
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	462a      	mov	r2, r5
 800bf56:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <_svfiprintf_r+0x1f8>)
 800bf58:	a904      	add	r1, sp, #16
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7fc fd2c 	bl	80089b8 <_printf_i>
 800bf60:	e7eb      	b.n	800bf3a <_svfiprintf_r+0x1c2>
 800bf62:	bf00      	nop
 800bf64:	0800d78c 	.word	0x0800d78c
 800bf68:	0800d796 	.word	0x0800d796
 800bf6c:	080084a1 	.word	0x080084a1
 800bf70:	0800bcc1 	.word	0x0800bcc1
 800bf74:	0800d792 	.word	0x0800d792

0800bf78 <_sungetc_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	1c4b      	adds	r3, r1, #1
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	d103      	bne.n	800bf88 <_sungetc_r+0x10>
 800bf80:	f04f 35ff 	mov.w	r5, #4294967295
 800bf84:	4628      	mov	r0, r5
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	8993      	ldrh	r3, [r2, #12]
 800bf8a:	f023 0320 	bic.w	r3, r3, #32
 800bf8e:	8193      	strh	r3, [r2, #12]
 800bf90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf92:	6852      	ldr	r2, [r2, #4]
 800bf94:	b2cd      	uxtb	r5, r1
 800bf96:	b18b      	cbz	r3, 800bfbc <_sungetc_r+0x44>
 800bf98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	dd08      	ble.n	800bfb0 <_sungetc_r+0x38>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	1e5a      	subs	r2, r3, #1
 800bfa2:	6022      	str	r2, [r4, #0]
 800bfa4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bfa8:	6863      	ldr	r3, [r4, #4]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	6063      	str	r3, [r4, #4]
 800bfae:	e7e9      	b.n	800bf84 <_sungetc_r+0xc>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	f000 fbf3 	bl	800c79c <__submore>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d0f1      	beq.n	800bf9e <_sungetc_r+0x26>
 800bfba:	e7e1      	b.n	800bf80 <_sungetc_r+0x8>
 800bfbc:	6921      	ldr	r1, [r4, #16]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	b151      	cbz	r1, 800bfd8 <_sungetc_r+0x60>
 800bfc2:	4299      	cmp	r1, r3
 800bfc4:	d208      	bcs.n	800bfd8 <_sungetc_r+0x60>
 800bfc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bfca:	42a9      	cmp	r1, r5
 800bfcc:	d104      	bne.n	800bfd8 <_sungetc_r+0x60>
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	3201      	adds	r2, #1
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	6062      	str	r2, [r4, #4]
 800bfd6:	e7d5      	b.n	800bf84 <_sungetc_r+0xc>
 800bfd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfe0:	6363      	str	r3, [r4, #52]	; 0x34
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bfe6:	4623      	mov	r3, r4
 800bfe8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	2301      	movs	r3, #1
 800bff0:	e7dc      	b.n	800bfac <_sungetc_r+0x34>

0800bff2 <__ssrefill_r>:
 800bff2:	b510      	push	{r4, lr}
 800bff4:	460c      	mov	r4, r1
 800bff6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bff8:	b169      	cbz	r1, 800c016 <__ssrefill_r+0x24>
 800bffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bffe:	4299      	cmp	r1, r3
 800c000:	d001      	beq.n	800c006 <__ssrefill_r+0x14>
 800c002:	f7ff fdb3 	bl	800bb6c <_free_r>
 800c006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c008:	6063      	str	r3, [r4, #4]
 800c00a:	2000      	movs	r0, #0
 800c00c:	6360      	str	r0, [r4, #52]	; 0x34
 800c00e:	b113      	cbz	r3, 800c016 <__ssrefill_r+0x24>
 800c010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	bd10      	pop	{r4, pc}
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	2300      	movs	r3, #0
 800c01c:	6063      	str	r3, [r4, #4]
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	e7f3      	b.n	800c014 <__ssrefill_r+0x22>

0800c02c <__ssvfiscanf_r>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	460c      	mov	r4, r1
 800c032:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c036:	2100      	movs	r1, #0
 800c038:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c03c:	49b2      	ldr	r1, [pc, #712]	; (800c308 <__ssvfiscanf_r+0x2dc>)
 800c03e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c040:	f10d 0804 	add.w	r8, sp, #4
 800c044:	49b1      	ldr	r1, [pc, #708]	; (800c30c <__ssvfiscanf_r+0x2e0>)
 800c046:	4fb2      	ldr	r7, [pc, #712]	; (800c310 <__ssvfiscanf_r+0x2e4>)
 800c048:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c314 <__ssvfiscanf_r+0x2e8>
 800c04c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c050:	4606      	mov	r6, r0
 800c052:	91a1      	str	r1, [sp, #644]	; 0x284
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	f892 a000 	ldrb.w	sl, [r2]
 800c05a:	f1ba 0f00 	cmp.w	sl, #0
 800c05e:	f000 8151 	beq.w	800c304 <__ssvfiscanf_r+0x2d8>
 800c062:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c066:	f013 0308 	ands.w	r3, r3, #8
 800c06a:	f102 0501 	add.w	r5, r2, #1
 800c06e:	d019      	beq.n	800c0a4 <__ssvfiscanf_r+0x78>
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dd0f      	ble.n	800c096 <__ssvfiscanf_r+0x6a>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	5cba      	ldrb	r2, [r7, r2]
 800c07c:	0712      	lsls	r2, r2, #28
 800c07e:	d401      	bmi.n	800c084 <__ssvfiscanf_r+0x58>
 800c080:	462a      	mov	r2, r5
 800c082:	e7e8      	b.n	800c056 <__ssvfiscanf_r+0x2a>
 800c084:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c086:	3201      	adds	r2, #1
 800c088:	9245      	str	r2, [sp, #276]	; 0x114
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	3301      	adds	r3, #1
 800c08e:	3a01      	subs	r2, #1
 800c090:	6062      	str	r2, [r4, #4]
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	e7ec      	b.n	800c070 <__ssvfiscanf_r+0x44>
 800c096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c098:	4621      	mov	r1, r4
 800c09a:	4630      	mov	r0, r6
 800c09c:	4798      	blx	r3
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d0e9      	beq.n	800c076 <__ssvfiscanf_r+0x4a>
 800c0a2:	e7ed      	b.n	800c080 <__ssvfiscanf_r+0x54>
 800c0a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c0a8:	f040 8083 	bne.w	800c1b2 <__ssvfiscanf_r+0x186>
 800c0ac:	9341      	str	r3, [sp, #260]	; 0x104
 800c0ae:	9343      	str	r3, [sp, #268]	; 0x10c
 800c0b0:	7853      	ldrb	r3, [r2, #1]
 800c0b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0b4:	bf02      	ittt	eq
 800c0b6:	2310      	moveq	r3, #16
 800c0b8:	1c95      	addeq	r5, r2, #2
 800c0ba:	9341      	streq	r3, [sp, #260]	; 0x104
 800c0bc:	220a      	movs	r2, #10
 800c0be:	46ab      	mov	fp, r5
 800c0c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c0c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c0c8:	2b09      	cmp	r3, #9
 800c0ca:	d91d      	bls.n	800c108 <__ssvfiscanf_r+0xdc>
 800c0cc:	4891      	ldr	r0, [pc, #580]	; (800c314 <__ssvfiscanf_r+0x2e8>)
 800c0ce:	2203      	movs	r2, #3
 800c0d0:	f7f4 f8be 	bl	8000250 <memchr>
 800c0d4:	b140      	cbz	r0, 800c0e8 <__ssvfiscanf_r+0xbc>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	eba0 0009 	sub.w	r0, r0, r9
 800c0dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c0e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0e2:	4318      	orrs	r0, r3
 800c0e4:	9041      	str	r0, [sp, #260]	; 0x104
 800c0e6:	465d      	mov	r5, fp
 800c0e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c0ec:	2b78      	cmp	r3, #120	; 0x78
 800c0ee:	d806      	bhi.n	800c0fe <__ssvfiscanf_r+0xd2>
 800c0f0:	2b57      	cmp	r3, #87	; 0x57
 800c0f2:	d810      	bhi.n	800c116 <__ssvfiscanf_r+0xea>
 800c0f4:	2b25      	cmp	r3, #37	; 0x25
 800c0f6:	d05c      	beq.n	800c1b2 <__ssvfiscanf_r+0x186>
 800c0f8:	d856      	bhi.n	800c1a8 <__ssvfiscanf_r+0x17c>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d074      	beq.n	800c1e8 <__ssvfiscanf_r+0x1bc>
 800c0fe:	2303      	movs	r3, #3
 800c100:	9347      	str	r3, [sp, #284]	; 0x11c
 800c102:	230a      	movs	r3, #10
 800c104:	9342      	str	r3, [sp, #264]	; 0x108
 800c106:	e081      	b.n	800c20c <__ssvfiscanf_r+0x1e0>
 800c108:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c10a:	fb02 1303 	mla	r3, r2, r3, r1
 800c10e:	3b30      	subs	r3, #48	; 0x30
 800c110:	9343      	str	r3, [sp, #268]	; 0x10c
 800c112:	465d      	mov	r5, fp
 800c114:	e7d3      	b.n	800c0be <__ssvfiscanf_r+0x92>
 800c116:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c11a:	2a20      	cmp	r2, #32
 800c11c:	d8ef      	bhi.n	800c0fe <__ssvfiscanf_r+0xd2>
 800c11e:	a101      	add	r1, pc, #4	; (adr r1, 800c124 <__ssvfiscanf_r+0xf8>)
 800c120:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c124:	0800c1f7 	.word	0x0800c1f7
 800c128:	0800c0ff 	.word	0x0800c0ff
 800c12c:	0800c0ff 	.word	0x0800c0ff
 800c130:	0800c255 	.word	0x0800c255
 800c134:	0800c0ff 	.word	0x0800c0ff
 800c138:	0800c0ff 	.word	0x0800c0ff
 800c13c:	0800c0ff 	.word	0x0800c0ff
 800c140:	0800c0ff 	.word	0x0800c0ff
 800c144:	0800c0ff 	.word	0x0800c0ff
 800c148:	0800c0ff 	.word	0x0800c0ff
 800c14c:	0800c0ff 	.word	0x0800c0ff
 800c150:	0800c26b 	.word	0x0800c26b
 800c154:	0800c241 	.word	0x0800c241
 800c158:	0800c1af 	.word	0x0800c1af
 800c15c:	0800c1af 	.word	0x0800c1af
 800c160:	0800c1af 	.word	0x0800c1af
 800c164:	0800c0ff 	.word	0x0800c0ff
 800c168:	0800c245 	.word	0x0800c245
 800c16c:	0800c0ff 	.word	0x0800c0ff
 800c170:	0800c0ff 	.word	0x0800c0ff
 800c174:	0800c0ff 	.word	0x0800c0ff
 800c178:	0800c0ff 	.word	0x0800c0ff
 800c17c:	0800c27b 	.word	0x0800c27b
 800c180:	0800c24d 	.word	0x0800c24d
 800c184:	0800c1ef 	.word	0x0800c1ef
 800c188:	0800c0ff 	.word	0x0800c0ff
 800c18c:	0800c0ff 	.word	0x0800c0ff
 800c190:	0800c277 	.word	0x0800c277
 800c194:	0800c0ff 	.word	0x0800c0ff
 800c198:	0800c241 	.word	0x0800c241
 800c19c:	0800c0ff 	.word	0x0800c0ff
 800c1a0:	0800c0ff 	.word	0x0800c0ff
 800c1a4:	0800c1f7 	.word	0x0800c1f7
 800c1a8:	3b45      	subs	r3, #69	; 0x45
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d8a7      	bhi.n	800c0fe <__ssvfiscanf_r+0xd2>
 800c1ae:	2305      	movs	r3, #5
 800c1b0:	e02b      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c1b2:	6863      	ldr	r3, [r4, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd0d      	ble.n	800c1d4 <__ssvfiscanf_r+0x1a8>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	4552      	cmp	r2, sl
 800c1be:	f040 80a1 	bne.w	800c304 <__ssvfiscanf_r+0x2d8>
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	6862      	ldr	r2, [r4, #4]
 800c1c6:	6023      	str	r3, [r4, #0]
 800c1c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1ca:	3a01      	subs	r2, #1
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	6062      	str	r2, [r4, #4]
 800c1d0:	9345      	str	r3, [sp, #276]	; 0x114
 800c1d2:	e755      	b.n	800c080 <__ssvfiscanf_r+0x54>
 800c1d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4630      	mov	r0, r6
 800c1da:	4798      	blx	r3
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d0eb      	beq.n	800c1b8 <__ssvfiscanf_r+0x18c>
 800c1e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f040 8084 	bne.w	800c2f0 <__ssvfiscanf_r+0x2c4>
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ec:	e086      	b.n	800c2fc <__ssvfiscanf_r+0x2d0>
 800c1ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c1f0:	f042 0220 	orr.w	r2, r2, #32
 800c1f4:	9241      	str	r2, [sp, #260]	; 0x104
 800c1f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c1f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1fc:	9241      	str	r2, [sp, #260]	; 0x104
 800c1fe:	2210      	movs	r2, #16
 800c200:	2b6f      	cmp	r3, #111	; 0x6f
 800c202:	9242      	str	r2, [sp, #264]	; 0x108
 800c204:	bf34      	ite	cc
 800c206:	2303      	movcc	r3, #3
 800c208:	2304      	movcs	r3, #4
 800c20a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c20c:	6863      	ldr	r3, [r4, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd41      	ble.n	800c296 <__ssvfiscanf_r+0x26a>
 800c212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c214:	0659      	lsls	r1, r3, #25
 800c216:	d404      	bmi.n	800c222 <__ssvfiscanf_r+0x1f6>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	5cba      	ldrb	r2, [r7, r2]
 800c21e:	0712      	lsls	r2, r2, #28
 800c220:	d440      	bmi.n	800c2a4 <__ssvfiscanf_r+0x278>
 800c222:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c224:	2b02      	cmp	r3, #2
 800c226:	dc4f      	bgt.n	800c2c8 <__ssvfiscanf_r+0x29c>
 800c228:	466b      	mov	r3, sp
 800c22a:	4622      	mov	r2, r4
 800c22c:	a941      	add	r1, sp, #260	; 0x104
 800c22e:	4630      	mov	r0, r6
 800c230:	f000 f874 	bl	800c31c <_scanf_chars>
 800c234:	2801      	cmp	r0, #1
 800c236:	d065      	beq.n	800c304 <__ssvfiscanf_r+0x2d8>
 800c238:	2802      	cmp	r0, #2
 800c23a:	f47f af21 	bne.w	800c080 <__ssvfiscanf_r+0x54>
 800c23e:	e7cf      	b.n	800c1e0 <__ssvfiscanf_r+0x1b4>
 800c240:	220a      	movs	r2, #10
 800c242:	e7dd      	b.n	800c200 <__ssvfiscanf_r+0x1d4>
 800c244:	2300      	movs	r3, #0
 800c246:	9342      	str	r3, [sp, #264]	; 0x108
 800c248:	2303      	movs	r3, #3
 800c24a:	e7de      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c24c:	2308      	movs	r3, #8
 800c24e:	9342      	str	r3, [sp, #264]	; 0x108
 800c250:	2304      	movs	r3, #4
 800c252:	e7da      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c254:	4629      	mov	r1, r5
 800c256:	4640      	mov	r0, r8
 800c258:	f000 f9d6 	bl	800c608 <__sccl>
 800c25c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c262:	9341      	str	r3, [sp, #260]	; 0x104
 800c264:	4605      	mov	r5, r0
 800c266:	2301      	movs	r3, #1
 800c268:	e7cf      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c26a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c270:	9341      	str	r3, [sp, #260]	; 0x104
 800c272:	2300      	movs	r3, #0
 800c274:	e7c9      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c276:	2302      	movs	r3, #2
 800c278:	e7c7      	b.n	800c20a <__ssvfiscanf_r+0x1de>
 800c27a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c27c:	06c3      	lsls	r3, r0, #27
 800c27e:	f53f aeff 	bmi.w	800c080 <__ssvfiscanf_r+0x54>
 800c282:	9b00      	ldr	r3, [sp, #0]
 800c284:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c286:	1d19      	adds	r1, r3, #4
 800c288:	9100      	str	r1, [sp, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	07c0      	lsls	r0, r0, #31
 800c28e:	bf4c      	ite	mi
 800c290:	801a      	strhmi	r2, [r3, #0]
 800c292:	601a      	strpl	r2, [r3, #0]
 800c294:	e6f4      	b.n	800c080 <__ssvfiscanf_r+0x54>
 800c296:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c298:	4621      	mov	r1, r4
 800c29a:	4630      	mov	r0, r6
 800c29c:	4798      	blx	r3
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d0b7      	beq.n	800c212 <__ssvfiscanf_r+0x1e6>
 800c2a2:	e79d      	b.n	800c1e0 <__ssvfiscanf_r+0x1b4>
 800c2a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2a6:	3201      	adds	r2, #1
 800c2a8:	9245      	str	r2, [sp, #276]	; 0x114
 800c2aa:	6862      	ldr	r2, [r4, #4]
 800c2ac:	3a01      	subs	r2, #1
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	6062      	str	r2, [r4, #4]
 800c2b2:	dd02      	ble.n	800c2ba <__ssvfiscanf_r+0x28e>
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	e7ae      	b.n	800c218 <__ssvfiscanf_r+0x1ec>
 800c2ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4798      	blx	r3
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0a8      	beq.n	800c218 <__ssvfiscanf_r+0x1ec>
 800c2c6:	e78b      	b.n	800c1e0 <__ssvfiscanf_r+0x1b4>
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	dc06      	bgt.n	800c2da <__ssvfiscanf_r+0x2ae>
 800c2cc:	466b      	mov	r3, sp
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	a941      	add	r1, sp, #260	; 0x104
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 f87a 	bl	800c3cc <_scanf_i>
 800c2d8:	e7ac      	b.n	800c234 <__ssvfiscanf_r+0x208>
 800c2da:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <__ssvfiscanf_r+0x2ec>)
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f43f aecf 	beq.w	800c080 <__ssvfiscanf_r+0x54>
 800c2e2:	466b      	mov	r3, sp
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	a941      	add	r1, sp, #260	; 0x104
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f7fc fc8b 	bl	8008c04 <_scanf_float>
 800c2ee:	e7a1      	b.n	800c234 <__ssvfiscanf_r+0x208>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c2f6:	bf18      	it	ne
 800c2f8:	f04f 30ff 	movne.w	r0, #4294967295
 800c2fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c304:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c306:	e7f9      	b.n	800c2fc <__ssvfiscanf_r+0x2d0>
 800c308:	0800bf79 	.word	0x0800bf79
 800c30c:	0800bff3 	.word	0x0800bff3
 800c310:	0800d419 	.word	0x0800d419
 800c314:	0800d792 	.word	0x0800d792
 800c318:	08008c05 	.word	0x08008c05

0800c31c <_scanf_chars>:
 800c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c320:	4615      	mov	r5, r2
 800c322:	688a      	ldr	r2, [r1, #8]
 800c324:	4680      	mov	r8, r0
 800c326:	460c      	mov	r4, r1
 800c328:	b932      	cbnz	r2, 800c338 <_scanf_chars+0x1c>
 800c32a:	698a      	ldr	r2, [r1, #24]
 800c32c:	2a00      	cmp	r2, #0
 800c32e:	bf0c      	ite	eq
 800c330:	2201      	moveq	r2, #1
 800c332:	f04f 32ff 	movne.w	r2, #4294967295
 800c336:	608a      	str	r2, [r1, #8]
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c3c8 <_scanf_chars+0xac>
 800c33e:	06d1      	lsls	r1, r2, #27
 800c340:	bf5f      	itttt	pl
 800c342:	681a      	ldrpl	r2, [r3, #0]
 800c344:	1d11      	addpl	r1, r2, #4
 800c346:	6019      	strpl	r1, [r3, #0]
 800c348:	6816      	ldrpl	r6, [r2, #0]
 800c34a:	2700      	movs	r7, #0
 800c34c:	69a0      	ldr	r0, [r4, #24]
 800c34e:	b188      	cbz	r0, 800c374 <_scanf_chars+0x58>
 800c350:	2801      	cmp	r0, #1
 800c352:	d107      	bne.n	800c364 <_scanf_chars+0x48>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	6963      	ldr	r3, [r4, #20]
 800c35a:	5c9b      	ldrb	r3, [r3, r2]
 800c35c:	b953      	cbnz	r3, 800c374 <_scanf_chars+0x58>
 800c35e:	bb27      	cbnz	r7, 800c3aa <_scanf_chars+0x8e>
 800c360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c364:	2802      	cmp	r0, #2
 800c366:	d120      	bne.n	800c3aa <_scanf_chars+0x8e>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c370:	071b      	lsls	r3, r3, #28
 800c372:	d41a      	bmi.n	800c3aa <_scanf_chars+0x8e>
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	06da      	lsls	r2, r3, #27
 800c378:	bf5e      	ittt	pl
 800c37a:	682b      	ldrpl	r3, [r5, #0]
 800c37c:	781b      	ldrbpl	r3, [r3, #0]
 800c37e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c382:	682a      	ldr	r2, [r5, #0]
 800c384:	686b      	ldr	r3, [r5, #4]
 800c386:	3201      	adds	r2, #1
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	68a2      	ldr	r2, [r4, #8]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	3a01      	subs	r2, #1
 800c390:	606b      	str	r3, [r5, #4]
 800c392:	3701      	adds	r7, #1
 800c394:	60a2      	str	r2, [r4, #8]
 800c396:	b142      	cbz	r2, 800c3aa <_scanf_chars+0x8e>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	dcd7      	bgt.n	800c34c <_scanf_chars+0x30>
 800c39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	4798      	blx	r3
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d0d0      	beq.n	800c34c <_scanf_chars+0x30>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f013 0310 	ands.w	r3, r3, #16
 800c3b0:	d105      	bne.n	800c3be <_scanf_chars+0xa2>
 800c3b2:	68e2      	ldr	r2, [r4, #12]
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	60e2      	str	r2, [r4, #12]
 800c3b8:	69a2      	ldr	r2, [r4, #24]
 800c3ba:	b102      	cbz	r2, 800c3be <_scanf_chars+0xa2>
 800c3bc:	7033      	strb	r3, [r6, #0]
 800c3be:	6923      	ldr	r3, [r4, #16]
 800c3c0:	441f      	add	r7, r3
 800c3c2:	6127      	str	r7, [r4, #16]
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7cb      	b.n	800c360 <_scanf_chars+0x44>
 800c3c8:	0800d419 	.word	0x0800d419

0800c3cc <_scanf_i>:
 800c3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d0:	4698      	mov	r8, r3
 800c3d2:	4b74      	ldr	r3, [pc, #464]	; (800c5a4 <_scanf_i+0x1d8>)
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	4616      	mov	r6, r2
 800c3da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	ab03      	add	r3, sp, #12
 800c3e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3e6:	4b70      	ldr	r3, [pc, #448]	; (800c5a8 <_scanf_i+0x1dc>)
 800c3e8:	69a1      	ldr	r1, [r4, #24]
 800c3ea:	4a70      	ldr	r2, [pc, #448]	; (800c5ac <_scanf_i+0x1e0>)
 800c3ec:	2903      	cmp	r1, #3
 800c3ee:	bf18      	it	ne
 800c3f0:	461a      	movne	r2, r3
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	9201      	str	r2, [sp, #4]
 800c3f6:	1e5a      	subs	r2, r3, #1
 800c3f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c3fc:	bf88      	it	hi
 800c3fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c402:	4627      	mov	r7, r4
 800c404:	bf82      	ittt	hi
 800c406:	eb03 0905 	addhi.w	r9, r3, r5
 800c40a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c40e:	60a3      	strhi	r3, [r4, #8]
 800c410:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c414:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c418:	bf98      	it	ls
 800c41a:	f04f 0900 	movls.w	r9, #0
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	463d      	mov	r5, r7
 800c422:	f04f 0b00 	mov.w	fp, #0
 800c426:	6831      	ldr	r1, [r6, #0]
 800c428:	ab03      	add	r3, sp, #12
 800c42a:	7809      	ldrb	r1, [r1, #0]
 800c42c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c430:	2202      	movs	r2, #2
 800c432:	f7f3 ff0d 	bl	8000250 <memchr>
 800c436:	b328      	cbz	r0, 800c484 <_scanf_i+0xb8>
 800c438:	f1bb 0f01 	cmp.w	fp, #1
 800c43c:	d159      	bne.n	800c4f2 <_scanf_i+0x126>
 800c43e:	6862      	ldr	r2, [r4, #4]
 800c440:	b92a      	cbnz	r2, 800c44e <_scanf_i+0x82>
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	2308      	movs	r3, #8
 800c446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c44a:	6063      	str	r3, [r4, #4]
 800c44c:	6022      	str	r2, [r4, #0]
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c454:	6022      	str	r2, [r4, #0]
 800c456:	68a2      	ldr	r2, [r4, #8]
 800c458:	1e51      	subs	r1, r2, #1
 800c45a:	60a1      	str	r1, [r4, #8]
 800c45c:	b192      	cbz	r2, 800c484 <_scanf_i+0xb8>
 800c45e:	6832      	ldr	r2, [r6, #0]
 800c460:	1c51      	adds	r1, r2, #1
 800c462:	6031      	str	r1, [r6, #0]
 800c464:	7812      	ldrb	r2, [r2, #0]
 800c466:	f805 2b01 	strb.w	r2, [r5], #1
 800c46a:	6872      	ldr	r2, [r6, #4]
 800c46c:	3a01      	subs	r2, #1
 800c46e:	2a00      	cmp	r2, #0
 800c470:	6072      	str	r2, [r6, #4]
 800c472:	dc07      	bgt.n	800c484 <_scanf_i+0xb8>
 800c474:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c478:	4631      	mov	r1, r6
 800c47a:	4650      	mov	r0, sl
 800c47c:	4790      	blx	r2
 800c47e:	2800      	cmp	r0, #0
 800c480:	f040 8085 	bne.w	800c58e <_scanf_i+0x1c2>
 800c484:	f10b 0b01 	add.w	fp, fp, #1
 800c488:	f1bb 0f03 	cmp.w	fp, #3
 800c48c:	d1cb      	bne.n	800c426 <_scanf_i+0x5a>
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	b90b      	cbnz	r3, 800c496 <_scanf_i+0xca>
 800c492:	230a      	movs	r3, #10
 800c494:	6063      	str	r3, [r4, #4]
 800c496:	6863      	ldr	r3, [r4, #4]
 800c498:	4945      	ldr	r1, [pc, #276]	; (800c5b0 <_scanf_i+0x1e4>)
 800c49a:	6960      	ldr	r0, [r4, #20]
 800c49c:	1ac9      	subs	r1, r1, r3
 800c49e:	f000 f8b3 	bl	800c608 <__sccl>
 800c4a2:	f04f 0b00 	mov.w	fp, #0
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	6822      	ldr	r2, [r4, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d03d      	beq.n	800c52a <_scanf_i+0x15e>
 800c4ae:	6831      	ldr	r1, [r6, #0]
 800c4b0:	6960      	ldr	r0, [r4, #20]
 800c4b2:	f891 c000 	ldrb.w	ip, [r1]
 800c4b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d035      	beq.n	800c52a <_scanf_i+0x15e>
 800c4be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c4c2:	d124      	bne.n	800c50e <_scanf_i+0x142>
 800c4c4:	0510      	lsls	r0, r2, #20
 800c4c6:	d522      	bpl.n	800c50e <_scanf_i+0x142>
 800c4c8:	f10b 0b01 	add.w	fp, fp, #1
 800c4cc:	f1b9 0f00 	cmp.w	r9, #0
 800c4d0:	d003      	beq.n	800c4da <_scanf_i+0x10e>
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4d8:	60a3      	str	r3, [r4, #8]
 800c4da:	6873      	ldr	r3, [r6, #4]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	6073      	str	r3, [r6, #4]
 800c4e2:	dd1b      	ble.n	800c51c <_scanf_i+0x150>
 800c4e4:	6833      	ldr	r3, [r6, #0]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	6033      	str	r3, [r6, #0]
 800c4ea:	68a3      	ldr	r3, [r4, #8]
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	60a3      	str	r3, [r4, #8]
 800c4f0:	e7d9      	b.n	800c4a6 <_scanf_i+0xda>
 800c4f2:	f1bb 0f02 	cmp.w	fp, #2
 800c4f6:	d1ae      	bne.n	800c456 <_scanf_i+0x8a>
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c4fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c502:	d1bf      	bne.n	800c484 <_scanf_i+0xb8>
 800c504:	2310      	movs	r3, #16
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c50c:	e7a2      	b.n	800c454 <_scanf_i+0x88>
 800c50e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c512:	6022      	str	r2, [r4, #0]
 800c514:	780b      	ldrb	r3, [r1, #0]
 800c516:	f805 3b01 	strb.w	r3, [r5], #1
 800c51a:	e7de      	b.n	800c4da <_scanf_i+0x10e>
 800c51c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c520:	4631      	mov	r1, r6
 800c522:	4650      	mov	r0, sl
 800c524:	4798      	blx	r3
 800c526:	2800      	cmp	r0, #0
 800c528:	d0df      	beq.n	800c4ea <_scanf_i+0x11e>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	05d9      	lsls	r1, r3, #23
 800c52e:	d50d      	bpl.n	800c54c <_scanf_i+0x180>
 800c530:	42bd      	cmp	r5, r7
 800c532:	d909      	bls.n	800c548 <_scanf_i+0x17c>
 800c534:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c53c:	4632      	mov	r2, r6
 800c53e:	4650      	mov	r0, sl
 800c540:	4798      	blx	r3
 800c542:	f105 39ff 	add.w	r9, r5, #4294967295
 800c546:	464d      	mov	r5, r9
 800c548:	42bd      	cmp	r5, r7
 800c54a:	d028      	beq.n	800c59e <_scanf_i+0x1d2>
 800c54c:	6822      	ldr	r2, [r4, #0]
 800c54e:	f012 0210 	ands.w	r2, r2, #16
 800c552:	d113      	bne.n	800c57c <_scanf_i+0x1b0>
 800c554:	702a      	strb	r2, [r5, #0]
 800c556:	6863      	ldr	r3, [r4, #4]
 800c558:	9e01      	ldr	r6, [sp, #4]
 800c55a:	4639      	mov	r1, r7
 800c55c:	4650      	mov	r0, sl
 800c55e:	47b0      	blx	r6
 800c560:	f8d8 3000 	ldr.w	r3, [r8]
 800c564:	6821      	ldr	r1, [r4, #0]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	f8c8 2000 	str.w	r2, [r8]
 800c56c:	f011 0f20 	tst.w	r1, #32
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	d00f      	beq.n	800c594 <_scanf_i+0x1c8>
 800c574:	6018      	str	r0, [r3, #0]
 800c576:	68e3      	ldr	r3, [r4, #12]
 800c578:	3301      	adds	r3, #1
 800c57a:	60e3      	str	r3, [r4, #12]
 800c57c:	1bed      	subs	r5, r5, r7
 800c57e:	44ab      	add	fp, r5
 800c580:	6925      	ldr	r5, [r4, #16]
 800c582:	445d      	add	r5, fp
 800c584:	6125      	str	r5, [r4, #16]
 800c586:	2000      	movs	r0, #0
 800c588:	b007      	add	sp, #28
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	f04f 0b00 	mov.w	fp, #0
 800c592:	e7ca      	b.n	800c52a <_scanf_i+0x15e>
 800c594:	07ca      	lsls	r2, r1, #31
 800c596:	bf4c      	ite	mi
 800c598:	8018      	strhmi	r0, [r3, #0]
 800c59a:	6018      	strpl	r0, [r3, #0]
 800c59c:	e7eb      	b.n	800c576 <_scanf_i+0x1aa>
 800c59e:	2001      	movs	r0, #1
 800c5a0:	e7f2      	b.n	800c588 <_scanf_i+0x1bc>
 800c5a2:	bf00      	nop
 800c5a4:	0800d364 	.word	0x0800d364
 800c5a8:	0800c799 	.word	0x0800c799
 800c5ac:	08009e31 	.word	0x08009e31
 800c5b0:	0800d7b6 	.word	0x0800d7b6

0800c5b4 <_read_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_read_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f6 f814 	bl	80025f0 <_read>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_read_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_read_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	200008c8 	.word	0x200008c8

0800c5d8 <nan>:
 800c5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c5e0 <nan+0x8>
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	00000000 	.word	0x00000000
 800c5e4:	7ff80000 	.word	0x7ff80000

0800c5e8 <_sbrk_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d06      	ldr	r5, [pc, #24]	; (800c604 <_sbrk_r+0x1c>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	f7f6 f86a 	bl	80026cc <_sbrk>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_sbrk_r+0x1a>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_sbrk_r+0x1a>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	200008c8 	.word	0x200008c8

0800c608 <__sccl>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	780b      	ldrb	r3, [r1, #0]
 800c60c:	4604      	mov	r4, r0
 800c60e:	2b5e      	cmp	r3, #94	; 0x5e
 800c610:	bf0b      	itete	eq
 800c612:	784b      	ldrbeq	r3, [r1, #1]
 800c614:	1c48      	addne	r0, r1, #1
 800c616:	1c88      	addeq	r0, r1, #2
 800c618:	2200      	movne	r2, #0
 800c61a:	bf08      	it	eq
 800c61c:	2201      	moveq	r2, #1
 800c61e:	1e61      	subs	r1, r4, #1
 800c620:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c624:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c628:	42a9      	cmp	r1, r5
 800c62a:	d1fb      	bne.n	800c624 <__sccl+0x1c>
 800c62c:	b90b      	cbnz	r3, 800c632 <__sccl+0x2a>
 800c62e:	3801      	subs	r0, #1
 800c630:	bd70      	pop	{r4, r5, r6, pc}
 800c632:	f082 0101 	eor.w	r1, r2, #1
 800c636:	54e1      	strb	r1, [r4, r3]
 800c638:	1c42      	adds	r2, r0, #1
 800c63a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c63e:	2d2d      	cmp	r5, #45	; 0x2d
 800c640:	f102 36ff 	add.w	r6, r2, #4294967295
 800c644:	4610      	mov	r0, r2
 800c646:	d006      	beq.n	800c656 <__sccl+0x4e>
 800c648:	2d5d      	cmp	r5, #93	; 0x5d
 800c64a:	d0f1      	beq.n	800c630 <__sccl+0x28>
 800c64c:	b90d      	cbnz	r5, 800c652 <__sccl+0x4a>
 800c64e:	4630      	mov	r0, r6
 800c650:	e7ee      	b.n	800c630 <__sccl+0x28>
 800c652:	462b      	mov	r3, r5
 800c654:	e7ef      	b.n	800c636 <__sccl+0x2e>
 800c656:	7816      	ldrb	r6, [r2, #0]
 800c658:	2e5d      	cmp	r6, #93	; 0x5d
 800c65a:	d0fa      	beq.n	800c652 <__sccl+0x4a>
 800c65c:	42b3      	cmp	r3, r6
 800c65e:	dcf8      	bgt.n	800c652 <__sccl+0x4a>
 800c660:	4618      	mov	r0, r3
 800c662:	3001      	adds	r0, #1
 800c664:	4286      	cmp	r6, r0
 800c666:	5421      	strb	r1, [r4, r0]
 800c668:	dcfb      	bgt.n	800c662 <__sccl+0x5a>
 800c66a:	43d8      	mvns	r0, r3
 800c66c:	4430      	add	r0, r6
 800c66e:	1c5d      	adds	r5, r3, #1
 800c670:	42b3      	cmp	r3, r6
 800c672:	bfa8      	it	ge
 800c674:	2000      	movge	r0, #0
 800c676:	182b      	adds	r3, r5, r0
 800c678:	3202      	adds	r2, #2
 800c67a:	e7de      	b.n	800c63a <__sccl+0x32>

0800c67c <strncmp>:
 800c67c:	b510      	push	{r4, lr}
 800c67e:	b16a      	cbz	r2, 800c69c <strncmp+0x20>
 800c680:	3901      	subs	r1, #1
 800c682:	1884      	adds	r4, r0, r2
 800c684:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c688:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d103      	bne.n	800c698 <strncmp+0x1c>
 800c690:	42a0      	cmp	r0, r4
 800c692:	d001      	beq.n	800c698 <strncmp+0x1c>
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1f5      	bne.n	800c684 <strncmp+0x8>
 800c698:	1a98      	subs	r0, r3, r2
 800c69a:	bd10      	pop	{r4, pc}
 800c69c:	4610      	mov	r0, r2
 800c69e:	e7fc      	b.n	800c69a <strncmp+0x1e>

0800c6a0 <_strtoul_l.isra.0>:
 800c6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	4e3b      	ldr	r6, [pc, #236]	; (800c794 <_strtoul_l.isra.0+0xf4>)
 800c6a6:	4686      	mov	lr, r0
 800c6a8:	468c      	mov	ip, r1
 800c6aa:	4660      	mov	r0, ip
 800c6ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c6b0:	5da5      	ldrb	r5, [r4, r6]
 800c6b2:	f015 0508 	ands.w	r5, r5, #8
 800c6b6:	d1f8      	bne.n	800c6aa <_strtoul_l.isra.0+0xa>
 800c6b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c6ba:	d134      	bne.n	800c726 <_strtoul_l.isra.0+0x86>
 800c6bc:	f89c 4000 	ldrb.w	r4, [ip]
 800c6c0:	f04f 0801 	mov.w	r8, #1
 800c6c4:	f100 0c02 	add.w	ip, r0, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d05e      	beq.n	800c78a <_strtoul_l.isra.0+0xea>
 800c6cc:	2b10      	cmp	r3, #16
 800c6ce:	d10c      	bne.n	800c6ea <_strtoul_l.isra.0+0x4a>
 800c6d0:	2c30      	cmp	r4, #48	; 0x30
 800c6d2:	d10a      	bne.n	800c6ea <_strtoul_l.isra.0+0x4a>
 800c6d4:	f89c 0000 	ldrb.w	r0, [ip]
 800c6d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c6dc:	2858      	cmp	r0, #88	; 0x58
 800c6de:	d14f      	bne.n	800c780 <_strtoul_l.isra.0+0xe0>
 800c6e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c6e4:	2310      	movs	r3, #16
 800c6e6:	f10c 0c02 	add.w	ip, ip, #2
 800c6ea:	f04f 37ff 	mov.w	r7, #4294967295
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	fbb7 f7f3 	udiv	r7, r7, r3
 800c6f4:	fb03 f907 	mul.w	r9, r3, r7
 800c6f8:	ea6f 0909 	mvn.w	r9, r9
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c702:	2e09      	cmp	r6, #9
 800c704:	d818      	bhi.n	800c738 <_strtoul_l.isra.0+0x98>
 800c706:	4634      	mov	r4, r6
 800c708:	42a3      	cmp	r3, r4
 800c70a:	dd24      	ble.n	800c756 <_strtoul_l.isra.0+0xb6>
 800c70c:	2d00      	cmp	r5, #0
 800c70e:	db1f      	blt.n	800c750 <_strtoul_l.isra.0+0xb0>
 800c710:	4287      	cmp	r7, r0
 800c712:	d31d      	bcc.n	800c750 <_strtoul_l.isra.0+0xb0>
 800c714:	d101      	bne.n	800c71a <_strtoul_l.isra.0+0x7a>
 800c716:	45a1      	cmp	r9, r4
 800c718:	db1a      	blt.n	800c750 <_strtoul_l.isra.0+0xb0>
 800c71a:	fb00 4003 	mla	r0, r0, r3, r4
 800c71e:	2501      	movs	r5, #1
 800c720:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c724:	e7eb      	b.n	800c6fe <_strtoul_l.isra.0+0x5e>
 800c726:	2c2b      	cmp	r4, #43	; 0x2b
 800c728:	bf08      	it	eq
 800c72a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c72e:	46a8      	mov	r8, r5
 800c730:	bf08      	it	eq
 800c732:	f100 0c02 	addeq.w	ip, r0, #2
 800c736:	e7c7      	b.n	800c6c8 <_strtoul_l.isra.0+0x28>
 800c738:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c73c:	2e19      	cmp	r6, #25
 800c73e:	d801      	bhi.n	800c744 <_strtoul_l.isra.0+0xa4>
 800c740:	3c37      	subs	r4, #55	; 0x37
 800c742:	e7e1      	b.n	800c708 <_strtoul_l.isra.0+0x68>
 800c744:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c748:	2e19      	cmp	r6, #25
 800c74a:	d804      	bhi.n	800c756 <_strtoul_l.isra.0+0xb6>
 800c74c:	3c57      	subs	r4, #87	; 0x57
 800c74e:	e7db      	b.n	800c708 <_strtoul_l.isra.0+0x68>
 800c750:	f04f 35ff 	mov.w	r5, #4294967295
 800c754:	e7e4      	b.n	800c720 <_strtoul_l.isra.0+0x80>
 800c756:	2d00      	cmp	r5, #0
 800c758:	da07      	bge.n	800c76a <_strtoul_l.isra.0+0xca>
 800c75a:	2322      	movs	r3, #34	; 0x22
 800c75c:	f8ce 3000 	str.w	r3, [lr]
 800c760:	f04f 30ff 	mov.w	r0, #4294967295
 800c764:	b942      	cbnz	r2, 800c778 <_strtoul_l.isra.0+0xd8>
 800c766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c76a:	f1b8 0f00 	cmp.w	r8, #0
 800c76e:	d000      	beq.n	800c772 <_strtoul_l.isra.0+0xd2>
 800c770:	4240      	negs	r0, r0
 800c772:	2a00      	cmp	r2, #0
 800c774:	d0f7      	beq.n	800c766 <_strtoul_l.isra.0+0xc6>
 800c776:	b10d      	cbz	r5, 800c77c <_strtoul_l.isra.0+0xdc>
 800c778:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c77c:	6011      	str	r1, [r2, #0]
 800c77e:	e7f2      	b.n	800c766 <_strtoul_l.isra.0+0xc6>
 800c780:	2430      	movs	r4, #48	; 0x30
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1b1      	bne.n	800c6ea <_strtoul_l.isra.0+0x4a>
 800c786:	2308      	movs	r3, #8
 800c788:	e7af      	b.n	800c6ea <_strtoul_l.isra.0+0x4a>
 800c78a:	2c30      	cmp	r4, #48	; 0x30
 800c78c:	d0a2      	beq.n	800c6d4 <_strtoul_l.isra.0+0x34>
 800c78e:	230a      	movs	r3, #10
 800c790:	e7ab      	b.n	800c6ea <_strtoul_l.isra.0+0x4a>
 800c792:	bf00      	nop
 800c794:	0800d419 	.word	0x0800d419

0800c798 <_strtoul_r>:
 800c798:	f7ff bf82 	b.w	800c6a0 <_strtoul_l.isra.0>

0800c79c <__submore>:
 800c79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	d11d      	bne.n	800c7e8 <__submore+0x4c>
 800c7ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c7b0:	f7ff fa2c 	bl	800bc0c <_malloc_r>
 800c7b4:	b918      	cbnz	r0, 800c7be <__submore+0x22>
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c2:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c7c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c7ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c7ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c7d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c7d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c7da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c7de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c7e2:	6020      	str	r0, [r4, #0]
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e7e8      	b.n	800c7ba <__submore+0x1e>
 800c7e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c7ea:	0077      	lsls	r7, r6, #1
 800c7ec:	463a      	mov	r2, r7
 800c7ee:	f000 fa2d 	bl	800cc4c <_realloc_r>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d0de      	beq.n	800c7b6 <__submore+0x1a>
 800c7f8:	eb00 0806 	add.w	r8, r0, r6
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4632      	mov	r2, r6
 800c800:	4640      	mov	r0, r8
 800c802:	f7fb fda5 	bl	8008350 <memcpy>
 800c806:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c80a:	f8c4 8000 	str.w	r8, [r4]
 800c80e:	e7e9      	b.n	800c7e4 <__submore+0x48>

0800c810 <__ascii_wctomb>:
 800c810:	b149      	cbz	r1, 800c826 <__ascii_wctomb+0x16>
 800c812:	2aff      	cmp	r2, #255	; 0xff
 800c814:	bf85      	ittet	hi
 800c816:	238a      	movhi	r3, #138	; 0x8a
 800c818:	6003      	strhi	r3, [r0, #0]
 800c81a:	700a      	strbls	r2, [r1, #0]
 800c81c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c820:	bf98      	it	ls
 800c822:	2001      	movls	r0, #1
 800c824:	4770      	bx	lr
 800c826:	4608      	mov	r0, r1
 800c828:	4770      	bx	lr
	...

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b14c      	cbz	r4, 800c850 <__assert_func+0x24>
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <__assert_func+0x30>)
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	4906      	ldr	r1, [pc, #24]	; (800c860 <__assert_func+0x34>)
 800c846:	462b      	mov	r3, r5
 800c848:	f000 f9a6 	bl	800cb98 <fiprintf>
 800c84c:	f000 fc3e 	bl	800d0cc <abort>
 800c850:	4b04      	ldr	r3, [pc, #16]	; (800c864 <__assert_func+0x38>)
 800c852:	461c      	mov	r4, r3
 800c854:	e7f3      	b.n	800c83e <__assert_func+0x12>
 800c856:	bf00      	nop
 800c858:	20000058 	.word	0x20000058
 800c85c:	0800d7b8 	.word	0x0800d7b8
 800c860:	0800d7c5 	.word	0x0800d7c5
 800c864:	0800d7f3 	.word	0x0800d7f3

0800c868 <__sflush_r>:
 800c868:	898a      	ldrh	r2, [r1, #12]
 800c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86e:	4605      	mov	r5, r0
 800c870:	0710      	lsls	r0, r2, #28
 800c872:	460c      	mov	r4, r1
 800c874:	d458      	bmi.n	800c928 <__sflush_r+0xc0>
 800c876:	684b      	ldr	r3, [r1, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc05      	bgt.n	800c888 <__sflush_r+0x20>
 800c87c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c87e:	2b00      	cmp	r3, #0
 800c880:	dc02      	bgt.n	800c888 <__sflush_r+0x20>
 800c882:	2000      	movs	r0, #0
 800c884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	d0f9      	beq.n	800c882 <__sflush_r+0x1a>
 800c88e:	2300      	movs	r3, #0
 800c890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c894:	682f      	ldr	r7, [r5, #0]
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	d032      	beq.n	800c900 <__sflush_r+0x98>
 800c89a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	075a      	lsls	r2, r3, #29
 800c8a0:	d505      	bpl.n	800c8ae <__sflush_r+0x46>
 800c8a2:	6863      	ldr	r3, [r4, #4]
 800c8a4:	1ac0      	subs	r0, r0, r3
 800c8a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8a8:	b10b      	cbz	r3, 800c8ae <__sflush_r+0x46>
 800c8aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ac:	1ac0      	subs	r0, r0, r3
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8b4:	6a21      	ldr	r1, [r4, #32]
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b0      	blx	r6
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	d106      	bne.n	800c8ce <__sflush_r+0x66>
 800c8c0:	6829      	ldr	r1, [r5, #0]
 800c8c2:	291d      	cmp	r1, #29
 800c8c4:	d82c      	bhi.n	800c920 <__sflush_r+0xb8>
 800c8c6:	4a2a      	ldr	r2, [pc, #168]	; (800c970 <__sflush_r+0x108>)
 800c8c8:	40ca      	lsrs	r2, r1
 800c8ca:	07d6      	lsls	r6, r2, #31
 800c8cc:	d528      	bpl.n	800c920 <__sflush_r+0xb8>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	6062      	str	r2, [r4, #4]
 800c8d2:	04d9      	lsls	r1, r3, #19
 800c8d4:	6922      	ldr	r2, [r4, #16]
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	d504      	bpl.n	800c8e4 <__sflush_r+0x7c>
 800c8da:	1c42      	adds	r2, r0, #1
 800c8dc:	d101      	bne.n	800c8e2 <__sflush_r+0x7a>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	b903      	cbnz	r3, 800c8e4 <__sflush_r+0x7c>
 800c8e2:	6560      	str	r0, [r4, #84]	; 0x54
 800c8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e6:	602f      	str	r7, [r5, #0]
 800c8e8:	2900      	cmp	r1, #0
 800c8ea:	d0ca      	beq.n	800c882 <__sflush_r+0x1a>
 800c8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	d002      	beq.n	800c8fa <__sflush_r+0x92>
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f7ff f939 	bl	800bb6c <_free_r>
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8fe:	e7c1      	b.n	800c884 <__sflush_r+0x1c>
 800c900:	6a21      	ldr	r1, [r4, #32]
 800c902:	2301      	movs	r3, #1
 800c904:	4628      	mov	r0, r5
 800c906:	47b0      	blx	r6
 800c908:	1c41      	adds	r1, r0, #1
 800c90a:	d1c7      	bne.n	800c89c <__sflush_r+0x34>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0c4      	beq.n	800c89c <__sflush_r+0x34>
 800c912:	2b1d      	cmp	r3, #29
 800c914:	d001      	beq.n	800c91a <__sflush_r+0xb2>
 800c916:	2b16      	cmp	r3, #22
 800c918:	d101      	bne.n	800c91e <__sflush_r+0xb6>
 800c91a:	602f      	str	r7, [r5, #0]
 800c91c:	e7b1      	b.n	800c882 <__sflush_r+0x1a>
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	e7ad      	b.n	800c884 <__sflush_r+0x1c>
 800c928:	690f      	ldr	r7, [r1, #16]
 800c92a:	2f00      	cmp	r7, #0
 800c92c:	d0a9      	beq.n	800c882 <__sflush_r+0x1a>
 800c92e:	0793      	lsls	r3, r2, #30
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	bf08      	it	eq
 800c934:	694b      	ldreq	r3, [r1, #20]
 800c936:	600f      	str	r7, [r1, #0]
 800c938:	bf18      	it	ne
 800c93a:	2300      	movne	r3, #0
 800c93c:	eba6 0807 	sub.w	r8, r6, r7
 800c940:	608b      	str	r3, [r1, #8]
 800c942:	f1b8 0f00 	cmp.w	r8, #0
 800c946:	dd9c      	ble.n	800c882 <__sflush_r+0x1a>
 800c948:	6a21      	ldr	r1, [r4, #32]
 800c94a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c94c:	4643      	mov	r3, r8
 800c94e:	463a      	mov	r2, r7
 800c950:	4628      	mov	r0, r5
 800c952:	47b0      	blx	r6
 800c954:	2800      	cmp	r0, #0
 800c956:	dc06      	bgt.n	800c966 <__sflush_r+0xfe>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95e:	81a3      	strh	r3, [r4, #12]
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	e78e      	b.n	800c884 <__sflush_r+0x1c>
 800c966:	4407      	add	r7, r0
 800c968:	eba8 0800 	sub.w	r8, r8, r0
 800c96c:	e7e9      	b.n	800c942 <__sflush_r+0xda>
 800c96e:	bf00      	nop
 800c970:	20400001 	.word	0x20400001

0800c974 <_fflush_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	690b      	ldr	r3, [r1, #16]
 800c978:	4605      	mov	r5, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	b913      	cbnz	r3, 800c984 <_fflush_r+0x10>
 800c97e:	2500      	movs	r5, #0
 800c980:	4628      	mov	r0, r5
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	b118      	cbz	r0, 800c98e <_fflush_r+0x1a>
 800c986:	6983      	ldr	r3, [r0, #24]
 800c988:	b90b      	cbnz	r3, 800c98e <_fflush_r+0x1a>
 800c98a:	f000 f887 	bl	800ca9c <__sinit>
 800c98e:	4b14      	ldr	r3, [pc, #80]	; (800c9e0 <_fflush_r+0x6c>)
 800c990:	429c      	cmp	r4, r3
 800c992:	d11b      	bne.n	800c9cc <_fflush_r+0x58>
 800c994:	686c      	ldr	r4, [r5, #4]
 800c996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0ef      	beq.n	800c97e <_fflush_r+0xa>
 800c99e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9a0:	07d0      	lsls	r0, r2, #31
 800c9a2:	d404      	bmi.n	800c9ae <_fflush_r+0x3a>
 800c9a4:	0599      	lsls	r1, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_fflush_r+0x3a>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9aa:	f000 f927 	bl	800cbfc <__retarget_lock_acquire_recursive>
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7ff ff59 	bl	800c868 <__sflush_r>
 800c9b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b8:	07da      	lsls	r2, r3, #31
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	d4e0      	bmi.n	800c980 <_fflush_r+0xc>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	059b      	lsls	r3, r3, #22
 800c9c2:	d4dd      	bmi.n	800c980 <_fflush_r+0xc>
 800c9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c6:	f000 f91a 	bl	800cbfe <__retarget_lock_release_recursive>
 800c9ca:	e7d9      	b.n	800c980 <_fflush_r+0xc>
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <_fflush_r+0x70>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d101      	bne.n	800c9d6 <_fflush_r+0x62>
 800c9d2:	68ac      	ldr	r4, [r5, #8]
 800c9d4:	e7df      	b.n	800c996 <_fflush_r+0x22>
 800c9d6:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <_fflush_r+0x74>)
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	bf08      	it	eq
 800c9dc:	68ec      	ldreq	r4, [r5, #12]
 800c9de:	e7da      	b.n	800c996 <_fflush_r+0x22>
 800c9e0:	0800d814 	.word	0x0800d814
 800c9e4:	0800d834 	.word	0x0800d834
 800c9e8:	0800d7f4 	.word	0x0800d7f4

0800c9ec <std>:
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9fa:	6083      	str	r3, [r0, #8]
 800c9fc:	8181      	strh	r1, [r0, #12]
 800c9fe:	6643      	str	r3, [r0, #100]	; 0x64
 800ca00:	81c2      	strh	r2, [r0, #14]
 800ca02:	6183      	str	r3, [r0, #24]
 800ca04:	4619      	mov	r1, r3
 800ca06:	2208      	movs	r2, #8
 800ca08:	305c      	adds	r0, #92	; 0x5c
 800ca0a:	f7fb fcaf 	bl	800836c <memset>
 800ca0e:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <std+0x38>)
 800ca10:	6263      	str	r3, [r4, #36]	; 0x24
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <std+0x3c>)
 800ca14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca16:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <std+0x40>)
 800ca18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca1a:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <std+0x44>)
 800ca1c:	6224      	str	r4, [r4, #32]
 800ca1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca20:	bd10      	pop	{r4, pc}
 800ca22:	bf00      	nop
 800ca24:	080090b1 	.word	0x080090b1
 800ca28:	080090d7 	.word	0x080090d7
 800ca2c:	0800910f 	.word	0x0800910f
 800ca30:	08009133 	.word	0x08009133

0800ca34 <_cleanup_r>:
 800ca34:	4901      	ldr	r1, [pc, #4]	; (800ca3c <_cleanup_r+0x8>)
 800ca36:	f000 b8c1 	b.w	800cbbc <_fwalk_reent>
 800ca3a:	bf00      	nop
 800ca3c:	0800c975 	.word	0x0800c975

0800ca40 <__sfmoreglue>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	1e4a      	subs	r2, r1, #1
 800ca44:	2568      	movs	r5, #104	; 0x68
 800ca46:	4355      	muls	r5, r2
 800ca48:	460e      	mov	r6, r1
 800ca4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca4e:	f7ff f8dd 	bl	800bc0c <_malloc_r>
 800ca52:	4604      	mov	r4, r0
 800ca54:	b140      	cbz	r0, 800ca68 <__sfmoreglue+0x28>
 800ca56:	2100      	movs	r1, #0
 800ca58:	e9c0 1600 	strd	r1, r6, [r0]
 800ca5c:	300c      	adds	r0, #12
 800ca5e:	60a0      	str	r0, [r4, #8]
 800ca60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca64:	f7fb fc82 	bl	800836c <memset>
 800ca68:	4620      	mov	r0, r4
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}

0800ca6c <__sfp_lock_acquire>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	; (800ca74 <__sfp_lock_acquire+0x8>)
 800ca6e:	f000 b8c5 	b.w	800cbfc <__retarget_lock_acquire_recursive>
 800ca72:	bf00      	nop
 800ca74:	200008d4 	.word	0x200008d4

0800ca78 <__sfp_lock_release>:
 800ca78:	4801      	ldr	r0, [pc, #4]	; (800ca80 <__sfp_lock_release+0x8>)
 800ca7a:	f000 b8c0 	b.w	800cbfe <__retarget_lock_release_recursive>
 800ca7e:	bf00      	nop
 800ca80:	200008d4 	.word	0x200008d4

0800ca84 <__sinit_lock_acquire>:
 800ca84:	4801      	ldr	r0, [pc, #4]	; (800ca8c <__sinit_lock_acquire+0x8>)
 800ca86:	f000 b8b9 	b.w	800cbfc <__retarget_lock_acquire_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	200008cf 	.word	0x200008cf

0800ca90 <__sinit_lock_release>:
 800ca90:	4801      	ldr	r0, [pc, #4]	; (800ca98 <__sinit_lock_release+0x8>)
 800ca92:	f000 b8b4 	b.w	800cbfe <__retarget_lock_release_recursive>
 800ca96:	bf00      	nop
 800ca98:	200008cf 	.word	0x200008cf

0800ca9c <__sinit>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4604      	mov	r4, r0
 800caa0:	f7ff fff0 	bl	800ca84 <__sinit_lock_acquire>
 800caa4:	69a3      	ldr	r3, [r4, #24]
 800caa6:	b11b      	cbz	r3, 800cab0 <__sinit+0x14>
 800caa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caac:	f7ff bff0 	b.w	800ca90 <__sinit_lock_release>
 800cab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cab4:	6523      	str	r3, [r4, #80]	; 0x50
 800cab6:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <__sinit+0x68>)
 800cab8:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <__sinit+0x6c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	bf04      	itt	eq
 800cac2:	2301      	moveq	r3, #1
 800cac4:	61a3      	streq	r3, [r4, #24]
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f820 	bl	800cb0c <__sfp>
 800cacc:	6060      	str	r0, [r4, #4]
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 f81c 	bl	800cb0c <__sfp>
 800cad4:	60a0      	str	r0, [r4, #8]
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 f818 	bl	800cb0c <__sfp>
 800cadc:	2200      	movs	r2, #0
 800cade:	60e0      	str	r0, [r4, #12]
 800cae0:	2104      	movs	r1, #4
 800cae2:	6860      	ldr	r0, [r4, #4]
 800cae4:	f7ff ff82 	bl	800c9ec <std>
 800cae8:	68a0      	ldr	r0, [r4, #8]
 800caea:	2201      	movs	r2, #1
 800caec:	2109      	movs	r1, #9
 800caee:	f7ff ff7d 	bl	800c9ec <std>
 800caf2:	68e0      	ldr	r0, [r4, #12]
 800caf4:	2202      	movs	r2, #2
 800caf6:	2112      	movs	r1, #18
 800caf8:	f7ff ff78 	bl	800c9ec <std>
 800cafc:	2301      	movs	r3, #1
 800cafe:	61a3      	str	r3, [r4, #24]
 800cb00:	e7d2      	b.n	800caa8 <__sinit+0xc>
 800cb02:	bf00      	nop
 800cb04:	0800d388 	.word	0x0800d388
 800cb08:	0800ca35 	.word	0x0800ca35

0800cb0c <__sfp>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	4607      	mov	r7, r0
 800cb10:	f7ff ffac 	bl	800ca6c <__sfp_lock_acquire>
 800cb14:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <__sfp+0x84>)
 800cb16:	681e      	ldr	r6, [r3, #0]
 800cb18:	69b3      	ldr	r3, [r6, #24]
 800cb1a:	b913      	cbnz	r3, 800cb22 <__sfp+0x16>
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff ffbd 	bl	800ca9c <__sinit>
 800cb22:	3648      	adds	r6, #72	; 0x48
 800cb24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	d503      	bpl.n	800cb34 <__sfp+0x28>
 800cb2c:	6833      	ldr	r3, [r6, #0]
 800cb2e:	b30b      	cbz	r3, 800cb74 <__sfp+0x68>
 800cb30:	6836      	ldr	r6, [r6, #0]
 800cb32:	e7f7      	b.n	800cb24 <__sfp+0x18>
 800cb34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb38:	b9d5      	cbnz	r5, 800cb70 <__sfp+0x64>
 800cb3a:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <__sfp+0x88>)
 800cb3c:	60e3      	str	r3, [r4, #12]
 800cb3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb42:	6665      	str	r5, [r4, #100]	; 0x64
 800cb44:	f000 f859 	bl	800cbfa <__retarget_lock_init_recursive>
 800cb48:	f7ff ff96 	bl	800ca78 <__sfp_lock_release>
 800cb4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb54:	6025      	str	r5, [r4, #0]
 800cb56:	61a5      	str	r5, [r4, #24]
 800cb58:	2208      	movs	r2, #8
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb60:	f7fb fc04 	bl	800836c <memset>
 800cb64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb70:	3468      	adds	r4, #104	; 0x68
 800cb72:	e7d9      	b.n	800cb28 <__sfp+0x1c>
 800cb74:	2104      	movs	r1, #4
 800cb76:	4638      	mov	r0, r7
 800cb78:	f7ff ff62 	bl	800ca40 <__sfmoreglue>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	6030      	str	r0, [r6, #0]
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d1d5      	bne.n	800cb30 <__sfp+0x24>
 800cb84:	f7ff ff78 	bl	800ca78 <__sfp_lock_release>
 800cb88:	230c      	movs	r3, #12
 800cb8a:	603b      	str	r3, [r7, #0]
 800cb8c:	e7ee      	b.n	800cb6c <__sfp+0x60>
 800cb8e:	bf00      	nop
 800cb90:	0800d388 	.word	0x0800d388
 800cb94:	ffff0001 	.word	0xffff0001

0800cb98 <fiprintf>:
 800cb98:	b40e      	push	{r1, r2, r3}
 800cb9a:	b503      	push	{r0, r1, lr}
 800cb9c:	4601      	mov	r1, r0
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <fiprintf+0x20>)
 800cba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba6:	6800      	ldr	r0, [r0, #0]
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	f000 f89f 	bl	800ccec <_vfiprintf_r>
 800cbae:	b002      	add	sp, #8
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b003      	add	sp, #12
 800cbb6:	4770      	bx	lr
 800cbb8:	20000058 	.word	0x20000058

0800cbbc <_fwalk_reent>:
 800cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	4688      	mov	r8, r1
 800cbc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbc8:	2700      	movs	r7, #0
 800cbca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbce:	f1b9 0901 	subs.w	r9, r9, #1
 800cbd2:	d505      	bpl.n	800cbe0 <_fwalk_reent+0x24>
 800cbd4:	6824      	ldr	r4, [r4, #0]
 800cbd6:	2c00      	cmp	r4, #0
 800cbd8:	d1f7      	bne.n	800cbca <_fwalk_reent+0xe>
 800cbda:	4638      	mov	r0, r7
 800cbdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe0:	89ab      	ldrh	r3, [r5, #12]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d907      	bls.n	800cbf6 <_fwalk_reent+0x3a>
 800cbe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbea:	3301      	adds	r3, #1
 800cbec:	d003      	beq.n	800cbf6 <_fwalk_reent+0x3a>
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	47c0      	blx	r8
 800cbf4:	4307      	orrs	r7, r0
 800cbf6:	3568      	adds	r5, #104	; 0x68
 800cbf8:	e7e9      	b.n	800cbce <_fwalk_reent+0x12>

0800cbfa <__retarget_lock_init_recursive>:
 800cbfa:	4770      	bx	lr

0800cbfc <__retarget_lock_acquire_recursive>:
 800cbfc:	4770      	bx	lr

0800cbfe <__retarget_lock_release_recursive>:
 800cbfe:	4770      	bx	lr

0800cc00 <memmove>:
 800cc00:	4288      	cmp	r0, r1
 800cc02:	b510      	push	{r4, lr}
 800cc04:	eb01 0402 	add.w	r4, r1, r2
 800cc08:	d902      	bls.n	800cc10 <memmove+0x10>
 800cc0a:	4284      	cmp	r4, r0
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	d807      	bhi.n	800cc20 <memmove+0x20>
 800cc10:	1e43      	subs	r3, r0, #1
 800cc12:	42a1      	cmp	r1, r4
 800cc14:	d008      	beq.n	800cc28 <memmove+0x28>
 800cc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc1e:	e7f8      	b.n	800cc12 <memmove+0x12>
 800cc20:	4402      	add	r2, r0
 800cc22:	4601      	mov	r1, r0
 800cc24:	428a      	cmp	r2, r1
 800cc26:	d100      	bne.n	800cc2a <memmove+0x2a>
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc32:	e7f7      	b.n	800cc24 <memmove+0x24>

0800cc34 <__malloc_lock>:
 800cc34:	4801      	ldr	r0, [pc, #4]	; (800cc3c <__malloc_lock+0x8>)
 800cc36:	f7ff bfe1 	b.w	800cbfc <__retarget_lock_acquire_recursive>
 800cc3a:	bf00      	nop
 800cc3c:	200008d0 	.word	0x200008d0

0800cc40 <__malloc_unlock>:
 800cc40:	4801      	ldr	r0, [pc, #4]	; (800cc48 <__malloc_unlock+0x8>)
 800cc42:	f7ff bfdc 	b.w	800cbfe <__retarget_lock_release_recursive>
 800cc46:	bf00      	nop
 800cc48:	200008d0 	.word	0x200008d0

0800cc4c <_realloc_r>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	4607      	mov	r7, r0
 800cc50:	4614      	mov	r4, r2
 800cc52:	460e      	mov	r6, r1
 800cc54:	b921      	cbnz	r1, 800cc60 <_realloc_r+0x14>
 800cc56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	f7fe bfd6 	b.w	800bc0c <_malloc_r>
 800cc60:	b922      	cbnz	r2, 800cc6c <_realloc_r+0x20>
 800cc62:	f7fe ff83 	bl	800bb6c <_free_r>
 800cc66:	4625      	mov	r5, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6c:	f000 fa9a 	bl	800d1a4 <_malloc_usable_size_r>
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d20f      	bcs.n	800cc94 <_realloc_r+0x48>
 800cc74:	4621      	mov	r1, r4
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7fe ffc8 	bl	800bc0c <_malloc_r>
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d0f2      	beq.n	800cc68 <_realloc_r+0x1c>
 800cc82:	4631      	mov	r1, r6
 800cc84:	4622      	mov	r2, r4
 800cc86:	f7fb fb63 	bl	8008350 <memcpy>
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	f7fe ff6d 	bl	800bb6c <_free_r>
 800cc92:	e7e9      	b.n	800cc68 <_realloc_r+0x1c>
 800cc94:	4635      	mov	r5, r6
 800cc96:	e7e7      	b.n	800cc68 <_realloc_r+0x1c>

0800cc98 <__sfputc_r>:
 800cc98:	6893      	ldr	r3, [r2, #8]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	b410      	push	{r4}
 800cca0:	6093      	str	r3, [r2, #8]
 800cca2:	da08      	bge.n	800ccb6 <__sfputc_r+0x1e>
 800cca4:	6994      	ldr	r4, [r2, #24]
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	db01      	blt.n	800ccae <__sfputc_r+0x16>
 800ccaa:	290a      	cmp	r1, #10
 800ccac:	d103      	bne.n	800ccb6 <__sfputc_r+0x1e>
 800ccae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccb2:	f000 b94b 	b.w	800cf4c <__swbuf_r>
 800ccb6:	6813      	ldr	r3, [r2, #0]
 800ccb8:	1c58      	adds	r0, r3, #1
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	7019      	strb	r1, [r3, #0]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <__sfputs_r>:
 800ccc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc8:	4606      	mov	r6, r0
 800ccca:	460f      	mov	r7, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	18d5      	adds	r5, r2, r3
 800ccd0:	42ac      	cmp	r4, r5
 800ccd2:	d101      	bne.n	800ccd8 <__sfputs_r+0x12>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e007      	b.n	800cce8 <__sfputs_r+0x22>
 800ccd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccdc:	463a      	mov	r2, r7
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff ffda 	bl	800cc98 <__sfputc_r>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d1f3      	bne.n	800ccd0 <__sfputs_r+0xa>
 800cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccec <_vfiprintf_r>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	b09d      	sub	sp, #116	; 0x74
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4698      	mov	r8, r3
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	b118      	cbz	r0, 800cd04 <_vfiprintf_r+0x18>
 800ccfc:	6983      	ldr	r3, [r0, #24]
 800ccfe:	b90b      	cbnz	r3, 800cd04 <_vfiprintf_r+0x18>
 800cd00:	f7ff fecc 	bl	800ca9c <__sinit>
 800cd04:	4b89      	ldr	r3, [pc, #548]	; (800cf2c <_vfiprintf_r+0x240>)
 800cd06:	429d      	cmp	r5, r3
 800cd08:	d11b      	bne.n	800cd42 <_vfiprintf_r+0x56>
 800cd0a:	6875      	ldr	r5, [r6, #4]
 800cd0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd0e:	07d9      	lsls	r1, r3, #31
 800cd10:	d405      	bmi.n	800cd1e <_vfiprintf_r+0x32>
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	059a      	lsls	r2, r3, #22
 800cd16:	d402      	bmi.n	800cd1e <_vfiprintf_r+0x32>
 800cd18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1a:	f7ff ff6f 	bl	800cbfc <__retarget_lock_acquire_recursive>
 800cd1e:	89ab      	ldrh	r3, [r5, #12]
 800cd20:	071b      	lsls	r3, r3, #28
 800cd22:	d501      	bpl.n	800cd28 <_vfiprintf_r+0x3c>
 800cd24:	692b      	ldr	r3, [r5, #16]
 800cd26:	b9eb      	cbnz	r3, 800cd64 <_vfiprintf_r+0x78>
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f000 f960 	bl	800cff0 <__swsetup_r>
 800cd30:	b1c0      	cbz	r0, 800cd64 <_vfiprintf_r+0x78>
 800cd32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd34:	07dc      	lsls	r4, r3, #31
 800cd36:	d50e      	bpl.n	800cd56 <_vfiprintf_r+0x6a>
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	b01d      	add	sp, #116	; 0x74
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	4b7b      	ldr	r3, [pc, #492]	; (800cf30 <_vfiprintf_r+0x244>)
 800cd44:	429d      	cmp	r5, r3
 800cd46:	d101      	bne.n	800cd4c <_vfiprintf_r+0x60>
 800cd48:	68b5      	ldr	r5, [r6, #8]
 800cd4a:	e7df      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cd4c:	4b79      	ldr	r3, [pc, #484]	; (800cf34 <_vfiprintf_r+0x248>)
 800cd4e:	429d      	cmp	r5, r3
 800cd50:	bf08      	it	eq
 800cd52:	68f5      	ldreq	r5, [r6, #12]
 800cd54:	e7da      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	0598      	lsls	r0, r3, #22
 800cd5a:	d4ed      	bmi.n	800cd38 <_vfiprintf_r+0x4c>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd5e:	f7ff ff4e 	bl	800cbfe <__retarget_lock_release_recursive>
 800cd62:	e7e9      	b.n	800cd38 <_vfiprintf_r+0x4c>
 800cd64:	2300      	movs	r3, #0
 800cd66:	9309      	str	r3, [sp, #36]	; 0x24
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	2330      	movs	r3, #48	; 0x30
 800cd74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf38 <_vfiprintf_r+0x24c>
 800cd78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd7c:	f04f 0901 	mov.w	r9, #1
 800cd80:	4623      	mov	r3, r4
 800cd82:	469a      	mov	sl, r3
 800cd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd88:	b10a      	cbz	r2, 800cd8e <_vfiprintf_r+0xa2>
 800cd8a:	2a25      	cmp	r2, #37	; 0x25
 800cd8c:	d1f9      	bne.n	800cd82 <_vfiprintf_r+0x96>
 800cd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd92:	d00b      	beq.n	800cdac <_vfiprintf_r+0xc0>
 800cd94:	465b      	mov	r3, fp
 800cd96:	4622      	mov	r2, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ff93 	bl	800ccc6 <__sfputs_r>
 800cda0:	3001      	adds	r0, #1
 800cda2:	f000 80aa 	beq.w	800cefa <_vfiprintf_r+0x20e>
 800cda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda8:	445a      	add	r2, fp
 800cdaa:	9209      	str	r2, [sp, #36]	; 0x24
 800cdac:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 80a2 	beq.w	800cefa <_vfiprintf_r+0x20e>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc0:	f10a 0a01 	add.w	sl, sl, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	9307      	str	r3, [sp, #28]
 800cdc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdcc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdce:	4654      	mov	r4, sl
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd6:	4858      	ldr	r0, [pc, #352]	; (800cf38 <_vfiprintf_r+0x24c>)
 800cdd8:	f7f3 fa3a 	bl	8000250 <memchr>
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	b9d8      	cbnz	r0, 800ce18 <_vfiprintf_r+0x12c>
 800cde0:	06d1      	lsls	r1, r2, #27
 800cde2:	bf44      	itt	mi
 800cde4:	2320      	movmi	r3, #32
 800cde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdea:	0713      	lsls	r3, r2, #28
 800cdec:	bf44      	itt	mi
 800cdee:	232b      	movmi	r3, #43	; 0x2b
 800cdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfa:	d015      	beq.n	800ce28 <_vfiprintf_r+0x13c>
 800cdfc:	9a07      	ldr	r2, [sp, #28]
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2000      	movs	r0, #0
 800ce02:	f04f 0c0a 	mov.w	ip, #10
 800ce06:	4621      	mov	r1, r4
 800ce08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0c:	3b30      	subs	r3, #48	; 0x30
 800ce0e:	2b09      	cmp	r3, #9
 800ce10:	d94e      	bls.n	800ceb0 <_vfiprintf_r+0x1c4>
 800ce12:	b1b0      	cbz	r0, 800ce42 <_vfiprintf_r+0x156>
 800ce14:	9207      	str	r2, [sp, #28]
 800ce16:	e014      	b.n	800ce42 <_vfiprintf_r+0x156>
 800ce18:	eba0 0308 	sub.w	r3, r0, r8
 800ce1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce20:	4313      	orrs	r3, r2
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	46a2      	mov	sl, r4
 800ce26:	e7d2      	b.n	800cdce <_vfiprintf_r+0xe2>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	1d19      	adds	r1, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	9103      	str	r1, [sp, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfbb      	ittet	lt
 800ce34:	425b      	neglt	r3, r3
 800ce36:	f042 0202 	orrlt.w	r2, r2, #2
 800ce3a:	9307      	strge	r3, [sp, #28]
 800ce3c:	9307      	strlt	r3, [sp, #28]
 800ce3e:	bfb8      	it	lt
 800ce40:	9204      	strlt	r2, [sp, #16]
 800ce42:	7823      	ldrb	r3, [r4, #0]
 800ce44:	2b2e      	cmp	r3, #46	; 0x2e
 800ce46:	d10c      	bne.n	800ce62 <_vfiprintf_r+0x176>
 800ce48:	7863      	ldrb	r3, [r4, #1]
 800ce4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4c:	d135      	bne.n	800ceba <_vfiprintf_r+0x1ce>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	9203      	str	r2, [sp, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	bfb8      	it	lt
 800ce5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce5e:	3402      	adds	r4, #2
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf48 <_vfiprintf_r+0x25c>
 800ce66:	7821      	ldrb	r1, [r4, #0]
 800ce68:	2203      	movs	r2, #3
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	f7f3 f9f0 	bl	8000250 <memchr>
 800ce70:	b140      	cbz	r0, 800ce84 <_vfiprintf_r+0x198>
 800ce72:	2340      	movs	r3, #64	; 0x40
 800ce74:	eba0 000a 	sub.w	r0, r0, sl
 800ce78:	fa03 f000 	lsl.w	r0, r3, r0
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	4303      	orrs	r3, r0
 800ce80:	3401      	adds	r4, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce88:	482c      	ldr	r0, [pc, #176]	; (800cf3c <_vfiprintf_r+0x250>)
 800ce8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce8e:	2206      	movs	r2, #6
 800ce90:	f7f3 f9de 	bl	8000250 <memchr>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d03f      	beq.n	800cf18 <_vfiprintf_r+0x22c>
 800ce98:	4b29      	ldr	r3, [pc, #164]	; (800cf40 <_vfiprintf_r+0x254>)
 800ce9a:	bb1b      	cbnz	r3, 800cee4 <_vfiprintf_r+0x1f8>
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	3307      	adds	r3, #7
 800cea0:	f023 0307 	bic.w	r3, r3, #7
 800cea4:	3308      	adds	r3, #8
 800cea6:	9303      	str	r3, [sp, #12]
 800cea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceaa:	443b      	add	r3, r7
 800ceac:	9309      	str	r3, [sp, #36]	; 0x24
 800ceae:	e767      	b.n	800cd80 <_vfiprintf_r+0x94>
 800ceb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	e7a5      	b.n	800ce06 <_vfiprintf_r+0x11a>
 800ceba:	2300      	movs	r3, #0
 800cebc:	3401      	adds	r4, #1
 800cebe:	9305      	str	r3, [sp, #20]
 800cec0:	4619      	mov	r1, r3
 800cec2:	f04f 0c0a 	mov.w	ip, #10
 800cec6:	4620      	mov	r0, r4
 800cec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cecc:	3a30      	subs	r2, #48	; 0x30
 800cece:	2a09      	cmp	r2, #9
 800ced0:	d903      	bls.n	800ceda <_vfiprintf_r+0x1ee>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0c5      	beq.n	800ce62 <_vfiprintf_r+0x176>
 800ced6:	9105      	str	r1, [sp, #20]
 800ced8:	e7c3      	b.n	800ce62 <_vfiprintf_r+0x176>
 800ceda:	fb0c 2101 	mla	r1, ip, r1, r2
 800cede:	4604      	mov	r4, r0
 800cee0:	2301      	movs	r3, #1
 800cee2:	e7f0      	b.n	800cec6 <_vfiprintf_r+0x1da>
 800cee4:	ab03      	add	r3, sp, #12
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	462a      	mov	r2, r5
 800ceea:	4b16      	ldr	r3, [pc, #88]	; (800cf44 <_vfiprintf_r+0x258>)
 800ceec:	a904      	add	r1, sp, #16
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7fb fad6 	bl	80084a0 <_printf_float>
 800cef4:	4607      	mov	r7, r0
 800cef6:	1c78      	adds	r0, r7, #1
 800cef8:	d1d6      	bne.n	800cea8 <_vfiprintf_r+0x1bc>
 800cefa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cefc:	07d9      	lsls	r1, r3, #31
 800cefe:	d405      	bmi.n	800cf0c <_vfiprintf_r+0x220>
 800cf00:	89ab      	ldrh	r3, [r5, #12]
 800cf02:	059a      	lsls	r2, r3, #22
 800cf04:	d402      	bmi.n	800cf0c <_vfiprintf_r+0x220>
 800cf06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf08:	f7ff fe79 	bl	800cbfe <__retarget_lock_release_recursive>
 800cf0c:	89ab      	ldrh	r3, [r5, #12]
 800cf0e:	065b      	lsls	r3, r3, #25
 800cf10:	f53f af12 	bmi.w	800cd38 <_vfiprintf_r+0x4c>
 800cf14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf16:	e711      	b.n	800cd3c <_vfiprintf_r+0x50>
 800cf18:	ab03      	add	r3, sp, #12
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	462a      	mov	r2, r5
 800cf1e:	4b09      	ldr	r3, [pc, #36]	; (800cf44 <_vfiprintf_r+0x258>)
 800cf20:	a904      	add	r1, sp, #16
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7fb fd48 	bl	80089b8 <_printf_i>
 800cf28:	e7e4      	b.n	800cef4 <_vfiprintf_r+0x208>
 800cf2a:	bf00      	nop
 800cf2c:	0800d814 	.word	0x0800d814
 800cf30:	0800d834 	.word	0x0800d834
 800cf34:	0800d7f4 	.word	0x0800d7f4
 800cf38:	0800d78c 	.word	0x0800d78c
 800cf3c:	0800d796 	.word	0x0800d796
 800cf40:	080084a1 	.word	0x080084a1
 800cf44:	0800ccc7 	.word	0x0800ccc7
 800cf48:	0800d792 	.word	0x0800d792

0800cf4c <__swbuf_r>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	460e      	mov	r6, r1
 800cf50:	4614      	mov	r4, r2
 800cf52:	4605      	mov	r5, r0
 800cf54:	b118      	cbz	r0, 800cf5e <__swbuf_r+0x12>
 800cf56:	6983      	ldr	r3, [r0, #24]
 800cf58:	b90b      	cbnz	r3, 800cf5e <__swbuf_r+0x12>
 800cf5a:	f7ff fd9f 	bl	800ca9c <__sinit>
 800cf5e:	4b21      	ldr	r3, [pc, #132]	; (800cfe4 <__swbuf_r+0x98>)
 800cf60:	429c      	cmp	r4, r3
 800cf62:	d12b      	bne.n	800cfbc <__swbuf_r+0x70>
 800cf64:	686c      	ldr	r4, [r5, #4]
 800cf66:	69a3      	ldr	r3, [r4, #24]
 800cf68:	60a3      	str	r3, [r4, #8]
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	071a      	lsls	r2, r3, #28
 800cf6e:	d52f      	bpl.n	800cfd0 <__swbuf_r+0x84>
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	b36b      	cbz	r3, 800cfd0 <__swbuf_r+0x84>
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	6820      	ldr	r0, [r4, #0]
 800cf78:	1ac0      	subs	r0, r0, r3
 800cf7a:	6963      	ldr	r3, [r4, #20]
 800cf7c:	b2f6      	uxtb	r6, r6
 800cf7e:	4283      	cmp	r3, r0
 800cf80:	4637      	mov	r7, r6
 800cf82:	dc04      	bgt.n	800cf8e <__swbuf_r+0x42>
 800cf84:	4621      	mov	r1, r4
 800cf86:	4628      	mov	r0, r5
 800cf88:	f7ff fcf4 	bl	800c974 <_fflush_r>
 800cf8c:	bb30      	cbnz	r0, 800cfdc <__swbuf_r+0x90>
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	60a3      	str	r3, [r4, #8]
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	701e      	strb	r6, [r3, #0]
 800cf9c:	6963      	ldr	r3, [r4, #20]
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	4283      	cmp	r3, r0
 800cfa2:	d004      	beq.n	800cfae <__swbuf_r+0x62>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	07db      	lsls	r3, r3, #31
 800cfa8:	d506      	bpl.n	800cfb8 <__swbuf_r+0x6c>
 800cfaa:	2e0a      	cmp	r6, #10
 800cfac:	d104      	bne.n	800cfb8 <__swbuf_r+0x6c>
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f7ff fcdf 	bl	800c974 <_fflush_r>
 800cfb6:	b988      	cbnz	r0, 800cfdc <__swbuf_r+0x90>
 800cfb8:	4638      	mov	r0, r7
 800cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfbc:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <__swbuf_r+0x9c>)
 800cfbe:	429c      	cmp	r4, r3
 800cfc0:	d101      	bne.n	800cfc6 <__swbuf_r+0x7a>
 800cfc2:	68ac      	ldr	r4, [r5, #8]
 800cfc4:	e7cf      	b.n	800cf66 <__swbuf_r+0x1a>
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <__swbuf_r+0xa0>)
 800cfc8:	429c      	cmp	r4, r3
 800cfca:	bf08      	it	eq
 800cfcc:	68ec      	ldreq	r4, [r5, #12]
 800cfce:	e7ca      	b.n	800cf66 <__swbuf_r+0x1a>
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f000 f80c 	bl	800cff0 <__swsetup_r>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d0cb      	beq.n	800cf74 <__swbuf_r+0x28>
 800cfdc:	f04f 37ff 	mov.w	r7, #4294967295
 800cfe0:	e7ea      	b.n	800cfb8 <__swbuf_r+0x6c>
 800cfe2:	bf00      	nop
 800cfe4:	0800d814 	.word	0x0800d814
 800cfe8:	0800d834 	.word	0x0800d834
 800cfec:	0800d7f4 	.word	0x0800d7f4

0800cff0 <__swsetup_r>:
 800cff0:	4b32      	ldr	r3, [pc, #200]	; (800d0bc <__swsetup_r+0xcc>)
 800cff2:	b570      	push	{r4, r5, r6, lr}
 800cff4:	681d      	ldr	r5, [r3, #0]
 800cff6:	4606      	mov	r6, r0
 800cff8:	460c      	mov	r4, r1
 800cffa:	b125      	cbz	r5, 800d006 <__swsetup_r+0x16>
 800cffc:	69ab      	ldr	r3, [r5, #24]
 800cffe:	b913      	cbnz	r3, 800d006 <__swsetup_r+0x16>
 800d000:	4628      	mov	r0, r5
 800d002:	f7ff fd4b 	bl	800ca9c <__sinit>
 800d006:	4b2e      	ldr	r3, [pc, #184]	; (800d0c0 <__swsetup_r+0xd0>)
 800d008:	429c      	cmp	r4, r3
 800d00a:	d10f      	bne.n	800d02c <__swsetup_r+0x3c>
 800d00c:	686c      	ldr	r4, [r5, #4]
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d014:	0719      	lsls	r1, r3, #28
 800d016:	d42c      	bmi.n	800d072 <__swsetup_r+0x82>
 800d018:	06dd      	lsls	r5, r3, #27
 800d01a:	d411      	bmi.n	800d040 <__swsetup_r+0x50>
 800d01c:	2309      	movs	r3, #9
 800d01e:	6033      	str	r3, [r6, #0]
 800d020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d024:	81a3      	strh	r3, [r4, #12]
 800d026:	f04f 30ff 	mov.w	r0, #4294967295
 800d02a:	e03e      	b.n	800d0aa <__swsetup_r+0xba>
 800d02c:	4b25      	ldr	r3, [pc, #148]	; (800d0c4 <__swsetup_r+0xd4>)
 800d02e:	429c      	cmp	r4, r3
 800d030:	d101      	bne.n	800d036 <__swsetup_r+0x46>
 800d032:	68ac      	ldr	r4, [r5, #8]
 800d034:	e7eb      	b.n	800d00e <__swsetup_r+0x1e>
 800d036:	4b24      	ldr	r3, [pc, #144]	; (800d0c8 <__swsetup_r+0xd8>)
 800d038:	429c      	cmp	r4, r3
 800d03a:	bf08      	it	eq
 800d03c:	68ec      	ldreq	r4, [r5, #12]
 800d03e:	e7e6      	b.n	800d00e <__swsetup_r+0x1e>
 800d040:	0758      	lsls	r0, r3, #29
 800d042:	d512      	bpl.n	800d06a <__swsetup_r+0x7a>
 800d044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d046:	b141      	cbz	r1, 800d05a <__swsetup_r+0x6a>
 800d048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d04c:	4299      	cmp	r1, r3
 800d04e:	d002      	beq.n	800d056 <__swsetup_r+0x66>
 800d050:	4630      	mov	r0, r6
 800d052:	f7fe fd8b 	bl	800bb6c <_free_r>
 800d056:	2300      	movs	r3, #0
 800d058:	6363      	str	r3, [r4, #52]	; 0x34
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d060:	81a3      	strh	r3, [r4, #12]
 800d062:	2300      	movs	r3, #0
 800d064:	6063      	str	r3, [r4, #4]
 800d066:	6923      	ldr	r3, [r4, #16]
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	f043 0308 	orr.w	r3, r3, #8
 800d070:	81a3      	strh	r3, [r4, #12]
 800d072:	6923      	ldr	r3, [r4, #16]
 800d074:	b94b      	cbnz	r3, 800d08a <__swsetup_r+0x9a>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d080:	d003      	beq.n	800d08a <__swsetup_r+0x9a>
 800d082:	4621      	mov	r1, r4
 800d084:	4630      	mov	r0, r6
 800d086:	f000 f84d 	bl	800d124 <__smakebuf_r>
 800d08a:	89a0      	ldrh	r0, [r4, #12]
 800d08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d090:	f010 0301 	ands.w	r3, r0, #1
 800d094:	d00a      	beq.n	800d0ac <__swsetup_r+0xbc>
 800d096:	2300      	movs	r3, #0
 800d098:	60a3      	str	r3, [r4, #8]
 800d09a:	6963      	ldr	r3, [r4, #20]
 800d09c:	425b      	negs	r3, r3
 800d09e:	61a3      	str	r3, [r4, #24]
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	b943      	cbnz	r3, 800d0b6 <__swsetup_r+0xc6>
 800d0a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0a8:	d1ba      	bne.n	800d020 <__swsetup_r+0x30>
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	0781      	lsls	r1, r0, #30
 800d0ae:	bf58      	it	pl
 800d0b0:	6963      	ldrpl	r3, [r4, #20]
 800d0b2:	60a3      	str	r3, [r4, #8]
 800d0b4:	e7f4      	b.n	800d0a0 <__swsetup_r+0xb0>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e7f7      	b.n	800d0aa <__swsetup_r+0xba>
 800d0ba:	bf00      	nop
 800d0bc:	20000058 	.word	0x20000058
 800d0c0:	0800d814 	.word	0x0800d814
 800d0c4:	0800d834 	.word	0x0800d834
 800d0c8:	0800d7f4 	.word	0x0800d7f4

0800d0cc <abort>:
 800d0cc:	b508      	push	{r3, lr}
 800d0ce:	2006      	movs	r0, #6
 800d0d0:	f000 f898 	bl	800d204 <raise>
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	f7f5 fa81 	bl	80025dc <_exit>

0800d0da <__swhatbuf_r>:
 800d0da:	b570      	push	{r4, r5, r6, lr}
 800d0dc:	460e      	mov	r6, r1
 800d0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e2:	2900      	cmp	r1, #0
 800d0e4:	b096      	sub	sp, #88	; 0x58
 800d0e6:	4614      	mov	r4, r2
 800d0e8:	461d      	mov	r5, r3
 800d0ea:	da07      	bge.n	800d0fc <__swhatbuf_r+0x22>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	89b3      	ldrh	r3, [r6, #12]
 800d0f2:	061a      	lsls	r2, r3, #24
 800d0f4:	d410      	bmi.n	800d118 <__swhatbuf_r+0x3e>
 800d0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0fa:	e00e      	b.n	800d11a <__swhatbuf_r+0x40>
 800d0fc:	466a      	mov	r2, sp
 800d0fe:	f000 f89d 	bl	800d23c <_fstat_r>
 800d102:	2800      	cmp	r0, #0
 800d104:	dbf2      	blt.n	800d0ec <__swhatbuf_r+0x12>
 800d106:	9a01      	ldr	r2, [sp, #4]
 800d108:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d10c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d110:	425a      	negs	r2, r3
 800d112:	415a      	adcs	r2, r3
 800d114:	602a      	str	r2, [r5, #0]
 800d116:	e7ee      	b.n	800d0f6 <__swhatbuf_r+0x1c>
 800d118:	2340      	movs	r3, #64	; 0x40
 800d11a:	2000      	movs	r0, #0
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	b016      	add	sp, #88	; 0x58
 800d120:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d124 <__smakebuf_r>:
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d128:	079d      	lsls	r5, r3, #30
 800d12a:	4606      	mov	r6, r0
 800d12c:	460c      	mov	r4, r1
 800d12e:	d507      	bpl.n	800d140 <__smakebuf_r+0x1c>
 800d130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	2301      	movs	r3, #1
 800d13a:	6163      	str	r3, [r4, #20]
 800d13c:	b002      	add	sp, #8
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	ab01      	add	r3, sp, #4
 800d142:	466a      	mov	r2, sp
 800d144:	f7ff ffc9 	bl	800d0da <__swhatbuf_r>
 800d148:	9900      	ldr	r1, [sp, #0]
 800d14a:	4605      	mov	r5, r0
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7fe fd5d 	bl	800bc0c <_malloc_r>
 800d152:	b948      	cbnz	r0, 800d168 <__smakebuf_r+0x44>
 800d154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d158:	059a      	lsls	r2, r3, #22
 800d15a:	d4ef      	bmi.n	800d13c <__smakebuf_r+0x18>
 800d15c:	f023 0303 	bic.w	r3, r3, #3
 800d160:	f043 0302 	orr.w	r3, r3, #2
 800d164:	81a3      	strh	r3, [r4, #12]
 800d166:	e7e3      	b.n	800d130 <__smakebuf_r+0xc>
 800d168:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <__smakebuf_r+0x7c>)
 800d16a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	6020      	str	r0, [r4, #0]
 800d170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	9b00      	ldr	r3, [sp, #0]
 800d178:	6163      	str	r3, [r4, #20]
 800d17a:	9b01      	ldr	r3, [sp, #4]
 800d17c:	6120      	str	r0, [r4, #16]
 800d17e:	b15b      	cbz	r3, 800d198 <__smakebuf_r+0x74>
 800d180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d184:	4630      	mov	r0, r6
 800d186:	f000 f86b 	bl	800d260 <_isatty_r>
 800d18a:	b128      	cbz	r0, 800d198 <__smakebuf_r+0x74>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f023 0303 	bic.w	r3, r3, #3
 800d192:	f043 0301 	orr.w	r3, r3, #1
 800d196:	81a3      	strh	r3, [r4, #12]
 800d198:	89a0      	ldrh	r0, [r4, #12]
 800d19a:	4305      	orrs	r5, r0
 800d19c:	81a5      	strh	r5, [r4, #12]
 800d19e:	e7cd      	b.n	800d13c <__smakebuf_r+0x18>
 800d1a0:	0800ca35 	.word	0x0800ca35

0800d1a4 <_malloc_usable_size_r>:
 800d1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a8:	1f18      	subs	r0, r3, #4
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	bfbc      	itt	lt
 800d1ae:	580b      	ldrlt	r3, [r1, r0]
 800d1b0:	18c0      	addlt	r0, r0, r3
 800d1b2:	4770      	bx	lr

0800d1b4 <_raise_r>:
 800d1b4:	291f      	cmp	r1, #31
 800d1b6:	b538      	push	{r3, r4, r5, lr}
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	d904      	bls.n	800d1c8 <_raise_r+0x14>
 800d1be:	2316      	movs	r3, #22
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1ca:	b112      	cbz	r2, 800d1d2 <_raise_r+0x1e>
 800d1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d0:	b94b      	cbnz	r3, 800d1e6 <_raise_r+0x32>
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 f830 	bl	800d238 <_getpid_r>
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4601      	mov	r1, r0
 800d1dc:	4620      	mov	r0, r4
 800d1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e2:	f000 b817 	b.w	800d214 <_kill_r>
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d00a      	beq.n	800d200 <_raise_r+0x4c>
 800d1ea:	1c59      	adds	r1, r3, #1
 800d1ec:	d103      	bne.n	800d1f6 <_raise_r+0x42>
 800d1ee:	2316      	movs	r3, #22
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	e7e7      	b.n	800d1c6 <_raise_r+0x12>
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	4798      	blx	r3
 800d200:	2000      	movs	r0, #0
 800d202:	e7e0      	b.n	800d1c6 <_raise_r+0x12>

0800d204 <raise>:
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <raise+0xc>)
 800d206:	4601      	mov	r1, r0
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	f7ff bfd3 	b.w	800d1b4 <_raise_r>
 800d20e:	bf00      	nop
 800d210:	20000058 	.word	0x20000058

0800d214 <_kill_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	; (800d234 <_kill_r+0x20>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	4611      	mov	r1, r2
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	f7f5 f9cb 	bl	80025bc <_kill>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	d102      	bne.n	800d230 <_kill_r+0x1c>
 800d22a:	682b      	ldr	r3, [r5, #0]
 800d22c:	b103      	cbz	r3, 800d230 <_kill_r+0x1c>
 800d22e:	6023      	str	r3, [r4, #0]
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	bf00      	nop
 800d234:	200008c8 	.word	0x200008c8

0800d238 <_getpid_r>:
 800d238:	f7f5 b9b8 	b.w	80025ac <_getpid>

0800d23c <_fstat_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	; (800d25c <_fstat_r+0x20>)
 800d240:	2300      	movs	r3, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	4611      	mov	r1, r2
 800d248:	602b      	str	r3, [r5, #0]
 800d24a:	f7f5 fa16 	bl	800267a <_fstat>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	d102      	bne.n	800d258 <_fstat_r+0x1c>
 800d252:	682b      	ldr	r3, [r5, #0]
 800d254:	b103      	cbz	r3, 800d258 <_fstat_r+0x1c>
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	bd38      	pop	{r3, r4, r5, pc}
 800d25a:	bf00      	nop
 800d25c:	200008c8 	.word	0x200008c8

0800d260 <_isatty_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4d06      	ldr	r5, [pc, #24]	; (800d27c <_isatty_r+0x1c>)
 800d264:	2300      	movs	r3, #0
 800d266:	4604      	mov	r4, r0
 800d268:	4608      	mov	r0, r1
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	f7f5 fa15 	bl	800269a <_isatty>
 800d270:	1c43      	adds	r3, r0, #1
 800d272:	d102      	bne.n	800d27a <_isatty_r+0x1a>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	b103      	cbz	r3, 800d27a <_isatty_r+0x1a>
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	200008c8 	.word	0x200008c8

0800d280 <_init>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr

0800d28c <_fini>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr
